This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-11T03:56:09.437Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  AddAgent.elm
  Dashboard.elm
  Login.elm
  Main.elm
  main.ts
  Settings.elm
  Signup.elm
  StateRegions.elm
  TempLanding.elm
  VerifyOrganization.elm
  vite-env.d.ts
vite.config.ts

================================================================
Files
================================================================

================
File: src/AddAgent.elm
================
module AddAgent exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode
import Parser exposing ((|.), (|=), Parser, chompIf, chompWhile, end, succeed, symbol)
import StateRegions exposing (Region(..), getRegionStates, regionToString)
import Svg exposing (path, svg)
import Svg.Attributes exposing (d, fill, viewBox)



-- Constants


allStates : List String
allStates =
    [ "AL"
    , "AK"
    , "AZ"
    , "AR"
    , "CA"
    , "CO"
    , "CT"
    , "DE"
    , "FL"
    , "GA"
    , "HI"
    , "ID"
    , "IL"
    , "IN"
    , "IA"
    , "KS"
    , "KY"
    , "LA"
    , "ME"
    , "MD"
    , "MA"
    , "MI"
    , "MN"
    , "MS"
    , "MO"
    , "MT"
    , "NE"
    , "NV"
    , "NH"
    , "NJ"
    , "NM"
    , "NY"
    , "NC"
    , "ND"
    , "OH"
    , "OK"
    , "OR"
    , "PA"
    , "RI"
    , "SC"
    , "SD"
    , "TN"
    , "TX"
    , "UT"
    , "VT"
    , "VA"
    , "WA"
    , "WV"
    , "WI"
    , "WY"
    , "DC"
    ]


allCarriers : List String
allCarriers =
    [ "Aetna"
    , "Humana"
    , "UnitedHealthcare"
    , "Cigna"
    , "Aflac"
    , "Allstate"
    , "Mutual of Omaha"
    , "Ace Chubb"
    ]


type alias Model =
    { email : String
    , firstName : String
    , lastName : String
    , rawPhone : String
    , displayPhone : String
    , isAdmin : Bool
    , carriers : List String
    , stateLicenses : List String
    , error : Maybe String
    , isSetup : Bool
    , key : Nav.Key
    , isInheriting : Bool
    }


type Msg
    = UpdateEmail String
    | UpdateFirstName String
    | UpdateLastName String
    | UpdatePhone String
    | ToggleAdmin
    | SelectCarrier String Bool
    | SelectState String Bool
    | SelectAllStates Bool
    | SaveAgent
    | AgentSaved (Result Http.Error ())
    | FinishSetup
    | SelectCommonStates Region
    | InheritFromOrg
    | GotOrgSettings (Result Http.Error Settings)


init : { isSetup : Bool, key : Nav.Key } -> ( Model, Cmd Msg )
init flags =
    ( { email = ""
      , firstName = ""
      , lastName = ""
      , rawPhone = ""
      , displayPhone = ""
      , isAdmin = False
      , carriers = []
      , stateLicenses = []
      , error = Nothing
      , isSetup = flags.isSetup
      , key = flags.key
      , isInheriting = False
      }
    , Cmd.none
    )


view : Model -> Browser.Document Msg
view model =
    { title =
        if model.isSetup then
            "Add Your First Agent"

        else
            "Add Agent"
    , body =
        [ div [ class "min-h-screen bg-gray-50 py-12" ]
            [ div [ class "max-w-3xl mx-auto" ]
                [ if model.isSetup then
                    viewSetupHeader

                  else
                    viewNormalHeader
                , div [ class "bg-white shadow rounded-lg p-6 space-y-6" ]
                    [ viewBasicInfo model
                    , viewWritingNumbers model
                    , viewStateLicenses model
                    , viewBottomBar model
                    ]
                ]
            ]
        ]
    }


viewSetupHeader : Html Msg
viewSetupHeader =
    div [ class "text-center mb-8" ]
        [ h1 [ class "text-3xl font-bold text-gray-900" ]
            [ text "Add Your First Agent" ]
        , p [ class "mt-2 text-gray-600" ]
            [ text "Set up your first agent to get started" ]
        ]


viewNormalHeader : Html Msg
viewNormalHeader =
    h1 [ class "text-2xl font-semibold text-gray-900 mb-6" ]
        [ text "Add Agent" ]


viewBasicInfo : Model -> Html Msg
viewBasicInfo model =
    div [ class "space-y-4" ]
        [ div []
            [ label [ class "block text-sm font-medium text-gray-700" ]
                [ text "First Name" ]
            , input
                [ type_ "text"
                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                , value model.firstName
                , onInput UpdateFirstName
                , placeholder "Enter first name"
                ]
                []
            ]
        , div []
            [ label [ class "block text-sm font-medium text-gray-700" ]
                [ text "Last Name" ]
            , input
                [ type_ "text"
                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                , value model.lastName
                , onInput UpdateLastName
                , placeholder "Enter last name"
                ]
                []
            ]
        , div []
            [ label [ class "block text-sm font-medium text-gray-700" ]
                [ text "Email" ]
            , input
                [ type_ "email"
                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                , value model.email
                , onInput UpdateEmail
                , placeholder "name@example.com"
                ]
                []
            ]
        , div []
            [ label [ class "block text-sm font-medium text-gray-700" ]
                [ text "Phone" ]
            , input
                [ type_ "tel"
                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                , value model.displayPhone
                , onInput UpdatePhone
                , placeholder "(555) 555-5555"
                ]
                []
            ]
        , div [ class "mt-4" ]
            [ label [ class "inline-flex items-center" ]
                [ input
                    [ type_ "checkbox"
                    , class "rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    , checked model.isAdmin
                    , onClick ToggleAdmin
                    ]
                    []
                , span [ class "ml-2 text-sm text-gray-700" ]
                    [ text "Make this agent an admin" ]
                ]
            ]
        , div [ class "mt-6" ]
            [ button
                [ class "w-full inline-flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                , onClick InheritFromOrg
                , disabled model.isInheriting
                ]
                [ if model.isInheriting then
                    div [ class "flex items-center" ]
                        [ div [ class "animate-spin -ml-1 mr-3 h-5 w-5 text-gray-700" ]
                            [ svg
                                [ Svg.Attributes.class "h-5 w-5"
                                , viewBox "0 0 24 24"
                                ]
                                [ path
                                    [ d "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                    , fill "currentColor"
                                    ]
                                    []
                                ]
                            ]
                        , text "Inheriting..."
                        ]

                  else
                    text "Inherit from Organization Settings"
                ]
            ]
        ]


viewWritingNumbers : Model -> Html Msg
viewWritingNumbers model =
    div [ class "space-y-4" ]
        [ h3 [ class "text-lg font-medium text-gray-900" ]
            [ text "Carriers" ]
        , div [ class "grid grid-cols-3 gap-4" ]
            (List.map
                (\carrier ->
                    label [ class "inline-flex items-center" ]
                        [ input
                            [ type_ "checkbox"
                            , class "rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                            , checked (List.member carrier model.carriers)
                            , onCheck (\isChecked -> SelectCarrier carrier isChecked)
                            ]
                            []
                        , span [ class "ml-2 text-sm text-gray-700" ]
                            [ text carrier ]
                        ]
                )
                allCarriers
            )
        ]


viewStateLicenses : Model -> Html Msg
viewStateLicenses model =
    div [ class "space-y-4" ]
        [ h3 [ class "text-lg font-medium text-gray-900" ]
            [ text "State Licenses" ]
        , div [ class "mb-4 space-y-2" ]
            [ div [ class "flex gap-4" ]
                [ div []
                    [ div [ class "text-sm font-medium text-gray-700 mb-2" ]
                        [ text "Batch Select" ]
                    , div [ class "flex gap-2" ]
                        [ button
                            [ class "px-3 py-1 text-sm border rounded-md hover:bg-gray-50 min-w-[70px]"
                            , onClick (SelectAllStates True)
                            ]
                            [ text "Select All" ]
                        , button
                            [ class "px-3 py-1 text-sm border rounded-md hover:bg-gray-50 min-w-[70px]"
                            , onClick (SelectAllStates False)
                            ]
                            [ text "Clear All" ]
                        ]
                    ]
                , div []
                    [ div [ class "text-sm font-medium text-gray-700 mb-2" ]
                        [ text "By Region:" ]
                    , div [ class "flex gap-2" ]
                        (List.map
                            (\region ->
                                button
                                    [ class "px-3 py-1 text-sm border rounded-md hover:bg-gray-50"
                                    , onClick (SelectCommonStates region)
                                    ]
                                    [ text (regionToString region) ]
                            )
                            StateRegions.allRegions
                        )
                    ]
                ]
            ]
        , div [ class "grid grid-cols-6 gap-4" ]
            (List.map (viewStateCheckbox model) allStates)
        ]


viewStateCheckbox : Model -> String -> Html Msg
viewStateCheckbox model state =
    label [ class "inline-flex items-center" ]
        [ input
            [ type_ "checkbox"
            , class "rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            , checked (List.member state model.stateLicenses)
            , onCheck (\isChecked -> SelectState state isChecked)
            ]
            []
        , span [ class "ml-2 text-sm text-gray-700" ]
            [ text state ]
        ]


viewBottomBar : Model -> Html Msg
viewBottomBar model =
    div [ class "fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-4 sm:px-6" ]
        [ div [ class "flex justify-between max-w-3xl mx-auto" ]
            [ if model.error /= Nothing then
                p [ class "text-red-600" ]
                    [ text (Maybe.withDefault "" model.error) ]

              else
                text ""
            , div [ class "flex space-x-4" ]
                [ button
                    [ class "px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                    , onClick SaveAgent
                    , disabled (not (canSave model))
                    ]
                    [ text "Save Agent" ]
                , if model.isSetup then
                    button
                        [ class "px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700"
                        , onClick FinishSetup
                        ]
                        [ text "Complete Setup" ]

                  else
                    text ""
                ]
            ]
        ]


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateEmail email ->
            ( { model | email = email }, Cmd.none )

        UpdateFirstName name ->
            ( { model | firstName = name }, Cmd.none )

        UpdateLastName name ->
            ( { model | lastName = name }, Cmd.none )

        UpdatePhone input ->
            let
                rawDigits =
                    String.filter Char.isDigit input
                        |> String.left 10

                formattedPhone =
                    formatPhoneNumber rawDigits
            in
            ( { model
                | rawPhone = rawDigits
                , displayPhone = formattedPhone
              }
            , Cmd.none
            )

        ToggleAdmin ->
            ( { model | isAdmin = not model.isAdmin }, Cmd.none )

        SelectCarrier carrier isSelected ->
            ( { model
                | carriers =
                    if isSelected then
                        carrier :: model.carriers

                    else
                        List.filter ((/=) carrier) model.carriers
              }
            , Cmd.none
            )

        SelectState state isSelected ->
            ( { model
                | stateLicenses =
                    if isSelected then
                        state :: model.stateLicenses

                    else
                        List.filter ((/=) state) model.stateLicenses
              }
            , Cmd.none
            )

        SelectAllStates isSelected ->
            ( { model
                | stateLicenses =
                    if isSelected then
                        allStates

                    else
                        []
              }
            , Cmd.none
            )

        SelectCommonStates region ->
            ( { model | stateLicenses = model.stateLicenses ++ getRegionStates region }
            , Cmd.none
            )

        SaveAgent ->
            ( model
            , saveAgent model
            )

        AgentSaved (Ok ()) ->
            if model.isSetup then
                ( model
                , Nav.pushUrl model.key "/dashboard"
                )

            else
                ( { model | error = Nothing }
                , Nav.pushUrl model.key "/agents"
                )

        AgentSaved (Err _) ->
            ( { model | error = Just "Failed to save agent" }
            , Cmd.none
            )

        FinishSetup ->
            ( model
            , Nav.pushUrl model.key "/dashboard"
            )

        InheritFromOrg ->
            ( { model | isInheriting = True }
            , Http.get
                { url = "/api/settings"
                , expect = Http.expectJson GotOrgSettings (Decode.field "orgSettings" settingsObjectDecoder)
                }
            )

        GotOrgSettings (Ok settings) ->
            ( { model
                | carriers = settings.carrierContracts
                , stateLicenses = settings.stateLicenses
                , isInheriting = False
              }
            , Cmd.none
            )

        GotOrgSettings (Err _) ->
            ( { model
                | error = Just "Failed to load organization settings"
                , isInheriting = False
              }
            , Cmd.none
            )



-- Helper functions


formatPhoneNumber : String -> String
formatPhoneNumber rawPhone =
    let
        digits =
            String.filter Char.isDigit rawPhone
                |> String.left 10

        len =
            String.length digits
    in
    if len == 0 then
        ""

    else if len <= 3 then
        "(" ++ digits

    else if len <= 6 then
        "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

    else
        "("
            ++ String.left 3 digits
            ++ ") "
            ++ String.slice 3 6 digits
            ++ "-"
            ++ String.dropLeft 6 digits


saveAgent : Model -> Cmd Msg
saveAgent model =
    Http.post
        { url = "/api/agents"
        , body =
            Http.jsonBody
                (Encode.object
                    [ ( "firstName", Encode.string model.firstName )
                    , ( "lastName", Encode.string model.lastName )
                    , ( "email", Encode.string model.email )
                    , ( "phone", Encode.string model.rawPhone )
                    , ( "isAdmin", Encode.bool model.isAdmin )
                    , ( "carriers", Encode.list Encode.string model.carriers )
                    , ( "stateLicenses", Encode.list Encode.string model.stateLicenses )
                    ]
                )
        , expect = Http.expectWhatever AgentSaved
        }


settingsDecoder : Decoder SettingsResponse
settingsDecoder =
    Decode.map2 SettingsResponse
        (Decode.field "orgSettings" settingsObjectDecoder)
        (Decode.field "canEditOrgSettings" Decode.bool)


type alias SettingsResponse =
    { orgSettings : Settings
    , canEditOrgSettings : Bool
    }


type alias Settings =
    { stateLicenses : List String
    , carrierContracts : List String
    , stateCarrierSettings : List StateCarrierSetting
    , allowAgentSettings : Bool
    , emailSendBirthday : Bool
    , emailSendPolicyAnniversary : Bool
    , emailSendAep : Bool
    , smartSendEnabled : Bool
    }


type alias StateCarrierSetting =
    { state : String
    , carrier : String
    , active : Bool
    , targetGI : Bool
    }


settingsObjectDecoder : Decoder Settings
settingsObjectDecoder =
    Decode.map8 Settings
        (Decode.field "stateLicenses" (Decode.list Decode.string))
        (Decode.field "carrierContracts" (Decode.list Decode.string))
        (Decode.field "stateCarrierSettings" (Decode.list stateCarrierSettingDecoder))
        (Decode.field "allowAgentSettings" Decode.bool)
        (Decode.field "emailSendBirthday" Decode.bool)
        (Decode.field "emailSendPolicyAnniversary" Decode.bool)
        (Decode.field "emailSendAep" Decode.bool)
        (Decode.field "smartSendEnabled" Decode.bool)


stateCarrierSettingDecoder : Decoder StateCarrierSetting
stateCarrierSettingDecoder =
    Decode.map4 StateCarrierSetting
        (Decode.field "state" Decode.string)
        (Decode.field "carrier" Decode.string)
        (Decode.field "active" Decode.bool)
        (Decode.field "targetGI" Decode.bool)


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none


isValidEmail : String -> Bool
isValidEmail email =
    case Parser.run emailParser email of
        Ok _ ->
            True

        Err _ ->
            False


emailParser : Parser ()
emailParser =
    let
        usernameChar c =
            Char.isAlphaNum c || List.member c [ '.', '_', '-', '+', '%' ]

        domainChar c =
            Char.isAlphaNum c || c == '-'
    in
    succeed ()
        |. chompIf usernameChar
        |. chompWhile usernameChar
        |. symbol "@"
        |. chompIf domainChar
        |. chompWhile domainChar
        |. symbol "."
        |. chompIf Char.isAlpha
        |. chompWhile Char.isAlpha
        |. end


isValidPhone : String -> Bool
isValidPhone phone =
    String.length (String.filter Char.isDigit phone) == 10


canSave : Model -> Bool
canSave model =
    let
        hasValidName =
            not (String.isEmpty (String.trim model.firstName))
                && not (String.isEmpty (String.trim model.lastName))

        hasValidEmail =
            isValidEmail model.email

        hasValidPhone =
            isValidPhone model.displayPhone
    in
    hasValidName && hasValidEmail && hasValidPhone

================
File: src/Dashboard.elm
================
module Dashboard exposing (Model, Msg, init, main, subscriptions, update, view)

import Browser
import Browser.Events
import File exposing (File)
import File.Download
import File.Select as Select
import Html exposing (Html, button, div, h1, h2, h3, input, label, nav, option, select, span, table, tbody, td, text, th, thead, tr)
import Html.Attributes exposing (attribute, checked, class, placeholder, required, title, type_, value)
import Html.Events exposing (onClick, onInput, onSubmit, preventDefaultOn, stopPropagationOn)
import Http
import Json.Decode as Decode exposing (Decoder, bool, int, nullable, string)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import List.Extra
import Svg exposing (svg)
import Svg.Attributes exposing (d, fill, stroke, viewBox)
import Task
import Time
import Url.Builder as Url



-- MAIN


main : Program () Model Msg
main =
    Browser.element
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        }



-- MODEL


type alias Contact =
    { id : Int
    , firstName : String
    , lastName : String
    , email : String
    , currentCarrier : String
    , planType : String
    , effectiveDate : String
    , birthDate : String
    , tobaccoUser : Bool
    , gender : String
    , state : String
    , zipCode : String
    , agentId : Maybe Int
    , lastEmailed : Maybe String
    }


type Modal
    = NoModal
    | AddModal
    | EditModal Contact
    | CsvUploadModal UploadState


type alias Model =
    { contacts : List Contact
    , selectedContacts : List Int
    , showModal : Modal
    , searchQuery : String
    , addForm : ContactForm
    , editForm : ContactForm
    , sortColumn : Maybe SortColumn
    , sortDirection : SortDirection
    , activeFilters : Filters
    , openFilter : Maybe FilterType
    , currentTime : Time.Posix
    , isLoadingContacts : Bool
    , isUploadingCsv : Bool
    , isDeletingContacts : Bool
    , isSubmittingForm : Bool
    }


type alias ContactForm =
    { id : Maybe Int
    , firstName : String
    , lastName : String
    , email : String
    , currentCarrier : String
    , planType : String
    , effectiveDate : String
    , birthDate : String
    , tobaccoUser : Bool
    , gender : String
    , state : String
    , zipCode : String
    , agentId : Maybe Int
    }


type SortColumn
    = FirstNameCol
    | LastNameCol
    | EmailCol
    | CarrierCol
    | PlanTypeCol
    | EffectiveDateCol
    | BirthDateCol
    | TobaccoCol
    | GenderCol
    | StateCol
    | ZipCodeCol


type SortDirection
    = Ascending
    | Descending


type alias Filters =
    { carriers : List String
    , states : List String
    , ageRange : Maybe ( Int, Int )
    }


type alias ZipInfo =
    { state : String
    , counties : List String
    , cities : List String
    }


type alias UploadState =
    { dragOver : Bool
    , file : Maybe File
    , error : Maybe String
    , errorCsv : Maybe String
    , stats : Maybe UploadStats
    , overwriteDuplicates : Bool
    }


type alias UploadStats =
    { totalRows : Int
    , errorRows : Int
    , validRows : Int
    }


type alias DeleteResponse =
    { success : Bool
    , deletedIds : List Int
    , message : String
    }


init : () -> ( Model, Cmd Msg )
init _ =
    ( { contacts = []
      , selectedContacts = []
      , showModal = NoModal
      , searchQuery = ""
      , addForm = emptyForm
      , editForm = emptyForm
      , sortColumn = Nothing
      , sortDirection = Ascending
      , activeFilters = emptyFilters
      , openFilter = Nothing
      , currentTime = Time.millisToPosix 0
      , isLoadingContacts = True
      , isUploadingCsv = False
      , isDeletingContacts = False
      , isSubmittingForm = False
      }
    , Cmd.batch
        [ fetchContacts
        , Task.perform GotCurrentTime Time.now
        ]
    )


emptyForm : ContactForm
emptyForm =
    { id = Nothing
    , firstName = ""
    , lastName = ""
    , email = ""
    , currentCarrier = ""
    , planType = ""
    , effectiveDate = ""
    , birthDate = ""
    , tobaccoUser = False
    , gender = "M"
    , state = ""
    , zipCode = ""
    , agentId = Nothing
    }


emptyFilters : Filters
emptyFilters =
    { carriers = []
    , states = []
    , ageRange = Nothing
    }


emptyUploadState : UploadState
emptyUploadState =
    { dragOver = False
    , file = Nothing
    , error = Nothing
    , errorCsv = Nothing
    , stats = Nothing
    , overwriteDuplicates = True
    }



-- UPDATE


type Msg
    = NoOp
    | ShowAddModal
    | ShowEditModal Contact
    | CloseModal
    | UpdateSearchQuery String
    | UpdateAddForm ContactFormField String
    | UpdateEditForm ContactFormField String
    | SubmitAddForm
    | SubmitEditForm
    | GotContacts (Result Http.Error (List Contact))
    | ContactAdded (Result Http.Error Contact)
    | ContactUpdated (Result Http.Error Contact)
    | HandleKeyDown String
    | SetSort SortColumn
    | ToggleFilter FilterType String
    | SetAgeFilter Int Int -- (min, max)
    | ClearFilters
    | LookupZipCode String
    | GotZipLookup (Result Http.Error ZipInfo)
    | Batch (List Msg)
    | ToggleFilterDropdown FilterType
    | SelectAllFilter FilterType Bool
    | CloseFilterDropdown
    | GotCurrentTime Time.Posix
    | ToggleSelectContact Int
    | SelectAllContacts
    | DeselectAllContacts
    | EmailSelectedCarriers
    | EmailSelectedContacts
    | ShowCsvUploadModal
    | DragEnter
    | DragLeave
    | FileDrop File
    | FileSelected File
    | ClickedSelectFile
    | UploadCsv
    | CsvUploaded (Result Http.Error UploadResponse)
    | DownloadErrorCsv String
    | DeleteSelectedContacts
    | ContactsDeleted (Result Http.Error DeleteResponse)
    | ToggleOverwriteDuplicates Bool


type ContactFormField
    = FirstName
    | LastName
    | Email
    | CurrentCarrier
    | PlanType
    | EffectiveDate
    | BirthDate
    | TobaccoUser
    | Gender
    | State
    | ZipCode


type FilterType
    = CarrierFilter
    | StateFilter
    | AgeFilter


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )

        ShowAddModal ->
            ( { model | showModal = AddModal }, Cmd.none )

        ShowEditModal contact ->
            ( { model
                | showModal = EditModal contact
                , editForm =
                    { id = Just contact.id
                    , firstName = contact.firstName
                    , lastName = contact.lastName
                    , email = contact.email
                    , currentCarrier = contact.currentCarrier
                    , planType = contact.planType
                    , effectiveDate = contact.effectiveDate
                    , birthDate = contact.birthDate
                    , tobaccoUser = contact.tobaccoUser
                    , gender = contact.gender
                    , state = contact.state
                    , zipCode = contact.zipCode
                    , agentId = contact.agentId
                    }
              }
            , Cmd.none
            )

        CloseModal ->
            ( { model | showModal = NoModal }, Cmd.none )

        UpdateSearchQuery query ->
            ( { model | searchQuery = query }, Cmd.none )

        UpdateAddForm field value ->
            let
                form =
                    model.addForm

                updatedForm =
                    case field of
                        FirstName ->
                            { form | firstName = value }

                        LastName ->
                            { form | lastName = value }

                        Email ->
                            { form | email = value }

                        CurrentCarrier ->
                            { form | currentCarrier = value }

                        PlanType ->
                            { form | planType = value }

                        EffectiveDate ->
                            { form | effectiveDate = value }

                        BirthDate ->
                            { form | birthDate = value }

                        TobaccoUser ->
                            { form | tobaccoUser = value == "true" }

                        Gender ->
                            { form | gender = value }

                        State ->
                            { form | state = value }

                        ZipCode ->
                            { form | zipCode = value }
            in
            ( { model | addForm = updatedForm }, Cmd.none )

        UpdateEditForm field value ->
            let
                form =
                    model.editForm

                updatedForm =
                    case field of
                        FirstName ->
                            { form | firstName = value }

                        LastName ->
                            { form | lastName = value }

                        Email ->
                            { form | email = value }

                        CurrentCarrier ->
                            { form | currentCarrier = value }

                        PlanType ->
                            { form | planType = value }

                        EffectiveDate ->
                            { form | effectiveDate = value }

                        BirthDate ->
                            { form | birthDate = value }

                        TobaccoUser ->
                            { form | tobaccoUser = value == "true" }

                        Gender ->
                            { form | gender = value }

                        State ->
                            { form | state = value }

                        ZipCode ->
                            { form | zipCode = value }
            in
            ( { model | editForm = updatedForm }, Cmd.none )

        SubmitAddForm ->
            ( { model | isSubmittingForm = True }
            , submitAddForm model.addForm
            )

        SubmitEditForm ->
            ( { model | isSubmittingForm = True }
            , submitEditForm model.editForm
            )

        GotContacts (Ok contacts) ->
            ( { model | contacts = contacts, isLoadingContacts = False }, Cmd.none )

        GotContacts (Err error) ->
            let
                _ =
                    Debug.log "Error fetching contacts" error
            in
            ( model, Cmd.none )

        ContactAdded (Ok contact) ->
            ( { model
                | contacts = contact :: model.contacts
                , showModal = NoModal
                , addForm = emptyForm
                , isSubmittingForm = False
              }
            , Cmd.none
            )

        ContactAdded (Err _) ->
            ( { model | isSubmittingForm = False }
            , Cmd.none
            )

        ContactUpdated (Ok contact) ->
            ( { model
                | contacts = updateContact contact model.contacts
                , showModal = NoModal
                , editForm = emptyForm
                , isSubmittingForm = False
              }
            , Cmd.none
            )

        ContactUpdated (Err _) ->
            ( { model | isSubmittingForm = False }
            , Cmd.none
            )

        HandleKeyDown key ->
            if key == "Escape" then
                ( { model | showModal = NoModal }, Cmd.none )

            else
                ( model, Cmd.none )

        SetSort column ->
            let
                ( newColumn, newDirection ) =
                    case ( model.sortColumn, model.sortDirection ) of
                        ( Just currentColumn, direction ) ->
                            if currentColumn == column then
                                -- Toggle direction if same column
                                ( Just column
                                , if direction == Ascending then
                                    Descending

                                  else
                                    Ascending
                                )

                            else
                                -- New column, start with ascending
                                ( Just column, Ascending )

                        ( Nothing, _ ) ->
                            -- First time sorting, start with ascending
                            ( Just column, Ascending )
            in
            ( { model
                | sortColumn = newColumn
                , sortDirection = newDirection
              }
            , Cmd.none
            )

        ToggleFilter filterType value ->
            ( { model | activeFilters = toggleFilter model.activeFilters filterType value }, Cmd.none )

        SetAgeFilter min max ->
            ( { model | activeFilters = setAgeFilter min max model.activeFilters }, Cmd.none )

        ClearFilters ->
            ( { model | activeFilters = emptyFilters }, Cmd.none )

        LookupZipCode zipCode ->
            ( model
            , Http.get
                { url = "/api/zip-lookup/" ++ zipCode
                , expect = Http.expectJson GotZipLookup zipInfoDecoder
                }
            )

        GotZipLookup (Ok zipInfo) ->
            let
                updateForm form =
                    { form | state = zipInfo.state }
            in
            case model.showModal of
                AddModal ->
                    ( { model | addForm = updateForm model.addForm }, Cmd.none )

                EditModal _ ->
                    ( { model | editForm = updateForm model.editForm }, Cmd.none )

                NoModal ->
                    ( model, Cmd.none )

                CsvUploadModal _ ->
                    ( model, Cmd.none )

        GotZipLookup (Err _) ->
            ( model, Cmd.none )

        Batch messages ->
            List.foldl
                (\msg_ ( model_, cmds ) ->
                    let
                        ( newModel, newCmd ) =
                            update msg_ model_
                    in
                    ( newModel, newCmd :: cmds )
                )
                ( model, [] )
                messages
                |> (\( m, cs ) -> ( m, Cmd.batch cs ))

        ToggleFilterDropdown filterType ->
            ( { model
                | openFilter =
                    if model.openFilter == Just filterType then
                        Nothing

                    else
                        Just filterType
              }
            , Cmd.none
            )

        SelectAllFilter filterType select ->
            let
                options =
                    case filterType of
                        CarrierFilter ->
                            getUniqueValues .currentCarrier model.contacts

                        StateFilter ->
                            getUniqueValues .state model.contacts

                        _ ->
                            []

                updatedFilters =
                    case filterType of
                        CarrierFilter ->
                            { activeFilters
                                | carriers =
                                    if select then
                                        options

                                    else
                                        []
                            }

                        StateFilter ->
                            { activeFilters
                                | states =
                                    if select then
                                        options

                                    else
                                        []
                            }

                        _ ->
                            model.activeFilters

                activeFilters =
                    model.activeFilters
            in
            ( { model | activeFilters = updatedFilters }, Cmd.none )

        CloseFilterDropdown ->
            ( { model | openFilter = Nothing }, Cmd.none )

        GotCurrentTime time ->
            ( { model | currentTime = time }, Cmd.none )

        ToggleSelectContact id ->
            ( { model
                | selectedContacts =
                    if List.member id model.selectedContacts then
                        List.filter (\x -> x /= id) model.selectedContacts

                    else
                        id :: model.selectedContacts
              }
            , Cmd.none
            )

        SelectAllContacts ->
            let
                visibleContacts =
                    model.contacts
                        |> filterContacts model.activeFilters model.searchQuery model.currentTime
                        |> List.map .id
            in
            ( { model | selectedContacts = visibleContacts }
            , Cmd.none
            )

        DeselectAllContacts ->
            ( { model | selectedContacts = [] }
            , Cmd.none
            )

        EmailSelectedCarriers ->
            -- For now, just a placeholder that does nothing
            ( model, Cmd.none )

        EmailSelectedContacts ->
            -- For now, just a placeholder that does nothing
            ( model, Cmd.none )

        ShowCsvUploadModal ->
            ( { model | showModal = CsvUploadModal emptyUploadState }, Cmd.none )

        DragEnter ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | dragOver = True } }, Cmd.none )

                _ ->
                    ( model, Cmd.none )

        DragLeave ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | dragOver = False } }, Cmd.none )

                _ ->
                    ( model, Cmd.none )

        FileDrop file ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | file = Just file, dragOver = False } }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        FileSelected file ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | file = Just file } }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        ClickedSelectFile ->
            ( model
            , Select.file [ "text/csv" ] FileSelected
            )

        UploadCsv ->
            case model.showModal of
                CsvUploadModal state ->
                    case state.file of
                        Just file ->
                            ( { model
                                | showModal = CsvUploadModal { state | error = Nothing, errorCsv = Nothing, stats = Nothing }
                                , isUploadingCsv = True
                              }
                            , uploadCsv file state.overwriteDuplicates
                            )

                        Nothing ->
                            ( model, Cmd.none )

                _ ->
                    ( model, Cmd.none )

        CsvUploaded (Ok response) ->
            let
                currentModal =
                    case model.showModal of
                        CsvUploadModal state ->
                            if response.success && response.errorRows == 0 then
                                NoModal

                            else
                                CsvUploadModal
                                    { state
                                        | error = Just response.message
                                        , errorCsv = response.errorCsv
                                        , stats =
                                            Just
                                                { totalRows = response.totalRows
                                                , errorRows = response.errorRows
                                                , validRows = response.validRows
                                                }
                                    }

                        _ ->
                            model.showModal
            in
            ( { model
                | showModal = currentModal
                , isUploadingCsv = False
              }
            , if response.success then
                fetchContacts

              else
                Cmd.none
            )

        CsvUploaded (Err httpError) ->
            case model.showModal of
                CsvUploadModal state ->
                    let
                        errorMessage =
                            case httpError |> Debug.log "HTTP Error" of
                                Http.BadStatus 400 ->
                                    "Invalid CSV format. Please check the required columns and data."

                                _ ->
                                    "Failed to upload CSV. Please try again."
                    in
                    ( { model | showModal = CsvUploadModal { state | error = Just errorMessage } }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        DownloadErrorCsv csvContent ->
            ( model
            , File.Download.string "upload_errors.csv" "text/csv" csvContent
            )

        DeleteSelectedContacts ->
            ( { model | isDeletingContacts = True }
            , if List.isEmpty model.selectedContacts then
                Cmd.none

              else
                deleteContacts model.selectedContacts
            )

        ContactsDeleted (Ok response) ->
            if response.success then
                ( { model
                    | contacts = List.filter (\c -> not (List.member c.id response.deletedIds)) model.contacts
                    , selectedContacts = []
                    , isDeletingContacts = False
                  }
                , fetchContacts
                )

            else
                ( { model | isDeletingContacts = False }, Cmd.none )

        ContactsDeleted (Err _) ->
            ( model, Cmd.none )

        ToggleOverwriteDuplicates value ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | overwriteDuplicates = value } }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )



-- TODO: Handle error
-- Add other update cases here...
-- VIEW


view : Model -> Html Msg
view model =
    div [ class "min-h-screen bg-gray-50" ]
        [ viewNavHeader
        , div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" ]
            [ viewActionBar model
            , viewContactsTable model
            , viewModals model
            ]
        ]


viewNavHeader : Html Msg
viewNavHeader =
    nav [ class "bg-white border-b border-gray-200" ]
        [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" ]
            [ div [ class "flex justify-between h-16" ]
                [ div [ class "flex" ]
                    [ div [ class "flex-shrink-0 flex items-center" ]
                        [ h1 [ class "text-xl font-semibold text-purple-600" ]
                            [ text "Medicare Max" ]
                        ]
                    ]
                , div [ class "flex items-center" ]
                    [ button
                        [ class "px-3 py-1.5 bg-purple-500 text-white text-sm font-medium rounded-md hover:bg-purple-600 transition-colors duration-200" ]
                        [ text "Profile" ]
                    ]
                ]
            ]
        ]



-- Add other view helper functions here...
-- HTTP


fetchContacts : Cmd Msg
fetchContacts =
    Http.get
        { url = "/api/contacts"
        , expect = Http.expectJson GotContacts contactsDecoder
        }



-- Add other HTTP functions and JSON decoders/encoders here...
-- VIEW HELPERS


viewActionBar : Model -> Html Msg
viewActionBar model =
    div [ class "space-y-4 mb-6" ]
        [ div [ class "flex justify-between items-center" ]
            [ div [ class "flex space-x-3" ]
                [ button
                    [ class "px-3 py-1.5 bg-purple-500 text-white text-sm font-medium rounded-md hover:bg-purple-600 transition-colors duration-200"
                    , onClick ShowAddModal
                    ]
                    [ viewIcon "M12 4v16m8-8H4"
                    , text "Add Client"
                    ]
                , button
                    [ class "px-3 py-1.5 bg-white text-gray-700 text-sm font-medium rounded-md border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200"
                    , onClick ShowCsvUploadModal
                    ]
                    [ viewIcon "M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"
                    , text "Upload CSV"
                    ]
                , button
                    [ class "px-3 py-1.5 bg-white text-gray-700 text-sm font-medium rounded-md border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200" ]
                    [ viewIcon "M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
                    , text "Export"
                    ]
                ]
            , div [ class "flex space-x-3" ]
                [ input
                    [ class "px-3 py-1.5 w-64 bg-white border border-gray-200 rounded-md text-sm placeholder-gray-400 focus:border-purple-400 focus:ring-2 focus:ring-purple-400/20 transition-colors duration-200"
                    , placeholder "Search contacts..."
                    , onInput UpdateSearchQuery
                    , value model.searchQuery
                    ]
                    []
                ]
            ]
        , viewFilters model
        ]


viewFilters : Model -> Html Msg
viewFilters model =
    div [ class "space-y-4" ]
        [ h3 [ class "text-lg font-medium text-gray-700" ] [ text "Filters" ]
        , div [ class "flex space-x-4" ]
            [ viewFilterDropdown model
                "Carriers"
                CarrierFilter
                (getUniqueValues .currentCarrier model.contacts)
                model.activeFilters.carriers
            , viewFilterDropdown model
                "States"
                StateFilter
                (getUniqueValues .state model.contacts)
                model.activeFilters.states
            , viewAgeFilter model.activeFilters.ageRange
            ]
        ]


viewFilterDropdown : Model -> String -> FilterType -> List String -> List String -> Html Msg
viewFilterDropdown model label_ filterType options selectedValues =
    let
        isOpen =
            model.openFilter == Just filterType

        allSelected =
            List.length selectedValues == List.length options

        chevronIcon =
            if isOpen then
                "M19 9l-7 7-7-7"

            else
                "M9 5l7 7-7 7"

        selectionDisplay =
            if List.isEmpty selectedValues then
                [ span [ class "text-sm text-gray-600" ] [ text "Select..." ] ]

            else if List.length selectedValues == 1 then
                [ span [ class "text-sm text-gray-600" ] [ text (List.head selectedValues |> Maybe.withDefault "") ] ]

            else
                [ span [ class "text-sm text-gray-600" ]
                    [ text (String.fromInt (List.length selectedValues) ++ " selected") ]
                , if filterType == CarrierFilter && not (List.isEmpty selectedValues) then
                    button
                        [ class "ml-2 px-2 py-1 text-xs text-purple-600 hover:text-purple-800 hover:underline"
                        , onClick EmailSelectedCarriers
                        ]
                        [ text "Email" ]

                  else
                    text ""
                ]
    in
    div [ class "relative w-48" ]
        [ label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text label_ ]
        , div
            [ class "flex items-center justify-between w-full px-4 py-2 bg-white border border-gray-200 rounded-md cursor-pointer hover:bg-gray-50"
            , onClick (ToggleFilterDropdown filterType)
            ]
            [ div [ class "flex items-center space-x-2" ] selectionDisplay
            , svg
                [ Svg.Attributes.class "w-5 h-5 text-gray-400"
                , viewBox "0 0 24 24"
                , fill "none"
                , stroke "currentColor"
                ]
                [ Svg.path
                    [ d chevronIcon
                    , Svg.Attributes.strokeLinecap "round"
                    , Svg.Attributes.strokeLinejoin "round"
                    , Svg.Attributes.strokeWidth "2"
                    ]
                    []
                ]
            ]
        , if isOpen then
            div
                [ class "absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg"
                , stopPropagationOn "mousedown" (Decode.succeed ( NoOp, True ))
                ]
                [ div [ class "p-2 border-b border-gray-200" ]
                    [ label [ class "flex items-center space-x-2" ]
                        [ input
                            [ type_ "checkbox"
                            , checked allSelected
                            , onClick (SelectAllFilter filterType (not allSelected))
                            , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                            ]
                            []
                        , span [ class "text-sm text-gray-600" ]
                            [ text "Select All" ]
                        ]
                    ]
                , div [ class "max-h-48 overflow-y-auto p-2" ]
                    (List.map
                        (\option ->
                            label
                                [ class "flex items-center space-x-2 py-1" ]
                                [ input
                                    [ type_ "checkbox"
                                    , checked (List.member option selectedValues)
                                    , onClick (ToggleFilter filterType option)
                                    , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                                    ]
                                    []
                                , span [ class "text-sm text-gray-600" ]
                                    [ text option ]
                                ]
                        )
                        options
                    )
                ]

          else
            text ""
        ]


viewAgeFilter : Maybe ( Int, Int ) -> Html Msg
viewAgeFilter maybeRange =
    div [ class "w-48" ]
        [ label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text "Age Range (years)" ]
        , div [ class "flex items-center space-x-2" ]
            [ div [ class "flex items-center space-x-1" ]
                [ span [ class "text-sm text-gray-600" ] [ text "Min:" ]
                , input
                    [ type_ "number"
                    , class "w-16 px-4 py-2 border border-gray-200 rounded-md text-sm"
                    , value (Maybe.map (Tuple.first >> String.fromInt) maybeRange |> Maybe.withDefault "")
                    , onInput
                        (\val ->
                            if String.isEmpty val then
                                SetAgeFilter 0 0

                            else
                                SetAgeFilter (String.toInt val |> Maybe.withDefault 0) (Maybe.map Tuple.second maybeRange |> Maybe.withDefault 0)
                        )
                    ]
                    []
                ]
            , div [ class "flex items-center space-x-1" ]
                [ span [ class "text-sm text-gray-600" ] [ text "Max:" ]
                , input
                    [ type_ "number"
                    , class "w-16 px-4 py-2 border border-gray-200 rounded-md text-sm"
                    , value (Maybe.map (Tuple.second >> String.fromInt) maybeRange |> Maybe.withDefault "")
                    , onInput
                        (\val ->
                            if String.isEmpty val then
                                SetAgeFilter (Maybe.map Tuple.first maybeRange |> Maybe.withDefault 0) 0

                            else
                                SetAgeFilter (Maybe.map Tuple.first maybeRange |> Maybe.withDefault 0) (String.toInt val |> Maybe.withDefault 0)
                        )
                    ]
                    []
                ]
            , case maybeRange of
                Just _ ->
                    button
                        [ class "px-2 py-1 text-xs text-gray-600 hover:text-gray-800 border border-gray-200 rounded-md hover:border-gray-300 bg-white hover:bg-gray-50 transition-colors duration-200"
                        , onClick (SetAgeFilter 0 0)
                        ]
                        [ text "Reset" ]

                Nothing ->
                    text ""
            ]
        ]


viewContactsTable : Model -> Html Msg
viewContactsTable model =
    if model.isLoadingContacts then
        div [ class "flex justify-center items-center h-64" ]
            [ viewSpinner
            , span [ class "ml-2 text-gray-600" ] [ text "Loading contacts..." ]
            ]

    else
        let
            filteredAndSortedContacts =
                model.contacts
                    |> filterContacts model.activeFilters model.searchQuery model.currentTime
                    |> sortContacts model.sortColumn model.sortDirection

            selectionCount =
                List.length model.selectedContacts

            selectionText =
                case selectionCount of
                    0 ->
                        "No contacts selected"

                    1 ->
                        "1 contact selected"

                    n ->
                        String.fromInt n ++ " contacts selected"
        in
        div []
            [ div [ class "mb-4 flex items-center space-x-2" ]
                [ span [ class "text-sm text-gray-600" ]
                    [ text selectionText ]
                , if selectionCount > 0 then
                    div [ class "flex space-x-2" ]
                        [ button
                            [ class "px-2 py-1 text-sm text-purple-600 hover:text-purple-800 hover:bg-purple-50 rounded-md transition-colors duration-200 flex items-center space-x-1"
                            , onClick EmailSelectedContacts
                            ]
                            [ viewIcon "M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                            , span [] [ text "Email" ]
                            ]
                        , if model.isDeletingContacts then
                            div [ class "px-2 py-1 flex items-center space-x-1" ]
                                [ viewSpinner ]

                          else
                            button
                                [ class "px-2 py-1 text-sm text-red-600 hover:text-red-800 hover:bg-red-50 rounded-md transition-colors duration-200 flex items-center space-x-1"
                                , onClick DeleteSelectedContacts
                                ]
                                [ viewIcon "M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                                , span [] [ text "Delete" ]
                                ]
                        ]

                  else
                    text ""
                ]
            , div [ class "bg-white shadow-sm rounded-lg border border-gray-200" ]
                [ div [ class "overflow-x-auto" ]
                    [ table [ class "min-w-full table-fixed" ]
                        [ viewTableHeader model filteredAndSortedContacts
                        , tbody [ class "divide-y divide-gray-200" ]
                            (List.map (viewContactRow model) filteredAndSortedContacts)
                        ]
                    ]
                ]
            ]


viewTableHeader : Model -> List Contact -> Html Msg
viewTableHeader model visibleContacts =
    let
        allSelected =
            not (List.isEmpty model.selectedContacts)
                && List.length model.selectedContacts
                == List.length visibleContacts
    in
    thead []
        [ tr [ class "bg-gray-50 border-b border-gray-200" ]
            (th
                [ class "w-12 px-4 py-3 border-r border-gray-200" ]
                [ div [ class "flex items-center justify-between" ]
                    [ input
                        [ type_ "checkbox"
                        , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                        , checked allSelected
                        , onClick
                            (if allSelected then
                                DeselectAllContacts

                             else
                                SelectAllContacts
                            )
                        ]
                        []
                    ]
                ]
                :: List.map
                    (\( col, label ) ->
                        viewSortableHeaderCell model col label
                    )
                    [ ( FirstNameCol, "First Name" )
                    , ( LastNameCol, "Last Name" )
                    , ( EmailCol, "Email" )
                    , ( CarrierCol, "Current Carrier" )
                    , ( PlanTypeCol, "Plan Type" )
                    , ( EffectiveDateCol, "Effective Date" )
                    , ( BirthDateCol, "Birth Date" )
                    , ( TobaccoCol, "Tobacco" )
                    , ( GenderCol, "Gender" )
                    , ( StateCol, "State" )
                    , ( ZipCodeCol, "ZIP Code" )
                    ]
            )
        ]


viewSortableHeaderCell : Model -> SortColumn -> String -> Html Msg
viewSortableHeaderCell model column label =
    th
        [ class "px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200 cursor-pointer hover:bg-gray-100"
        , onClick (SetSort column)
        ]
        [ div [ class "flex items-center space-x-1" ]
            [ text label
            , viewSortIcon model column
            ]
        ]


viewSortIcon : Model -> SortColumn -> Html Msg
viewSortIcon model column =
    if model.sortColumn == Just column then
        case model.sortDirection of
            Ascending ->
                viewIcon "M5 15l7-7 7 7"

            Descending ->
                viewIcon "M19 9l-7 7-7-7"

    else
        text ""


viewContactRow : Model -> Contact -> Html Msg
viewContactRow model contact =
    let
        mainClass =
            [ class "px-4 py-3 text-sm text-gray-900 border-r border-gray-200" ]
    in
    tr [ class "hover:bg-gray-50" ]
        (td
            [ class "w-12 px-4 py-3 border-r border-gray-200" ]
            [ input
                [ type_ "checkbox"
                , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                , checked (List.member contact.id model.selectedContacts)
                , onClick (ToggleSelectContact contact.id)
                ]
                []
            ]
            :: [ td mainClass [ text contact.firstName ]
               , td mainClass [ text contact.lastName ]
               , td mainClass [ text contact.email ]
               , td mainClass [ text contact.currentCarrier ]
               , td mainClass [ text contact.planType ]
               , td mainClass [ text contact.effectiveDate ]
               , td mainClass [ text contact.birthDate ]
               , td mainClass
                    [ text
                        (if contact.tobaccoUser then
                            "Yes"

                         else
                            "No"
                        )
                    ]
               , td mainClass [ text contact.gender ]
               , td mainClass [ text contact.state ]
               , td mainClass [ text contact.zipCode ]
               , td [ class "px-4 py-3 text-sm text-gray-900" ] [ viewContactActions contact model.isDeletingContacts ]
               ]
        )


viewContactActions : Contact -> Bool -> Html Msg
viewContactActions contact isDeleting =
    div [ class "flex space-x-2 justify-center" ]
        [ button
            [ class "text-gray-400 hover:text-purple-500 transition-colors duration-200"
            , onClick (ShowEditModal contact)
            , title "Edit"
            ]
            [ viewIcon "M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
            ]
        ]


viewIcon : String -> Html Msg
viewIcon path =
    svg
        [ Svg.Attributes.class "w-4 h-4"
        , Svg.Attributes.fill "none"
        , Svg.Attributes.stroke "currentColor"
        , Svg.Attributes.viewBox "0 0 24 24"
        ]
        [ Svg.path [ Svg.Attributes.d path ] [] ]



-- HELPERS


updateContact : Contact -> List Contact -> List Contact
updateContact updated contacts =
    List.map
        (\contact ->
            if contact.id == updated.id then
                updated

            else
                contact
        )
        contacts



-- HTTP


submitAddForm : ContactForm -> Cmd Msg
submitAddForm form =
    Http.post
        { url = "/api/contacts"
        , body = Http.jsonBody (encodeContactForm form)
        , expect = Http.expectJson ContactAdded contactDecoder
        }


submitEditForm : ContactForm -> Cmd Msg
submitEditForm form =
    case form.id of
        Just id ->
            Http.request
                { method = "PUT"
                , headers = []
                , url = "/api/contacts/" ++ String.fromInt id
                , body = Http.jsonBody (encodeContactForm form)
                , expect = Http.expectJson ContactUpdated contactDecoder
                , timeout = Nothing
                , tracker = Nothing
                }

        Nothing ->
            Cmd.none



-- JSON


contactDecoder : Decode.Decoder Contact
contactDecoder =
    Decode.succeed Contact
        |> Pipeline.required "id" Decode.int
        |> Pipeline.required "first_name" Decode.string
        |> Pipeline.required "last_name" Decode.string
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "current_carrier" Decode.string
        |> Pipeline.required "plan_type" Decode.string
        |> Pipeline.required "effective_date" Decode.string
        |> Pipeline.required "birth_date" Decode.string
        |> Pipeline.required "tobacco_user" Decode.bool
        |> Pipeline.required "gender" Decode.string
        |> Pipeline.required "state" Decode.string
        |> Pipeline.required "zip_code" Decode.string
        |> Pipeline.optional "agent_id" (Decode.nullable Decode.int) Nothing
        |> Pipeline.optional "last_emailed_date" (Decode.nullable Decode.string) Nothing


contactsDecoder : Decode.Decoder (List Contact)
contactsDecoder =
    Decode.list contactDecoder


encodeContactForm : ContactForm -> Encode.Value
encodeContactForm form =
    Encode.object
        [ ( "first_name", Encode.string form.firstName )
        , ( "last_name", Encode.string form.lastName )
        , ( "email", Encode.string form.email )
        , ( "current_carrier", Encode.string form.currentCarrier )
        , ( "plan_type", Encode.string form.planType )
        , ( "effective_date", Encode.string form.effectiveDate )
        , ( "birth_date", Encode.string form.birthDate )
        , ( "tobacco_user", Encode.bool form.tobaccoUser )
        , ( "gender", Encode.string form.gender )
        , ( "state", Encode.string form.state )
        , ( "zip_code", Encode.string form.zipCode )
        , ( "agent_id", Maybe.map Encode.int form.agentId |> Maybe.withDefault Encode.null )
        ]


viewModals : Model -> Html Msg
viewModals model =
    case model.showModal of
        NoModal ->
            text ""

        AddModal ->
            viewAddModal model.addForm model.isSubmittingForm

        EditModal contact ->
            viewEditModal model.editForm model.isSubmittingForm

        CsvUploadModal state ->
            viewCsvUploadModal state model.isUploadingCsv


viewAddModal : ContactForm -> Bool -> Html Msg
viewAddModal form isSubmitting =
    div [ class "fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-8" ]
        [ div [ class "bg-white rounded-xl p-10 max-w-5xl w-full mx-4 shadow-xl relative" ]
            [ button
                [ class "absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-2xl font-semibold text-gray-900 mb-8" ]
                [ text "Add New Client" ]
            , viewContactForm form UpdateAddForm SubmitAddForm "Add Client" isSubmitting
            ]
        ]


viewEditModal : ContactForm -> Bool -> Html Msg
viewEditModal form isSubmitting =
    div [ class "fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-8" ]
        [ div [ class "bg-white rounded-xl p-10 max-w-5xl w-full mx-4 shadow-xl relative" ]
            [ button
                [ class "absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-2xl font-semibold text-gray-900 mb-8" ]
                [ text "Edit Client" ]
            , viewContactForm form UpdateEditForm SubmitEditForm "Save Changes" isSubmitting
            ]
        ]


viewCsvUploadModal : UploadState -> Bool -> Html Msg
viewCsvUploadModal state isUploading =
    div [ class "fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-8" ]
        [ div [ class "bg-white rounded-xl p-10 max-w-2xl w-full mx-4 shadow-xl relative" ]
            [ button
                [ class "absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-2xl font-semibold text-gray-900 mb-8" ]
                [ text "Upload CSV" ]
            , div [ class "mb-6 text-sm text-gray-600" ]
                [ text "Need help formatting your CSV? "
                , Html.a
                    [ class "text-purple-600 hover:text-purple-800 hover:underline"
                    , Html.Attributes.href "/example.csv"
                    , Html.Attributes.download "example.csv"
                    ]
                    [ text "Download example CSV file" ]
                ]
            , div [ class "mb-4 flex items-center space-x-2" ]
                [ input
                    [ type_ "checkbox"
                    , checked state.overwriteDuplicates
                    , onInput (\val -> ToggleOverwriteDuplicates (val == "true"))
                    , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                    ]
                    []
                , label [ class "text-sm text-gray-600" ]
                    [ text "Overwrite existing contacts with matching email addresses" ]
                ]
            , div
                [ class
                    ("w-full h-64 border-2 border-dashed rounded-lg flex flex-col items-center justify-center p-8 transition-colors "
                        ++ (if state.dragOver then
                                "border-purple-500 bg-purple-50"

                            else
                                "border-gray-300 hover:border-purple-400"
                           )
                    )
                , preventDefaultOn "dragenter" (Decode.succeed ( DragEnter, True ))
                , preventDefaultOn "dragover" (Decode.succeed ( NoOp, True ))
                , preventDefaultOn "dragleave" (Decode.succeed ( DragLeave, True ))
                , preventDefaultOn "drop" (dropDecoder FileDrop)
                ]
                [ viewIcon "M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
                , div [ class "mt-4 text-center" ]
                    [ text "Drag and drop your CSV file here, or "
                    , button
                        [ class "text-purple-500 hover:text-purple-700 hover:underline"
                        , onClick ClickedSelectFile
                        ]
                        [ text "browse" ]
                    ]
                , case state.file of
                    Just file ->
                        div [ class "mt-4 text-sm text-gray-600" ]
                            [ text ("Selected: " ++ File.name file) ]

                    Nothing ->
                        text ""
                , case state.error of
                    Just error ->
                        div [ class "mt-4 text-sm text-red-600" ]
                            [ text error ]

                    Nothing ->
                        text ""
                ]
            , case state.stats of
                Just stats ->
                    div [ class "mt-4 space-y-2" ]
                        [ div [ class "text-sm text-gray-600" ]
                            [ text <| "Total rows: " ++ String.fromInt stats.totalRows ]
                        , div [ class "text-sm text-gray-600" ]
                            [ text <| "Valid rows: " ++ String.fromInt stats.validRows ]
                        , if stats.errorRows > 0 then
                            div [ class "text-sm text-red-600" ]
                                [ text <| "Error rows: " ++ String.fromInt stats.errorRows
                                , case state.errorCsv of
                                    Just csvContent ->
                                        button
                                            [ class "ml-2 text-purple-600 hover:text-purple-800 hover:underline"
                                            , onClick (DownloadErrorCsv csvContent)
                                            ]
                                            [ text "Download Errors" ]

                                    Nothing ->
                                        text ""
                                ]

                          else
                            text ""
                        ]

                Nothing ->
                    text ""
            , div [ class "mt-8 flex justify-end space-x-4" ]
                [ button
                    [ class "px-6 py-3 bg-white text-gray-700 text-sm font-medium rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200"
                    , onClick CloseModal
                    ]
                    [ text "Cancel" ]
                , if isUploading then
                    div [ class "px-6 py-3 flex items-center space-x-2" ]
                        [ viewSpinner ]

                  else
                    button
                        [ class "px-6 py-3 bg-purple-500 text-white text-sm font-medium rounded-lg hover:bg-purple-600 transition-colors duration-200"
                        , onClick UploadCsv
                        , Html.Attributes.disabled (state.file == Nothing)
                        ]
                        [ text "Upload" ]
                ]
            ]
        ]


dropDecoder : (File -> msg) -> Decoder ( msg, Bool )
dropDecoder toMsg =
    Decode.at [ "dataTransfer", "files" ] (Decode.index 0 File.decoder)
        |> Decode.map (\file -> ( toMsg file, True ))


uploadCsv : File -> Bool -> Cmd Msg
uploadCsv file overwriteDuplicates =
    let
        body =
            Http.multipartBody
                [ Http.filePart "file" file
                , Http.stringPart "overwrite_duplicates"
                    (if overwriteDuplicates then
                        "true"

                     else
                        "false"
                    )
                ]
    in
    Http.post
        { url = "/api/contacts/upload"
        , body = body
        , expect = Http.expectJson CsvUploaded uploadResponseDecoder
        }


uploadResponseDecoder : Decode.Decoder UploadResponse
uploadResponseDecoder =
    let
        errorCsvDecoder =
            Decode.oneOf
                [ Decode.string |> Decode.map Just
                , Decode.null Nothing
                ]
    in
    Decode.succeed UploadResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "message" Decode.string
        |> Pipeline.required "error_csv" errorCsvDecoder
        |> Pipeline.required "total_rows" Decode.int
        |> Pipeline.required "error_rows" Decode.int
        |> Pipeline.required "valid_rows" Decode.int


type alias UploadResponse =
    { success : Bool
    , message : String
    , errorCsv : Maybe String
    , totalRows : Int
    , errorRows : Int
    , validRows : Int
    }



-- Add this new subscription function


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.batch
        [ case model.showModal of
            NoModal ->
                Sub.none

            _ ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))
        , case model.openFilter of
            Just _ ->
                Browser.Events.onMouseDown (Decode.succeed CloseFilterDropdown)

            Nothing ->
                Sub.none
        ]


sortContacts : Maybe SortColumn -> SortDirection -> List Contact -> List Contact
sortContacts maybeColumn direction contacts =
    case maybeColumn of
        Nothing ->
            contacts

        Just column ->
            let
                comparator =
                    case column of
                        FirstNameCol ->
                            \a b -> compare a.firstName b.firstName

                        LastNameCol ->
                            \a b -> compare a.lastName b.lastName

                        EmailCol ->
                            \a b -> compare a.email b.email

                        CarrierCol ->
                            \a b -> compare a.currentCarrier b.currentCarrier

                        PlanTypeCol ->
                            \a b -> compare a.planType b.planType

                        EffectiveDateCol ->
                            \a b -> compare a.effectiveDate b.effectiveDate

                        BirthDateCol ->
                            \a b -> compare a.birthDate b.birthDate

                        TobaccoCol ->
                            \a b ->
                                compare
                                    (if a.tobaccoUser then
                                        1

                                     else
                                        0
                                    )
                                    (if b.tobaccoUser then
                                        1

                                     else
                                        0
                                    )

                        GenderCol ->
                            \a b -> compare a.gender b.gender

                        StateCol ->
                            \a b -> compare a.state b.state

                        ZipCodeCol ->
                            \a b -> compare a.zipCode b.zipCode
            in
            List.sortWith
                (if direction == Ascending then
                    comparator

                 else
                    \a b -> comparator b a
                )
                contacts


filterContacts : Filters -> String -> Time.Posix -> List Contact -> List Contact
filterContacts filters searchQuery currentTime contacts =
    contacts
        |> filterBySearch searchQuery
        |> filterByList .currentCarrier filters.carriers
        |> filterByList .state filters.states
        |> filterByAge filters.ageRange


filterBySearch : String -> List Contact -> List Contact
filterBySearch query contacts =
    if String.isEmpty query then
        contacts

    else
        let
            loweredQuery =
                String.toLower query
        in
        List.filter
            (\contact ->
                String.contains loweredQuery (String.toLower contact.firstName)
                    || String.contains loweredQuery (String.toLower contact.lastName)
                    || String.contains loweredQuery (String.toLower contact.currentCarrier)
            )
            contacts


filterByAge : Maybe ( Int, Int ) -> List Contact -> List Contact
filterByAge maybeRange contacts =
    case maybeRange of
        Nothing ->
            contacts

        Just ( min, max ) ->
            List.filter
                (\contact ->
                    let
                        age =
                            calculateAge contact.birthDate
                    in
                    age >= min && age <= max
                )
                contacts


calculateAge : String -> Int
calculateAge birthDate =
    -- This is a simplified version. You might want to use a proper date library
    2024 - (String.left 4 birthDate |> String.toInt |> Maybe.withDefault 0)


toggleFilter : Filters -> FilterType -> String -> Filters
toggleFilter filters filterType value =
    case filterType of
        CarrierFilter ->
            { filters | carriers = toggleList filters.carriers value }

        StateFilter ->
            { filters | states = toggleList filters.states value }

        AgeFilter ->
            { filters | ageRange = toggleAgeRange filters.ageRange value }


toggleList : List String -> String -> List String
toggleList list value =
    if List.member value list then
        List.filter (\v -> v /= value) list

    else
        value :: list


toggleAgeRange : Maybe ( Int, Int ) -> String -> Maybe ( Int, Int )
toggleAgeRange maybeRange value =
    case maybeRange of
        Nothing ->
            Just ( String.toInt value |> Maybe.withDefault 0, String.toInt value |> Maybe.withDefault 0 )

        Just ( min, max ) ->
            if min == (String.toInt value |> Maybe.withDefault 0) then
                Just ( String.toInt value |> Maybe.withDefault 0, max )

            else if max == (String.toInt value |> Maybe.withDefault 0) then
                Just ( min, String.toInt value |> Maybe.withDefault 0 )

            else
                Just ( min, max )


setAgeFilter : Int -> Int -> Filters -> Filters
setAgeFilter min max filters =
    if max < 1 then
        { filters | ageRange = Nothing }
        -- Don't apply filter if max is 0 or negative

    else
        { filters | ageRange = Just ( min, max ) }



-- Helper function to get unique values from contacts


getUniqueValues : (Contact -> String) -> List Contact -> List String
getUniqueValues getter contacts =
    contacts
        |> List.map getter
        |> List.sort
        |> List.Extra.unique


zipInfoDecoder : Decode.Decoder ZipInfo
zipInfoDecoder =
    Decode.succeed ZipInfo
        |> Pipeline.required "state" Decode.string
        |> Pipeline.required "counties" (Decode.list Decode.string)
        |> Pipeline.required "cities" (Decode.list Decode.string)


filterByList : (Contact -> String) -> List String -> List Contact -> List Contact
filterByList getter selectedValues contacts =
    if List.isEmpty selectedValues then
        contacts

    else
        List.filter
            (\contact ->
                List.member (getter contact) selectedValues
            )
            contacts


viewContactForm : ContactForm -> (ContactFormField -> String -> Msg) -> Msg -> String -> Bool -> Html Msg
viewContactForm form updateMsg submitMsg buttonText isSubmitting =
    Html.form [ onSubmit submitMsg ]
        [ div [ class "grid grid-cols-2 gap-x-8 gap-y-6" ]
            [ viewFormInput "First Name" "text" form.firstName FirstName updateMsg True
            , viewFormInput "Last Name" "text" form.lastName LastName updateMsg True
            , viewFormInput "Email" "email" form.email Email updateMsg True
            , viewFormInput "Current Carrier" "text" form.currentCarrier CurrentCarrier updateMsg True
            , viewFormInput "Plan Type" "text" form.planType PlanType updateMsg True
            , viewFormInput "Effective Date" "date" form.effectiveDate EffectiveDate updateMsg True
            , viewFormInput "Birth Date" "date" form.birthDate BirthDate updateMsg True
            , viewFormSelect "Tobacco User"
                (if form.tobaccoUser then
                    "true"

                 else
                    "false"
                )
                TobaccoUser
                updateMsg
                [ ( "false", "No" )
                , ( "true", "Yes" )
                ]
            , viewFormSelect "Gender"
                form.gender
                Gender
                updateMsg
                [ ( "M", "Male" )
                , ( "F", "Female" )
                ]
            , div [ class "form-group" ]
                [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
                    [ text "ZIP Code" ]
                , Html.input
                    [ type_ "text"
                    , class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200"
                    , value form.zipCode
                    , onInput
                        (\zip ->
                            if String.all Char.isDigit zip && String.length zip <= 5 then
                                Batch
                                    [ updateMsg ZipCode zip
                                    , if String.length zip == 5 then
                                        LookupZipCode zip

                                      else
                                        NoOp
                                    ]

                            else
                                NoOp
                        )
                    , required True
                    , Html.Attributes.maxlength 5
                    , Html.Attributes.pattern "[0-9]*"
                    ]
                    []
                ]
            , div [ class "form-group" ]
                [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
                    [ text "State" ]
                , Html.input
                    [ type_ "text"
                    , class "w-full px-4 py-3 bg-gray-100 border-[2.5px] border-gray-200 rounded-lg text-gray-700 cursor-not-allowed"
                    , value form.state
                    , Html.Attributes.disabled True
                    ]
                    []
                ]
            ]
        , div [ class "mt-10 flex justify-end space-x-4" ]
            [ button
                [ type_ "button"
                , onClick CloseModal
                , class "px-6 py-3 bg-white text-gray-700 text-sm font-medium rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200 focus:ring-4 focus:ring-purple-100"
                ]
                [ text "Cancel" ]
            , if isSubmitting then
                div [ class "px-6 py-3 flex items-center space-x-2" ]
                    [ viewSpinner ]

              else
                button
                    [ type_ "submit"
                    , class "px-6 py-3 bg-purple-500 text-white text-sm font-medium rounded-lg hover:bg-purple-600 transition-colors duration-200 focus:ring-4 focus:ring-purple-200"
                    ]
                    [ text buttonText ]
            ]
        ]


viewFormInput : String -> String -> String -> ContactFormField -> (ContactFormField -> String -> Msg) -> Bool -> Html Msg
viewFormInput labelText inputType inputValue field updateMsg isRequired =
    div [ class "form-group" ]
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text labelText ]
        , Html.input
            [ type_ inputType
            , class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200"
            , value inputValue
            , onInput (updateMsg field)
            , required isRequired
            ]
            []
        ]


viewFormSelect : String -> String -> ContactFormField -> (ContactFormField -> String -> Msg) -> List ( String, String ) -> Html Msg
viewFormSelect labelText selectedValue field updateMsg options =
    div [ class "form-group" ]
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text labelText ]
        , Html.select
            [ class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200 appearance-none"
            , value selectedValue
            , onInput (updateMsg field)
            ]
            (List.map
                (\( val, txt ) ->
                    option [ value val ] [ text txt ]
                )
                options
            )
        ]


deleteContacts : List Int -> Cmd Msg
deleteContacts contactIds =
    Http.request
        { method = "DELETE"
        , headers = []
        , url = "/api/contacts"
        , body = Http.jsonBody (encodeContactIds contactIds)
        , expect = Http.expectJson ContactsDeleted deleteResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


encodeContactIds : List Int -> Encode.Value
encodeContactIds ids =
    Encode.list Encode.int ids


deleteResponseDecoder : Decode.Decoder DeleteResponse
deleteResponseDecoder =
    Decode.succeed DeleteResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "deleted_ids" (Decode.list Decode.int)
        |> Pipeline.required "message" Decode.string


viewSpinner : Html Msg
viewSpinner =
    div [ class "animate-spin rounded-full h-5 w-5 border-2 border-purple-500 border-t-transparent" ] []

================
File: src/Login.elm
================
module Login exposing (Model, Msg, init, subscriptions, update, view)

import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onInput, onSubmit)
import Http
import Json.Encode as Encode


type alias Model =
    { email : String
    , status : Status
    , isLoggedIn : Bool
    }


type Status
    = Idle
    | Submitting
    | Success
    | Failed String


type Msg
    = EmailChanged String
    | SubmitForm
    | GotLoginResponse (Result Http.Error ())
    | LogOut
    | NoOp


init : Bool -> ( Model, Cmd Msg )
init isLoggedIn =
    ( { email = ""
      , status = Idle
      , isLoggedIn = isLoggedIn
      }
    , Cmd.none
    )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        EmailChanged email ->
            ( { model | email = email }
            , Cmd.none
            )

        SubmitForm ->
            ( { model | status = Submitting }
            , Http.post
                { url = "/api/auth/login"
                , body = Http.jsonBody (encodeLoginBody model.email)
                , expect = Http.expectWhatever GotLoginResponse
                }
            )

        NoOp ->
            ( model, Cmd.none )

        LogOut ->
            ( { model
                | isLoggedIn = False
                , status = Idle
              }
            , Http.post
                { url = "/api/auth/logout"
                , body = Http.emptyBody
                , expect = Http.expectWhatever (\_ -> NoOp)
                }
            )

        GotLoginResponse result ->
            case result of
                Ok _ ->
                    ( { model | status = Success }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model | status = Failed "Login failed. Please try again." }
                    , Cmd.none
                    )


view : Model -> { title : String, body : List (Html Msg) }
view model =
    if model.isLoggedIn then
        viewLoggedIn

    else
        viewLoginForm model


viewLoggedIn : { title : String, body : List (Html Msg) }
viewLoggedIn =
    { title = "Already Logged In"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8" ]
            [ div [ class "sm:mx-auto sm:w-full sm:max-w-md" ]
                [ h2 [ class "mt-6 text-center text-3xl font-extrabold text-gray-900" ]
                    [ text "Already Logged In" ]
                , div [ class "mt-8 sm:mx-auto sm:w-full sm:max-w-md" ]
                    [ div [ class "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10" ]
                        [ p [ class "text-center text-gray-600 mb-6" ]
                            [ text "You are already logged in." ]
                        , button
                            [ onClick LogOut
                            , class "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                            ]
                            [ text "Log Out" ]
                        ]
                    ]
                ]
            ]
        ]
    }


viewLoginForm : Model -> { title : String, body : List (Html Msg) }
viewLoginForm model =
    { title = "Login"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8" ]
            [ div [ class "sm:mx-auto sm:w-full sm:max-w-md" ]
                [ h2 [ class "mt-6 text-center text-3xl font-extrabold text-gray-900" ]
                    [ text "Sign in to your account" ]
                ]
            , div [ class "mt-8 sm:mx-auto sm:w-full sm:max-w-md" ]
                [ div [ class "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10" ]
                    [ Html.form [ onSubmit SubmitForm, class "space-y-6" ]
                        [ div []
                            [ label [ for "email", class "block text-sm font-medium text-gray-700" ]
                                [ text "Email address" ]
                            , div [ class "mt-1" ]
                                [ input
                                    [ type_ "email"
                                    , id "email"
                                    , value model.email
                                    , onInput EmailChanged
                                    , class "appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                    ]
                                    []
                                ]
                            ]
                        , div []
                            [ button
                                [ type_ "submit"
                                , disabled (model.status == Submitting)
                                , class "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                                ]
                                [ text
                                    (case model.status of
                                        Submitting ->
                                            "Sending..."

                                        _ ->
                                            "Send Login Link"
                                    )
                                ]
                            ]
                        ]
                    , viewStatus model.status
                    ]
                ]
            ]
        ]
    }


viewStatus : Status -> Html msg
viewStatus status =
    case status of
        Success ->
            div [ class "mt-4 p-4 bg-green-50 rounded-md" ]
                [ p [ class "text-sm text-green-700 text-center space-y-2" ]
                    [ p [] [ text "You will receive an email if you are a registered agent." ]
                    , p [] [ text "Check your email for the login link!" ]
                    ]
                ]

        Failed error ->
            div [ class "mt-4 p-4 bg-red-50 rounded-md" ]
                [ p [ class "text-sm text-red-700" ]
                    [ text error ]
                ]

        _ ->
            text ""


encodeLoginBody : String -> Encode.Value
encodeLoginBody email =
    Encode.object
        [ ( "email", Encode.string email )
        ]


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Main.elm
================
module Main exposing (main)

import AddAgent
import Browser exposing (Document)
import Browser.Navigation as Nav
import Dashboard
import Debug
import Html exposing (Html, div, h1, p, text)
import Html.Attributes exposing (class, href)
import Http
import Json.Decode as Decode exposing (Decoder)
import Login
import Settings
import Signup
import TempLanding
import Url exposing (Url)
import Url.Parser as Parser exposing ((</>), Parser, map, oneOf, s, string)
import VerifyOrganization


type alias VerificationResponse =
    { success : Bool
    , redirectUrl : String
    , session : String
    , email : String
    , orgSlug : String
    }


type alias SessionResponse =
    { valid : Bool
    , session : String
    , email : String
    }


verificationDecoder : Decoder VerificationResponse
verificationDecoder =
    Decode.map5 VerificationResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "redirectUrl" Decode.string)
        (Decode.field "session" Decode.string)
        (Decode.field "email" Decode.string)
        (Decode.field "orgSlug" Decode.string)


sessionDecoder : Decoder SessionResponse
sessionDecoder =
    Decode.map3 SessionResponse
        (Decode.field "valid" Decode.bool)
        (Decode.field "session" Decode.string)
        (Decode.field "email" Decode.string)


type alias Model =
    { key : Nav.Key
    , url : Url
    , page : Page
    , session : SessionState
    }


type SessionState
    = Unknown -- Initial state
    | Verified String -- Has valid session
    | NoSession -- Definitely no valid session


type Page
    = NotFoundPage
    | LoginPage Login.Model
    | DashboardPage Dashboard.Model
    | TempLandingPage TempLanding.Model
    | SettingsPage Settings.Model
    | Signup Signup.Model
    | VerifyOrganizationPage VerifyOrganization.Model
    | AddAgentsPage AddAgent.Model


type Msg
    = LinkClicked Browser.UrlRequest
    | UrlChanged Url
    | LoginMsg Login.Msg
    | DashboardMsg Dashboard.Msg
    | TempLandingMsg TempLanding.Msg
    | SettingsMsg Settings.Msg
    | SignupMsg Signup.Msg
    | VerifyOrganizationMsg VerifyOrganization.Msg
    | AddAgentsMsg AddAgent.Msg
    | GotVerification (Result Http.Error VerificationResponse)
    | GotSession (Result Http.Error SessionResponse)


main : Program () Model Msg
main =
    Browser.application
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        , onUrlChange = UrlChanged
        , onUrlRequest = LinkClicked
        }


init : () -> Url.Url -> Nav.Key -> ( Model, Cmd Msg )
init _ url key =
    let
        model =
            { key = key
            , url = url
            , page = NotFoundPage
            , session = Unknown
            }

        route =
            Parser.parse routeParser url
    in
    case route of
        Just (Public _) ->
            -- Don't verify session for public routes
            changeRouteTo url model

        _ ->
            -- Verify session for protected routes or unknown routes
            ( model
            , verifySession
            )


verifySession : Cmd Msg
verifySession =
    Http.get
        { url = "/api/auth/session"
        , expect = Http.expectJson GotSession sessionDecoder
        }


type Route
    = Public PublicRoute
    | Protected ProtectedRoute
    | NotFound


type PublicRoute
    = LoginRoute
    | VerifyRoute String String -- orgSlug token
    | SignupRoute


type ProtectedRoute
    = TempLandingRoute
    | DashboardRoute
    | SettingsRoute Bool
    | VerifyOrganizationRoute
    | AddAgentsRoute Bool -- Add setup flag like Settings


routeParser : Parser (Route -> a) a
routeParser =
    oneOf
        [ -- Public routes
          map (Public LoginRoute) (s "login")
        , map (\slug token -> Public (VerifyRoute slug token))
            (s "auth" </> s "verify" </> string </> string)
        , map (Public SignupRoute) (s "signup")

        -- Protected routes
        , map (Protected TempLandingRoute) (s "templanding")
        , map (Protected DashboardRoute) (s "dashboard")
        , map (Protected (SettingsRoute False)) (s "settings")
        , map (Protected (SettingsRoute True)) (s "settings" </> s "setup")
        , map (Protected VerifyOrganizationRoute) (s "verify-organization")
        , map (Protected (AddAgentsRoute False)) (s "add-agents")
        , map (Protected (AddAgentsRoute True)) (s "add-agents" </> s "setup")
        ]


changeRouteTo : Url -> Model -> ( Model, Cmd Msg )
changeRouteTo url model =
    let
        _ =
            Debug.log "Changing route to" (Url.toString url)

        _ =
            Debug.log "Session state" model.session
    in
    case Parser.parse routeParser url of
        Nothing ->
            ( { model | page = NotFoundPage }
            , Cmd.none
            )

        Just route ->
            case route of
                Public publicRoute ->
                    -- Public routes are always accessible
                    case publicRoute of
                        LoginRoute ->
                            case model.session of
                                Verified _ ->
                                    -- Already logged in, show logged-in view
                                    let
                                        ( pageModel, pageCmd ) =
                                            Login.init True
                                    in
                                    ( { model | page = LoginPage pageModel }
                                    , Cmd.map LoginMsg pageCmd
                                    )

                                _ ->
                                    let
                                        ( pageModel, pageCmd ) =
                                            Login.init False
                                    in
                                    ( { model | page = LoginPage pageModel }
                                    , Cmd.map LoginMsg pageCmd
                                    )

                        SignupRoute ->
                            -- Always allow access to signup, regardless of session state
                            let
                                _ =
                                    Debug.log "Signing up"

                                ( signupModel, signupCmd ) =
                                    Signup.init
                            in
                            ( { model | page = Signup signupModel }
                            , Cmd.map SignupMsg signupCmd
                            )

                        VerifyRoute orgSlug token ->
                            ( model
                            , Http.get
                                { url = "/api/auth/verify/" ++ orgSlug ++ "/" ++ token
                                , expect = Http.expectJson GotVerification verificationDecoder
                                }
                            )

                Protected protectedRoute ->
                    case model.session of
                        Verified _ ->
                            -- Show protected page
                            showProtectedRoute protectedRoute model

                        Unknown ->
                            -- Keep current page and verify session
                            ( model
                            , verifySession
                            )

                        NoSession ->
                            -- Redirect to login
                            ( model
                            , Nav.replaceUrl model.key "/login"
                            )

                NotFound ->
                    ( { model | page = NotFoundPage }
                    , Cmd.none
                    )


showProtectedRoute : ProtectedRoute -> Model -> ( Model, Cmd Msg )
showProtectedRoute route model =
    case route of
        TempLandingRoute ->
            let
                ( pageModel, pageCmd ) =
                    TempLanding.init ()
            in
            ( { model | page = TempLandingPage pageModel }
            , Cmd.map TempLandingMsg pageCmd
            )

        DashboardRoute ->
            let
                ( pageModel, pageCmd ) =
                    Dashboard.init ()
            in
            ( { model | page = DashboardPage pageModel }
            , Cmd.map DashboardMsg pageCmd
            )

        SettingsRoute isSetup ->
            let
                ( pageModel, pageCmd ) =
                    Settings.init
                        { isSetup = isSetup
                        , key = model.key
                        }
            in
            ( { model | page = SettingsPage pageModel }
            , Cmd.map SettingsMsg pageCmd
            )

        VerifyOrganizationRoute ->
            case model.session of
                Verified session ->
                    let
                        ( pageModel, pageCmd ) =
                            VerifyOrganization.init "test-org" session model.key
                    in
                    ( { model | page = VerifyOrganizationPage pageModel }
                    , Cmd.map VerifyOrganizationMsg pageCmd
                    )

                _ ->
                    ( model, Nav.pushUrl model.key "/login" )

        AddAgentsRoute isSetup ->
            case model.session of
                Verified session ->
                    let
                        ( pageModel, pageCmd ) =
                            AddAgent.init
                                { isSetup = isSetup
                                , key = model.key
                                }
                    in
                    ( { model | page = AddAgentsPage pageModel }
                    , Cmd.map AddAgentsMsg pageCmd
                    )

                _ ->
                    ( model, Nav.pushUrl model.key "/login" )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        LinkClicked urlRequest ->
            case urlRequest of
                Browser.Internal url ->
                    ( model
                    , Nav.pushUrl model.key (Url.toString url)
                    )

                Browser.External href ->
                    ( model
                    , Nav.load href
                    )

        UrlChanged url ->
            let
                _ =
                    Debug.log "URL changed to" (Url.toString url)
            in
            changeRouteTo url { model | url = url }

        LoginMsg subMsg ->
            case model.page of
                LoginPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Login.update subMsg pageModel
                    in
                    ( { model | page = LoginPage newPageModel }
                    , Cmd.map LoginMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        DashboardMsg subMsg ->
            case model.page of
                DashboardPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Dashboard.update subMsg pageModel
                    in
                    ( { model | page = DashboardPage newPageModel }
                    , Cmd.map DashboardMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        TempLandingMsg subMsg ->
            case model.page of
                TempLandingPage pageModel ->
                    case subMsg of
                        TempLanding.NavigateTo path ->
                            ( model
                            , Nav.pushUrl model.key path
                            )

                _ ->
                    ( model, Cmd.none )

        SettingsMsg subMsg ->
            case model.page of
                SettingsPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Settings.update subMsg pageModel
                    in
                    ( { model | page = SettingsPage newPageModel }
                    , Cmd.map SettingsMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        SignupMsg subMsg ->
            case model.page of
                Signup signupModel ->
                    let
                        ( newSignupModel, newCmd ) =
                            Signup.update subMsg signupModel
                    in
                    ( { model | page = Signup newSignupModel }
                    , Cmd.map SignupMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        VerifyOrganizationMsg subMsg ->
            case model.page of
                VerifyOrganizationPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            VerifyOrganization.update subMsg pageModel
                    in
                    ( { model | page = VerifyOrganizationPage newPageModel }
                    , Cmd.map VerifyOrganizationMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        AddAgentsMsg subMsg ->
            case model.page of
                AddAgentsPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            AddAgent.update subMsg pageModel
                    in
                    ( { model | page = AddAgentsPage newPageModel }
                    , Cmd.map AddAgentsMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        GotVerification result ->
            let
                _ =
                    Debug.log "Got verification result" result
            in
            case result of
                Ok response ->
                    if response.success then
                        let
                            _ =
                                Debug.log "Successful verification"
                                    { response = response
                                    , orgSlug = response.orgSlug
                                    }

                            ( verifyOrgModel, verifyOrgCmd ) =
                                VerifyOrganization.init response.orgSlug response.session model.key

                            _ =
                                Debug.log "Created verify org model"
                                    { model = verifyOrgModel
                                    , orgSlug = verifyOrgModel.orgSlug
                                    , cmd = verifyOrgCmd
                                    }

                            newModel =
                                { model
                                    | session = Verified response.session
                                    , page = VerifyOrganizationPage verifyOrgModel
                                }
                        in
                        ( newModel
                        , Cmd.batch
                            [ Nav.replaceUrl model.key response.redirectUrl
                            , Cmd.map VerifyOrganizationMsg verifyOrgCmd
                            ]
                        )

                    else
                        let
                            _ =
                                Debug.log "Verification failed" response
                        in
                        ( model, Nav.pushUrl model.key "/login" )

                Err error ->
                    let
                        _ =
                            Debug.log "Verification error" error
                    in
                    ( model, Nav.pushUrl model.key "/login" )

        GotSession result ->
            case result of
                Ok response ->
                    if response.valid then
                        let
                            _ =
                                Debug.log "Session verified" response

                            newModel =
                                { model | session = Verified response.session }
                        in
                        -- Re-evaluate current route with verified session
                        changeRouteTo model.url newModel

                    else
                        let
                            _ =
                                Debug.log "Session invalid" response

                            newModel =
                                { model | session = NoSession }
                        in
                        -- For public routes, don't redirect on invalid session
                        case Parser.parse routeParser model.url of
                            Just (Public _) ->
                                changeRouteTo model.url newModel

                            _ ->
                                ( newModel
                                , Nav.replaceUrl model.key "/login"
                                )

                Err error ->
                    let
                        _ =
                            Debug.log "Session verification error" error

                        newModel =
                            { model | session = NoSession }
                    in
                    -- For public routes, don't redirect on session error
                    case Parser.parse routeParser model.url of
                        Just (Public _) ->
                            changeRouteTo model.url newModel

                        _ ->
                            ( newModel
                            , Nav.replaceUrl model.key "/login"
                            )


view : Model -> Document Msg
view model =
    case model.page of
        NotFoundPage ->
            { title = "Not Found"
            , body =
                [ div [ class "min-h-screen bg-gray-50 flex flex-col justify-center" ]
                    [ div [ class "text-center" ]
                        [ h1 [ class "text-4xl font-bold text-gray-900" ]
                            [ text "Page not found" ]
                        ]
                    ]
                ]
            }

        LoginPage pageModel ->
            { title = "Login"
            , body = List.map (Html.map LoginMsg) (Login.view pageModel).body
            }

        DashboardPage pageModel ->
            { title = "Dashboard"
            , body = [ Html.map DashboardMsg (Dashboard.view pageModel) ]
            }

        TempLandingPage pageModel ->
            { title = "Welcome"
            , body = List.map (Html.map TempLandingMsg) (TempLanding.view pageModel).body
            }

        SettingsPage pageModel ->
            { title = "Settings"
            , body = List.map (Html.map SettingsMsg) (Settings.view pageModel).body
            }

        Signup signupModel ->
            { title = "Create Organization"
            , body = List.map (Html.map SignupMsg) (Signup.view signupModel).body
            }

        VerifyOrganizationPage pageModel ->
            { title = "Verify Organization"
            , body = List.map (Html.map VerifyOrganizationMsg) (VerifyOrganization.view pageModel).body
            }

        AddAgentsPage pageModel ->
            { title = "Add Agent"
            , body = List.map (Html.map AddAgentsMsg) (AddAgent.view pageModel).body
            }


subscriptions : Model -> Sub Msg
subscriptions model =
    case model.page of
        LoginPage pageModel ->
            Sub.map LoginMsg (Login.subscriptions pageModel)

        DashboardPage pageModel ->
            Sub.map DashboardMsg (Dashboard.subscriptions pageModel)

        TempLandingPage pageModel ->
            Sub.map TempLandingMsg (TempLanding.subscriptions pageModel)

        SettingsPage pageModel ->
            Sub.map SettingsMsg (Settings.subscriptions pageModel)

        Signup signupModel ->
            Sub.map SignupMsg (Signup.subscriptions signupModel)

        VerifyOrganizationPage pageModel ->
            Sub.map VerifyOrganizationMsg (VerifyOrganization.subscriptions pageModel)

        AddAgentsPage pageModel ->
            Sub.map AddAgentsMsg (AddAgent.subscriptions pageModel)

        NotFoundPage ->
            Sub.none

================
File: src/main.ts
================
import './styles.css'
import { Elm } from './Main.elm'

const root = document.querySelector('#app')
if (root) {
  const app = Elm.Main.init({
    node: root,
    flags: {
      apiUrl: 'http://localhost:3000'  // Pass the API URL as a flag
    }
  })

  // Add any ports here if needed
  // app.ports.sendToJs.subscribe((data) => {
  //   console.log('From Elm:', data)
  // })
}

================
File: src/Settings.elm
================
module Settings exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Debug
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onCheck, onClick, onInput)
import Http exposing (expectJson, jsonBody)
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode
import StateRegions exposing (Region(..), getRegionStates, regionToString)
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, viewBox)



-- Constants


allStates : List String
allStates =
    [ "AL"
    , "AK"
    , "AZ"
    , "AR"
    , "CA"
    , "CO"
    , "CT"
    , "DE"
    , "FL"
    , "GA"
    , "HI"
    , "ID"
    , "IL"
    , "IN"
    , "IA"
    , "KS"
    , "KY"
    , "LA"
    , "ME"
    , "MD"
    , "MA"
    , "MI"
    , "MN"
    , "MS"
    , "MO"
    , "MT"
    , "NE"
    , "NV"
    , "NH"
    , "NJ"
    , "NM"
    , "NY"
    , "NC"
    , "ND"
    , "OH"
    , "OK"
    , "OR"
    , "PA"
    , "RI"
    , "SC"
    , "SD"
    , "TN"
    , "TX"
    , "UT"
    , "VT"
    , "VA"
    , "WA"
    , "WV"
    , "WI"
    , "WY"
    , "DC"
    ]


allCarriers : List String
allCarriers =
    [ "Aetna"
    , "Humana"
    , "UnitedHealthcare"
    , "Cigna"
    , "Aflac"
    , "Allstate"
    , "Mutual of Omaha"
    , "Ace Chubb"
    ]


type Carrier
    = Aetna
    | Humana
    | UnitedHealthcare
    | Cigna
    | Aflac
    | Allstate
    | MutualOfOmaha
    | AceChubb



-- Add new type for GI selection mode


type GISelectionMode
    = GIAll
    | GINone
    | GIRecommended


type alias InitFlags =
    { isSetup : Bool
    , key : Nav.Key
    }


type alias Model =
    { orgSettings : Maybe Settings
    , status : Status
    , expandedSections : List String
    , recommendedGICombos : List StateCarrierSetting
    , isSetup : Bool
    , key : Nav.Key
    }


type alias StateCarrierSetting =
    { state : String
    , carrier : String
    , active : Bool
    , targetGI : Bool
    }


type alias Settings =
    { stateLicenses : List String
    , carrierContracts : List String
    , stateCarrierSettings : List StateCarrierSetting
    , allowAgentSettings : Bool
    , emailSendBirthday : Bool
    , emailSendPolicyAnniversary : Bool
    , emailSendAep : Bool
    , smartSendEnabled : Bool
    }


type Status
    = Loading
    | Loaded
    | Saving
    | Error String


type Msg
    = GotSettings (Result Http.Error SettingsResponse)
    | SaveSettings
    | SettingsSaved (Result Http.Error Settings)
    | ToggleEmailBirthday Bool
    | ToggleEmailAnniversary Bool
    | ToggleEmailAep Bool
    | ToggleSmartSend Bool
    | AddStateLicense String
    | RemoveStateLicense String
    | AddCarrierContract String
    | RemoveCarrierContract String
    | UpdateStateCarrierSetting String String Bool Bool
    | ToggleSection String
    | ToggleAllStates Bool
    | ToggleAllCarriers Bool
    | ApplyGISelection GISelectionMode
    | GotRecommendedGICombos (Result Http.Error (List StateCarrierSetting))
    | ToggleAllowAgentSettings Bool
    | FinishSetup
    | SelectCommonStates Region


type alias SettingsResponse =
    { orgSettings : Settings
    , canEditOrgSettings : Bool
    }


init : InitFlags -> ( Model, Cmd Msg )
init flags =
    ( { orgSettings = Nothing
      , status = Loading
      , expandedSections = []
      , recommendedGICombos = []
      , isSetup = flags.isSetup
      , key = flags.key
      }
    , Cmd.batch
        [ fetchSettings
        , fetchRecommendedGICombos
        ]
    )


fetchSettings : Cmd Msg
fetchSettings =
    let
        _ =
            Debug.log "Fetching settings" ()
    in
    Http.get
        { url = "/api/settings"
        , expect = Http.expectJson GotSettings settingsDecoder
        }


fetchRecommendedGICombos : Cmd Msg
fetchRecommendedGICombos =
    let
        _ =
            Debug.log "Fetching GI recommendations" ()
    in
    Http.get
        { url = "/api/settings/gi-recommendations"
        , expect = Http.expectJson GotRecommendedGICombos recommendationsDecoder
        }


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotSettings result ->
            case result of
                Ok response ->
                    ( { model | orgSettings = Just response.orgSettings, status = Loaded }
                    , Cmd.none
                    )

                Err error ->
                    let
                        errorMsg =
                            case error of
                                Http.BadUrl url ->
                                    "Bad URL: " ++ url

                                Http.Timeout ->
                                    "Request timed out"

                                Http.NetworkError ->
                                    "Network error"

                                Http.BadStatus status ->
                                    "Bad status: " ++ String.fromInt status

                                Http.BadBody message ->
                                    let
                                        _ =
                                            Debug.log "Decoder error" message
                                    in
                                    "Bad body: " ++ message
                    in
                    ( { model | status = Error errorMsg }
                    , Cmd.none
                    )

        SaveSettings ->
            ( { model | status = Saving }
            , Cmd.none
            )

        SettingsSaved result ->
            case result of
                Ok settings ->
                    ( { model | orgSettings = Just settings, status = Loaded }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model | status = Error "Failed to save settings" }
                    , Cmd.none
                    )

        ToggleEmailBirthday value ->
            updateSettings model (\s -> { s | emailSendBirthday = value })

        ToggleEmailAnniversary value ->
            updateSettings model (\s -> { s | emailSendPolicyAnniversary = value })

        ToggleEmailAep value ->
            updateSettings model (\s -> { s | emailSendAep = value })

        ToggleSmartSend value ->
            updateSettings model (\s -> { s | smartSendEnabled = value })

        AddStateLicense state ->
            updateSettings model
                (\s ->
                    { s
                        | stateLicenses =
                            if List.member state s.stateLicenses then
                                s.stateLicenses

                            else
                                state :: s.stateLicenses
                    }
                )

        RemoveStateLicense state ->
            updateSettings model
                (\s ->
                    { s
                        | stateLicenses =
                            List.filter (\x -> x /= state) s.stateLicenses
                        , stateCarrierSettings =
                            List.filter (\setting -> setting.state /= state) s.stateCarrierSettings
                    }
                )

        AddCarrierContract carrier ->
            updateSettings model
                (\s ->
                    { s
                        | carrierContracts =
                            if List.member carrier s.carrierContracts then
                                s.carrierContracts

                            else
                                carrier :: s.carrierContracts
                    }
                )

        RemoveCarrierContract carrier ->
            updateSettings model
                (\s ->
                    { s
                        | carrierContracts =
                            List.filter (\x -> x /= carrier) s.carrierContracts
                        , stateCarrierSettings =
                            List.filter (\setting -> setting.carrier /= carrier) s.stateCarrierSettings
                    }
                )

        UpdateStateCarrierSetting state carrier active targetGI ->
            updateSettings model
                (\s ->
                    let
                        existingSetting =
                            List.filter
                                (\setting ->
                                    setting.state == state && setting.carrier == carrier
                                )
                                s.stateCarrierSettings
                                |> List.head

                        newSettings =
                            case existingSetting of
                                Just _ ->
                                    List.map
                                        (\setting ->
                                            if setting.state == state && setting.carrier == carrier then
                                                { setting | active = active, targetGI = targetGI }

                                            else
                                                setting
                                        )
                                        s.stateCarrierSettings

                                Nothing ->
                                    { state = state
                                    , carrier = carrier
                                    , active = active
                                    , targetGI = targetGI
                                    }
                                        :: s.stateCarrierSettings
                    in
                    { s | stateCarrierSettings = newSettings }
                )

        ToggleSection title ->
            ( { model
                | expandedSections =
                    if List.member title model.expandedSections then
                        List.filter ((/=) title) model.expandedSections

                    else
                        title :: model.expandedSections
              }
            , Cmd.none
            )

        ToggleAllStates checked ->
            case model.orgSettings of
                Just settings ->
                    let
                        newSettings =
                            { settings
                                | stateLicenses =
                                    if checked then
                                        allStates

                                    else
                                        []
                                , stateCarrierSettings =
                                    if checked then
                                        settings.stateCarrierSettings

                                    else
                                        []

                                -- Clear all state/carrier settings when deselecting all states
                            }
                    in
                    ( { model | orgSettings = Just newSettings }
                    , saveSettings newSettings
                    )

                Nothing ->
                    ( model, Cmd.none )

        ToggleAllCarriers checked ->
            case model.orgSettings of
                Just settings ->
                    let
                        newSettings =
                            { settings
                                | carrierContracts =
                                    if checked then
                                        allCarriers

                                    else
                                        []
                                , stateCarrierSettings =
                                    if checked then
                                        settings.stateCarrierSettings

                                    else
                                        []

                                -- Clear all state/carrier settings when deselecting all carriers
                            }
                    in
                    ( { model | orgSettings = Just newSettings }
                    , saveSettings newSettings
                    )

                Nothing ->
                    ( model, Cmd.none )

        ApplyGISelection mode ->
            case model.orgSettings of
                Just settings ->
                    let
                        newSettings =
                            case mode of
                                GIAll ->
                                    { settings
                                        | stateCarrierSettings =
                                            List.map
                                                (\setting -> { setting | targetGI = True })
                                                settings.stateCarrierSettings
                                    }

                                GINone ->
                                    { settings
                                        | stateCarrierSettings =
                                            List.map
                                                (\setting -> { setting | targetGI = False })
                                                settings.stateCarrierSettings
                                    }

                                GIRecommended ->
                                    { settings
                                        | stateCarrierSettings =
                                            List.map
                                                (\setting ->
                                                    { setting
                                                        | targetGI =
                                                            List.any
                                                                (\rec ->
                                                                    rec.state == setting.state && rec.carrier == setting.carrier
                                                                )
                                                                model.recommendedGICombos
                                                    }
                                                )
                                                settings.stateCarrierSettings
                                    }
                    in
                    ( { model | orgSettings = Just newSettings }
                    , saveSettings newSettings
                    )

                Nothing ->
                    ( model, Cmd.none )

        GotRecommendedGICombos result ->
            case result of
                Ok combos ->
                    let
                        _ =
                            Debug.log "Received GI recommendations" combos
                    in
                    ( { model | recommendedGICombos = combos }
                    , Cmd.none
                    )

                Err error ->
                    let
                        _ =
                            Debug.log "Error getting GI recommendations" error
                    in
                    ( { model | status = Error "Failed to load GI recommendations" }
                    , Cmd.none
                    )

        ToggleAllowAgentSettings value ->
            updateSettings model (\s -> { s | allowAgentSettings = value })

        FinishSetup ->
            ( model
            , Nav.pushUrl model.key "/add-agents"
            )

        SelectCommonStates region ->
            updateSettings model
                (\s ->
                    { s | stateLicenses = s.stateLicenses ++ getRegionStates region }
                )


updateSettings : Model -> (Settings -> Settings) -> ( Model, Cmd Msg )
updateSettings model updateFn =
    case model.orgSettings of
        Just settings ->
            let
                newSettings =
                    updateFn settings
            in
            ( { model | orgSettings = Just newSettings }
            , saveSettings newSettings
            )

        Nothing ->
            ( model, Cmd.none )


saveSettings : Settings -> Cmd Msg
saveSettings settings =
    Http.request
        { method = "PUT"
        , headers = []
        , url = "/api/settings/org"
        , body = jsonBody (encodeSettings (settings |> Debug.log "settings"))
        , expect = expectJson SettingsSaved settingsObjectDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


encodeSettings : Settings -> Encode.Value
encodeSettings settings =
    Encode.object
        [ ( "stateLicenses", Encode.list Encode.string settings.stateLicenses )
        , ( "carrierContracts", Encode.list Encode.string settings.carrierContracts )
        , ( "stateCarrierSettings", Encode.list stateCarrierSettingEncoder settings.stateCarrierSettings )
        , ( "allowAgentSettings", Encode.bool settings.allowAgentSettings )
        , ( "emailSendBirthday", Encode.bool settings.emailSendBirthday )
        , ( "emailSendPolicyAnniversary", Encode.bool settings.emailSendPolicyAnniversary )
        , ( "emailSendAep", Encode.bool settings.emailSendAep )
        , ( "smartSendEnabled", Encode.bool settings.smartSendEnabled )
        ]


stateCarrierSettingEncoder : StateCarrierSetting -> Encode.Value
stateCarrierSettingEncoder setting =
    Encode.object
        [ ( "state", Encode.string setting.state )
        , ( "carrier", Encode.string setting.carrier )
        , ( "active", Encode.bool setting.active )
        , ( "targetGI", Encode.bool setting.targetGI )
        ]


view : Model -> Browser.Document Msg
view model =
    { title =
        if model.isSetup then
            "Organization Setup - Settings"

        else
            "Settings"
    , body =
        [ div [ class "min-h-screen bg-gray-50" ]
            [ div [ class "max-w-7xl mx-auto py-6 sm:px-6 lg:px-8" ]
                [ if model.isSetup then
                    viewSetupHeader

                  else
                    viewNormalHeader
                , viewSettingsContent model.orgSettings True model.expandedSections
                , viewBottomBar model
                ]
            ]
        ]
    }


viewSetupHeader : Html Msg
viewSetupHeader =
    div [ class "mb-8 text-center" ]
        [ h1 [ class "text-3xl font-bold text-gray-900" ]
            [ text "Set Up Your Organization" ]
        , p [ class "mt-2 text-gray-600" ]
            [ text "Configure your organization's settings to get started" ]
        ]


viewNormalHeader : Html Msg
viewNormalHeader =
    h1 [ class "text-2xl font-semibold text-gray-900 mb-6" ]
        [ text "Organization Settings" ]


viewBottomBar : Model -> Html Msg
viewBottomBar model =
    div
        [ class """fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 
                  px-4 py-4 sm:px-6 lg:px-8 flex justify-between items-center"""
        ]
        [ button
            [ class """px-4 py-2 text-sm font-medium text-gray-700 bg-white 
                      border border-gray-300 rounded-md hover:bg-gray-50"""
            , onClick SaveSettings
            ]
            [ text "Save Changes" ]
        , if model.isSetup then
            button
                [ class """px-4 py-2 text-sm font-medium text-white bg-blue-600 
                          rounded-md hover:bg-blue-700 ml-4"""
                , onClick FinishSetup
                ]
                [ text "Next: Add Agents" ]

          else
            text ""
        ]


viewSettingsContent : Maybe Settings -> Bool -> List String -> Html Msg
viewSettingsContent maybeSettings canEdit expandedSections =
    case maybeSettings of
        Just settings ->
            div [ class "space-y-6" ]
                [ div [ class "bg-white shadow rounded-lg p-6" ]
                    [ h2 [ class "text-lg font-medium mb-4" ] [ text "Organization Settings" ]
                    , div [ class "space-y-4" ]
                        [ checkbox "Allow agents to customize their own settings"
                            settings.allowAgentSettings
                            ToggleAllowAgentSettings
                        ]
                    ]
                , viewEmailSettings settings
                , viewExpandableSection "State Licenses"
                    (viewLicensesGrid settings)
                    expandedSections
                , viewExpandableSection "Carrier Contracts"
                    (viewCarriersGrid settings)
                    expandedSections
                , viewExpandableSection "State & Carrier Settings"
                    (viewStateCarrierGrid settings)
                    expandedSections
                ]

        Nothing ->
            div [ class "text-gray-500 italic" ]
                [ text "Using organization settings" ]


viewEmailSettings : Settings -> Html Msg
viewEmailSettings settings =
    div [ class "bg-white shadow rounded-lg p-6" ]
        [ h2 [ class "text-lg font-medium mb-4" ] [ text "Email Settings" ]
        , div [ class "space-y-4" ]
            [ checkbox "Send birthday emails" settings.emailSendBirthday ToggleEmailBirthday
            , checkbox "Send policy anniversary emails" settings.emailSendPolicyAnniversary ToggleEmailAnniversary
            , checkbox "Send AEP emails" settings.emailSendAep ToggleEmailAep
            , checkbox "Enable smart send" settings.smartSendEnabled ToggleSmartSend
            ]
        ]


checkbox : String -> Bool -> (Bool -> msg) -> Html msg
checkbox labelText isChecked onToggle =
    Html.label [ class "flex items-center space-x-3" ]
        [ input
            [ type_ "checkbox"
            , checked isChecked
            , onCheck onToggle
            , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
            ]
            []
        , span [ class "text-gray-700" ] [ text labelText ]
        ]


viewExpandableSection : String -> Html Msg -> List String -> Html Msg
viewExpandableSection title content expandedSections =
    let
        isExpanded =
            List.member title expandedSections
    in
    div [ class "bg-white shadow rounded-lg overflow-hidden" ]
        [ button
            [ class "w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50"
            , onClick (ToggleSection title)
            ]
            [ h2 [ class "text-lg font-medium" ] [ text title ]
            , div
                [ class "transform transition-transform"
                , classList [ ( "rotate-180", isExpanded ) ]
                ]
                [ text "▼" ]
            ]
        , div
            [ class "px-6 pb-6"
            , classList [ ( "hidden", not isExpanded ) ]
            ]
            [ content ]
        ]


viewLicensesGrid : Settings -> Html Msg
viewLicensesGrid settings =
    div []
        [ div [ class "mb-4 space-y-2" ]
            [ div [ class "flex gap-4" ]
                -- Container for both label groups
                [ div []
                    -- Batch Select group
                    [ div [ class "text-sm font-medium text-gray-700 mb-2" ]
                        [ text "Batch Select" ]
                    , div [ class "flex gap-2" ]
                        [ button
                            [ class "px-3 py-1 text-sm border rounded-md hover:bg-gray-50 min-w-[70px]"
                            , onClick (ToggleAllStates True)
                            ]
                            [ text "Select All" ]
                        , button
                            [ class "px-3 py-1 text-sm border rounded-md hover:bg-gray-50 min-w-[70px]"
                            , onClick (ToggleAllStates False)
                            ]
                            [ text "Clear All" ]
                        ]
                    ]
                , div []
                    -- By Region: group
                    [ div [ class "text-sm font-medium text-gray-700 mb-2" ]
                        [ text "By Region:" ]
                    , div [ class "flex gap-2" ]
                        (List.map
                            (\region ->
                                button
                                    [ class "px-3 py-1 text-sm border rounded-md hover:bg-gray-50"
                                    , onClick (SelectCommonStates region)
                                    ]
                                    [ text (regionToString region) ]
                            )
                            StateRegions.allRegions
                        )
                    ]
                ]
            ]
        , div [ class "grid grid-cols-5 gap-4" ]
            (List.map
                (\state ->
                    checkbox state
                        (List.member state settings.stateLicenses)
                        (\checked ->
                            if checked then
                                AddStateLicense state

                            else
                                RemoveStateLicense state
                        )
                )
                allStates
            )
        ]


viewCarriersGrid : Settings -> Html Msg
viewCarriersGrid settings =
    div []
        [ div [ class "mb-4 flex items-center" ]
            [ checkbox "Select All Carriers"
                (List.length settings.carrierContracts == List.length allCarriers)
                ToggleAllCarriers
            ]
        , div [ class "grid grid-cols-3 gap-4" ]
            (List.map
                (\carrier ->
                    checkbox carrier
                        (List.member carrier settings.carrierContracts)
                        (\checked ->
                            if checked then
                                AddCarrierContract carrier

                            else
                                RemoveCarrierContract carrier
                        )
                )
                allCarriers
            )
        ]


viewStateCarrierGrid : Settings -> Html Msg
viewStateCarrierGrid settings =
    if List.isEmpty settings.stateLicenses || List.isEmpty settings.carrierContracts then
        div [ class "text-gray-500 italic p-4" ]
            [ text "Please select at least one state license and one carrier contract to configure their settings." ]

    else
        div []
            [ div [ class "mb-6" ]
                [ h3 [ class "text-sm font-medium text-gray-700 mb-2" ]
                    [ text "Guaranteed Issue Settings" ]
                , div [ class "flex space-x-2" ]
                    [ button
                        [ class "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                        , onClick (ApplyGISelection GIAll)
                        ]
                        [ text "Select All" ]
                    , button
                        [ class "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                        , onClick (ApplyGISelection GINone)
                        ]
                        [ text "Clear All" ]
                    , div [ class "relative group" ]
                        [ button
                            [ class "px-4 py-2 text-sm font-medium text-indigo-700 bg-white border border-indigo-300 rounded-md hover:bg-indigo-50 flex items-center"
                            , onClick (ApplyGISelection GIRecommended)
                            ]
                            [ text "Apply Recommended"
                            , div
                                [ class "ml-2 w-5 h-5 rounded-full bg-indigo-50 flex items-center justify-center text-indigo-700" ]
                                [ text "i" ]
                            ]
                        , div
                            [ class """absolute bottom-full mb-2 p-4 bg-white text-indigo-700 text-sm rounded-lg shadow-lg 
                                      invisible group-hover:visible opacity-0 group-hover:opacity-100 transition-opacity
                                      -translate-x-1/2 left-1/2 w-96 border border-indigo-100 z-50"""
                            ]
                            [ text """Include state/carriers with full compensation for GI policies. Always verify with your own contracts and commission schedules.""" ]
                        ]
                    ]
                ]
            , div [ class "overflow-x-auto" ]
                [ table [ class "min-w-full divide-y divide-gray-200" ]
                    [ thead
                        [ class "bg-gray-50" ]
                        [ tr []
                            (th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky left-0 bg-gray-50 z-10" ]
                                [ text "State" ]
                                :: List.map
                                    (\carrier ->
                                        th [ class "px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider min-w-[120px]" ]
                                            [ text carrier ]
                                    )
                                    settings.carrierContracts
                            )
                        ]
                    , tbody [ class "bg-white divide-y divide-gray-200" ]
                        (List.indexedMap
                            (\index state ->
                                tr [ classList [ ( "bg-gray-50", modBy 2 index == 0 ) ] ]
                                    (td [ class "px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 sticky left-0 bg-inherit z-10" ]
                                        [ text state ]
                                        :: List.map
                                            (\carrier ->
                                                let
                                                    setting =
                                                        findStateCarrierSetting settings state carrier
                                                in
                                                td [ class "px-6 py-4 whitespace-nowrap text-sm text-center" ]
                                                    [ div [ class "flex flex-col items-start space-y-2 w-[120px] mx-auto" ]
                                                        [ div [ class "w-full" ]
                                                            [ label [ class "flex items-center cursor-pointer w-full" ]
                                                                [ div [ class "relative w-4 h-4 mr-2 flex-shrink-0" ]
                                                                    [ input
                                                                        [ type_ "checkbox"
                                                                        , checked setting.active
                                                                        , onCheck
                                                                            (\active ->
                                                                                UpdateStateCarrierSetting state
                                                                                    carrier
                                                                                    active
                                                                                    (if active then
                                                                                        setting.targetGI

                                                                                     else
                                                                                        False
                                                                                    )
                                                                            )
                                                                        , class "absolute w-0 h-0 opacity-0" -- Hide the actual checkbox
                                                                        ]
                                                                        []
                                                                    , div
                                                                        [ class "w-4 h-4 border rounded transition-colors duration-200 flex items-center justify-center"
                                                                        , classList
                                                                            [ ( "bg-green-600 border-green-600", setting.active )
                                                                            , ( "border-gray-300", not setting.active )
                                                                            ]
                                                                        ]
                                                                        [ if setting.active then
                                                                            div [ class "text-white text-xs" ] [ text "✓" ]

                                                                          else
                                                                            text ""
                                                                        ]
                                                                    ]
                                                                , div [ class "flex-grow text-left" ] [ text "Active" ]
                                                                ]
                                                            ]
                                                        , div [ class "w-full" ]
                                                            [ label
                                                                [ class "flex items-center w-full"
                                                                , classList
                                                                    [ ( "cursor-pointer", setting.active )
                                                                    , ( "cursor-not-allowed opacity-50", not setting.active )
                                                                    ]
                                                                ]
                                                                [ div [ class "relative w-4 h-4 mr-2 flex-shrink-0" ]
                                                                    [ input
                                                                        [ type_ "checkbox"
                                                                        , checked setting.targetGI
                                                                        , onCheck (\targetGI -> UpdateStateCarrierSetting state carrier setting.active targetGI)
                                                                        , class "absolute w-0 h-0 opacity-0" -- Hide the actual checkbox
                                                                        , disabled (not setting.active)
                                                                        ]
                                                                        []
                                                                    , div
                                                                        [ class "w-4 h-4 border rounded transition-colors duration-200 flex items-center justify-center"
                                                                        , classList
                                                                            [ ( "bg-blue-600 border-blue-600", setting.targetGI && setting.active )
                                                                            , ( "border-gray-300", not setting.targetGI || not setting.active )
                                                                            ]
                                                                        ]
                                                                        [ if setting.targetGI && setting.active then
                                                                            div [ class "text-white text-xs" ] [ text "✓" ]

                                                                          else
                                                                            text ""
                                                                        ]
                                                                    ]
                                                                , div [ class "flex-grow text-left" ] [ text "GI" ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                            )
                                            settings.carrierContracts
                                    )
                            )
                            settings.stateLicenses
                        )
                    ]
                ]
            ]



-- Helper functions for state/carrier grid


isStateCarrierActive : Settings -> String -> String -> Bool
isStateCarrierActive settings state carrier =
    settings.stateCarrierSettings
        |> List.filter (\s -> s.state == state && s.carrier == carrier)
        |> List.head
        |> Maybe.map .active
        |> Maybe.withDefault True


isStateCarrierTargetGI : Settings -> String -> String -> Bool
isStateCarrierTargetGI settings state carrier =
    settings.stateCarrierSettings
        |> List.filter (\s -> s.state == state && s.carrier == carrier)
        |> List.head
        |> Maybe.map .targetGI
        |> Maybe.withDefault False


hasDefaultSettings : Settings -> Bool
hasDefaultSettings settings =
    List.all
        (\setting -> setting.active && not setting.targetGI)
        settings.stateCarrierSettings


findStateCarrierSetting : Settings -> String -> String -> StateCarrierSetting
findStateCarrierSetting settings state carrier =
    settings.stateCarrierSettings
        |> List.filter (\s -> s.state == state && s.carrier == carrier)
        |> List.head
        |> Maybe.withDefault
            { state = state
            , carrier = carrier
            , active = True
            , targetGI = False
            }


viewStateCarrierCell : StateCarrierSetting -> Html Msg
viewStateCarrierCell setting =
    div [ class "flex flex-col items-center gap-1" ]
        [ label [ class "flex items-center gap-2 cursor-pointer" ]
            [ input
                [ type_ "checkbox"
                , checked setting.active
                , onCheck (\active -> UpdateStateCarrierSetting setting.state setting.carrier active setting.targetGI)
                , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                ]
                []
            , span [ class "text-sm text-gray-600" ] [ text "Active" ]
            ]
        , label [ class "flex items-center gap-2 cursor-pointer" ]
            [ input
                [ type_ "checkbox"
                , checked setting.targetGI
                , onCheck (\targetGI -> UpdateStateCarrierSetting setting.state setting.carrier setting.active targetGI)
                , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                ]
                []
            , span [ class "text-sm text-gray-600" ] [ text "GI" ]
            ]
        ]



-- Encoders and Decoders


settingsDecoder : Decoder SettingsResponse
settingsDecoder =
    let
        _ =
            Debug.log "Running settingsDecoder" ()
    in
    Decode.map2 SettingsResponse
        (Decode.field "orgSettings" settingsObjectDecoder)
        (Decode.field "canEditOrgSettings" Decode.bool)


settingsObjectDecoder : Decoder Settings
settingsObjectDecoder =
    let
        _ =
            Debug.log "Running settingsObjectDecoder" ()

        stateCarrierSettingsDecoder =
            Decode.field "stateCarrierSettings" <|
                Decode.oneOf
                    [ Decode.list stateCarrierSettingDecoder
                    , Decode.null []
                    ]
    in
    Decode.map8 Settings
        (Decode.field "stateLicenses" (Decode.list Decode.string))
        (Decode.field "carrierContracts" (Decode.list Decode.string))
        stateCarrierSettingsDecoder
        (Decode.field "allowAgentSettings" Decode.bool)
        (Decode.field "emailSendBirthday" Decode.bool)
        (Decode.field "emailSendPolicyAnniversary" Decode.bool)
        (Decode.field "emailSendAep" Decode.bool)
        (Decode.field "smartSendEnabled" Decode.bool)


stateCarrierSettingDecoder : Decoder StateCarrierSetting
stateCarrierSettingDecoder =
    Decode.map4 StateCarrierSetting
        (Decode.field "state" Decode.string)
        (Decode.field "carrier" Decode.string)
        (Decode.field "active" Decode.bool)
        (Decode.field "targetGI" Decode.bool)


recommendationsDecoder : Decoder (List StateCarrierSetting)
recommendationsDecoder =
    let
        _ =
            Debug.log "Running recommendationsDecoder" ()
    in
    Decode.list
        (Decode.map4 StateCarrierSetting
            (Decode.field "state" Decode.string)
            (Decode.field "carrier" Decode.string)
            (Decode.field "active" Decode.bool)
            (Decode.field "targetGI" Decode.bool)
        )


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none


tab : String -> Bool -> Bool -> msg -> Html msg
tab label isActive isDisabled msg =
    button
        [ class "px-3 py-2 font-medium text-sm rounded-md -mb-px"
        , classList
            [ ( "text-indigo-600 border-indigo-500 border-b-2", isActive )
            , ( "text-gray-500 hover:text-gray-700 hover:border-gray-300 border-transparent border-b-2"
              , not isActive && not isDisabled
              )
            , ( "text-gray-400 cursor-not-allowed", isDisabled )
            ]
        , onClick msg
        , disabled isDisabled
        ]
        [ text label ]

================
File: src/Signup.elm
================
module Signup exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onBlur, onInput, onSubmit)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import Svg exposing (path, svg)
import Svg.Attributes exposing (d, fill, stroke, strokeLinecap, strokeLinejoin, strokeWidth, viewBox)
import Url



-- MODEL


type alias Model =
    { organizationName : String
    , adminFirstName : String
    , adminLastName : String
    , adminEmail : String
    , error : Maybe String
    , isSubmitting : Bool
    , submitted : Bool
    , orgNameStatus : OrgNameStatus
    , emailStatus : EmailStatus
    }


type OrgNameStatus
    = NotChecked
    | Checking
    | Valid
    | Invalid String


type EmailStatus
    = EmailNotChecked
    | EmailChecking
    | EmailValid
    | EmailInvalid String


type Msg
    = UpdateOrganizationName String
    | CheckOrganizationName
    | GotOrgNameResponse (Result Http.Error OrgNameResponse)
    | UpdateAdminFirstName String
    | UpdateAdminLastName String
    | UpdateAdminEmail String
    | CheckAdminEmail
    | GotEmailResponse (Result Http.Error EmailResponse)
    | SubmitForm
    | GotSignupResponse (Result Http.Error SignupResponse)


type alias SignupResponse =
    { success : Bool
    , message : String
    }


type alias OrgNameResponse =
    { available : Bool
    , message : String
    }


type alias EmailResponse =
    { available : Bool
    , message : String
    }


init : ( Model, Cmd Msg )
init =
    ( { organizationName = ""
      , adminFirstName = ""
      , adminLastName = ""
      , adminEmail = ""
      , error = Nothing
      , isSubmitting = False
      , submitted = False
      , orgNameStatus = NotChecked
      , emailStatus = EmailNotChecked
      }
    , Cmd.none
    )



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateOrganizationName value ->
            ( { model
                | organizationName = value
                , orgNameStatus = NotChecked -- Clear status when typing
              }
            , Cmd.none
            )

        CheckOrganizationName ->
            if String.length model.organizationName >= 1 then
                ( { model | orgNameStatus = Checking }
                  -- Show loading state
                , checkOrgName model.organizationName
                )

            else
                ( { model | orgNameStatus = NotChecked }
                , Cmd.none
                )

        GotOrgNameResponse (Ok response) ->
            ( { model
                | orgNameStatus =
                    if response.available then
                        Valid

                    else
                        Invalid response.message
              }
            , Cmd.none
            )

        GotOrgNameResponse (Err _) ->
            ( { model
                | orgNameStatus = Invalid "Failed to check organization name"
              }
            , Cmd.none
            )

        UpdateAdminFirstName value ->
            ( { model | adminFirstName = value }, Cmd.none )

        UpdateAdminLastName value ->
            ( { model | adminLastName = value }, Cmd.none )

        UpdateAdminEmail value ->
            ( { model
                | adminEmail = value
                , emailStatus = EmailNotChecked
              }
            , Cmd.none
            )

        CheckAdminEmail ->
            if String.length model.adminEmail >= 1 then
                ( { model | emailStatus = EmailChecking }
                , checkEmail model.adminEmail
                )

            else
                ( { model | emailStatus = EmailNotChecked }
                , Cmd.none
                )

        GotEmailResponse result ->
            case result of
                Ok response ->
                    ( { model
                        | emailStatus =
                            if response.available then
                                EmailValid

                            else
                                EmailInvalid response.message
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model
                        | emailStatus = EmailInvalid "Failed to check email availability"
                      }
                    , Cmd.none
                    )

        SubmitForm ->
            if isFormValid model then
                ( { model | isSubmitting = True }
                , submitForm model
                )

            else
                ( { model | error = Just "Please fill out all fields and ensure email and organization name are valid" }
                , Cmd.none
                )

        GotSignupResponse (Ok response) ->
            if response.success then
                ( { model
                    | isSubmitting = False
                    , submitted = True
                    , error = Nothing
                  }
                , Cmd.none
                )

            else
                ( { model
                    | error = Just response.message
                    , isSubmitting = False
                  }
                , Cmd.none
                )

        GotSignupResponse (Err _) ->
            ( { model
                | error = Just "Failed to create organization. Please try again."
                , isSubmitting = False
              }
            , Cmd.none
            )


validateForm : Model -> Bool
validateForm model =
    not (String.isEmpty model.organizationName)
        && not (String.isEmpty model.adminFirstName)
        && not (String.isEmpty model.adminLastName)
        && not (String.isEmpty model.adminEmail)


submitForm : Model -> Cmd Msg
submitForm model =
    Http.post
        { url = "/api/organizations/signup"
        , body =
            Http.jsonBody
                (Encode.object
                    [ ( "organizationName", Encode.string model.organizationName )
                    , ( "adminFirstName", Encode.string model.adminFirstName )
                    , ( "adminLastName", Encode.string model.adminLastName )
                    , ( "adminEmail", Encode.string model.adminEmail )
                    ]
                )
        , expect =
            Http.expectJson GotSignupResponse
                (Decode.map2 SignupResponse
                    (Decode.field "success" Decode.bool)
                    (Decode.field "message" Decode.string)
                )
        }



-- Add this function to check organization name


checkOrgName : String -> Cmd Msg
checkOrgName name =
    Http.get
        { url = "/api/organizations/check-name/" ++ Url.percentEncode name
        , expect =
            Http.expectJson GotOrgNameResponse
                (Decode.map2 OrgNameResponse
                    (Decode.field "available" Decode.bool)
                    (Decode.field "message" Decode.string)
                )
        }



-- Add this function to check email


checkEmail : String -> Cmd Msg
checkEmail email =
    Http.get
        { url = "/api/organizations/check-email/" ++ Url.percentEncode email
        , expect = Http.expectJson GotEmailResponse emailResponseDecoder
        }


emailResponseDecoder : Decode.Decoder EmailResponse
emailResponseDecoder =
    Decode.map2 EmailResponse
        (Decode.field "available" Decode.bool)
        (Decode.field "message" Decode.string)



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Create Organization"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8" ]
            [ div [ class "sm:mx-auto sm:w-full sm:max-w-md" ]
                [ h2 [ class "mt-6 text-center text-3xl font-extrabold text-gray-900" ]
                    [ text "Create your organization" ]
                ]
            , div [ class "mt-8 sm:mx-auto sm:w-full sm:max-w-md" ]
                [ div [ class "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10" ]
                    [ if model.submitted then
                        viewSuccess

                      else
                        viewForm model
                    ]
                ]
            ]
        ]
    }


viewSuccess : Html Msg
viewSuccess =
    div [ class "text-center" ]
        [ div [ class "mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100" ]
            [ -- Checkmark icon
              svg
                [ Svg.Attributes.class "h-6 w-6 text-green-600"
                , fill "none"
                , viewBox "0 0 24 24"
                , stroke "currentColor"
                ]
                [ path
                    [ strokeLinecap "round"
                    , strokeLinejoin "round"
                    , strokeWidth "2"
                    , d "M5 13l4 4L19 7"
                    ]
                    []
                ]
            ]
        , h3 [ class "mt-3 text-lg font-medium text-gray-900" ]
            [ text "Check your email" ]
        , p [ class "mt-2 text-sm text-gray-500" ]
            [ text "We've sent you a magic link to verify your account and complete the setup." ]
        ]


viewForm : Model -> Html Msg
viewForm model =
    Html.form [ onSubmit SubmitForm, class "space-y-6" ]
        [ -- Admin Email with validation
          div []
            [ label [ for "admin-email", class "block text-sm font-medium text-gray-700" ]
                [ text "Admin Email" ]
            , div [ class "mt-1" ]
                [ input
                    [ type_ "email"
                    , id "admin-email"
                    , value model.adminEmail
                    , onInput UpdateAdminEmail
                    , onBlur CheckAdminEmail
                    , class "appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
                    ]
                    []
                , viewEmailStatus model.emailStatus
                ]
            ]
        , -- Organization Name with validation
          div []
            [ label [ for "organization-name", class "block text-sm font-medium text-gray-700" ]
                [ text "Organization Name" ]
            , div [ class "mt-1" ]
                [ input
                    [ type_ "text"
                    , id "organization-name"
                    , value model.organizationName
                    , onInput UpdateOrganizationName
                    , onBlur CheckOrganizationName
                    , class "appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
                    ]
                    []
                , viewOrgNameStatus model.orgNameStatus
                ]
            ]
        , -- Admin First Name
          div []
            [ label [ for "admin-first-name", class "block text-sm font-medium text-gray-700" ]
                [ text "Admin First Name" ]
            , div [ class "mt-1" ]
                [ input
                    [ type_ "text"
                    , id "admin-first-name"
                    , value model.adminFirstName
                    , onInput UpdateAdminFirstName
                    , class "appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
                    ]
                    []
                ]
            ]
        , -- Admin Last Name
          div []
            [ label [ for "admin-last-name", class "block text-sm font-medium text-gray-700" ]
                [ text "Admin Last Name" ]
            , div [ class "mt-1" ]
                [ input
                    [ type_ "text"
                    , id "admin-last-name"
                    , value model.adminLastName
                    , onInput UpdateAdminLastName
                    , class "appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
                    ]
                    []
                ]
            ]
        , -- Error Message
          case model.error of
            Just error ->
                div [ class "text-red-600 text-sm" ]
                    [ text error ]

            Nothing ->
                text ""
        , -- Submit Button
          div []
            [ button
                [ type_ "submit"
                , class (submitButtonClass model)
                , disabled (not (isFormValid model) || model.isSubmitting)
                ]
                [ if model.isSubmitting then
                    text "Creating Organization..."

                  else
                    text "Create Organization"
                ]
            ]
        ]


viewOrgNameStatus : OrgNameStatus -> Html Msg
viewOrgNameStatus status =
    div [ class "mt-1 transition-all duration-200" ]
        [ case status of
            NotChecked ->
                text ""

            Checking ->
                div [ class "text-blue-600 text-sm flex items-center" ]
                    [ -- Loading spinner
                      div [ class "animate-spin h-4 w-4 mr-2 border-2 border-blue-600 border-t-transparent rounded-full" ] []
                    , text "Checking availability..."
                    ]

            Valid ->
                div [ class "text-green-600 text-sm flex items-center" ]
                    [ -- Checkmark icon
                      svg
                        [ Svg.Attributes.class "h-4 w-4 mr-1"
                        , fill "none"
                        , viewBox "0 0 24 24"
                        , stroke "currentColor"
                        ]
                        [ path
                            [ strokeLinecap "round"
                            , strokeLinejoin "round"
                            , strokeWidth "2"
                            , d "M5 13l4 4L19 7"
                            ]
                            []
                        ]
                    , text "Organization name is available"
                    ]

            Invalid message ->
                div [ class "text-red-600 text-sm flex items-center" ]
                    [ -- X icon
                      svg
                        [ Svg.Attributes.class "h-4 w-4 mr-1"
                        , fill "none"
                        , viewBox "0 0 24 24"
                        , stroke "currentColor"
                        ]
                        [ path
                            [ strokeLinecap "round"
                            , strokeLinejoin "round"
                            , strokeWidth "2"
                            , d "M6 18L18 6M6 6l12 12"
                            ]
                            []
                        ]
                    , text message
                    ]
        ]


viewEmailStatus : EmailStatus -> Html Msg
viewEmailStatus status =
    div [ class "mt-1 transition-all duration-200" ]
        [ case status of
            EmailNotChecked ->
                text ""

            EmailChecking ->
                div [ class "text-blue-600 text-sm flex items-center" ]
                    [ div [ class "animate-spin h-4 w-4 mr-2 border-2 border-blue-600 border-t-transparent rounded-full" ] []
                    , text "Checking availability..."
                    ]

            EmailValid ->
                div [ class "text-green-600 text-sm flex items-center" ]
                    [ -- Checkmark icon
                      svg
                        [ Svg.Attributes.class "h-4 w-4 mr-1"
                        , fill "none"
                        , viewBox "0 0 24 24"
                        , stroke "currentColor"
                        ]
                        [ path
                            [ strokeLinecap "round"
                            , strokeLinejoin "round"
                            , strokeWidth "2"
                            , d "M5 13l4 4L19 7"
                            ]
                            []
                        ]
                    , text "Email is available"
                    ]

            EmailInvalid message ->
                div [ class "text-red-600 text-sm flex items-center" ]
                    [ -- X icon
                      svg
                        [ Svg.Attributes.class "h-4 w-4 mr-1"
                        , fill "none"
                        , viewBox "0 0 24 24"
                        , stroke "currentColor"
                        ]
                        [ path
                            [ strokeLinecap "round"
                            , strokeLinejoin "round"
                            , strokeWidth "2"
                            , d "M6 18L18 6M6 6l12 12"
                            ]
                            []
                        ]
                    , text message
                    ]
        ]


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none



-- Add this helper function


isFormValid : Model -> Bool
isFormValid model =
    let
        isEmailValid =
            String.contains "@" model.adminEmail
                && String.contains "." model.adminEmail
                && model.emailStatus
                == EmailValid

        isOrgValid =
            String.length model.organizationName
                > 0
                && model.orgNameStatus
                == Valid

        areNamesValid =
            String.length model.adminFirstName
                > 0
                && String.length model.adminLastName
                > 0
    in
    isEmailValid && isOrgValid && areNamesValid



-- Add helper function for submit button classes


submitButtonClass : Model -> String
submitButtonClass model =
    "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium "
        ++ (if isFormValid model then
                "text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"

            else
                "text-white bg-purple-300 cursor-not-allowed"
           )

================
File: src/StateRegions.elm
================
module StateRegions exposing (Region(..), allRegions, getRegionStates, regionToString, stringToRegion)


type Region
    = WestCoast
    | EastCoast
    | South
    | Midwest


allRegions : List Region
allRegions =
    [ WestCoast, EastCoast, South, Midwest ]


regionToString : Region -> String
regionToString region =
    case region of
        WestCoast ->
            "West Coast"

        EastCoast ->
            "East Coast"

        South ->
            "South"

        Midwest ->
            "Midwest"


stringToRegion : String -> Maybe Region
stringToRegion str =
    case str of
        "west" ->
            Just WestCoast

        "east" ->
            Just EastCoast

        "south" ->
            Just South

        "midwest" ->
            Just Midwest

        _ ->
            Nothing


getRegionStates : Region -> List String
getRegionStates region =
    case region of
        WestCoast ->
            [ "CA", "OR", "WA", "AK", "HI" ]

        EastCoast ->
            [ "ME", "NH", "VT", "MA", "RI", "CT", "NY", "NJ", "PA", "DE", "MD", "DC" ]

        South ->
            [ "VA", "NC", "SC", "GA", "FL", "AL", "MS", "LA", "AR", "TN", "KY", "WV", "TX", "OK" ]

        Midwest ->
            [ "OH", "MI", "IN", "IL", "WI", "MN", "IA", "MO", "ND", "SD", "NE", "KS", "MT", "WY", "CO", "ID", "NV", "NM", "AZ", "UT" ]

================
File: src/TempLanding.elm
================
module TempLanding exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick)


type alias Model =
    {}


type Msg
    = NavigateTo String


init : () -> ( Model, Cmd Msg )
init _ =
    ( {}, Cmd.none )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NavigateTo _ ->
            ( model, Cmd.none )


view : Model -> Browser.Document Msg
view model =
    { title = "Welcome"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex flex-col justify-center" ]
            [ div [ class "text-center space-y-8" ]
                [ h1 [ class "text-4xl font-bold text-gray-900" ]
                    [ text "Welcome! You're logged in!" ]
                , div [ class "flex justify-center space-x-4" ]
                    [ button
                        [ class "inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        , onClick (NavigateTo "/dashboard")
                        ]
                        [ text "Go to Dashboard" ]
                    , button
                        [ class "inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        , onClick (NavigateTo "/settings")
                        ]
                        [ text "Go to Settings" ]
                    ]
                ]
            ]
        ]
    }


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/VerifyOrganization.elm
================
module VerifyOrganization exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser exposing (Document)
import Browser.Navigation as Nav
import Debug
import Html exposing (Html, button, div, h2, input, label, li, p, span, text, ul)
import Html.Attributes exposing (class, type_, value)
import Html.Events exposing (onClick, onInput)
import Http
import Json.Decode as Decode exposing (Decoder, field, int, list, string)
import Json.Encode as Encode


type SetupStep
    = PlanSelection
    | Payment
    | Complete


type alias SubscriptionTier =
    { id : String
    , name : String
    , price : String
    , agentLimit : Int
    , contactLimit : Int
    , features : List String
    }


type alias Model =
    { session : Maybe String
    , orgSlug : String
    , currentStep : SetupStep
    , selectedPlan : Maybe String
    , error : Maybe String
    , tiers : List SubscriptionTier
    , isLoading : Bool
    , key : Nav.Key
    }


type Msg
    = NextStep
    | SelectPlan String
    | SubmitPayment
    | CompleteSetup
    | GotTiers (Result Http.Error (List SubscriptionTier))
    | SubscriptionSaved (Result Http.Error ())
    | NavigateToTempLanding


init : String -> String -> Nav.Key -> ( Model, Cmd Msg )
init orgSlug session key =
    let
        _ =
            Debug.log "Initializing VerifyOrganization"
                { orgSlug = orgSlug
                , session = session
                }
    in
    ( { session = Just session
      , orgSlug = orgSlug
      , currentStep = PlanSelection
      , selectedPlan = Nothing
      , error = Nothing
      , tiers = []
      , isLoading = True
      , key = key
      }
    , fetchSubscriptionTiers
    )


fetchSubscriptionTiers : Cmd Msg
fetchSubscriptionTiers =
    Http.get
        { url = "/api/organizations/subscription-tiers"
        , expect = Http.expectJson GotTiers subscriptionTiersDecoder
        }


saveSubscription : String -> String -> Cmd Msg
saveSubscription orgSlug tierId =
    let
        _ =
            Debug.log "Making subscription request"
                { url = "/api/organizations/" ++ orgSlug ++ "/subscription"
                , tierId = tierId
                }
    in
    Http.post
        { url = "/api/organizations/" ++ orgSlug ++ "/subscription"
        , body = Http.jsonBody (encodeSubscriptionUpdate tierId)
        , expect = Http.expectWhatever SubscriptionSaved
        }


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    let
        _ =
            Debug.log "VerifyOrganization update" msg
    in
    case msg of
        SubscriptionSaved result ->
            case result of
                Ok _ ->
                    ( model
                    , Nav.pushUrl model.key "/settings/setup"
                    )

                Err _ ->
                    ( { model | error = Just "Failed to update subscription" }
                    , Cmd.none
                    )

        NextStep ->
            case model.currentStep of
                PlanSelection ->
                    case model.selectedPlan of
                        Just planId ->
                            ( { model | currentStep = Payment }
                            , saveSubscription model.orgSlug planId
                            )

                        Nothing ->
                            ( { model | error = Just "Please select a plan" }
                            , Cmd.none
                            )

                Payment ->
                    ( { model | currentStep = Complete }
                    , Nav.pushUrl model.key "/templanding"
                    )

                Complete ->
                    ( model
                    , Nav.pushUrl model.key "/templanding"
                    )

        SelectPlan plan ->
            ( { model | selectedPlan = Just plan }, Cmd.none )

        GotTiers result ->
            case result of
                Ok tiers ->
                    let
                        _ =
                            Debug.log "Got tiers" tiers
                    in
                    ( { model | tiers = tiers, isLoading = False }
                    , Cmd.none
                    )

                Err error ->
                    let
                        _ =
                            Debug.log "Failed to load tiers" error
                    in
                    ( { model | error = Just "Failed to load subscription tiers", isLoading = False }
                    , Cmd.none
                    )

        _ ->
            ( model, Cmd.none )


view : Model -> Document Msg
view model =
    { title = "Organization Setup"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8" ]
            [ div [ class "mt-8 sm:mx-auto sm:w-full sm:max-w-md" ]
                [ div [ class "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10" ]
                    [ viewStep model ]
                ]
            ]
        ]
    }


viewStep : Model -> Html Msg
viewStep model =
    case model.currentStep of
        PlanSelection ->
            if model.isLoading then
                viewLoading

            else
                viewPlanSelection model

        Payment ->
            div []
                [ h2 [ class "text-2xl font-bold text-gray-900 mb-6" ]
                    [ text "Payment details" ]
                , div [ class "mt-4" ]
                    [ button
                        [ class "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        , onClick NextStep
                        ]
                        [ text "Complete setup" ]
                    ]
                ]

        Complete ->
            div [ class "text-center" ]
                [ div [ class "rounded-full h-12 w-12 bg-green-100 flex items-center justify-center mx-auto" ]
                    [ span [ class "text-green-600 text-xl" ] [ text "✓" ] ]
                , h2 [ class "mt-4 text-2xl font-bold text-gray-900" ]
                    [ text "Setup complete!" ]
                , p [ class "mt-2 text-gray-600" ]
                    [ text "You're all set to start using your organization." ]
                ]


viewLoading : Html Msg
viewLoading =
    div [ class "text-center" ]
        [ div [ class "animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading subscription tiers..." ]
        ]


viewPlanSelection : Model -> Html Msg
viewPlanSelection model =
    div []
        [ h2 [ class "text-2xl font-bold text-gray-900 mb-6" ]
            [ text "Choose your plan" ]
        , div [ class "space-y-6" ]
            (List.map
                (\tier ->
                    viewPlanOption
                        tier.id
                        tier.name
                        tier.price
                        tier.features
                        tier.agentLimit
                        tier.contactLimit
                        model.selectedPlan
                )
                model.tiers
            )
        , if model.error /= Nothing then
            div [ class "mt-4 text-red-600" ]
                [ text (Maybe.withDefault "" model.error) ]

          else
            text ""
        , button
            [ class "mt-6 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            , onClick NextStep
            ]
            [ text "Continue to payment" ]
        ]


viewPlanOption : String -> String -> String -> List String -> Int -> Int -> Maybe String -> Html Msg
viewPlanOption id name price features agentLimit contactLimit selectedPlan =
    div
        [ class
            ("p-6 border rounded-lg cursor-pointer transition-all "
                ++ (if Just id == selectedPlan then
                        "border-blue-500 ring-2 ring-blue-500 bg-blue-50"

                    else
                        "border-gray-300 hover:border-blue-500 hover:shadow-md"
                   )
            )
        , onClick (SelectPlan id)
        ]
        [ div [ class "flex justify-between items-start" ]
            [ div [ class "space-y-4 flex-grow" ]
                [ div []
                    [ h2 [ class "text-xl font-semibold text-gray-900" ] [ text name ]
                    , p [ class "text-2xl font-bold text-gray-900 mt-2" ] [ text price ]
                    ]
                , div [ class "space-y-2" ]
                    [ div [ class "flex items-center text-gray-600" ]
                        [ text ("Up to " ++ String.fromInt agentLimit ++ " agents") ]
                    , div [ class "flex items-center text-gray-600" ]
                        [ text ("Up to " ++ String.fromInt contactLimit ++ " contacts") ]
                    ]
                , div [ class "mt-4" ]
                    [ p [ class "text-sm font-medium text-gray-900 mb-2" ] [ text "Features:" ]
                    , ul [ class "space-y-2" ]
                        (List.map
                            (\feature ->
                                li [ class "flex items-center text-sm text-gray-600" ]
                                    [ span [ class "text-green-500 mr-2" ] [ text "✓" ]
                                    , text feature
                                    ]
                            )
                            features
                        )
                    ]
                ]
            , if Just id == selectedPlan then
                div [ class "h-6 w-6 text-blue-600" ] [ text "✓" ]

              else
                div [] []
            ]
        ]


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none


subscriptionTiersDecoder : Decoder (List SubscriptionTier)
subscriptionTiersDecoder =
    let
        _ =
            Debug.log "Decoding subscription tiers" ()
    in
    field "tiers"
        (list
            (Decode.map6 SubscriptionTier
                (field "id" string)
                (field "name" string)
                (field "price" string)
                (field "agentLimit" int)
                (field "contactLimit" int)
                (field "features" (list string))
            )
        )


encodeSubscriptionUpdate : String -> Encode.Value
encodeSubscriptionUpdate tierId =
    Encode.object
        [ ( "tierId", Encode.string tierId )
        ]

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import elmPlugin from 'vite-plugin-elm'
import path from 'path'

export default defineConfig({
  plugins: [elmPlugin()],
  css: {
    postcss: {
      plugins: [
        (await import('tailwindcss')).default,
        (await import('autoprefixer')).default,
      ],
    },
  },
  resolve: {
    extensions: ['.ts', '.js', '.elm']
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        secure: false,
        configure: (proxy, _options) => {
          proxy.on('error', (err) => {
            console.log('proxy error', err);
          });
          proxy.on('proxyReq', (proxyReq) => {
            console.log('Sending Request:', proxyReq.method, proxyReq.path);
          });
          proxy.on('proxyRes', (proxyRes) => {
            console.log('Received Response:', proxyRes.statusCode);
          });
        }
      }
    }
  },
  build: {
    outDir: '../dist',
    emptyOutDir: true,
    assetsDir: 'assets',
    rollupOptions: {
      input: {
        main: path.resolve(__dirname, 'index.html')
      }
    }
  }
})
