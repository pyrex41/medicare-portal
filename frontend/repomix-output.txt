This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*.elm, **/*.ts
- Files matching these patterns are excluded: node_modules/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  Components/
    AccountStatusBanner.elm
    LimitBanner.elm
    ProgressIndicator.elm
    SetupLayout.elm
  Onboarding/
    Steps/
      AddAgents.elm
      CompanyDetails.elm
      EnterpriseForm.elm
      LicensingSettings.elm
      Payment.elm
      PlanSelection.elm
      UserDetails.elm
    Onboarding.elm
  Accept.elm
  AddAgent.elm
  AgeCalc.elm
  BirthdayRules.elm
  Calculator.elm
  CarrierNaic.elm
  ChangePlan.elm
  ChoosePlan.elm
  Compare.elm
  Contact.elm
  Contacts.elm
  Dashboard.elm
  Decline.elm
  Eligibility.elm
  EmailScheduler.elm
  Home.elm
  Login.elm
  Logout.elm
  Main.elm
  main.ts
  Ports.elm
  Profile.elm
  Quote.elm
  QuoteBirthdayRules.elm
  Schedule.elm
  Settings.elm
  Signup.elm
  StateRegions.elm
  Subscription.elm
  TempLanding.elm
  vite-env.d.ts
  Walkthrough.elm
vite.config.ts

================================================================
Files
================================================================

================
File: src/Components/AccountStatusBanner.elm
================
module Components.AccountStatusBanner exposing (AccountStatusDetails, view)

import Html exposing (Html, a, button, div, h3, p, span, text)
import Html.Attributes exposing (attribute, class, href)
import Html.Events exposing (onClick)
import Json.Decode as Decode exposing (Decoder, int, string)
import Json.Decode.Pipeline as Pipeline
import Svg exposing (path, svg)
import Svg.Attributes as SvgAttr exposing (clipRule, d, fill, fillRule, viewBox)



-- Account status types


type alias AccountStatus =
    String


type alias AccountStatusDetails =
    { status : AccountStatus
    , message : String
    , organizationId : Int
    , organizationName : String
    , organizationSlug : String
    , subscriptionTier : String
    , subscriptionStatus : String
    , agentLimit : Int
    , contactLimit : Int
    , currentAgentCount : Int
    , currentContactCount : Int
    , billingCycleEnd : Maybe String
    , paymentFailureCount : Int
    }



-- Decoder for account status details


accountStatusDetailsDecoder : Decoder AccountStatusDetails
accountStatusDetailsDecoder =
    Decode.succeed AccountStatusDetails
        |> Pipeline.required "status" string
        |> Pipeline.required "message" string
        |> Pipeline.required "organizationId" int
        |> Pipeline.required "organizationName" string
        |> Pipeline.required "organizationSlug" string
        |> Pipeline.required "subscriptionTier" string
        |> Pipeline.required "subscriptionStatus" string
        |> Pipeline.required "agentLimit" int
        |> Pipeline.required "contactLimit" int
        |> Pipeline.required "currentAgentCount" int
        |> Pipeline.required "currentContactCount" int
        |> Pipeline.optional "billingCycleEnd" (Decode.nullable string) Nothing
        |> Pipeline.required "paymentFailureCount" int



-- Function to determine banner color class based on status


getBannerColorClass : AccountStatus -> String
getBannerColorClass status =
    case status of
        "warning" ->
            "bg-yellow-50 border-yellow-200 text-yellow-800"

        "error" ->
            "bg-red-50 border-red-200 text-red-800"

        "success" ->
            "bg-green-50 border-green-200 text-green-800"

        "info" ->
            "bg-blue-50 border-blue-200 text-blue-800"

        _ ->
            "bg-gray-50 border-gray-200 text-gray-800"



-- Function to determine icon color class based on status


getIconColorClass : AccountStatus -> String
getIconColorClass status =
    case status of
        "warning" ->
            "text-yellow-600"

        "error" ->
            "text-red-600"

        "success" ->
            "text-green-600"

        "info" ->
            "text-blue-600"

        _ ->
            "text-gray-600"



-- Function to determine button color class based on status


getButtonColorClass : AccountStatus -> String
getButtonColorClass status =
    case status of
        "warning" ->
            "bg-yellow-100 hover:bg-yellow-200 text-yellow-700"

        "error" ->
            "bg-red-100 hover:bg-red-200 text-red-700"

        "success" ->
            "bg-green-100 hover:bg-green-200 text-green-700"

        "info" ->
            "bg-blue-100 hover:bg-blue-200 text-blue-700"

        _ ->
            "bg-gray-100 hover:bg-gray-200 text-gray-700"



-- Main view function for the account status banner


view : Maybe AccountStatusDetails -> msg -> Html msg
view maybeStatus closeMsg =
    case maybeStatus of
        Just status ->
            div
                [ class ("p-4 mb-4 border rounded-lg flex items-start justify-between " ++ getBannerColorClass status.status)
                , attribute "role" "alert"
                ]
                [ div [ class "flex items-start" ]
                    [ div [ class "flex-shrink-0" ]
                        [ div [ class ("p-1 rounded-full mr-3 " ++ getIconColorClass status.status) ]
                            [ svg
                                [ SvgAttr.class "w-5 h-5"
                                , SvgAttr.fill "currentColor"
                                , SvgAttr.viewBox "0 0 20 20"
                                ]
                                [ path
                                    [ SvgAttr.fillRule "evenodd"
                                    , SvgAttr.d "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
                                    , SvgAttr.clipRule "evenodd"
                                    ]
                                    []
                                ]
                            ]
                        ]
                    , div []
                        [ div [ class "font-medium" ] [ text (getStatusTitle status.status) ]
                        , p [ class "text-sm" ] [ text status.message ]
                        , viewLimitsInfo status
                        ]
                    ]
                , button
                    [ class ("p-1.5 rounded-lg " ++ getButtonColorClass status.status)
                    , onClick closeMsg
                    ]
                    [ svg
                        [ SvgAttr.class "w-4 h-4"
                        , SvgAttr.fill "currentColor"
                        , SvgAttr.viewBox "0 0 20 20"
                        ]
                        [ path
                            [ SvgAttr.fillRule "evenodd"
                            , SvgAttr.d "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            , SvgAttr.clipRule "evenodd"
                            ]
                            []
                        ]
                    ]
                ]

        Nothing ->
            div [] []



-- Helper function to display resource limits information


viewLimitsInfo : AccountStatusDetails -> Html msg
viewLimitsInfo status =
    if status.currentAgentCount >= status.agentLimit || status.currentContactCount >= status.contactLimit then
        div [ class "mt-2 text-sm" ]
            [ if status.currentAgentCount >= status.agentLimit then
                div [ class "mb-1" ]
                    [ text ("Agents: " ++ String.fromInt status.currentAgentCount ++ "/" ++ String.fromInt status.agentLimit ++ " ")
                    , a [ href "/change-plan", class "underline" ] [ text "Upgrade" ]
                    ]

              else
                text ""
            , if status.currentContactCount >= status.contactLimit then
                div []
                    [ text ("Contacts: " ++ String.fromInt status.currentContactCount ++ "/" ++ String.fromInt status.contactLimit ++ " ")
                    , a [ href "/change-plan", class "underline" ] [ text "Upgrade" ]
                    ]

              else
                text ""
            ]

    else
        text ""



-- Helper function to get a human-readable status title


getStatusTitle : AccountStatus -> String
getStatusTitle status =
    case status of
        "warning" ->
            "Warning"

        "error" ->
            "Error"

        "success" ->
            "Success"

        "info" ->
            "Information"

        "limit_reached" ->
            "Resource Limit Reached"

        "payment_failed" ->
            "Payment Failed"

        "subscription_expiring" ->
            "Subscription Expiring"

        _ ->
            "Notice"

================
File: src/Components/LimitBanner.elm
================
module Components.LimitBanner exposing (LimitWarning(..), Model, Msg, init, update, view, viewLimitBanner)

import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick)
import Http
import Json.Decode as Decode exposing (Decoder, int, string)
import Json.Decode.Pipeline as Pipeline
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, viewBox)


type LimitWarning
    = AgentLimit Int Int -- currentCount, maxAllowed
    | ContactLimit Int Int -- currentCount, maxAllowed
    | TrialEnding String -- date when trial ends
    | CustomWarning String String -- title, message


type alias Model =
    { warning : Maybe LimitWarning
    , limits : Maybe LimitInfo
    , error : Maybe String
    }


type alias LimitInfo =
    { tierId : String
    , tierName : String
    , agentLimit : Int
    , contactLimit : Int
    }


type Msg
    = GotLimits (Result Http.Error LimitInfo)
    | CloseBanner


init : ( Model, Cmd Msg )
init =
    ( { warning = Nothing
      , limits = Nothing
      , error = Nothing
      }
    , fetchLimits GotLimits
    )


fetchLimits : (Result Http.Error LimitInfo -> msg) -> Cmd msg
fetchLimits toMsg =
    Http.request
        { method = "GET"
        , url = "/api/organizations/my-subscription"
        , headers = []
        , body = Http.emptyBody
        , expect = Http.expectJson toMsg limitInfoDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


limitInfoDecoder : Decoder LimitInfo
limitInfoDecoder =
    Decode.succeed LimitInfo
        |> Pipeline.required "tierId" string
        |> Pipeline.required "tierName" string
        |> Pipeline.required "agentLimit" int
        |> Pipeline.required "contactLimit" int


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotLimits (Ok limitInfo) ->
            ( { model | limits = Just limitInfo }, Cmd.none )

        GotLimits (Err error) ->
            ( { model | error = Just (httpErrorToString error) }, Cmd.none )

        CloseBanner ->
            ( { model | warning = Nothing }, Cmd.none )


httpErrorToString : Http.Error -> String
httpErrorToString error =
    case error of
        Http.BadUrl url ->
            "Bad URL: " ++ url

        Http.Timeout ->
            "Request timed out"

        Http.NetworkError ->
            "Network error"

        Http.BadStatus statusCode ->
            "Bad status: " ++ String.fromInt statusCode

        Http.BadBody message ->
            "Bad body: " ++ message


view : Model -> Html Msg
view model =
    case model.warning of
        Nothing ->
            text ""

        Just warning ->
            viewLimitBanner warning CloseBanner


viewLimitBanner : LimitWarning -> msg -> Html msg
viewLimitBanner warning closeMsg =
    let
        ( title, message, upgradeText ) =
            case warning of
                AgentLimit current max ->
                    ( "Notice"
                    , "Your account has " ++ String.fromInt current ++ " agents, but your plan only allows for " ++ String.fromInt max ++ ". Please remove some agents or upgrade your plan."
                    , "Upgrade"
                    )

                ContactLimit current max ->
                    ( "Notice"
                    , "Your account has " ++ String.fromInt current ++ " contacts, but your plan only allows for " ++ String.fromInt max ++ ". Please upgrade your plan to add more contacts."
                    , "Upgrade"
                    )

                TrialEnding date ->
                    ( "Trial Ending Soon"
                    , "Your trial will end on " ++ date ++ ". Please upgrade your plan to continue using all features."
                    , "Upgrade"
                    )

                CustomWarning customTitle customMessage ->
                    ( customTitle
                    , customMessage
                    , "Upgrade"
                    )
    in
    div [ class "bg-amber-50 border-l-4 border-amber-400 p-4 mb-6" ]
        [ div [ class "flex justify-between" ]
            [ div [ class "flex" ]
                [ div [ class "flex-shrink-0" ]
                    [ div [ class "h-5 w-5 text-amber-400" ]
                        [ svg [ viewBox "0 0 20 20", fill "currentColor" ]
                            [ path [ fillRule "evenodd", d "M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z", clipRule "evenodd" ] []
                            ]
                        ]
                    ]
                , div [ class "ml-3" ]
                    [ p [ class "text-sm text-amber-700 font-medium" ]
                        [ text title ]
                    , p [ class "text-sm text-amber-700 mt-1" ]
                        [ text message ]
                    ]
                ]
            , div [ class "flex items-center" ]
                [ a [ href "/change-plan", class "mr-4 text-sm font-medium text-amber-700 underline hover:text-amber-600" ]
                    [ text upgradeText ]
                , button
                    [ class "rounded-md text-amber-500 hover:bg-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500"
                    , onClick closeMsg
                    ]
                    [ span [ class "sr-only" ] [ text "Dismiss" ]
                    , div [ class "h-5 w-5" ]
                        [ svg [ viewBox "0 0 20 20", fill "currentColor" ]
                            [ path [ fillRule "evenodd", d "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z", clipRule "evenodd" ] []
                            ]
                        ]
                    ]
                ]
            ]
        ]

================
File: src/Components/ProgressIndicator.elm
================
module Components.ProgressIndicator exposing (Step, view)

import Html exposing (..)
import Html.Attributes exposing (..)


type alias Step =
    { icon : String
    , title : String
    , description : String
    , isCompleted : Bool
    , isActive : Bool
    }


view : List Step -> Html msg
view steps =
    div [ class "fixed left-0 top-0 bottom-0 w-[280px] bg-white border-r border-[#eaecf0] overflow-y-auto" ]
        [ div [ class "flex flex-col h-full px-8 py-8" ]
            [ -- Logo
              div [ class "mb-14" ]
                [ div [ class "flex items-center" ]
                    [ a
                        [ href "/"
                        , class "cursor-pointer"
                        ]
                        [ img
                            [ src "/images/medicare-max-logo.png"
                            , class "h-8 w-auto"
                            , alt "Medicare Max logo"
                            ]
                            []
                        ]
                    ]
                ]

            -- Steps
            , div [ class "flex-1" ]
                [ div [ class "space-y-7" ] (List.map viewStep steps)
                ]

            -- Help email
            , div [ class "text-sm text-[#667085] flex items-center mt-8" ]
                [ span [ class "mr-2" ] [ text "✉️" ]
                , text "help@medicaremax.com"
                ]
            ]
        ]


viewStep : Step -> Html msg
viewStep step =
    div
        [ class "flex items-start"
        , classList [ ( "opacity-60", not step.isActive && not step.isCompleted ) ]
        ]
        [ div
            [ class "shrink-0 w-8 h-8 rounded-full flex items-center justify-center mr-3 transition-all duration-300"
            , classList
                [ ( "bg-[#03045e] text-white", step.isActive )
                , ( "bg-[#03045e]/90 text-white", step.isCompleted )
                , ( "bg-[#f9fafb] text-[#667085] border border-[#eaecf0]", not step.isActive && not step.isCompleted )
                ]
            ]
            [ span [ class "text-base" ] [ text step.icon ]
            ]
        , div [ class "flex-1" ]
            [ h3
                [ class "text-sm font-medium transition-colors duration-300"
                , classList
                    [ ( "text-[#101828]", step.isActive )
                    , ( "text-[#101828]/90", step.isCompleted )
                    , ( "text-[#667085]", not step.isActive && not step.isCompleted )
                    ]
                ]
                [ text step.title ]
            , p [ class "text-sm text-[#667085] mt-1 leading-relaxed" ]
                [ text step.description ]
            ]
        ]

================
File: src/Components/SetupLayout.elm
================
module Components.SetupLayout exposing (SetupStep(..), view)

import Components.ProgressIndicator as ProgressIndicator
import Html exposing (..)
import Html.Attributes exposing (class, style)


type SetupStep
    = PlanSelection
    | OrganizationSetup
    | AgentSetup


type alias StepInfo =
    { step : SetupStep
    , icon : String
    , title : String
    , description : String
    }


view : SetupStep -> Bool -> Int -> List (Html msg) -> Html msg
view currentStep isBasicPlan stepNumber content =
    div [ class "min-h-screen bg-gray-50 flex" ]
        [ viewProgressIndicator currentStep isBasicPlan stepNumber
        , div [ class "flex-1 ml-[280px] pb-24" ]
            [ div [ class "max-w-3xl mx-auto py-6 px-4 sm:px-6 lg:px-8" ]
                content
            ]
        ]


viewProgressIndicator : SetupStep -> Bool -> Int -> Html msg
viewProgressIndicator currentStep isBasicPlan stepNumber =
    let
        basicSteps =
            [ { step = PlanSelection
              , icon = "1"
              , title = "Choose Plan"
              , description = "Select your subscription"
              }
            , { step = OrganizationSetup
              , icon = "2"
              , title = "Personal Details"
              , description = "Enter your information"
              }
            , { step = OrganizationSetup
              , icon = "3"
              , title = "Company Details"
              , description = "Agency information"
              }
            , { step = OrganizationSetup
              , icon = "4"
              , title = "Licensing Settings"
              , description = "States and carriers"
              }
            , { step = OrganizationSetup
              , icon = "5"
              , title = "Payment"
              , description = "Complete setup"
              }
            ]

        multiAgentSteps =
            [ { step = PlanSelection
              , icon = "1"
              , title = "Choose Plan"
              , description = "Select your subscription"
              }
            , { step = OrganizationSetup
              , icon = "2"
              , title = "Personal Details"
              , description = "Enter your information"
              }
            , { step = OrganizationSetup
              , icon = "3"
              , title = "Company Details"
              , description = "Agency information"
              }
            , { step = OrganizationSetup
              , icon = "4"
              , title = "Licensing Settings"
              , description = "States and carriers"
              }
            , { step = AgentSetup
              , icon = "5"
              , title = "Add Team Members"
              , description = "Invite your team"
              }
            , { step = OrganizationSetup
              , icon = "6"
              , title = "Payment"
              , description = "Complete setup"
              }
            ]

        steps =
            if isBasicPlan then
                basicSteps

            else
                multiAgentSteps

        makeStep index info =
            { icon = info.icon
            , title = info.title
            , description = info.description
            , isCompleted = isStepComplete currentStep info.step index stepNumber
            , isActive = info.step == currentStep && index == stepNumber
            }

        -- Calculate progress percentage for the progress bar
        totalSteps =
            List.length steps

        currentStepIndex =
            case currentStep of
                PlanSelection ->
                    0

                OrganizationSetup ->
                    stepNumber

                AgentSetup ->
                    stepNumber

        progressPercentage =
            String.fromInt (min 100 (ceiling (toFloat (currentStepIndex * 100) / toFloat (totalSteps - 1))))

        progressBar =
            div [ class "px-8 mt-4" ]
                [ div [ class "h-1 w-full bg-gray-200 rounded overflow-hidden" ]
                    [ div
                        [ class "h-full bg-[#03045e] transition-all duration-300"
                        , style "width" (progressPercentage ++ "%")
                        ]
                        []
                    ]
                , div [ class "mt-2 text-xs text-gray-500 flex justify-between" ]
                    [ span [] [ text "Setup Progress" ]
                    , span [] [ text (progressPercentage ++ "%") ]
                    ]
                ]
    in
    div []
        [ ProgressIndicator.view (List.indexedMap makeStep steps)
        , progressBar
        ]


isStepComplete : SetupStep -> SetupStep -> Int -> Int -> Bool
isStepComplete currentStep step stepIndex currentStepNumber =
    case ( currentStep, step ) of
        ( PlanSelection, _ ) ->
            -- When on plan selection, no steps are completed
            False

        ( OrganizationSetup, PlanSelection ) ->
            -- When on org settings, plan selection is completed
            True

        ( OrganizationSetup, OrganizationSetup ) ->
            -- For org setup steps, complete those before the current one
            stepIndex < currentStepNumber

        ( OrganizationSetup, _ ) ->
            -- Other steps aren't completed yet
            False

        ( AgentSetup, AgentSetup ) ->
            -- The current step isn't completed
            False

        ( AgentSetup, _ ) ->
            -- When on agent setup, all previous steps are completed
            True

================
File: src/Onboarding/Steps/AddAgents.elm
================
module Onboarding.Steps.AddAgents exposing
    ( Model
    , Msg
    , OutMsg(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, viewBox)
import Time
import Url



-- MODEL


type alias Model =
    { agents : List Agent
    , newAgent : NewAgentForm
    , isLoading : Bool
    , error : Maybe String
    , key : Nav.Key
    , orgSlug : String
    , showAddForm : Bool
    , pendingSave : Maybe String
    , emailStatus : EmailStatus
    , isOnboarding : Bool
    }


type alias Agent =
    { id : String
    , firstName : String
    , lastName : String
    , email : String
    , phone : String
    , isAdmin : Bool
    , isAgent : Bool
    }


type alias NewAgentForm =
    { firstName : String
    , lastName : String
    , email : String
    , phone : String
    , isAdmin : Bool
    , isAgent : Bool
    }


type EmailStatus
    = NotChecked
    | Checking
    | Valid
    | Invalid String


init : Nav.Key -> String -> Bool -> ( Model, Cmd Msg )
init key orgSlug isOnboarding =
    ( { agents = []
      , newAgent =
            { firstName = ""
            , lastName = ""
            , email = ""
            , phone = ""
            , isAdmin = False
            , isAgent = True
            }
      , isLoading = not isOnboarding -- Only set loading true if not in onboarding
      , error = Nothing
      , key = key
      , orgSlug = orgSlug
      , showAddForm = isOnboarding -- Auto-show the add form in onboarding
      , pendingSave = Nothing
      , emailStatus = NotChecked
      , isOnboarding = isOnboarding
      }
    , if isOnboarding then
        -- Skip fetching agents during onboarding
        Cmd.none

      else
        -- Fetch existing agents when not in onboarding
        fetchAgents orgSlug
    )



-- UPDATE


type Msg
    = UpdateFirstName String
    | UpdateLastName String
    | UpdateEmail String
    | UpdatePhone String
    | UpdateAdminCheckbox Bool
    | UpdateAgentCheckbox Bool
    | AddAgent
    | SaveAgent
    | CancelAddAgent
    | NextStepClicked
    | GotAgents (Result Http.Error (List Agent))
    | AgentSaved (Result Http.Error ())
    | CheckAgentEmail
    | GotEmailResponse (Result Http.Error EmailResponse)
    | NoOp


type OutMsg
    = NoOutMsg
    | NextStep
    | ShowError String


type alias EmailResponse =
    { available : Bool
    , message : String
    }


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        UpdateFirstName value ->
            ( { model | newAgent = updateNewAgentField model.newAgent "firstName" value }
            , Cmd.none
            , NoOutMsg
            )

        UpdateLastName value ->
            ( { model | newAgent = updateNewAgentField model.newAgent "lastName" value }
            , Cmd.none
            , NoOutMsg
            )

        UpdateEmail value ->
            ( { model | newAgent = updateNewAgentField model.newAgent "email" value, emailStatus = NotChecked }
            , Cmd.none
            , NoOutMsg
            )

        UpdatePhone value ->
            ( { model | newAgent = updateNewAgentField model.newAgent "phone" value }
            , Cmd.none
            , NoOutMsg
            )

        UpdateAdminCheckbox value ->
            let
                -- Ensure at least one role is selected
                newIsAgent =
                    if not value then
                        True
                        -- If admin is being unchecked, ensure agent is checked

                    else
                        model.newAgent.isAgent

                updatedNewAgent =
                    { firstName = model.newAgent.firstName
                    , lastName = model.newAgent.lastName
                    , email = model.newAgent.email
                    , phone = model.newAgent.phone
                    , isAdmin = value
                    , isAgent = newIsAgent
                    }
            in
            ( { model | newAgent = updatedNewAgent }
            , Cmd.none
            , NoOutMsg
            )

        UpdateAgentCheckbox value ->
            let
                -- Ensure at least one role is selected
                newIsAdmin =
                    if not value then
                        True
                        -- If agent is being unchecked, ensure admin is checked

                    else
                        model.newAgent.isAdmin

                updatedNewAgent =
                    { firstName = model.newAgent.firstName
                    , lastName = model.newAgent.lastName
                    , email = model.newAgent.email
                    , phone = model.newAgent.phone
                    , isAgent = value
                    , isAdmin = newIsAdmin
                    }
            in
            ( { model | newAgent = updatedNewAgent }
            , Cmd.none
            , NoOutMsg
            )

        AddAgent ->
            ( { model | showAddForm = True }
            , Cmd.none
            , NoOutMsg
            )

        SaveAgent ->
            if isFormValid model then
                ( { model | isLoading = True }
                , saveAgent model.orgSlug model.newAgent
                , NoOutMsg
                )

            else
                ( { model | error = Just "Please fill out all required fields and ensure email is valid" }
                , Cmd.none
                , ShowError "Please fill out all required fields and ensure email is valid"
                )

        CancelAddAgent ->
            ( { model | showAddForm = False }
            , Cmd.none
            , NoOutMsg
            )

        NextStepClicked ->
            ( model
            , Cmd.none
            , NextStep
            )

        GotAgents result ->
            case result of
                Ok agents ->
                    ( { model | agents = agents, isLoading = False }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to load agents"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to load agents"
                    )

        AgentSaved result ->
            case result of
                Ok _ ->
                    ( { model
                        | isLoading = False
                        , showAddForm = False
                        , newAgent =
                            { firstName = ""
                            , lastName = ""
                            , email = ""
                            , phone = ""
                            , isAdmin = False
                            , isAgent = True
                            }
                        , emailStatus = NotChecked
                      }
                    , fetchAgents model.orgSlug
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to save agent"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to save agent"
                    )

        CheckAgentEmail ->
            if String.isEmpty (String.trim model.newAgent.email) then
                ( { model | emailStatus = NotChecked }
                , Cmd.none
                , NoOutMsg
                )

            else if model.emailStatus == Checking then
                ( model, Cmd.none, NoOutMsg )

            else
                ( { model | emailStatus = Checking }
                , checkAgentEmail model.orgSlug model.newAgent.email
                , NoOutMsg
                )

        GotEmailResponse result ->
            case result of
                Ok response ->
                    ( { model
                        | emailStatus =
                            if response.available then
                                Valid

                            else
                                Invalid response.message
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | emailStatus = Invalid "Failed to check email availability"
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

        NoOp ->
            ( model, Cmd.none, NoOutMsg )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Add Team Members" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Invite agents to join your organization" ]
            ]
        , if model.isLoading then
            viewLoading

          else
            div [ class "space-y-6" ]
                [ if model.error /= Nothing then
                    div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , viewAgentsList model
                , viewAddAgentSection model
                , div [ class "flex justify-end space-x-4 mt-8" ]
                    [ button
                        [ class "px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        , onClick NextStepClicked
                        ]
                        [ text "Continue" ]
                    ]
                ]
        ]


viewLoading : Html msg
viewLoading =
    div [ class "text-center py-12" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading..." ]
        ]


viewAgentsList : Model -> Html Msg
viewAgentsList model =
    if model.isOnboarding && List.isEmpty model.agents then
        -- In onboarding with no agents, show a more appropriate message
        div [ class "bg-gray-50 p-6 rounded-lg text-center" ]
            [ p [ class "text-gray-500" ]
                [ text "Add team members who will have access to your Medicare Max portal." ]
            ]

    else if List.isEmpty model.agents then
        div [ class "bg-gray-50 p-6 rounded-lg text-center" ]
            [ p [ class "text-gray-500" ]
                [ text "No agents added yet. Add your first agent below." ]
            ]

    else
        div [ class "bg-white shadow rounded-lg overflow-hidden" ]
            [ div [ class "px-6 py-4 border-b border-gray-200" ]
                [ h2 [ class "text-lg font-medium text-gray-900" ]
                    [ text "Team Members" ]
                ]
            , div [ class "divide-y divide-gray-200" ]
                (List.map viewAgentItem model.agents)
            ]


viewAgentItem : Agent -> Html Msg
viewAgentItem agent =
    div [ class "px-6 py-4" ]
        [ div [ class "flex items-center justify-between" ]
            [ div [ class "flex items-center" ]
                [ div [ class "ml-4" ]
                    [ div [ class "text-sm font-medium text-gray-900" ]
                        [ text (agent.firstName ++ " " ++ agent.lastName) ]
                    , div [ class "text-sm text-gray-500" ]
                        [ text agent.email ]
                    ]
                ]
            , div [ class "flex space-x-2" ]
                [ if agent.isAdmin then
                    span [ class "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800" ]
                        [ text "Admin" ]

                  else
                    text ""
                , if agent.isAgent then
                    span [ class "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800" ]
                        [ text "Agent" ]

                  else
                    text ""
                ]
            ]
        ]


viewAddAgentSection : Model -> Html Msg
viewAddAgentSection model =
    div [ class "bg-white shadow rounded-lg overflow-hidden" ]
        [ div [ class "px-6 py-4 border-b border-gray-200" ]
            [ h2 [ class "text-lg font-medium text-gray-900" ]
                [ text "Add New Agent" ]
            ]
        , if model.showAddForm then
            div [ class "px-6 py-4" ]
                [ div [ class "space-y-6" ]
                    [ div [ class "grid grid-cols-2 gap-6" ]
                        [ div []
                            [ label [ class "block text-sm font-medium text-gray-700" ]
                                [ text "First Name" ]
                            , input
                                [ type_ "text"
                                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                , value model.newAgent.firstName
                                , onInput UpdateFirstName
                                , placeholder "Enter first name"
                                ]
                                []
                            ]
                        , div []
                            [ label [ class "block text-sm font-medium text-gray-700" ]
                                [ text "Last Name" ]
                            , input
                                [ type_ "text"
                                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                , value model.newAgent.lastName
                                , onInput UpdateLastName
                                , placeholder "Enter last name"
                                ]
                                []
                            ]
                        ]
                    , div [ class "grid grid-cols-2 gap-6" ]
                        [ div []
                            [ label [ class "block text-sm font-medium text-gray-700" ]
                                [ text "Email" ]
                            , input
                                [ type_ "email"
                                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                , value model.newAgent.email
                                , onInput UpdateEmail
                                , onBlur CheckAgentEmail
                                , placeholder "name@example.com"
                                ]
                                []
                            , viewEmailStatus model.emailStatus
                            ]
                        , div []
                            [ label [ class "block text-sm font-medium text-gray-700" ]
                                [ text "Phone" ]
                            , input
                                [ type_ "tel"
                                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                , value model.newAgent.phone
                                , onInput UpdatePhone
                                , placeholder "(555) 555-5555"
                                ]
                                []
                            ]
                        ]
                    , div []
                        [ label [ class "block text-sm font-medium text-gray-700 mb-2" ]
                            [ text "Role (at least one required)" ]
                        , div [ class "flex items-center space-x-6" ]
                            [ label [ class "inline-flex items-center" ]
                                [ input
                                    [ type_ "checkbox"
                                    , class "rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                    , checked model.newAgent.isAdmin
                                    , onClick (UpdateAdminCheckbox (not model.newAgent.isAdmin))
                                    ]
                                    []
                                , span [ class "ml-2 text-sm text-gray-700" ]
                                    [ text "Admin" ]
                                ]
                            , label [ class "inline-flex items-center" ]
                                [ input
                                    [ type_ "checkbox"
                                    , class "rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                    , checked model.newAgent.isAgent
                                    , onClick (UpdateAgentCheckbox (not model.newAgent.isAgent))
                                    ]
                                    []
                                , span [ class "ml-2 text-sm text-gray-700" ]
                                    [ text "Agent" ]
                                ]
                            ]
                        ]
                    , div [ class "flex justify-end space-x-4 mt-6" ]
                        [ button
                            [ class "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                            , onClick CancelAddAgent
                            ]
                            [ text "Cancel" ]
                        , button
                            [ class "px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                            , onClick SaveAgent
                            , disabled (not (isFormValid model))
                            ]
                            [ text "Add Agent" ]
                        ]
                    ]
                ]

          else
            div [ class "px-6 py-4 flex justify-center" ]
                [ button
                    [ class "inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
                    , onClick AddAgent
                    ]
                    [ span [ class "mr-2" ] [ text "+" ]
                    , text "Add Agent"
                    ]
                ]
        ]


viewEmailStatus : EmailStatus -> Html Msg
viewEmailStatus status =
    div [ class "mt-1 transition-all duration-200" ]
        [ case status of
            NotChecked ->
                text ""

            Checking ->
                div [ class "text-blue-600 text-sm flex items-center" ]
                    [ div [ class "animate-spin h-4 w-4 mr-2 border-2 border-blue-600 border-t-transparent rounded-full" ] []
                    , text "Checking availability..."
                    ]

            Valid ->
                div [ class "text-green-600 text-sm flex items-center" ]
                    [ -- Checkmark icon
                      svg
                        [ class "h-4 w-4 mr-1"
                        , viewBox "0 0 20 20"
                        , fill "currentColor"
                        ]
                        [ path
                            [ fillRule "evenodd"
                            , d "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                            , clipRule "evenodd"
                            ]
                            []
                        ]
                    , text "Email is available"
                    ]

            Invalid message ->
                div [ class "text-red-600 text-sm flex items-center" ]
                    [ -- X icon
                      svg
                        [ class "h-4 w-4 mr-1"
                        , viewBox "0 0 20 20"
                        , fill "currentColor"
                        ]
                        [ path
                            [ fillRule "evenodd"
                            , d "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            , clipRule "evenodd"
                            ]
                            []
                        ]
                    , text message
                    ]
        ]



-- HELPERS


updateNewAgentField : NewAgentForm -> String -> String -> NewAgentForm
updateNewAgentField form field value =
    case field of
        "firstName" ->
            { form | firstName = value }

        "lastName" ->
            { form | lastName = value }

        "email" ->
            { form | email = value }

        "phone" ->
            { form | phone = value }

        _ ->
            form


isFormValid : Model -> Bool
isFormValid model =
    let
        isEmailValid =
            model.emailStatus == Valid

        areNamesValid =
            not (String.isEmpty (String.trim model.newAgent.firstName))
                && not (String.isEmpty (String.trim model.newAgent.lastName))

        isPhoneValid =
            not (String.isEmpty (String.trim model.newAgent.phone))

        hasValidRole =
            model.newAgent.isAdmin || model.newAgent.isAgent
    in
    isEmailValid && areNamesValid && isPhoneValid && hasValidRole



-- API CALLS


fetchAgents : String -> Cmd Msg
fetchAgents orgSlug =
    Http.get
        { url = "/api/organizations/" ++ orgSlug ++ "/agents"
        , expect = Http.expectJson GotAgents (Decode.list agentDecoder)
        }


saveAgent : String -> NewAgentForm -> Cmd Msg
saveAgent orgSlug agent =
    Http.post
        { url = "/api/organizations/" ++ orgSlug ++ "/agents"
        , body = Http.jsonBody (encodeNewAgent agent)
        , expect = Http.expectWhatever AgentSaved
        }


checkAgentEmail : String -> String -> Cmd Msg
checkAgentEmail orgSlug email =
    Http.get
        { url = "/api/organizations/" ++ orgSlug ++ "/check-email/" ++ Url.percentEncode email
        , expect = Http.expectJson GotEmailResponse emailResponseDecoder
        }



-- DECODERS & ENCODERS


agentDecoder : Decode.Decoder Agent
agentDecoder =
    Decode.succeed Agent
        |> Pipeline.required "id" Decode.string
        |> Pipeline.required "firstName" Decode.string
        |> Pipeline.required "lastName" Decode.string
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "phone" Decode.string
        |> Pipeline.required "isAdmin" Decode.bool
        |> Pipeline.required "isAgent" Decode.bool


encodeNewAgent : NewAgentForm -> Encode.Value
encodeNewAgent agent =
    Encode.object
        [ ( "firstName", Encode.string agent.firstName )
        , ( "lastName", Encode.string agent.lastName )
        , ( "email", Encode.string agent.email )
        , ( "phone", Encode.string agent.phone )
        , ( "isAdmin", Encode.bool agent.isAdmin )
        , ( "isAgent", Encode.bool agent.isAgent )
        ]


emailResponseDecoder : Decode.Decoder EmailResponse
emailResponseDecoder =
    Decode.map2 EmailResponse
        (Decode.field "available" Decode.bool)
        (Decode.field "message" Decode.string)



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Onboarding/Steps/CompanyDetails.elm
================
module Onboarding.Steps.CompanyDetails exposing
    ( Model
    , Msg
    , OutMsg(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser.Navigation as Nav
import File exposing (File)
import File.Select as Select
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import Task



-- MODEL


type alias Model =
    { agencyName : String
    , website : String
    , phone : String
    , primaryColor : String
    , secondaryColor : String
    , logo : Maybe String
    , isLoading : Bool
    , error : Maybe String
    , key : Nav.Key
    , orgSlug : String
    , uploadingLogo : Bool
    }


init : Nav.Key -> String -> ( Model, Cmd Msg )
init key orgSlug =
    ( { agencyName = ""
      , website = ""
      , phone = ""
      , primaryColor = "#6B46C1"
      , secondaryColor = "#9F7AEA"
      , logo = Nothing
      , isLoading = False
      , error = Nothing
      , key = key
      , orgSlug = orgSlug
      , uploadingLogo = False
      }
    , Cmd.none
    )



-- UPDATE


type Msg
    = UpdateAgencyName String
    | UpdateWebsite String
    | UpdatePhone String
    | UpdatePrimaryColor String
    | UpdateSecondaryColor String
    | UploadLogo
    | GotLogo File
    | GotLogoUrl String
    | LogoUploaded (Result Http.Error String)
    | NextStepClicked
    | SkipStepClicked
    | GotCompanyDetails (Result Http.Error CompanyDetailsResponse)
    | CompanyDetailsSaved (Result Http.Error ())
    | NoOp


type OutMsg
    = NoOutMsg
    | NextStep
    | ShowError String


type alias CompanyDetailsResponse =
    { agencyName : String
    , website : String
    , phone : String
    , primaryColor : String
    , secondaryColor : String
    , logo : Maybe String
    }


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        UpdateAgencyName value ->
            ( { model | agencyName = value }, Cmd.none, NoOutMsg )

        UpdateWebsite value ->
            ( { model | website = value }, Cmd.none, NoOutMsg )

        UpdatePhone value ->
            ( { model | phone = value }, Cmd.none, NoOutMsg )

        UpdatePrimaryColor value ->
            ( { model | primaryColor = value }, Cmd.none, NoOutMsg )

        UpdateSecondaryColor value ->
            ( { model | secondaryColor = value }, Cmd.none, NoOutMsg )

        UploadLogo ->
            ( model, Select.file [ "image/png", "image/jpeg" ] GotLogo, NoOutMsg )

        GotLogo file ->
            ( { model | uploadingLogo = True }, Task.perform GotLogoUrl (File.toUrl file), NoOutMsg )

        GotLogoUrl url ->
            ( { model | logo = Just url, uploadingLogo = False }, Cmd.none, NoOutMsg )

        LogoUploaded result ->
            case result of
                Ok url ->
                    ( { model | logo = Just url, uploadingLogo = False }, Cmd.none, NoOutMsg )

                Err _ ->
                    ( { model | error = Just "Failed to upload logo", uploadingLogo = False }
                    , Cmd.none
                    , ShowError "Failed to upload logo"
                    )

        NextStepClicked ->
            ( model, Cmd.none, NextStep )

        SkipStepClicked ->
            ( model, Cmd.none, NextStep )

        GotCompanyDetails result ->
            case result of
                Ok response ->
                    ( { model
                        | agencyName = response.agencyName
                        , website = response.website
                        , phone = response.phone
                        , primaryColor = response.primaryColor
                        , secondaryColor = response.secondaryColor
                        , logo = response.logo
                        , isLoading = False
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model | isLoading = False }, Cmd.none, NoOutMsg )

        CompanyDetailsSaved result ->
            case result of
                Ok _ ->
                    ( { model | isLoading = False }
                    , Cmd.none
                    , NextStep
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to save company details"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to save company details"
                    )

        NoOp ->
            ( model, Cmd.none, NoOutMsg )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Company Details" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Tell us about your agency (all fields are optional)" ]
            ]
        , if model.isLoading then
            viewLoading

          else
            div [ class "space-y-8" ]
                [ div [ class "bg-white shadow rounded-lg p-8" ]
                    [ div [ class "space-y-8 max-w-3xl mx-auto" ]
                        [ div [ class "mb-6" ]
                            [ label [ class "block text-sm font-medium text-gray-700 mb-3" ]
                                [ text "Agency Name" ]
                            , input
                                [ type_ "text"
                                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 px-4 py-3"
                                , value model.agencyName
                                , onInput UpdateAgencyName
                                , placeholder "Enter your agency name"
                                ]
                                []
                            ]
                        , div [ class "grid grid-cols-1 md:grid-cols-2 gap-8 mb-6" ]
                            [ div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-3" ]
                                    [ text "Primary Color (Optional)" ]
                                , div [ class "mt-1 flex items-center space-x-4" ]
                                    [ input
                                        [ type_ "color"
                                        , class "h-12 w-12 border border-gray-300 rounded"
                                        , value model.primaryColor
                                        , onInput UpdatePrimaryColor
                                        ]
                                        []
                                    , input
                                        [ type_ "text"
                                        , class "flex-1 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 px-4 py-3"
                                        , value model.primaryColor
                                        , onInput UpdatePrimaryColor
                                        ]
                                        []
                                    ]
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-3" ]
                                    [ text "Secondary Color (Optional)" ]
                                , div [ class "mt-1 flex items-center space-x-4" ]
                                    [ input
                                        [ type_ "color"
                                        , class "h-12 w-12 border border-gray-300 rounded"
                                        , value model.secondaryColor
                                        , onInput UpdateSecondaryColor
                                        ]
                                        []
                                    , input
                                        [ type_ "text"
                                        , class "flex-1 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 px-4 py-3"
                                        , value model.secondaryColor
                                        , onInput UpdateSecondaryColor
                                        ]
                                        []
                                    ]
                                ]
                            ]
                        , div [ class "mb-6" ]
                            [ label [ class "block text-sm font-medium text-gray-700 mb-3" ]
                                [ text "Logo (Optional)" ]
                            , div [ class "mt-1 flex items-center space-x-4" ]
                                [ case model.logo of
                                    Just logoUrl ->
                                        div [ class "flex items-center space-x-6" ]
                                            [ img
                                                [ src logoUrl
                                                , class "h-20 w-20 object-contain border border-gray-200 rounded p-1"
                                                ]
                                                []
                                            , button
                                                [ class "px-5 py-2.5 text-sm text-blue-600 hover:text-blue-800 border border-blue-200 rounded-md"
                                                , onClick UploadLogo
                                                , disabled model.uploadingLogo
                                                ]
                                                [ text "Change Logo" ]
                                            ]

                                    Nothing ->
                                        if model.uploadingLogo then
                                            div [ class "flex items-center space-x-2" ]
                                                [ div [ class "animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-blue-500" ] []
                                                , text "Uploading..."
                                                ]

                                        else
                                            button
                                                [ class "px-5 py-2.5 text-sm text-blue-600 hover:text-blue-800 border border-blue-200 rounded-md"
                                                , onClick UploadLogo
                                                ]
                                                [ text "Upload Logo" ]
                                ]
                            ]
                        ]
                    ]
                , if model.error /= Nothing then
                    div [ class "bg-red-100 border border-red-400 text-red-700 px-6 py-4 rounded" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , div [ class "flex justify-between mt-8" ]
                    [ button
                        [ class "px-6 py-3 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
                        , onClick SkipStepClicked
                        ]
                        [ text "Skip" ]
                    , button
                        [ class "px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        , onClick NextStepClicked
                        ]
                        [ text "Continue" ]
                    ]
                ]
        ]


viewLoading : Html msg
viewLoading =
    div [ class "text-center py-12" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading..." ]
        ]



-- HELPERS


isFormValid : Model -> Bool
isFormValid model =
    -- Agency name is now optional as it will be auto-generated
    True



-- API CALLS


fetchCompanyDetails : String -> Cmd Msg
fetchCompanyDetails orgSlug =
    Http.get
        { url = "/api/organizations/" ++ orgSlug ++ "/company-details"
        , expect = Http.expectJson GotCompanyDetails companyDetailsDecoder
        }


saveCompanyDetails : Model -> Cmd Msg
saveCompanyDetails model =
    Http.post
        { url = "/api/organizations/" ++ model.orgSlug ++ "/company-details"
        , body = Http.jsonBody (encodeCompanyDetails model)
        , expect = Http.expectWhatever CompanyDetailsSaved
        }



-- DECODERS & ENCODERS


companyDetailsDecoder : Decode.Decoder CompanyDetailsResponse
companyDetailsDecoder =
    Decode.map6 CompanyDetailsResponse
        (Decode.field "agencyName" Decode.string)
        (Decode.field "website" Decode.string)
        (Decode.field "phone" Decode.string)
        (Decode.field "primaryColor" Decode.string)
        (Decode.field "secondaryColor" Decode.string)
        (Decode.field "logo" (Decode.nullable Decode.string))


encodeCompanyDetails : Model -> Encode.Value
encodeCompanyDetails model =
    Encode.object
        [ ( "agencyName", Encode.string model.agencyName )
        , ( "website", Encode.string model.website )
        , ( "phone", Encode.string model.phone )
        , ( "primaryColor", Encode.string model.primaryColor )
        , ( "secondaryColor", Encode.string model.secondaryColor )
        , ( "logo", Maybe.withDefault Encode.null (Maybe.map Encode.string model.logo) )
        ]



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Onboarding/Steps/EnterpriseForm.elm
================
module Onboarding.Steps.EnterpriseForm exposing
    ( Model
    , Msg
    , OutMsg(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, viewBox)



-- MODEL


type alias Model =
    { companyName : String
    , contactName : String
    , email : String
    , phone : String
    , displayPhone : String
    , message : String
    , isSubmitting : Bool
    , isSubmitted : Bool
    , error : Maybe String
    , key : Nav.Key
    }


type Msg
    = UpdateCompanyName String
    | UpdateContactName String
    | UpdateEmail String
    | UpdatePhone String
    | UpdateMessage String
    | SubmitForm
    | SubmitSuccess
    | SubmitError String
    | BackToPlans


type OutMsg
    = NoOutMsg
    | BackToPlanSelection
    | ShowError String


init : Nav.Key -> ( Model, Cmd Msg )
init key =
    ( { companyName = ""
      , contactName = ""
      , email = ""
      , phone = ""
      , displayPhone = ""
      , message = ""
      , isSubmitting = False
      , isSubmitted = False
      , error = Nothing
      , key = key
      }
    , Cmd.none
    )



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        UpdateCompanyName value ->
            ( { model | companyName = value }
            , Cmd.none
            , NoOutMsg
            )

        UpdateContactName value ->
            ( { model | contactName = value }
            , Cmd.none
            , NoOutMsg
            )

        UpdateEmail value ->
            ( { model | email = value }
            , Cmd.none
            , NoOutMsg
            )

        UpdatePhone value ->
            let
                digitsOnly =
                    String.filter Char.isDigit value

                updatedPhone =
                    String.left 10 digitsOnly
            in
            ( { model
                | phone = updatedPhone
                , displayPhone = formatPhoneNumber updatedPhone
              }
            , Cmd.none
            , NoOutMsg
            )

        UpdateMessage value ->
            ( { model | message = value }
            , Cmd.none
            , NoOutMsg
            )

        SubmitForm ->
            if isFormValid model then
                ( { model | isSubmitting = True, error = Nothing }
                , submitEnterpriseForm model
                , NoOutMsg
                )

            else
                ( { model | error = Just "Please fill out all required fields" }
                , Cmd.none
                , NoOutMsg
                )

        SubmitSuccess ->
            ( { model | isSubmitted = True, isSubmitting = False }
            , Cmd.none
            , NoOutMsg
            )

        SubmitError errorMsg ->
            ( { model | error = Just errorMsg, isSubmitting = False }
            , Cmd.none
            , NoOutMsg
            )

        BackToPlans ->
            ( model
            , Cmd.none
            , BackToPlanSelection
            )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Enterprise Plan Inquiry" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Please provide your information and we'll contact you about our Enterprise plan options." ]
            ]
        , if model.isSubmitted then
            viewSuccess

          else
            viewForm model
        ]


viewSuccess : Html Msg
viewSuccess =
    div [ class "bg-green-50 border border-green-200 rounded-lg p-8 text-center" ]
        [ div [ class "mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4" ]
            [ -- Checkmark icon
              svg
                [ Svg.Attributes.class "h-6 w-6 text-green-600"
                , Svg.Attributes.viewBox "0 0 20 20"
                , Svg.Attributes.fill "currentColor"
                ]
                [ path
                    [ fillRule "evenodd"
                    , d "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                    , clipRule "evenodd"
                    ]
                    []
                ]
            ]
        , h3 [ class "text-lg font-medium text-gray-900 mb-2" ]
            [ text "Thank you for your interest!" ]
        , p [ class "text-gray-600" ]
            [ text "We've received your inquiry and will contact you soon to discuss our Enterprise plan options." ]
        , div [ class "mt-6" ]
            [ button
                [ class "px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                , onClick BackToPlans
                ]
                [ text "Back to Plans" ]
            ]
        ]


viewForm : Model -> Html Msg
viewForm model =
    let
        isValid =
            isFormValid model
    in
    Html.form [ onSubmit SubmitForm, class "bg-white rounded-lg shadow-sm p-6 space-y-6" ]
        [ -- Form error message
          case model.error of
            Just errorMsg ->
                div [ class "bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4" ]
                    [ text errorMsg ]

            Nothing ->
                text ""
        , -- Company Name
          div []
            [ label [ for "company-name", class "block text-sm font-medium text-gray-700 mb-1" ]
                [ text "Company Name *" ]
            , input
                [ type_ "text"
                , id "company-name"
                , class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                , value model.companyName
                , onInput UpdateCompanyName
                , placeholder "Enter your company name"
                , required True
                ]
                []
            ]
        , -- Contact Name
          div []
            [ label [ for "contact-name", class "block text-sm font-medium text-gray-700 mb-1" ]
                [ text "Contact Name *" ]
            , input
                [ type_ "text"
                , id "contact-name"
                , class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                , value model.contactName
                , onInput UpdateContactName
                , placeholder "Enter your full name"
                , required True
                ]
                []
            ]
        , -- Email
          div []
            [ label [ for "email", class "block text-sm font-medium text-gray-700 mb-1" ]
                [ text "Email *" ]
            , input
                [ type_ "email"
                , id "email"
                , class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                , value model.email
                , onInput UpdateEmail
                , placeholder "Enter your email address"
                , required True
                ]
                []
            , if not (String.isEmpty model.email) && not (isValidEmail model.email) then
                div [ class "text-red-500 text-sm mt-1" ]
                    [ text "Please enter a valid email address" ]

              else
                text ""
            ]
        , -- Phone
          div []
            [ label [ for "phone", class "block text-sm font-medium text-gray-700 mb-1" ]
                [ text "Phone *" ]
            , input
                [ type_ "tel"
                , id "phone"
                , class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                , value model.displayPhone
                , onInput UpdatePhone
                , placeholder "Enter your phone number"
                , required True
                ]
                []
            , if not (String.isEmpty model.phone) && not (isValidPhone model.phone) then
                div [ class "text-red-500 text-sm mt-1" ]
                    [ text "Please enter a valid 10-digit phone number" ]

              else
                text ""
            ]
        , -- Message
          div []
            [ label [ for "message", class "block text-sm font-medium text-gray-700 mb-1" ]
                [ text "Message" ]
            , textarea
                [ id "message"
                , class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                , value model.message
                , onInput UpdateMessage
                , placeholder "Tell us about your needs and requirements"
                , rows 4
                ]
                []
            ]
        , -- Submit button
          div [ class "flex items-center justify-between pt-4" ]
            [ button
                [ type_ "button"
                , class "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50"
                , onClick BackToPlans
                ]
                [ text "Back to Plans" ]
            , button
                [ type_ "submit"
                , class
                    ("px-4 py-2 text-sm font-medium text-white rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 "
                        ++ (if isValid then
                                "bg-blue-600 border border-transparent hover:bg-blue-700 focus:ring-blue-500"

                            else
                                "bg-gray-400 border border-transparent cursor-not-allowed"
                           )
                    )
                , disabled (not isValid || model.isSubmitting)
                ]
                [ if model.isSubmitting then
                    text "Submitting..."

                  else
                    text "Submit Inquiry"
                ]
            ]
        ]



-- HELPERS


isFormValid : Model -> Bool
isFormValid model =
    not (String.isEmpty (String.trim model.companyName))
        && not (String.isEmpty (String.trim model.contactName))
        && not (String.isEmpty (String.trim model.email))
        && isValidEmail model.email
        && not (String.isEmpty model.phone)
        && isValidPhone model.phone


isValidEmail : String -> Bool
isValidEmail email =
    let
        trimmedEmail =
            String.trim email
    in
    not (String.isEmpty trimmedEmail)
        && String.contains "@" trimmedEmail
        && String.contains "." trimmedEmail
        && not (String.startsWith "@" trimmedEmail)
        && not (String.endsWith "@" trimmedEmail)
        && not (String.endsWith "." trimmedEmail)
        && (String.indexes "@" trimmedEmail |> List.length)
        == 1


isValidPhone : String -> Bool
isValidPhone phone =
    let
        -- Remove all non-digit characters
        digits =
            String.filter Char.isDigit phone
    in
    String.length digits == 10


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    let
        digits =
            String.filter Char.isDigit phone
                |> String.left 10

        len =
            String.length digits
    in
    if len == 0 then
        ""

    else if len <= 3 then
        "(" ++ digits

    else if len <= 6 then
        "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

    else
        "("
            ++ String.left 3 digits
            ++ ") "
            ++ String.slice 3 6 digits
            ++ "-"
            ++ String.dropLeft 6 digits



-- API


submitEnterpriseForm : Model -> Cmd Msg
submitEnterpriseForm model =
    let
        body =
            Encode.object
                [ ( "companyName", Encode.string model.companyName )
                , ( "contactName", Encode.string model.contactName )
                , ( "email", Encode.string model.email )
                , ( "phone", Encode.string model.phone )
                , ( "message", Encode.string model.message )
                ]
    in
    Http.post
        { url = "/api/enterprise-inquiry"
        , body = Http.jsonBody body
        , expect = Http.expectJson handleSubmitResponse (Decode.field "success" Decode.bool)
        }


handleSubmitResponse : Result Http.Error Bool -> Msg
handleSubmitResponse result =
    case result of
        Ok True ->
            SubmitSuccess

        Ok False ->
            SubmitError "The server couldn't process your request. Please try again."

        Err httpError ->
            case httpError of
                Http.BadUrl _ ->
                    SubmitError "Invalid URL. Please contact support."

                Http.Timeout ->
                    SubmitError "Request timed out. Please check your connection and try again."

                Http.NetworkError ->
                    SubmitError "Network error. Please check your connection and try again."

                Http.BadStatus statusCode ->
                    SubmitError ("Server error: " ++ String.fromInt statusCode)

                Http.BadBody _ ->
                    SubmitError "Invalid response from server. Please try again."



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Onboarding/Steps/LicensingSettings.elm
================
module Onboarding.Steps.LicensingSettings exposing
    ( Model
    , Msg
    , OutMsg(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode



-- MODEL


type alias Model =
    { stateLicenses : List String
    , carrierContracts : List String
    , useSmartSendForGI : Bool
    , isLoading : Bool
    , error : Maybe String
    , key : Nav.Key
    , orgSlug : String
    , expandedSections : List String
    }


init : Nav.Key -> String -> ( Model, Cmd Msg )
init key orgSlug =
    ( { stateLicenses = []
      , carrierContracts = []
      , useSmartSendForGI = True
      , isLoading = False
      , error = Nothing
      , key = key
      , orgSlug = orgSlug
      , expandedSections = [ "State Licenses", "Carrier Contracts", "Guaranteed Issue Settings" ]
      }
    , Cmd.none
    )



-- UPDATE


type Msg
    = AddStateLicense String
    | RemoveStateLicense String
    | AddCarrierContract String
    | RemoveCarrierContract String
    | ToggleSection String
    | ToggleAllStates Bool
    | ToggleAllCarriers Bool
    | ToggleSmartSendForGI Bool
    | NextStepClicked
    | GotLicensingSettings (Result Http.Error LicensingSettingsResponse)
    | LicensingSettingsSaved (Result Http.Error ())
    | NoOp


type OutMsg
    = NoOutMsg
    | NextStep
    | ShowError String


type alias LicensingSettingsResponse =
    { stateLicenses : List String
    , carrierContracts : List String
    , useSmartSendForGI : Bool
    }


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        AddStateLicense state ->
            let
                newModel =
                    if List.member state model.stateLicenses then
                        model

                    else
                        { model | stateLicenses = state :: model.stateLicenses }
            in
            ( newModel, Cmd.none, NoOutMsg )

        RemoveStateLicense state ->
            let
                newModel =
                    { model | stateLicenses = List.filter (\x -> x /= state) model.stateLicenses }
            in
            ( newModel, Cmd.none, NoOutMsg )

        AddCarrierContract carrier ->
            let
                newModel =
                    if List.member carrier model.carrierContracts then
                        model

                    else
                        { model | carrierContracts = carrier :: model.carrierContracts }
            in
            ( newModel, Cmd.none, NoOutMsg )

        RemoveCarrierContract carrier ->
            let
                newModel =
                    { model | carrierContracts = List.filter (\x -> x /= carrier) model.carrierContracts }
            in
            ( newModel, Cmd.none, NoOutMsg )

        ToggleSection title ->
            let
                newExpandedSections =
                    if List.member title model.expandedSections then
                        List.filter ((/=) title) model.expandedSections

                    else
                        title :: model.expandedSections
            in
            ( { model | expandedSections = newExpandedSections }, Cmd.none, NoOutMsg )

        ToggleAllStates checked ->
            let
                newModel =
                    { model
                        | stateLicenses =
                            if checked then
                                allStates

                            else
                                []
                    }
            in
            ( newModel, Cmd.none, NoOutMsg )

        ToggleAllCarriers checked ->
            let
                newModel =
                    { model
                        | carrierContracts =
                            if checked then
                                allCarriers

                            else
                                []
                    }
            in
            ( newModel, Cmd.none, NoOutMsg )

        ToggleSmartSendForGI useSmartSend ->
            ( { model | useSmartSendForGI = useSmartSend }, Cmd.none, NoOutMsg )

        NextStepClicked ->
            -- Instead of making API calls, just move to the next step
            -- All data will be collected and submitted in the final step
            ( model, Cmd.none, NextStep )

        GotLicensingSettings result ->
            case result of
                Ok response ->
                    ( { model
                        | stateLicenses = response.stateLicenses
                        , carrierContracts = response.carrierContracts
                        , useSmartSendForGI = response.useSmartSendForGI
                        , isLoading = False
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to load licensing settings"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to load licensing settings"
                    )

        LicensingSettingsSaved result ->
            case result of
                Ok _ ->
                    ( { model | isLoading = False }
                    , Cmd.none
                    , NextStep
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to save licensing settings"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to save licensing settings"
                    )

        NoOp ->
            ( model, Cmd.none, NoOutMsg )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Licensing & Carriers" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Configure your state licenses and carrier contracts" ]
            ]
        , div [ class "space-y-6" ]
            [ viewExpandableSection "State Licenses"
                (viewLicensesGrid model)
                model.expandedSections
            , viewExpandableSection "Carrier Contracts"
                (viewCarriersGrid model)
                model.expandedSections
            , viewGISettings model
            , if model.error /= Nothing then
                div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                    [ text (Maybe.withDefault "" model.error) ]

              else
                text ""
            , div [ class "flex justify-center" ]
                [ button
                    [ class "px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    , onClick NextStepClicked
                    , disabled (List.isEmpty model.stateLicenses || List.isEmpty model.carrierContracts)
                    , title
                        (if List.isEmpty model.stateLicenses || List.isEmpty model.carrierContracts then
                            "Please select at least one state license and one carrier contract"

                         else
                            ""
                        )
                    ]
                    [ text "Continue" ]
                ]
            ]
        ]


viewLoading : Html msg
viewLoading =
    div [ class "text-center py-12" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading..." ]
        ]


viewExpandableSection : String -> Html Msg -> List String -> Html Msg
viewExpandableSection title content expandedSections =
    let
        isExpanded =
            List.member title expandedSections
    in
    div [ class "bg-white shadow rounded-lg overflow-hidden" ]
        [ button
            [ class "w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50"
            , onClick (ToggleSection title)
            ]
            [ h2 [ class "text-lg font-medium" ] [ text title ]
            , div
                [ class "transform transition-transform"
                , classList [ ( "rotate-180", isExpanded ) ]
                ]
                [ text "▼" ]
            ]
        , div
            [ class "px-6 pb-6"
            , classList [ ( "hidden", not isExpanded ) ]
            ]
            [ content ]
        ]


viewLicensesGrid : Model -> Html Msg
viewLicensesGrid model =
    div []
        [ div [ class "mb-4 flex items-center" ]
            [ checkbox "Select All States"
                (List.length model.stateLicenses == List.length allStates)
                ToggleAllStates
            ]
        , div [ class "grid grid-cols-5 gap-4" ]
            (List.map
                (\state ->
                    checkbox state
                        (List.member state model.stateLicenses)
                        (\checked ->
                            if checked then
                                AddStateLicense state

                            else
                                RemoveStateLicense state
                        )
                )
                allStates
            )
        ]


viewCarriersGrid : Model -> Html Msg
viewCarriersGrid model =
    div []
        [ div [ class "mb-4 flex items-center" ]
            [ checkbox "Select All Carriers"
                (List.length model.carrierContracts == List.length allCarriers)
                ToggleAllCarriers
            ]
        , div [ class "grid grid-cols-3 gap-4" ]
            (List.map
                (\carrier ->
                    checkbox carrier
                        (List.member carrier model.carrierContracts)
                        (\checked ->
                            if checked then
                                AddCarrierContract carrier

                            else
                                RemoveCarrierContract carrier
                        )
                )
                allCarriers
            )
        ]


viewGISettings : Model -> Html Msg
viewGISettings model =
    div [ class "bg-white shadow rounded-lg overflow-hidden" ]
        [ div [ class "px-6 py-4 border-b border-gray-200" ]
            [ h2 [ class "text-lg font-medium" ] [ text "Guaranteed Issue Settings" ]
            ]
        , div [ class "p-6 space-y-6" ]
            [ div [ class "mb-4 p-4 bg-blue-50 border border-blue-100 rounded-md" ]
                [ div [ class "flex items-start" ]
                    [ div [ class "flex items-center h-5" ]
                        [ input
                            [ type_ "checkbox"
                            , checked model.useSmartSendForGI
                            , onCheck ToggleSmartSendForGI
                            , class "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            ]
                            []
                        ]
                    , div [ class "ml-3 text-sm" ]
                        [ label [ class "font-medium text-gray-700" ]
                            [ text "Use SmartSend for Guaranteed Issue" ]
                        , p [ class "text-gray-500 mt-1" ]
                            [ text "When enabled, SmartSend will automatically identify which carrier-state combinations offer full compensation for Guaranteed Issue (GI) policies." ]
                        ]
                    ]
                ]
            , div [ class "mt-4 p-4 bg-gray-50 rounded-md" ]
                [ h3 [ class "text-lg font-medium text-gray-900 mb-2" ]
                    [ text "How SmartSend Works" ]
                , p [ class "text-gray-600" ]
                    [ text "SmartSend analyzes each state and carrier combination to determine which ones offer full carrier compensation for Guaranteed Issue policies. This helps maximize your commissions while ensuring your quotes are always compliant with the latest state and carrier regulations." ]
                , if model.useSmartSendForGI then
                    div [ class "mt-4 text-sm text-green-600" ]
                        [ div [ class "flex items-center" ]
                            [ span [ class "mr-2 flex-shrink-0" ] [ text "✓" ]
                            , text "SmartSend for GI is enabled. All eligible state-carrier combinations with full compensation will be automatically processed for Guaranteed Issue."
                            ]
                        ]

                  else
                    div [ class "mt-4 text-sm text-gray-600" ]
                        [ div [ class "flex items-center" ]
                            [ span [ class "mr-2 flex-shrink-0" ] [ text "•" ]
                            , text "SmartSend for GI is disabled. You'll need to manually manage GI settings for each state-carrier combination in your Settings after setup."
                            ]
                        ]
                ]
            ]
        ]


checkbox : String -> Bool -> (Bool -> msg) -> Html msg
checkbox labelText isChecked onToggle =
    Html.label [ class "flex items-center space-x-3" ]
        [ input
            [ type_ "checkbox"
            , checked isChecked
            , onCheck onToggle
            , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
            ]
            []
        , span [ class "text-gray-700" ] [ text labelText ]
        ]


th : List (Attribute msg) -> List (Html msg) -> Html msg
th attributes children =
    Html.th attributes children


td : List (Attribute msg) -> List (Html msg) -> Html msg
td attributes children =
    Html.td attributes children



-- HELPERS
-- Remove the findStateCarrierSetting function which is no longer needed
-- findStateCarrierSetting : Model -> String -> String -> StateCarrierSetting
-- findStateCarrierSetting model state carrier =
--     model.stateCarrierSettings
--         |> List.filter (\s -> s.state == state && s.carrier == carrier)
--         |> List.head
--         |> Maybe.withDefault
--             { state = state
--             , carrier = carrier
--             , active = True
--             , targetGI = False
--             }
-- API CALLS


fetchLicensingSettings : String -> Cmd Msg
fetchLicensingSettings orgSlug =
    Http.get
        { url = "/api/organizations/" ++ orgSlug ++ "/licensing-settings"
        , expect = Http.expectJson GotLicensingSettings licensingSettingsDecoder
        }


saveLicensingSettings : Model -> Cmd Msg
saveLicensingSettings model =
    Http.post
        { url = "/api/organizations/" ++ model.orgSlug ++ "/licensing-settings"
        , body = Http.jsonBody (encodeLicensingSettings model)
        , expect = Http.expectWhatever LicensingSettingsSaved
        }



-- DECODERS & ENCODERS


licensingSettingsDecoder : Decode.Decoder LicensingSettingsResponse
licensingSettingsDecoder =
    Decode.succeed LicensingSettingsResponse
        |> Pipeline.required "stateLicenses" (Decode.list Decode.string)
        |> Pipeline.required "carrierContracts" (Decode.list Decode.string)
        |> Pipeline.required "useSmartSendForGI" Decode.bool


encodeLicensingSettings : Model -> Encode.Value
encodeLicensingSettings model =
    Encode.object
        [ ( "stateLicenses", Encode.list Encode.string model.stateLicenses )
        , ( "carrierContracts", Encode.list Encode.string model.carrierContracts )
        , ( "useSmartSendForGI", Encode.bool model.useSmartSendForGI )
        ]



-- CONSTANTS


allStates : List String
allStates =
    [ "AL"
    , "AK"
    , "AZ"
    , "AR"
    , "CA"
    , "CO"
    , "CT"
    , "DE"
    , "FL"
    , "GA"
    , "HI"
    , "ID"
    , "IL"
    , "IN"
    , "IA"
    , "KS"
    , "KY"
    , "LA"
    , "ME"
    , "MD"
    , "MA"
    , "MI"
    , "MN"
    , "MS"
    , "MO"
    , "MT"
    , "NE"
    , "NV"
    , "NH"
    , "NJ"
    , "NM"
    , "NY"
    , "NC"
    , "ND"
    , "OH"
    , "OK"
    , "OR"
    , "PA"
    , "RI"
    , "SC"
    , "SD"
    , "TN"
    , "TX"
    , "UT"
    , "VT"
    , "VA"
    , "WA"
    , "WV"
    , "WI"
    , "WY"
    , "DC"
    ]


allCarriers : List String
allCarriers =
    [ "Aetna"
    , "Humana"
    , "UnitedHealthcare"
    , "Cigna"
    , "Aflac"
    , "Allstate"
    , "Mutual of Omaha"
    , "Ace Chubb"
    ]



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Onboarding/Steps/Payment.elm
================
module Onboarding.Steps.Payment exposing
    ( Model
    , Msg
    , OutMsg(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode



-- MODEL


type alias Model =
    { isLoading : Bool
    , error : Maybe String
    , key : Nav.Key
    , orgSlug : String
    , subscriptionDetails : Maybe SubscriptionDetails
    , processingPayment : Bool
    }


type alias SubscriptionDetails =
    { planName : String
    , planPrice : String
    , extraAgents : Int
    , extraAgentsCost : Int
    , extraContacts : Int
    , extraContactsCost : Int
    , totalPrice : String
    , isTrial : Bool
    , trialEndsAt : Maybe String
    }


init : Nav.Key -> String -> ( Model, Cmd Msg )
init key orgSlug =
    ( { isLoading = False
      , error = Nothing
      , key = key
      , orgSlug = orgSlug
      , subscriptionDetails =
            Just
                { planName = "Your Selected Plan"
                , planPrice = "$29/mo"
                , extraAgents = 0
                , extraAgentsCost = 0
                , extraContacts = 0
                , extraContactsCost = 0
                , totalPrice = "$29/mo"
                , isTrial = True
                , trialEndsAt = Just "30 days after signup"
                }
      , processingPayment = False
      }
    , Cmd.none
    )



-- UPDATE


type Msg
    = CompleteOnboarding
    | ProcessPayment
    | GotSubscriptionDetails (Result Http.Error SubscriptionDetails)
    | PaymentProcessed (Result Http.Error String)
    | OnboardingCompleted (Result Http.Error ())
    | NoOp


type OutMsg
    = NoOutMsg
    | Completed
    | ShowError String
    | NavigateToWalkthrough


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        CompleteOnboarding ->
            ( { model | processingPayment = True }
            , Cmd.none
            , NavigateToWalkthrough
            )

        ProcessPayment ->
            ( { model | processingPayment = True }
            , createStripeCheckoutSession model.orgSlug
            , NoOutMsg
            )

        GotSubscriptionDetails result ->
            case result of
                Ok details ->
                    ( { model
                        | subscriptionDetails = Just details
                        , isLoading = False
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to load subscription details"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to load subscription details"
                    )

        PaymentProcessed result ->
            case result of
                Ok sessionId ->
                    -- Redirect to Stripe checkout
                    ( { model | processingPayment = False }
                    , redirectToStripeCheckout sessionId
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to process payment"
                        , processingPayment = False
                      }
                    , Cmd.none
                    , ShowError "Failed to process payment"
                    )

        OnboardingCompleted result ->
            case result of
                Ok _ ->
                    ( { model | isLoading = False, processingPayment = False }
                    , Cmd.none
                    , Completed
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to complete onboarding"
                        , isLoading = False
                        , processingPayment = False
                      }
                    , Cmd.none
                    , ShowError "Failed to complete onboarding"
                    )

        NoOp ->
            ( model, Cmd.none, NoOutMsg )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Complete Your Account Setup" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "You're almost done! Click 'Continue to Walkthrough' to finish the onboarding process." ]
            ]
        , div [ class "bg-white shadow rounded-lg p-6" ]
            [ div [ class "text-center space-y-6" ]
                [ div [ class "mb-4 text-green-500 text-6xl" ]
                    [ text "✓" ]
                , h2 [ class "text-xl font-medium text-gray-900" ]
                    [ text "All Set!" ]
                , p [ class "text-gray-600" ]
                    [ text "Your account is ready to be created with the details you've provided." ]
                , div [ class "mt-6" ]
                    [ button
                        [ class "px-8 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        , onClick CompleteOnboarding
                        , disabled model.processingPayment
                        ]
                        [ if model.processingPayment then
                            div [ class "flex items-center justify-center" ]
                                [ div [ class "mr-2 animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white" ] []
                                , text "Processing..."
                                ]

                          else
                            text "Continue to Walkthrough"
                        ]
                    ]
                ]
            ]
        , if model.error /= Nothing then
            div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                [ text (Maybe.withDefault "" model.error) ]

          else
            text ""
        ]


viewLoading : Html msg
viewLoading =
    div [ class "text-center py-12" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading..." ]
        ]


viewSubscriptionSummary : Model -> Html Msg
viewSubscriptionSummary model =
    case model.subscriptionDetails of
        Just details ->
            div [ class "bg-white shadow rounded-lg overflow-hidden" ]
                [ div [ class "px-6 py-4 border-b border-gray-200" ]
                    [ h2 [ class "text-lg font-medium text-gray-900" ]
                        [ text "Subscription Summary" ]
                    ]
                , div [ class "px-6 py-4" ]
                    [ div [ class "space-y-4" ]
                        [ div [ class "flex justify-between" ]
                            [ span [ class "text-gray-600" ] [ text "Plan" ]
                            , span [ class "font-medium" ] [ text details.planName ]
                            ]
                        , div [ class "flex justify-between" ]
                            [ span [ class "text-gray-600" ] [ text "Base Price" ]
                            , span [ class "font-medium" ] [ text details.planPrice ]
                            ]
                        , if details.extraAgents > 0 then
                            div [ class "flex justify-between" ]
                                [ span [ class "text-gray-600" ]
                                    [ text ("Extra Agents (" ++ String.fromInt details.extraAgents ++ ")") ]
                                , span [ class "font-medium" ]
                                    [ text ("$" ++ String.fromInt details.extraAgentsCost) ]
                                ]

                          else
                            text ""
                        , if details.extraContacts > 0 then
                            div [ class "flex justify-between" ]
                                [ span [ class "text-gray-600" ]
                                    [ text ("Extra Contacts (" ++ String.fromInt details.extraContacts ++ ")") ]
                                , span [ class "font-medium" ]
                                    [ text ("$" ++ String.fromInt details.extraContactsCost) ]
                                ]

                          else
                            text ""
                        , div [ class "pt-4 border-t border-gray-200 flex justify-between" ]
                            [ span [ class "font-medium text-gray-900" ] [ text "Total" ]
                            , span [ class "font-bold text-gray-900" ] [ text details.totalPrice ]
                            ]
                        ]
                    ]
                , if details.isTrial then
                    div [ class "px-6 py-4 bg-blue-50 border-t border-blue-100" ]
                        [ div [ class "flex items-start" ]
                            [ div [ class "flex-shrink-0 pt-0.5" ]
                                [ span [ class "text-blue-500 text-lg" ] [ text "ℹ" ]
                                ]
                            , div [ class "ml-3" ]
                                [ h3 [ class "text-sm font-medium text-blue-800" ]
                                    [ text "Free Trial" ]
                                , div [ class "mt-2 text-sm text-blue-700" ]
                                    [ p []
                                        [ text
                                            (case details.trialEndsAt of
                                                Just date ->
                                                    "Your free trial will end on " ++ date ++ ". No payment is required today."

                                                Nothing ->
                                                    "You're starting with a free trial. No payment is required today."
                                            )
                                        ]
                                    ]
                                ]
                            ]
                        ]

                  else
                    text ""
                ]

        Nothing ->
            div [ class "bg-gray-100 p-6 rounded-lg text-center" ]
                [ text "No subscription details available" ]



-- API CALLS


fetchSubscriptionDetails : String -> Cmd Msg
fetchSubscriptionDetails orgSlug =
    Http.get
        { url = "/api/organizations/" ++ orgSlug ++ "/subscription-details"
        , expect = Http.expectJson GotSubscriptionDetails subscriptionDetailsDecoder
        }


createStripeCheckoutSession : String -> Cmd Msg
createStripeCheckoutSession orgSlug =
    Http.post
        { url = "/api/organizations/" ++ orgSlug ++ "/create-checkout-session"
        , body = Http.jsonBody (encodeCheckoutRequest orgSlug)
        , expect = Http.expectJson PaymentProcessed Decode.string
        }


redirectToStripeCheckout : String -> Cmd Msg
redirectToStripeCheckout sessionId =
    Nav.load ("/api/stripe/redirect-to-checkout?session_id=" ++ sessionId)


completeOnboarding : String -> Cmd Msg
completeOnboarding orgSlug =
    Http.post
        { url = "/api/organizations/complete-onboarding"
        , body = Http.emptyBody -- The parent component will send the full payload
        , expect = Http.expectWhatever OnboardingCompleted
        }



-- DECODERS & ENCODERS


subscriptionDetailsDecoder : Decode.Decoder SubscriptionDetails
subscriptionDetailsDecoder =
    Decode.succeed SubscriptionDetails
        |> Pipeline.required "planName" Decode.string
        |> Pipeline.required "planPrice" Decode.string
        |> Pipeline.required "extraAgents" Decode.int
        |> Pipeline.required "extraAgentsCost" Decode.int
        |> Pipeline.required "extraContacts" Decode.int
        |> Pipeline.required "extraContactsCost" Decode.int
        |> Pipeline.required "totalPrice" Decode.string
        |> Pipeline.required "isTrial" Decode.bool
        |> Pipeline.required "trialEndsAt" (Decode.nullable Decode.string)


encodeCheckoutRequest : String -> Encode.Value
encodeCheckoutRequest orgSlug =
    Encode.object
        [ ( "orgSlug", Encode.string orgSlug )
        ]



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Onboarding/Steps/PlanSelection.elm
================
module Onboarding.Steps.PlanSelection exposing
    ( Model
    , Msg
    , OutMsg(..)
    , fetchSubscriptionTiers
    , init
    , initWithFetch
    , subscriptions
    , update
    , view
    )

import Basics
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder, field)
import Json.Encode as Encode
import Process
import Task



-- MODEL


type alias SubscriptionTier =
    { id : String
    , name : String
    , price : String
    , agentLimit : Int
    , contactLimit : Int
    , features : List String
    }


type alias Model =
    { selectedPlan : Maybe String
    , extraAgents : Int
    , extraContacts : Int
    , tiers : List SubscriptionTier
    , isLoading : Bool
    , error : Maybe String
    , key : Nav.Key
    , orgSlug : String
    , session : String
    }


type alias SubscriptionResponse =
    { success : Bool
    , message : String
    , orgSlug : Maybe String
    }


init : Nav.Key -> String -> String -> ( Model, Cmd Msg )
init key orgSlug session =
    initWithFetch key orgSlug session True



-- Add a version that allows controlling whether to fetch tiers


initWithFetch : Nav.Key -> String -> String -> Bool -> ( Model, Cmd Msg )
initWithFetch key orgSlug session shouldFetchTiers =
    ( { selectedPlan = Nothing
      , extraAgents = 0
      , extraContacts = 0
      , tiers = []
      , isLoading = shouldFetchTiers
      , error = Nothing
      , key = key
      , orgSlug = orgSlug
      , session = session
      }
    , if shouldFetchTiers then
        Cmd.batch
            [ fetchSubscriptionTiers
            , -- Add a timeout to clear loading state after 5 seconds
              Process.sleep 5000
                |> Task.perform (\_ -> LoadingTimeout)
            ]

      else
        Cmd.none
    )



-- UPDATE


type Msg
    = SelectPlan String
    | SetExtraAgents String
    | SetExtraContacts String
    | GotTiers (Result Http.Error (List SubscriptionTier))
    | SubscriptionSaved (Result Http.Error SubscriptionResponse)
    | NextStepClicked
    | LoadingTimeout
    | NoOp


type OutMsg
    = NoOutMsg
    | SelectedPlan String
    | NextStep
    | ShowError String


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        SelectPlan planId ->
            ( { model | selectedPlan = Just planId }
            , Cmd.none
            , SelectedPlan planId
            )

        SetExtraAgents value ->
            let
                extraAgents =
                    String.toInt value |> Maybe.withDefault 0
            in
            ( { model | extraAgents = extraAgents }
            , Cmd.none
            , NoOutMsg
            )

        SetExtraContacts value ->
            let
                extraContacts =
                    String.toInt value |> Maybe.withDefault 0
            in
            ( { model | extraContacts = extraContacts }
            , Cmd.none
            , NoOutMsg
            )

        GotTiers result ->
            case result of
                Ok tiers ->
                    ( { model | tiers = tiers, isLoading = False }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model | error = Just "Failed to load subscription tiers", isLoading = False }
                    , Cmd.none
                    , ShowError "Failed to load subscription tiers"
                    )

        SubscriptionSaved result ->
            case result of
                Ok response ->
                    case response.orgSlug of
                        Just newOrgSlug ->
                            ( { model | orgSlug = newOrgSlug }
                            , Cmd.none
                            , NextStep
                            )

                        Nothing ->
                            ( model
                            , Cmd.none
                            , NextStep
                            )

                Err _ ->
                    ( { model | error = Just "Failed to save subscription", isLoading = False }
                    , Cmd.none
                    , ShowError "Failed to save subscription"
                    )

        NextStepClicked ->
            case model.selectedPlan of
                Just planId ->
                    if planId == "enterprise" then
                        -- For Enterprise, redirect to the Enterprise form
                        ( model
                        , Cmd.none
                        , SelectedPlan "enterprise"
                        )

                    else
                        -- Instead of saving the subscription now, just proceed to the next step
                        -- We'll save everything at the end of the onboarding flow
                        ( model
                        , Cmd.none
                        , NextStep
                        )

                Nothing ->
                    ( { model | error = Just "Please select a plan" }
                    , Cmd.none
                    , ShowError "Please select a plan"
                    )

        LoadingTimeout ->
            -- If we're still loading after the timeout, clear the loading state
            if model.isLoading then
                ( { model | isLoading = False, error = Just "Could not load subscription tiers. Please try refreshing the page." }
                , Cmd.none
                , ShowError "Could not load subscription tiers. Please try refreshing the page."
                )

            else
                ( model, Cmd.none, NoOutMsg )

        NoOp ->
            ( model, Cmd.none, NoOutMsg )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Choose your plan" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Select a plan that best fits your organization's needs" ]
            ]
        , if model.isLoading then
            viewLoading

          else
            div []
                [ div [ class "grid grid-cols-1 md:grid-cols-3 gap-4" ]
                    (List.map
                        (\tier ->
                            viewPlanOption
                                tier.id
                                tier.name
                                tier.price
                                tier.features
                                tier.agentLimit
                                tier.contactLimit
                                model.selectedPlan
                        )
                        model.tiers
                    )
                , if canAddExtraResources model.selectedPlan then
                    viewExtraResources model

                  else
                    text ""
                , if model.error /= Nothing then
                    div [ class "mt-4 text-red-500" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , div [ class "mt-8 flex justify-center" ]
                    [ button
                        [ class
                            ("px-6 py-3 rounded-lg transition-colors duration-200 "
                                ++ (if model.selectedPlan == Nothing then
                                        "bg-[#2563EB]/50 cursor-not-allowed text-white"

                                    else
                                        "bg-[#2563EB] hover:bg-[#1D4ED8] text-white"
                                   )
                            )
                        , onClick NextStepClicked
                        , disabled (model.selectedPlan == Nothing)
                        ]
                        [ text "Continue" ]
                    ]
                ]
        ]


viewLoading : Html msg
viewLoading =
    div [ class "text-center" ]
        [ div [ class "animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading subscription tiers..." ]
        ]


viewPlanOption : String -> String -> String -> List String -> Int -> Int -> Maybe String -> Html Msg
viewPlanOption id name price features agentLimit contactLimit selectedPlan =
    div
        [ class
            ("p-6 rounded-lg cursor-pointer transition-all "
                ++ (if Just id == selectedPlan then
                        "bg-[#2563EB]/10 ring-2 ring-[#2563EB]"

                    else
                        "bg-gray-50 hover:bg-gray-100"
                   )
            )
        , onClick (SelectPlan id)
        ]
        [ div [ class "space-y-4" ]
            [ div []
                [ h3 [ class "text-xl font-semibold text-gray-900" ] [ text name ]
                , p [ class "text-3xl font-bold text-gray-900 mt-2" ]
                    [ text
                        (if id == "enterprise" then
                            "Contact Us"

                         else
                            price
                        )
                    ]
                ]
            , div [ class "space-y-2 py-4 border-t border-b border-gray-200" ]
                [ if id /= "enterprise" then
                    div [ class "text-gray-600" ]
                        [ text
                            (if id == "pro" then
                                "5+ agent seats"

                             else if agentLimit == -1 then
                                "Unlimited agent seats"

                             else if agentLimit == 1 then
                                "1 agent seat"

                             else
                                "Up to " ++ String.fromInt agentLimit ++ " agent seats"
                            )
                        ]

                  else
                    div [ class "text-gray-600" ]
                        [ text "Custom agent seats" ]
                , if id /= "enterprise" then
                    div [ class "text-gray-600" ]
                        [ text
                            (if id == "pro" then
                                "5,000+ clients"

                             else if contactLimit == -1 then
                                "Unlimited clients"

                             else if contactLimit == 1000 then
                                "1,000 clients"

                             else
                                "Up to " ++ String.fromInt contactLimit ++ " clients"
                            )
                        ]

                  else
                    div [ class "text-gray-600" ]
                        [ text "Unlimited clients" ]
                ]
            , div [ class "mt-4" ]
                [ p [ class "text-sm font-medium text-gray-900 mb-2" ] [ text "Features:" ]
                , ul [ class "space-y-2" ]
                    (List.map
                        (\feature ->
                            li [ class "flex items-center text-sm text-gray-600" ]
                                [ span [ class "text-[#059669] mr-2" ] [ text "✓" ]
                                , text feature
                                ]
                        )
                        features
                    )
                ]
            ]
        ]


viewExtraResources : Model -> Html Msg
viewExtraResources model =
    div [ class "mt-8 p-4 bg-gray-50 rounded-lg border border-gray-200" ]
        [ h3 [ class "text-lg font-semibold text-gray-900 mb-4" ]
            [ text "Additional Resources" ]
        , div [ class "grid grid-cols-1 md:grid-cols-2 gap-6" ]
            [ div [ class "space-y-2" ]
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "Extra Agents" ]
                , p [ class "text-xs text-gray-500" ]
                    [ text "Add more agent seats beyond your plan's included limit ($20/agent seat/month)" ]
                , div [ class "flex items-center" ]
                    [ button
                        [ class "bg-gray-200 px-3 py-1 rounded-l-md hover:bg-gray-300"
                        , onClick (SetExtraAgents (String.fromInt (Basics.max 0 (model.extraAgents - 1))))
                        ]
                        [ text "-" ]
                    , input
                        [ type_ "number"
                        , class "w-16 text-center border-y border-gray-200 py-1"
                        , value (String.fromInt model.extraAgents)
                        , onInput SetExtraAgents
                        ]
                        []
                    , button
                        [ class "bg-gray-200 px-3 py-1 rounded-r-md hover:bg-gray-300"
                        , onClick (SetExtraAgents (String.fromInt (model.extraAgents + 1)))
                        ]
                        [ text "+" ]
                    , span [ class "ml-2 text-sm font-medium" ]
                        [ text ("$" ++ String.fromInt (model.extraAgents * 20) ++ "/mo") ]
                    ]
                ]
            , div [ class "space-y-2" ]
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "Extra Clients" ]
                , p [ class "text-xs text-gray-500" ]
                    [ text "Add more clients beyond your plan's included limit ($50/5,000 clients/month)" ]
                , div [ class "flex items-center" ]
                    [ button
                        [ class "bg-gray-200 px-3 py-1 rounded-l-md hover:bg-gray-300"
                        , onClick (SetExtraContacts (String.fromInt (Basics.max 0 (model.extraContacts - 5000))))
                        ]
                        [ text "-" ]
                    , input
                        [ type_ "number"
                        , class "w-20 text-center border-y border-gray-200 py-1"
                        , value (String.fromInt model.extraContacts)
                        , onInput SetExtraContacts
                        , Html.Attributes.step "5000"
                        ]
                        []
                    , button
                        [ class "bg-gray-200 px-3 py-1 rounded-r-md hover:bg-gray-300"
                        , onClick (SetExtraContacts (String.fromInt (model.extraContacts + 5000)))
                        ]
                        [ text "+" ]
                    , span [ class "ml-2 text-sm font-medium" ]
                        [ text ("$" ++ String.fromInt (model.extraContacts // 5000 * 50) ++ "/mo") ]
                    ]
                ]
            ]
        ]



-- HELPERS


canAddExtraResources : Maybe String -> Bool
canAddExtraResources selectedPlan =
    case selectedPlan of
        Just plan ->
            plan == "pro"

        Nothing ->
            False



-- API CALLS


fetchSubscriptionTiers : Cmd Msg
fetchSubscriptionTiers =
    Http.get
        { url = "/api/organizations/subscription-tiers"
        , expect = Http.expectJson GotTiers subscriptionTiersDecoder
        }


saveSubscription : String -> String -> Int -> Int -> Cmd Msg
saveSubscription orgSlug tierId extraAgents extraContacts =
    -- If orgSlug is empty, use a different endpoint for new organization signup
    if String.isEmpty (String.trim orgSlug) then
        Http.post
            { url = "/api/organizations/signup/subscription"
            , body = Http.jsonBody (encodeSubscriptionUpdate tierId extraAgents extraContacts)
            , expect = Http.expectJson SubscriptionSaved subscriptionResponseDecoder
            }

    else
        Http.post
            { url = "/api/organizations/" ++ orgSlug ++ "/subscription"
            , body = Http.jsonBody (encodeSubscriptionUpdate tierId extraAgents extraContacts)
            , expect = Http.expectJson SubscriptionSaved subscriptionResponseDecoder
            }



-- DECODERS & ENCODERS


subscriptionTiersDecoder : Decoder (List SubscriptionTier)
subscriptionTiersDecoder =
    field "tiers"
        (Decode.list
            (Decode.map6 SubscriptionTier
                (field "id" Decode.string)
                (field "name" Decode.string)
                (field "price" Decode.string)
                (field "agentLimit" Decode.int)
                (field "contactLimit" Decode.int)
                (field "features" (Decode.list Decode.string))
            )
        )


encodeSubscriptionUpdate : String -> Int -> Int -> Encode.Value
encodeSubscriptionUpdate tierId extraAgents extraContacts =
    Encode.object
        [ ( "tierId", Encode.string tierId )
        , ( "extraAgents", Encode.int extraAgents )
        , ( "extraContacts", Encode.int extraContacts )
        ]



-- Add decoder for the subscription response


subscriptionResponseDecoder : Decoder SubscriptionResponse
subscriptionResponseDecoder =
    Decode.map3 SubscriptionResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "message" Decode.string)
        (Decode.maybe (Decode.field "orgSlug" Decode.string))



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Onboarding/Steps/UserDetails.elm
================
module Onboarding.Steps.UserDetails exposing
    ( Model
    , Msg
    , OutMsg(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser.Navigation as Nav
import Char
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import Svg exposing (circle, path, svg)
import Svg.Attributes as SvgAttr exposing (clipRule, cx, cy, d, fill, fillRule, r, stroke, strokeWidth, viewBox)



-- MODEL


type alias Model =
    { firstName : String
    , lastName : String
    , email : String
    , phone : String
    , isLoading : Bool
    , error : Maybe String
    , key : Nav.Key
    , orgSlug : String
    , emailStatus : EmailStatus
    }


type EmailStatus
    = NotChecked
    | Checking
    | Available
    | Unavailable String


init : Nav.Key -> String -> ( Model, Cmd Msg )
init key orgSlug =
    ( { firstName = ""
      , lastName = ""
      , email = ""
      , phone = ""
      , isLoading = False
      , error = Nothing
      , key = key
      , orgSlug = orgSlug
      , emailStatus = NotChecked
      }
    , if String.isEmpty (String.trim orgSlug) then
        -- Don't fetch user details for new users in signup flow
        Cmd.none

      else
        -- Only fetch user details for existing users
        fetchUserDetails orgSlug
    )



-- UPDATE


type Msg
    = UpdateFirstName String
    | UpdateLastName String
    | UpdateEmail String
    | UpdatePhone String
    | NextStepClicked
    | GotUserDetails (Result Http.Error UserDetailsResponse)
    | UserDetailsSaved (Result Http.Error SignupResponse)
    | NoOp
    | EmailBlurred
    | EmailFocused
    | GotEmailCheckResponse (Result Http.Error EmailCheckResponse)


type OutMsg
    = NoOutMsg
    | NextStep
    | ShowError String


type alias UserDetailsResponse =
    { firstName : String
    , lastName : String
    , email : String
    , phone : String
    }


type alias EmailCheckResponse =
    { available : Bool
    , message : String
    }


type alias SignupResponse =
    { success : Bool
    , message : String
    }


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        UpdateFirstName value ->
            ( { model | firstName = value }, Cmd.none, NoOutMsg )

        UpdateLastName value ->
            ( { model | lastName = value }, Cmd.none, NoOutMsg )

        UpdateEmail value ->
            ( { model
                | email = value
                , emailStatus = NotChecked -- Reset status
              }
            , Cmd.none
            , NoOutMsg
            )

        EmailFocused ->
            -- Immediately clear validation state when field gets focus
            ( { model | emailStatus = NotChecked }
            , Cmd.none
            , NoOutMsg
            )

        UpdatePhone value ->
            -- Store only the digits, but display formatted version
            ( { model | phone = String.filter Char.isDigit value }, Cmd.none, NoOutMsg )

        EmailBlurred ->
            if String.isEmpty (String.trim model.email) then
                -- Don't validate empty emails
                ( model, Cmd.none, NoOutMsg )

            else
                -- Always check email validity when field loses focus
                ( { model | emailStatus = Checking }
                , checkEmailAvailability model.email
                , NoOutMsg
                )

        GotEmailCheckResponse result ->
            case result of
                Ok response ->
                    if response.available then
                        ( { model | emailStatus = Available }
                        , Cmd.none
                        , NoOutMsg
                        )

                    else
                        ( { model | emailStatus = Unavailable response.message }
                        , Cmd.none
                        , NoOutMsg
                        )

                Err httpError ->
                    let
                        errorMsg =
                            case httpError of
                                Http.BadBody message ->
                                    "Decoder error: " ++ message

                                Http.BadStatus status ->
                                    "Server error: " ++ String.fromInt status

                                _ ->
                                    "Error checking email availability"
                    in
                    ( { model | emailStatus = Unavailable errorMsg }
                    , Cmd.none
                    , NoOutMsg
                    )

        NextStepClicked ->
            if isFormValid model then
                -- Instead of making API calls, just move to the next step
                -- All data will be collected and submitted in the final step
                ( model, Cmd.none, NextStep )

            else
                ( { model | error = Just "Please fill out all required fields" }
                , Cmd.none
                , ShowError "Please fill out all required fields"
                )

        GotUserDetails result ->
            case result of
                Ok response ->
                    ( { model
                        | firstName = response.firstName
                        , lastName = response.lastName
                        , email = response.email
                        , phone = response.phone
                        , isLoading = False
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to load user details"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to load user details"
                    )

        UserDetailsSaved result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model | isLoading = False }
                        , Cmd.none
                        , NextStep
                        )

                    else
                        ( { model
                            | error = Just response.message
                            , isLoading = False
                          }
                        , Cmd.none
                        , ShowError response.message
                        )

                Err _ ->
                    ( { model
                        | error = Just "Failed to save user details"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to save user details"
                    )

        NoOp ->
            ( model, Cmd.none, NoOutMsg )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Personal Details" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Tell us about yourself" ]
            ]
        , if model.isLoading then
            viewLoading

          else
            div [ class "space-y-6" ]
                [ div [ class "bg-white shadow rounded-lg p-6" ]
                    [ div [ class "space-y-6" ]
                        [ div [ class "grid grid-cols-2 gap-6" ]
                            [ div []
                                [ label [ class "block text-sm font-medium text-gray-700" ]
                                    [ text "First Name" ]
                                , input
                                    [ type_ "text"
                                    , class "mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    , value model.firstName
                                    , onInput UpdateFirstName
                                    , placeholder "Enter your first name"
                                    ]
                                    []
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700" ]
                                    [ text "Last Name" ]
                                , input
                                    [ type_ "text"
                                    , class "mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    , value model.lastName
                                    , onInput UpdateLastName
                                    , placeholder "Enter your last name"
                                    ]
                                    []
                                ]
                            ]
                        , div [ class "grid grid-cols-2 gap-6 pt-2" ]
                            [ div [ class "relative pb-6" ]
                                [ label [ class "block text-sm font-medium text-gray-700" ]
                                    [ text "Email" ]
                                , div [ class "relative" ]
                                    [ input
                                        [ type_ "email"
                                        , class "mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                        , value model.email
                                        , onInput UpdateEmail
                                        , onFocus EmailFocused
                                        , onBlur EmailBlurred
                                        , placeholder "you@example.com"
                                        ]
                                        []
                                    , viewEmailStatus model.emailStatus
                                    ]
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700" ]
                                    [ text "Phone" ]
                                , input
                                    [ type_ "tel"
                                    , class "mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    , value (formatPhoneNumber model.phone)
                                    , onInput UpdatePhone
                                    , placeholder "(555) 555-5555"
                                    ]
                                    []
                                ]
                            ]
                        ]
                    ]
                , if model.error /= Nothing then
                    div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , div [ class "flex justify-center" ]
                    [ button
                        [ class
                            (if isFormValid model then
                                "px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"

                             else
                                "px-6 py-3 bg-gray-300 text-gray-500 rounded-md cursor-not-allowed"
                            )
                        , onClick NextStepClicked
                        , disabled (not (isFormValid model))
                        ]
                        [ text "Continue" ]
                    ]
                ]
        ]


viewEmailStatus : EmailStatus -> Html msg
viewEmailStatus status =
    case status of
        NotChecked ->
            -- When not checked, explicitly render an empty div structure to properly replace any previous status
            div []
                [ div [ class "absolute right-0 inset-y-0" ] [ text "" ]
                , text "" -- Empty text element to replace any error message
                ]

        Checking ->
            -- Show loading spinner while checking
            div []
                [ div
                    [ class "absolute right-0 inset-y-0" ]
                    [ div
                        [ class "absolute right-0 inset-y-0 flex items-center pr-3" ]
                        [ div
                            [ class "animate-spin h-5 w-5 text-blue-500" ]
                            [ svg
                                [ viewBox "0 0 24 24"
                                , SvgAttr.class "h-5 w-5"
                                ]
                                [ circle
                                    [ cx "12"
                                    , cy "12"
                                    , r "10"
                                    , stroke "currentColor"
                                    , strokeWidth "4"
                                    , SvgAttr.class "opacity-25"
                                    ]
                                    []
                                , path
                                    [ fill "currentColor"
                                    , d "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                    , SvgAttr.class "opacity-75"
                                    ]
                                    []
                                ]
                            ]
                        ]
                    ]
                , text "" -- Empty text element to replace any error message
                ]

        Available ->
            -- Show only the success icon for available emails
            div []
                [ div
                    [ class "absolute right-0 inset-y-0" ]
                    [ div
                        [ class "absolute right-0 inset-y-0 flex items-center pr-3" ]
                        [ div
                            [ class "text-green-500" ]
                            [ svg
                                [ viewBox "0 0 20 20"
                                , fill "currentColor"
                                , SvgAttr.class "h-5 w-5"
                                ]
                                [ path
                                    [ fillRule "evenodd"
                                    , d "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                    , clipRule "evenodd"
                                    ]
                                    []
                                ]
                            ]
                        ]
                    ]
                , text "" -- Empty text element to replace the error message
                ]

        Unavailable message ->
            -- For unavailable emails, show icon and error message
            div []
                [ div
                    [ class "absolute right-0 inset-y-0" ]
                    [ div
                        [ class "absolute right-0 inset-y-0 flex items-center pr-3" ]
                        [ div
                            [ class "text-red-500" ]
                            [ svg
                                [ viewBox "0 0 20 20"
                                , fill "currentColor"
                                , SvgAttr.class "h-5 w-5"
                                ]
                                [ path
                                    [ fillRule "evenodd"
                                    , d "M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                                    , clipRule "evenodd"
                                    ]
                                    []
                                ]
                            ]
                        ]
                    ]
                , p
                    [ class "text-xs text-red-600 mt-1 absolute left-0 top-full w-full" ]
                    [ text message ]
                ]


viewLoading : Html msg
viewLoading =
    div [ class "text-center py-12" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading..." ]
        ]



-- HELPERS


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    let
        digits =
            String.filter Char.isDigit phone
                |> String.left 10

        len =
            String.length digits
    in
    if len == 0 then
        ""

    else if len <= 3 then
        "(" ++ digits

    else if len <= 6 then
        "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

    else
        "("
            ++ String.left 3 digits
            ++ ") "
            ++ String.slice 3 6 digits
            ++ "-"
            ++ String.dropLeft 6 digits


isFormValid : Model -> Bool
isFormValid model =
    let
        emailValid =
            case model.emailStatus of
                Available ->
                    True

                -- If the email hasn't been checked yet, consider it invalid
                NotChecked ->
                    False

                -- Email is being checked, consider it invalid until check completes
                Checking ->
                    False

                -- Email is unavailable (error state)
                Unavailable _ ->
                    False
    in
    not (String.isEmpty (String.trim model.firstName))
        && not (String.isEmpty (String.trim model.lastName))
        && not (String.isEmpty (String.trim model.email))
        && not (String.isEmpty (String.trim model.phone))
        && emailValid



-- API CALLS


fetchUserDetails : String -> Cmd Msg
fetchUserDetails _ =
    Http.get
        { url = "/api/me"
        , expect = Http.expectJson GotUserDetails userDetailsDecoder
        }


saveUserDetails : Model -> Cmd Msg
saveUserDetails model =
    Http.post
        { url = "/api/organizations/signup"
        , body = Http.jsonBody (encodeUserDetails model)
        , expect =
            Http.expectJson UserDetailsSaved
                (Decode.map2 SignupResponse
                    (Decode.field "success" Decode.bool)
                    (Decode.field "message" Decode.string)
                )
        }


checkEmailAvailability : String -> Cmd Msg
checkEmailAvailability email =
    Http.request
        { method = "GET"
        , headers = []
        , url = "/api/organizations/check-email/" ++ email
        , body = Http.emptyBody
        , expect = Http.expectStringResponse GotEmailCheckResponse handleEmailCheckResponse
        , timeout = Nothing
        , tracker = Nothing
        }



-- Custom response handler to deal with empty responses and provide better error logging


handleEmailCheckResponse : Http.Response String -> Result Http.Error EmailCheckResponse
handleEmailCheckResponse response =
    case response of
        Http.BadUrl_ url ->
            Err (Http.BadUrl url)

        Http.Timeout_ ->
            Err Http.Timeout

        Http.NetworkError_ ->
            Err Http.NetworkError

        Http.BadStatus_ metadata body ->
            Err (Http.BadStatus metadata.statusCode)

        Http.GoodStatus_ metadata body ->
            -- If we get a 200 status but empty body, consider it a success
            if String.isEmpty (String.trim body) then
                Ok { available = True, message = "Email is available" }

            else
                -- Try to decode the response as JSON
                case Decode.decodeString emailCheckDecoder body of
                    Ok value ->
                        Ok value

                    Err error ->
                        -- Consider most 200 responses as success even with decode errors
                        Ok { available = True, message = "Email is available (decode error)" }



-- DECODERS & ENCODERS


userDetailsDecoder : Decode.Decoder UserDetailsResponse
userDetailsDecoder =
    Decode.field "user"
        (Decode.map4 UserDetailsResponse
            (Decode.field "firstName" Decode.string)
            (Decode.field "lastName" Decode.string)
            (Decode.field "email" Decode.string)
            (Decode.field "phone" Decode.string)
        )


emailCheckDecoder : Decode.Decoder EmailCheckResponse
emailCheckDecoder =
    let
        -- Try to be more flexible with the response format
        baseDecoder =
            Decode.map2 EmailCheckResponse
                (Decode.oneOf
                    [ Decode.field "available" Decode.bool
                    , Decode.field "success" Decode.bool
                    , Decode.succeed True -- Default to true if field not found (changed from false)
                    ]
                )
                (Decode.oneOf
                    [ Decode.field "message" Decode.string
                    , Decode.field "error" Decode.string
                    , Decode.succeed "Email is available" -- Changed default message
                    ]
                )
    in
    Decode.oneOf
        [ baseDecoder
        , Decode.field "data" baseDecoder
        , Decode.succeed { available = True, message = "Email is available" } -- Last resort fallback
        ]


encodeUserDetails : Model -> Encode.Value
encodeUserDetails model =
    Encode.object
        [ ( "adminFirstName", Encode.string model.firstName )
        , ( "adminLastName", Encode.string model.lastName )
        , ( "adminEmail", Encode.string model.email )
        , ( "phone", Encode.string model.phone )
        ]



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Onboarding/Onboarding.elm
================
module Onboarding.Onboarding exposing
    ( Model
    , Msg(..)
    , Step(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser
import Browser.Navigation as Nav
import Components.SetupLayout as SetupLayout
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import Onboarding.Steps.AddAgents as AddAgents
import Onboarding.Steps.CompanyDetails as CompanyDetails
import Onboarding.Steps.EnterpriseForm as EnterpriseForm
import Onboarding.Steps.LicensingSettings as LicensingSettings
import Onboarding.Steps.Payment as Payment
import Onboarding.Steps.PlanSelection as PlanSelection exposing (fetchSubscriptionTiers)
import Onboarding.Steps.UserDetails as UserDetails
import Url



-- MODEL


type Step
    = PlanSelectionStep
    | UserDetailsStep
    | CompanyDetailsStep
    | LicensingSettingsStep
    | AddAgentsStep
    | PaymentStep
    | EnterpriseFormStep


type alias Model =
    { step : Step
    , planSelectionModel : PlanSelection.Model
    , userDetailsModel : UserDetails.Model
    , companyDetailsModel : CompanyDetails.Model
    , licensingSettingsModel : LicensingSettings.Model
    , addAgentsModel : Maybe AddAgents.Model -- Optional, only for Pro plans
    , paymentModel : Payment.Model
    , enterpriseFormModel : Maybe EnterpriseForm.Model -- Optional, only for Enterprise plan
    , key : Nav.Key
    , orgSlug : String
    , session : String
    , isBasicPlan : Bool
    , error : Maybe String
    , isLoading : Bool
    }


init : Nav.Key -> String -> String -> Step -> ( Model, Cmd Msg )
init key orgSlug session initialStep =
    let
        -- Only fetch tiers when we're on the plan selection step
        ( planSelectionModel, planSelectionCmd ) =
            PlanSelection.initWithFetch key orgSlug session (initialStep == PlanSelectionStep)

        ( userDetailsModel, userDetailsCmd ) =
            UserDetails.init key orgSlug

        ( companyDetailsModel, companyDetailsCmd ) =
            CompanyDetails.init key orgSlug

        ( licensingSettingsModel, licensingSettingsCmd ) =
            LicensingSettings.init key orgSlug

        ( paymentModel, paymentCmd ) =
            Payment.init key orgSlug

        -- Check if we need to initialize the AddAgents model based on the initial step
        -- or if we're starting with a non-basic plan
        shouldInitAddAgents =
            initialStep
                == AddAgentsStep
                || (planSelectionModel.selectedPlan |> Maybe.map (\p -> p /= "basic") |> Maybe.withDefault False)

        ( addAgentsModel, addAgentsCmd ) =
            if shouldInitAddAgents then
                let
                    ( model, cmd ) =
                        AddAgents.init key orgSlug True
                in
                ( Just model, Cmd.map AddAgentsMsg cmd )

            else
                ( Nothing, Cmd.none )

        -- Initialize enterprise form model if needed
        ( enterpriseFormModel, enterpriseFormCmd ) =
            if initialStep == EnterpriseFormStep then
                let
                    ( model, cmd ) =
                        EnterpriseForm.init key
                in
                ( Just model, Cmd.map EnterpriseFormMsg cmd )

            else
                ( Nothing, Cmd.none )

        -- Determine if we're on a basic plan
        isBasicPlan =
            planSelectionModel.selectedPlan
                |> Maybe.map (\p -> p == "basic")
                |> Maybe.withDefault True
    in
    ( { step = initialStep
      , planSelectionModel = planSelectionModel
      , userDetailsModel = userDetailsModel
      , companyDetailsModel = companyDetailsModel
      , licensingSettingsModel = licensingSettingsModel
      , addAgentsModel = addAgentsModel
      , paymentModel = paymentModel
      , enterpriseFormModel = enterpriseFormModel
      , key = key
      , orgSlug = orgSlug
      , session = session
      , isBasicPlan = isBasicPlan
      , error = Nothing
      , isLoading = False
      }
    , Cmd.batch
        [ Cmd.map PlanSelectionMsg planSelectionCmd
        , Cmd.map UserDetailsMsg userDetailsCmd
        , Cmd.map CompanyDetailsMsg companyDetailsCmd
        , Cmd.map LicensingSettingsMsg licensingSettingsCmd
        , Cmd.map PaymentMsg paymentCmd
        , addAgentsCmd
        , enterpriseFormCmd
        ]
    )



-- UPDATE


type Msg
    = PlanSelectionMsg PlanSelection.Msg
    | UserDetailsMsg UserDetails.Msg
    | CompanyDetailsMsg CompanyDetails.Msg
    | LicensingSettingsMsg LicensingSettings.Msg
    | AddAgentsMsg AddAgents.Msg
    | PaymentMsg Payment.Msg
    | EnterpriseFormMsg EnterpriseForm.Msg
    | NavigateToStep Step
    | SkipStep
    | CompleteOnboarding
    | OnboardingCompleted (Result Http.Error ())
    | GotError String
    | NoOp


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        PlanSelectionMsg subMsg ->
            let
                ( updatedPlanModel, planCmd, outMsg ) =
                    PlanSelection.update subMsg model.planSelectionModel

                -- Handle the selected plan type to determine if we need to initialize the AddAgents model
                newIsBasicPlan =
                    case outMsg of
                        PlanSelection.SelectedPlan planType ->
                            planType == "basic"

                        _ ->
                            model.isBasicPlan

                addAgentsModel =
                    if not newIsBasicPlan && model.addAgentsModel == Nothing then
                        -- Initialize AddAgents model for non-basic plans
                        Just (AddAgents.init model.key model.orgSlug True |> Tuple.first)

                    else
                        model.addAgentsModel

                -- Handle enterprise plan selection
                ( enterpriseFormModel, enterpriseFormCmd, navigationCmd ) =
                    case outMsg of
                        PlanSelection.SelectedPlan "enterprise" ->
                            let
                                ( newModel, cmd ) =
                                    EnterpriseForm.init model.key
                            in
                            ( Just newModel, Cmd.map EnterpriseFormMsg cmd, Nav.pushUrl model.key (getStepUrl EnterpriseFormStep) )

                        _ ->
                            ( model.enterpriseFormModel
                            , Cmd.none
                            , case outMsg of
                                PlanSelection.NextStep ->
                                    Nav.pushUrl model.key (getStepUrl UserDetailsStep)

                                _ ->
                                    Cmd.none
                            )

                outCmd =
                    case outMsg of
                        PlanSelection.NoOutMsg ->
                            Cmd.none

                        PlanSelection.SelectedPlan _ ->
                            Cmd.none

                        PlanSelection.NextStep ->
                            Cmd.none

                        PlanSelection.ShowError err ->
                            Cmd.none
            in
            ( { model
                | planSelectionModel = updatedPlanModel
                , isBasicPlan = newIsBasicPlan
                , addAgentsModel = addAgentsModel
                , enterpriseFormModel = enterpriseFormModel
              }
            , Cmd.batch
                [ Cmd.map PlanSelectionMsg planCmd
                , outCmd
                , enterpriseFormCmd
                , navigationCmd
                ]
            )

        UserDetailsMsg subMsg ->
            let
                ( updatedUserDetailsModel, userDetailsCmd, outMsg ) =
                    UserDetails.update subMsg model.userDetailsModel

                navigationCmd =
                    case outMsg of
                        UserDetails.NextStep ->
                            let
                                nextStep =
                                    getNextStep UserDetailsStep model.isBasicPlan
                            in
                            Nav.pushUrl model.key (getStepUrl nextStep)

                        _ ->
                            Cmd.none

                outCmd =
                    case outMsg of
                        UserDetails.NoOutMsg ->
                            Cmd.none

                        UserDetails.NextStep ->
                            Cmd.none

                        UserDetails.ShowError err ->
                            Cmd.none
            in
            ( { model | userDetailsModel = updatedUserDetailsModel }
            , Cmd.batch
                [ Cmd.map UserDetailsMsg userDetailsCmd
                , outCmd
                , navigationCmd
                ]
            )

        CompanyDetailsMsg subMsg ->
            let
                ( updatedCompanyDetailsModel, companyDetailsCmd, outMsg ) =
                    CompanyDetails.update subMsg model.companyDetailsModel

                navigationCmd =
                    case outMsg of
                        CompanyDetails.NextStep ->
                            let
                                nextStep =
                                    getNextStep CompanyDetailsStep model.isBasicPlan
                            in
                            Nav.pushUrl model.key (getStepUrl nextStep)

                        _ ->
                            Cmd.none

                outCmd =
                    case outMsg of
                        CompanyDetails.NoOutMsg ->
                            Cmd.none

                        CompanyDetails.NextStep ->
                            Cmd.none

                        CompanyDetails.ShowError err ->
                            Cmd.none
            in
            ( { model | companyDetailsModel = updatedCompanyDetailsModel }
            , Cmd.batch
                [ Cmd.map CompanyDetailsMsg companyDetailsCmd
                , outCmd
                , navigationCmd
                ]
            )

        LicensingSettingsMsg subMsg ->
            let
                ( updatedLicensingSettingsModel, licensingSettingsCmd, outMsg ) =
                    LicensingSettings.update subMsg model.licensingSettingsModel

                -- Ensure addAgentsModel is initialized if we're on a non-basic plan
                updatedModel =
                    if not model.isBasicPlan && model.addAgentsModel == Nothing then
                        { model
                            | licensingSettingsModel = updatedLicensingSettingsModel
                            , addAgentsModel = Just (AddAgents.init model.key model.orgSlug True |> Tuple.first)
                        }

                    else
                        { model | licensingSettingsModel = updatedLicensingSettingsModel }

                navigationCmd =
                    case outMsg of
                        LicensingSettings.NextStep ->
                            let
                                nextStep =
                                    getNextStep LicensingSettingsStep model.isBasicPlan
                            in
                            Nav.pushUrl model.key (getStepUrl nextStep)

                        _ ->
                            Cmd.none

                outCmd =
                    case outMsg of
                        LicensingSettings.NoOutMsg ->
                            Cmd.none

                        LicensingSettings.NextStep ->
                            Cmd.none

                        LicensingSettings.ShowError err ->
                            Cmd.none
            in
            ( updatedModel
            , Cmd.batch
                [ Cmd.map LicensingSettingsMsg licensingSettingsCmd
                , outCmd
                , navigationCmd
                ]
            )

        AddAgentsMsg subMsg ->
            case model.addAgentsModel of
                Just addAgentsModel ->
                    let
                        ( updatedAddAgentsModel, addAgentsCmd, outMsg ) =
                            AddAgents.update subMsg addAgentsModel

                        navigationCmd =
                            case outMsg of
                                AddAgents.NextStep ->
                                    let
                                        nextStep =
                                            getNextStep AddAgentsStep model.isBasicPlan
                                    in
                                    Nav.pushUrl model.key (getStepUrl nextStep)

                                _ ->
                                    Cmd.none

                        outCmd =
                            case outMsg of
                                AddAgents.NoOutMsg ->
                                    Cmd.none

                                AddAgents.NextStep ->
                                    Cmd.none

                                AddAgents.ShowError err ->
                                    Cmd.none
                    in
                    ( { model | addAgentsModel = Just updatedAddAgentsModel }
                    , Cmd.batch
                        [ Cmd.map AddAgentsMsg addAgentsCmd
                        , outCmd
                        , navigationCmd
                        ]
                    )

                Nothing ->
                    ( model, Cmd.none )

        PaymentMsg subMsg ->
            let
                ( updatedPaymentModel, paymentCmd, outMsg ) =
                    Payment.update subMsg model.paymentModel

                outCmd =
                    case outMsg of
                        Payment.NoOutMsg ->
                            Cmd.none

                        Payment.Completed ->
                            completeOnboarding model

                        Payment.NavigateToWalkthrough ->
                            completeOnboarding model

                        Payment.ShowError err ->
                            Cmd.none
            in
            ( { model | paymentModel = updatedPaymentModel }
            , Cmd.batch
                [ Cmd.map PaymentMsg paymentCmd
                , outCmd
                ]
            )

        EnterpriseFormMsg subMsg ->
            case model.enterpriseFormModel of
                Just enterpriseFormModel ->
                    let
                        ( updatedEnterpriseFormModel, enterpriseFormCmd, outMsg ) =
                            EnterpriseForm.update subMsg enterpriseFormModel

                        -- Check if we're navigating back to plan selection
                        isNavigatingBackToPlans =
                            outMsg == EnterpriseForm.BackToPlanSelection

                        -- Navigate back to plan selection if requested
                        navigationCmd =
                            if isNavigatingBackToPlans then
                                Nav.pushUrl model.key (getStepUrl PlanSelectionStep)

                            else
                                Cmd.none

                        -- Don't reload plan data - avoid unnecessary API call
                        outCmd =
                            case outMsg of
                                EnterpriseForm.NoOutMsg ->
                                    Cmd.none

                                EnterpriseForm.BackToPlanSelection ->
                                    Cmd.none

                                EnterpriseForm.ShowError err ->
                                    Cmd.none
                    in
                    ( { model | enterpriseFormModel = Just updatedEnterpriseFormModel }
                    , Cmd.batch
                        [ Cmd.map EnterpriseFormMsg enterpriseFormCmd
                        , outCmd
                        , navigationCmd
                        ]
                    )

                Nothing ->
                    -- If the model doesn't exist, create it
                    let
                        ( enterpriseFormModel, enterpriseFormCmd ) =
                            EnterpriseForm.init model.key
                    in
                    ( { model | enterpriseFormModel = Just enterpriseFormModel }
                    , Cmd.map EnterpriseFormMsg enterpriseFormCmd
                    )

        NavigateToStep step ->
            let
                cmd =
                    if step == PlanSelectionStep then
                        -- When navigating directly to plan selection, fetch the tiers
                        Cmd.batch
                            [ Nav.pushUrl model.key (getStepUrl step)
                            , Cmd.map PlanSelectionMsg fetchSubscriptionTiers
                            ]

                    else
                        Nav.pushUrl model.key (getStepUrl step)
            in
            ( model, cmd )

        SkipStep ->
            let
                nextStep =
                    getNextStep model.step model.isBasicPlan
            in
            ( model, Nav.pushUrl model.key (getStepUrl nextStep) )

        CompleteOnboarding ->
            ( { model | isLoading = True }
            , completeOnboarding model
            )

        OnboardingCompleted result ->
            case result of
                Ok _ ->
                    -- Redirect to login with special parameters instead of walkthrough
                    ( { model | isLoading = False }
                    , Nav.pushUrl model.key ("/login?onboarding=completed&email=" ++ Url.percentEncode model.userDetailsModel.email)
                    )

                Err _ ->
                    ( { model | isLoading = False, error = Just "Failed to complete onboarding. Please try again." }
                    , Cmd.none
                    )

        GotError errorMsg ->
            ( { model | error = Just errorMsg, isLoading = False }, Cmd.none )

        NoOp ->
            ( model, Cmd.none )



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = getStepTitle model.step
    , body =
        [ div []
            [ SetupLayout.view (mapStepToSetupStep model.step)
                model.isBasicPlan
                (getStepNumber model.step)
                [ div [ class "max-w-3xl mx-auto" ]
                    [ case model.error of
                        Just errorMsg ->
                            div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" ]
                                [ text errorMsg ]

                        Nothing ->
                            text ""
                    , viewCurrentStep model
                    ]
                ]
            ]
        ]
    }


viewCurrentStep : Model -> Html Msg
viewCurrentStep model =
    case model.step of
        PlanSelectionStep ->
            Html.map PlanSelectionMsg (PlanSelection.view model.planSelectionModel)

        UserDetailsStep ->
            Html.map UserDetailsMsg (UserDetails.view model.userDetailsModel)

        CompanyDetailsStep ->
            Html.map CompanyDetailsMsg (CompanyDetails.view model.companyDetailsModel)

        LicensingSettingsStep ->
            Html.map LicensingSettingsMsg (LicensingSettings.view model.licensingSettingsModel)

        AddAgentsStep ->
            if model.isBasicPlan then
                -- If on basic plan but somehow on this step, redirect to payment
                div [ class "text-center p-8" ]
                    [ text "This step is not available for the basic plan. Please continue to payment."
                    , div [ class "mt-4" ]
                        [ button
                            [ class "px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                            , onClick (NavigateToStep PaymentStep)
                            ]
                            [ text "Continue to Payment" ]
                        ]
                    ]

            else
                case model.addAgentsModel of
                    Just addAgentsModel ->
                        Html.map AddAgentsMsg (AddAgents.view addAgentsModel)

                    Nothing ->
                        -- If model not initialized, show error with option to continue
                        div [ class "text-center p-8" ]
                            [ text "There was an issue loading the team members form. Please try refreshing the page."
                            , div [ class "mt-4" ]
                                [ button
                                    [ class "px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                                    , onClick (NavigateToStep PaymentStep)
                                    ]
                                    [ text "Continue to Payment" ]
                                ]
                            ]

        PaymentStep ->
            Html.map PaymentMsg (Payment.view model.paymentModel)

        EnterpriseFormStep ->
            case model.enterpriseFormModel of
                Just enterpriseFormModel ->
                    Html.map EnterpriseFormMsg (EnterpriseForm.view enterpriseFormModel)

                Nothing ->
                    div [ class "text-center p-8" ]
                        [ text "Error: Enterprise Form model not initialized." ]



-- UTILS


getStepTitle : Step -> String
getStepTitle step =
    case step of
        PlanSelectionStep ->
            "Choose Your Plan - Onboarding"

        UserDetailsStep ->
            "Personal Details - Onboarding"

        CompanyDetailsStep ->
            "Company Details - Onboarding"

        LicensingSettingsStep ->
            "Licensing & Carriers - Onboarding"

        AddAgentsStep ->
            "Add Team Members - Onboarding"

        PaymentStep ->
            "Payment - Onboarding"

        EnterpriseFormStep ->
            "Enterprise Form - Onboarding"


mapStepToSetupStep : Step -> SetupLayout.SetupStep
mapStepToSetupStep step =
    case step of
        PlanSelectionStep ->
            SetupLayout.PlanSelection

        UserDetailsStep ->
            SetupLayout.OrganizationSetup

        CompanyDetailsStep ->
            SetupLayout.OrganizationSetup

        LicensingSettingsStep ->
            SetupLayout.OrganizationSetup

        AddAgentsStep ->
            SetupLayout.AgentSetup

        PaymentStep ->
            SetupLayout.OrganizationSetup

        EnterpriseFormStep ->
            SetupLayout.OrganizationSetup



-- Define the Agent type locally


type alias Agent =
    { id : String
    , firstName : String
    , lastName : String
    , email : String
    , phone : String
    , isAdmin : Bool
    , isAgent : Bool
    }



-- Helper function to encode agent data


encodeAgent : Agent -> Encode.Value
encodeAgent agent =
    Encode.object
        [ ( "id", Encode.string agent.id )
        , ( "firstName", Encode.string agent.firstName )
        , ( "lastName", Encode.string agent.lastName )
        , ( "email", Encode.string agent.email )
        , ( "phone", Encode.string agent.phone )
        , ( "isAdmin", Encode.bool agent.isAdmin )
        , ( "isAgent", Encode.bool agent.isAgent )
        ]



-- Update agents list handling to convert AddAgents.Model.agents to our local Agent type


encodeOnboardingData : Model -> Encode.Value
encodeOnboardingData model =
    let
        selectedPlan =
            model.planSelectionModel.selectedPlan |> Maybe.withDefault "basic"

        extraAgents =
            model.planSelectionModel.extraAgents

        extraContacts =
            model.planSelectionModel.extraContacts

        -- User details
        firstName =
            model.userDetailsModel.firstName

        lastName =
            model.userDetailsModel.lastName

        email =
            model.userDetailsModel.email

        phone =
            model.userDetailsModel.phone

        -- Company details
        agencyName =
            model.companyDetailsModel.agencyName

        website =
            model.companyDetailsModel.website

        companyPhone =
            model.companyDetailsModel.phone

        primaryColor =
            model.companyDetailsModel.primaryColor

        secondaryColor =
            model.companyDetailsModel.secondaryColor

        logo =
            model.companyDetailsModel.logo

        -- Licensing settings
        stateLicenses =
            model.licensingSettingsModel.stateLicenses

        carrierContracts =
            model.licensingSettingsModel.carrierContracts

        stateCarrierSettings =
            -- Create state carrier settings based on whether SmartSend for GI is enabled
            List.concatMap
                (\state ->
                    List.map
                        (\carrier ->
                            { state = state
                            , carrier = carrier
                            , active = True
                            , targetGI = model.licensingSettingsModel.useSmartSendForGI
                            }
                        )
                        carrierContracts
                )
                stateLicenses

        -- Agents (if applicable)
        agents =
            case model.addAgentsModel of
                Just agentsModel ->
                    -- Use the agents from the model (already correct type)
                    Encode.list encodeAgent agentsModel.agents

                Nothing ->
                    Encode.list identity []
    in
    Encode.object
        [ ( "plan"
          , Encode.object
                [ ( "type", Encode.string selectedPlan )
                , ( "extraAgents", Encode.int extraAgents )
                , ( "extraContacts", Encode.int extraContacts )
                , ( "price", Encode.int (getPlanPrice selectedPlan) )
                , ( "billingCycle", Encode.string "monthly" )
                ]
          )
        , ( "user"
          , Encode.object
                [ ( "firstName", Encode.string firstName )
                , ( "lastName", Encode.string lastName )
                , ( "email", Encode.string email )
                , ( "phone", Encode.string phone )
                ]
          )
        , ( "company"
          , Encode.object
                [ ( "agencyName", Encode.string agencyName )
                , ( "website", Encode.string website )
                , ( "phone", Encode.string companyPhone )
                , ( "primaryColor", Encode.string primaryColor )
                , ( "secondaryColor", Encode.string secondaryColor )
                , ( "logo", Maybe.withDefault Encode.null (Maybe.map Encode.string logo) )
                ]
          )
        , ( "licensing"
          , Encode.object
                [ ( "stateLicenses", Encode.list Encode.string stateLicenses )
                , ( "carrierContracts", Encode.list Encode.string carrierContracts )
                , ( "stateCarrierSettings", Encode.list encodeStateCarrierSetting stateCarrierSettings )
                ]
          )
        , ( "agents", agents )
        ]



-- Update the completeOnboarding function to submit all data at once


completeOnboarding : Model -> Cmd Msg
completeOnboarding model =
    Http.post
        { url = "/api/organizations/complete-onboarding"
        , body = Http.jsonBody (encodeOnboardingData model)
        , expect = Http.expectWhatever OnboardingCompleted
        }



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.batch
        [ Sub.map PlanSelectionMsg (PlanSelection.subscriptions model.planSelectionModel)
        , Sub.map UserDetailsMsg (UserDetails.subscriptions model.userDetailsModel)
        , Sub.map CompanyDetailsMsg (CompanyDetails.subscriptions model.companyDetailsModel)
        , Sub.map LicensingSettingsMsg (LicensingSettings.subscriptions model.licensingSettingsModel)
        , case model.addAgentsModel of
            Just addAgentsModel ->
                Sub.map AddAgentsMsg (AddAgents.subscriptions addAgentsModel)

            Nothing ->
                Sub.none
        , Sub.map PaymentMsg (Payment.subscriptions model.paymentModel)
        , case model.enterpriseFormModel of
            Just enterpriseFormModel ->
                Sub.map EnterpriseFormMsg (EnterpriseForm.subscriptions enterpriseFormModel)

            Nothing ->
                Sub.none
        ]



-- Define StateCarrierSetting type locally


type alias StateCarrierSetting =
    { state : String
    , carrier : String
    , active : Bool
    , targetGI : Bool
    }



-- Encode StateCarrierSetting


encodeStateCarrierSetting : StateCarrierSetting -> Encode.Value
encodeStateCarrierSetting setting =
    Encode.object
        [ ( "state", Encode.string setting.state )
        , ( "carrier", Encode.string setting.carrier )
        , ( "active", Encode.bool setting.active )
        , ( "targetGI", Encode.bool setting.targetGI )
        ]



-- Helper function to get URL for a step


getStepUrl : Step -> String
getStepUrl step =
    "/onboarding/"
        ++ (case step of
                PlanSelectionStep ->
                    "plan"

                UserDetailsStep ->
                    "personal"

                CompanyDetailsStep ->
                    "company"

                LicensingSettingsStep ->
                    "licensing"

                AddAgentsStep ->
                    "agents"

                PaymentStep ->
                    "payment"

                EnterpriseFormStep ->
                    "enterprise"
           )



-- Helper function to convert the step to a number for progress tracking


getStepNumber : Step -> Int
getStepNumber step =
    case step of
        PlanSelectionStep ->
            0

        UserDetailsStep ->
            1

        CompanyDetailsStep ->
            2

        LicensingSettingsStep ->
            3

        AddAgentsStep ->
            4

        PaymentStep ->
            5

        EnterpriseFormStep ->
            6



-- Helper function to get the next step in sequence


getNextStep : Step -> Bool -> Step
getNextStep currentStep isBasicPlan =
    case currentStep of
        PlanSelectionStep ->
            UserDetailsStep

        UserDetailsStep ->
            CompanyDetailsStep

        CompanyDetailsStep ->
            LicensingSettingsStep

        LicensingSettingsStep ->
            if isBasicPlan then
                PaymentStep

            else
                AddAgentsStep

        AddAgentsStep ->
            PaymentStep

        PaymentStep ->
            PaymentStep

        -- No next step after payment
        EnterpriseFormStep ->
            EnterpriseFormStep



-- Can't proceed from enterprise form
-- Helper function to get plan price based on type


getPlanPrice : String -> Int
getPlanPrice planType =
    case planType of
        "basic" ->
            29

        "pro" ->
            99

        "enterprise" ->
            499

        _ ->
            29



-- Default to basic price

================
File: src/Accept.elm
================
module Accept exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onInput, onSubmit)
import Http
import Json.Decode as D
import Json.Encode as E
import Url.Parser.Query as Query


type alias Model =
    { name : String
    , email : String
    , isSubmitting : Bool
    , error : Maybe String
    , success : Bool
    , quoteId : Maybe String
    , key : Nav.Key
    }


type Msg
    = UpdateName String
    | UpdateEmail String
    | SubmitForm
    | GotSubmitResponse (Result Http.Error ())
    | GotContactInfo (Result Http.Error ContactInfo)


type alias ContactInfo =
    { email : String
    , firstName : String
    , lastName : String
    }


init : Nav.Key -> Maybe String -> ( Model, Cmd Msg )
init key maybeQuoteId =
    ( { name = ""
      , email = ""
      , isSubmitting = False
      , error = Nothing
      , success = False
      , quoteId = maybeQuoteId
      , key = key
      }
    , case maybeQuoteId of
        Just quoteId ->
            Http.get
                { url = "/api/quotes/decode/" ++ quoteId
                , expect = Http.expectJson GotContactInfo contactInfoDecoder
                }

        Nothing ->
            Cmd.none
    )


contactInfoDecoder : D.Decoder ContactInfo
contactInfoDecoder =
    D.field "contact"
        (D.map3 ContactInfo
            (D.field "email" D.string)
            (D.field "firstName" D.string)
            (D.field "lastName" D.string)
        )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateName name ->
            ( { model | name = name }, Cmd.none )

        UpdateEmail email ->
            ( { model | email = email }, Cmd.none )

        SubmitForm ->
            ( { model | isSubmitting = True }
            , Http.post
                { url = "/api/contact-request"
                , body = Http.jsonBody (encodeForm model)
                , expect = Http.expectWhatever GotSubmitResponse
                }
            )

        GotSubmitResponse result ->
            case result of
                Ok _ ->
                    ( { model | isSubmitting = False, success = True }, Cmd.none )

                Err _ ->
                    ( { model | isSubmitting = False, error = Just "Failed to submit form. Please try again." }, Cmd.none )

        GotContactInfo result ->
            case result of
                Ok info ->
                    ( { model
                        | email = info.email
                        , name = info.firstName ++ " " ++ info.lastName
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( model, Cmd.none )


encodeForm : Model -> E.Value
encodeForm model =
    E.object
        [ ( "name", E.string model.name )
        , ( "email", E.string model.email )
        , ( "type", E.string "accept" )
        , ( "quoteId", Maybe.map E.string model.quoteId |> Maybe.withDefault E.null )
        ]


view : Model -> Browser.Document Msg
view model =
    { title = "Good News! - Medicare Max"
    , body =
        [ div [ class "min-h-screen bg-white" ]
            [ nav [ class "bg-white border-b border-gray-200" ]
                [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" ]
                    [ div [ class "flex justify-between h-16 items-center" ]
                        [ div [ class "flex-shrink-0" ]
                            [ img [ src "/images/medicare-max-logo.png", class "h-8 w-auto", alt "Medicare Max" ] [] ]
                        ]
                    ]
                ]
            , div [ class "max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12" ]
                [ if model.success then
                    div [ class "text-center" ]
                        [ h1 [ class "text-3xl font-bold text-gray-900 mb-4" ]
                            [ text "Thank You" ]
                        , p [ class "text-gray-600" ]
                            [ text "We'll be in touch soon to schedule your follow-up." ]
                        ]

                  else
                    div []
                        [ h1 [ class "text-3xl font-bold text-center text-gray-900 mb-4" ]
                            [ text "Great News!" ]
                        , p [ class "text-gray-600 text-center mb-8" ]
                            [ text "Based on your answers, you look like a good candidate to switch plans. Let's schedule a follow-up to discuss your options." ]
                        , case model.error of
                            Just error ->
                                div [ class "bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" ]
                                    [ text error ]

                            Nothing ->
                                text ""
                        , Html.form [ onSubmit SubmitForm, class "space-y-6 max-w-lg mx-auto" ]
                            [ div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                    [ text "Name" ]
                                , input
                                    [ type_ "text"
                                    , class "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
                                    , value model.name
                                    , onInput UpdateName
                                    , required True
                                    ]
                                    []
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                    [ text "Email" ]
                                , input
                                    [ type_ "email"
                                    , class "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
                                    , value model.email
                                    , onInput UpdateEmail
                                    , required True
                                    ]
                                    []
                                ]
                            , button
                                [ class "w-full bg-purple-600 text-white py-3 px-4 rounded-lg hover:bg-purple-700 transition-colors duration-200 disabled:opacity-50"
                                , type_ "submit"
                                , disabled model.isSubmitting
                                ]
                                [ if model.isSubmitting then
                                    text "Submitting..."

                                  else
                                    text "Schedule Follow-up"
                                ]
                            ]
                        ]
                ]
            ]
        ]
    }


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/AddAgent.elm
================
module AddAgent exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Components.ProgressIndicator
import Components.SetupLayout as SetupLayout
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Parser exposing ((|.), (|=), Parser, chompIf, chompWhile, end, succeed, symbol)
import StateRegions exposing (Region(..), getRegionStates, regionToString)
import Svg exposing (path, svg)
import Svg.Attributes exposing (d, fill, stroke, strokeLinecap, strokeLinejoin, strokeWidth, viewBox)
import Time
import Url



-- Constants


allStates : List String
allStates =
    [ "AL"
    , "AK"
    , "AZ"
    , "AR"
    , "CA"
    , "CO"
    , "CT"
    , "DE"
    , "FL"
    , "GA"
    , "HI"
    , "ID"
    , "IL"
    , "IN"
    , "IA"
    , "KS"
    , "KY"
    , "LA"
    , "ME"
    , "MD"
    , "MA"
    , "MI"
    , "MN"
    , "MS"
    , "MO"
    , "MT"
    , "NE"
    , "NV"
    , "NH"
    , "NJ"
    , "NM"
    , "NY"
    , "NC"
    , "ND"
    , "OH"
    , "OK"
    , "OR"
    , "PA"
    , "RI"
    , "SC"
    , "SD"
    , "TN"
    , "TX"
    , "UT"
    , "VT"
    , "VA"
    , "WA"
    , "WV"
    , "WI"
    , "WY"
    , "DC"
    ]


allCarriers : List String
allCarriers =
    [ "Aetna"
    , "Humana"
    , "UnitedHealthcare"
    , "Cigna"
    , "Aflac"
    , "Allstate"
    , "Mutual of Omaha"
    , "Ace Chubb"
    ]


type alias Model =
    { email : String
    , firstName : String
    , lastName : String
    , rawPhone : String
    , displayPhone : String
    , isAdmin : Bool
    , isAgent : Bool
    , carriers : List String
    , stateLicenses : List String
    , error : Maybe String
    , isSetup : Bool
    , key : Nav.Key
    , isLoading : Bool
    , agents : List Agent
    , showAddForm : Bool
    , currentUser : Maybe CurrentUser
    , isLoadingForAgent : Maybe String
    , orgSettings : Maybe Settings
    , pendingSave : Maybe String
    , planType : String
    , showDeleteConfirm : Maybe String
    , reassignAgentId : Maybe String
    , contacts : List ContactSummary
    , emailStatus : EmailStatus
    }


type alias User =
    { id : String
    , email : String
    , firstName : String
    , lastName : String
    , isAdmin : Bool
    , isAgent : Bool
    , phone : String
    }


type alias Agent =
    { id : String
    , firstName : String
    , lastName : String
    , email : String
    , phone : String
    , isAdmin : Bool
    , isAgent : Bool
    , carriers : List String
    , stateLicenses : List String
    , expanded : Bool
    }


type alias CurrentUser =
    { id : String
    , email : String
    , firstName : String
    , lastName : String
    , isAdmin : Bool
    , isAgent : Bool
    , phone : String
    }


type alias ContactSummary =
    { id : Int
    , agentId : Maybe String
    }


type EmailStatus
    = NotChecked
    | Checking
    | Valid
    | Invalid String


type Msg
    = NoOp
    | UpdateEmail String
    | UpdateFirstName String
    | UpdateLastName String
    | UpdatePhone String
    | ToggleAdmin String
    | ToggleAgent String
    | UpdateField String String
    | UpdateAdminCheckbox Bool
    | UpdateAgentCheckbox Bool
    | SaveAgent
    | AgentSaved (Result Http.Error ())
    | NavigateTo String
    | CloseModal
    | ShowModal
    | ToggleCarrier String Bool
    | ToggleState String Bool
    | SelectAllCarriers Bool
    | SelectAllStates Bool
    | DeleteAgent String
    | ConfirmDeleteAgent String (Maybe String)
    | CloseDeleteConfirmModal
    | AgentDeleted (Result Http.Error ())
    | FinishSetup
    | SelectCommonStates Region
    | LoadFromOrg
    | GotOrgSettings (Result Http.Error Settings)
    | AddAnotherAgent
    | CancelAddAgent
    | RemoveAgent String
    | FetchAgents
    | GotAgents (Result Http.Error (List Agent))
    | GotCurrentUser (Result Http.Error CurrentUserResponse)
    | ToggleAgentRole String String
    | UpdateAgentField String String String
    | ToggleAgentExpanded String
    | UpdateAgentCarrier String String Bool
    | UpdateAgentState String String Bool
    | SelectAllStatesForAgent String Bool
    | SelectCommonStatesForAgent String Region
    | LoadFromOrgForAgent String
    | GotOrgSettingsForAgent String (Result Http.Error Settings)
    | SelectAllCarriersForAgent String Bool
    | SaveAgentDetails String
    | AgentDetailsSaved String (Result Http.Error ())
    | DebounceSaveAgent String
    | EditAgent Agent
    | CheckAgentEmail
    | GotEmailResponse (Result Http.Error EmailResponse)


type alias CurrentUserResponse =
    { success : Bool
    , user : Maybe User
    }


type alias EmailResponse =
    { available : Bool
    , message : String
    }


init : Bool -> Nav.Key -> Maybe CurrentUser -> String -> ( Model, Cmd Msg )
init isSetup key currentUser planType =
    let
        initialAgents =
            case currentUser of
                Just user ->
                    -- Create an initial agent from the current user for setup mode
                    let
                        initialAgent =
                            { id = user.id
                            , firstName = user.firstName
                            , lastName = user.lastName
                            , email = user.email
                            , phone = user.phone
                            , isAdmin = user.isAdmin
                            , isAgent = user.isAgent -- Use actual agent status
                            , carriers = []
                            , stateLicenses = []
                            , expanded = False
                            }
                    in
                    if isSetup then
                        [ initialAgent ]

                    else
                        []

                Nothing ->
                    []
    in
    ( { email = ""
      , firstName = ""
      , lastName = ""
      , rawPhone = ""
      , displayPhone = ""
      , isAdmin = False
      , isAgent = True -- Default to agent role being checked
      , carriers = []
      , stateLicenses = []
      , error = Nothing
      , isSetup = isSetup
      , key = key
      , isLoading = True
      , agents = initialAgents
      , showAddForm = False
      , currentUser = currentUser
      , isLoadingForAgent = Nothing
      , orgSettings = Nothing
      , pendingSave = Nothing
      , planType = planType
      , showDeleteConfirm = Nothing
      , reassignAgentId = Nothing
      , contacts = []
      , emailStatus = NotChecked
      }
    , fetchAgents
    )


view : Model -> Browser.Document Msg
view model =
    { title =
        if model.isSetup then
            "Add Team Members"

        else
            "Manage Agents"
    , body =
        [ if model.isSetup then
            -- Show setup UI with sidebar
            SetupLayout.view SetupLayout.AgentSetup
                (model.planType == "basic")
                4
                -- Using 4 for AddAgent as it's typically the 5th step (0-indexed)
                [ div [ class "max-w-3xl mx-auto pb-24" ]
                    [ viewSetupHeader model
                    , viewAgentsList model
                    ]
                , viewBottomBar model
                ]

          else
            -- Show regular UI without sidebar
            div [ class "min-h-screen bg-gray-50 pb-24" ]
                [ div [ class "max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8" ]
                    [ viewNormalHeader
                    , div [ class "bg-white shadow rounded-lg p-6" ]
                        [ viewAgentsList model
                        ]
                    ]
                , text "" -- No bottom bar in regular mode
                ]
        , viewDeleteConfirmationModal model
        ]
    }


viewSetupHeader : Model -> Html Msg
viewSetupHeader model =
    div [ class "mb-8 flex justify-between items-center" ]
        [ div []
            [ h1 [ class "text-3xl font-bold text-gray-900" ]
                [ text "Add Your First Agent" ]
            , p [ class "mt-2 text-gray-600" ]
                [ text "Set up your first agent to get started" ]
            ]
        , if not model.showAddForm then
            button
                [ class "inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
                , onClick AddAnotherAgent
                ]
                [ span [ class "mr-2" ] [ text "+" ]
                , text "Add Agent"
                ]

          else
            text ""
        ]


viewNormalHeader : Html Msg
viewNormalHeader =
    div [ class "mb-8 flex justify-center items-center" ]
        [ h1 [ class "text-2xl font-semibold text-gray-900" ]
            [ text "Manage Agents" ]
        ]


viewBasicInfo : Model -> Html Msg
viewBasicInfo model =
    div [ class "space-y-4" ]
        [ div [ class "grid grid-cols-2 gap-4" ]
            [ div []
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "First Name" ]
                , input
                    ([ type_ "text"
                     , class "mt-1 px-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500"
                     , value
                        (if isAdminBecomingAgent model then
                            case model.currentUser of
                                Just user ->
                                    user.firstName

                                Nothing ->
                                    model.firstName

                         else
                            model.firstName
                        )
                     , placeholder "Enter first name"
                     ]
                        ++ (if isAdminBecomingAgent model then
                                [ disabled True ]

                            else
                                [ onInput UpdateFirstName ]
                           )
                    )
                    []
                ]
            , div []
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "Last Name" ]
                , input
                    ([ type_ "text"
                     , class "mt-1 px-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500"
                     , value
                        (if isAdminBecomingAgent model then
                            case model.currentUser of
                                Just user ->
                                    user.lastName

                                Nothing ->
                                    model.lastName

                         else
                            model.lastName
                        )
                     , placeholder "Enter last name"
                     ]
                        ++ (if isAdminBecomingAgent model then
                                [ disabled True ]

                            else
                                [ onInput UpdateLastName ]
                           )
                    )
                    []
                ]
            ]
        , div [ class "grid grid-cols-2 gap-4" ]
            [ div []
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "Email" ]
                , input
                    ([ type_ "email"
                     , class "mt-1 px-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500"
                     , value
                        (if isAdminBecomingAgent model then
                            Maybe.map .email model.currentUser |> Maybe.withDefault ""

                         else
                            model.email
                        )
                     , placeholder "name@example.com"
                     ]
                        ++ (if isAdminBecomingAgent model then
                                [ disabled True ]

                            else
                                [ onInput UpdateEmail, onBlur CheckAgentEmail ]
                           )
                    )
                    []
                , viewEmailStatus model.emailStatus
                ]
            , div []
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "Phone" ]
                , input
                    [ type_ "tel"
                    , class "mt-1 px-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                    , value model.displayPhone
                    , onInput UpdatePhone
                    , placeholder "(555) 555-5555"
                    ]
                    []
                ]
            ]
        , div [ class "mt-4" ]
            [ label [ class "block text-sm font-medium text-gray-700 mb-2" ]
                [ text "Administrator Status" ]
            , div [ class "flex items-center space-x-6" ]
                [ label
                    [ class "inline-flex items-center" ]
                    [ input
                        [ type_ "checkbox"
                        , class "rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        , checked model.isAdmin
                        , onClick (UpdateAdminCheckbox (not model.isAdmin))
                        ]
                        []
                    , span [ class "ml-2 text-sm text-gray-700" ]
                        [ text "Admin" ]
                    ]
                ]
            ]
        ]


viewAgentsList : Model -> Html Msg
viewAgentsList model =
    div [ class "space-y-6" ]
        [ if model.error /= Nothing then
            div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6" ]
                [ text (Maybe.withDefault "" model.error) ]

          else
            text ""
        , div [ class "grid grid-cols-1 gap-6" ]
            (List.map
                (\agent ->
                    let
                        isSelfUser =
                            case model.currentUser of
                                Just user ->
                                    user.id == agent.id

                                Nothing ->
                                    False
                    in
                    div [ class "bg-white shadow rounded-lg p-6" ]
                        [ div [ class "flex items-center justify-between" ]
                            [ div [ class "flex items-center" ]
                                [ div [ class "ml-4" ]
                                    [ div [ class "text-lg font-medium text-gray-900" ]
                                        [ text (agent.firstName ++ " " ++ agent.lastName) ]
                                    , div [ class "text-sm text-gray-500" ]
                                        [ text agent.email ]
                                    ]
                                ]
                            , div [ class "flex items-center space-x-4" ]
                                [ button
                                    [ class "text-blue-600 hover:text-blue-800 font-medium"
                                    , onClick (ToggleAgentExpanded agent.id)
                                    ]
                                    [ text "Edit" ]
                                , button
                                    [ class
                                        ("text-red-400 "
                                            ++ (if isSelfUser then
                                                    "opacity-50 cursor-not-allowed"

                                                else
                                                    "hover:text-red-500"
                                               )
                                        )
                                    , onClick (DeleteAgent agent.id)
                                    , disabled isSelfUser
                                    , title
                                        (if isSelfUser then
                                            "You cannot delete your own account"

                                         else
                                            "Delete"
                                        )
                                    ]
                                    [ text "Delete" ]
                                ]
                            ]
                        , if agent.expanded then
                            div [ class "border-t border-gray-200 mt-4 pt-4" ]
                                [ viewAgentDetails model agent ]

                          else
                            text ""
                        ]
                )
                model.agents
            )
        , div [ class "mt-8 bg-white shadow rounded-lg p-6" ]
            [ if model.showAddForm then
                div [ class "space-y-6" ]
                    [ div [ class "border-b border-gray-200 pb-4" ]
                        [ h2 [ class "text-lg font-medium text-gray-900" ]
                            [ text "Add New Agent" ]
                        , p [ class "mt-1 text-sm text-gray-500" ]
                            [ text "Fill in the agent's information below" ]
                        ]
                    , viewBasicInfo model
                    , div [ class "flex justify-end space-x-4 mt-6" ]
                        [ button
                            [ class "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                            , onClick CancelAddAgent
                            ]
                            [ text "Cancel" ]
                        , button
                            [ class "px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                            , onClick SaveAgent
                            , disabled (not (isFormValid model))
                            ]
                            [ text "Add Agent" ]
                        ]
                    ]

              else
                div [ class "flex justify-between items-center" ]
                    [ div []
                        [ h3 [ class "text-lg font-medium text-gray-900" ]
                            [ text "Add New Agent" ]
                        , p [ class "text-sm text-gray-500" ]
                            [ text "Add a team member to your organization" ]
                        ]
                    , button
                        [ class "inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
                        , onClick AddAnotherAgent
                        ]
                        [ span [ class "mr-2" ] [ text "+" ]
                        , text "Add Agent"
                        ]
                    ]
            ]
        ]


viewAgentDetails : Model -> Agent -> Html Msg
viewAgentDetails model agent =
    let
        orgCarriers =
            model.orgSettings
                |> Maybe.map .carrierContracts
                |> Maybe.withDefault []

        orgStates =
            model.orgSettings
                |> Maybe.map .stateLicenses
                |> Maybe.withDefault []

        fieldError field =
            case field of
                "phone" ->
                    String.isEmpty agent.phone

                "firstName" ->
                    String.isEmpty agent.firstName

                "lastName" ->
                    String.isEmpty agent.lastName

                "email" ->
                    String.isEmpty agent.email

                _ ->
                    False

        errorIndicator field =
            if fieldError field then
                span [ class "text-red-500 ml-1" ] [ text "*" ]

            else
                text ""

        isCurrentUserAgent =
            case model.currentUser of
                Just user ->
                    user.id == agent.id

                Nothing ->
                    False

        formattedPhone =
            formatPhoneNumber (String.filter Char.isDigit agent.phone)

        isLoading =
            model.isLoadingForAgent == Just agent.id

        canEdit =
            canModifySettings model agent.id

        -- Allow current user to edit their own details
        canEditField =
            isCurrentUserAgent || canEdit

        hasChanges =
            model.pendingSave == Just agent.id

        isSaving =
            model.isLoadingForAgent == Just agent.id

        onFieldInput : String -> String -> Msg
        onFieldInput field value =
            UpdateAgentField agent.id field value

        onSelectAllCarriers : Bool -> Msg
        onSelectAllCarriers isSelected =
            SelectAllCarriersForAgent agent.id isSelected
    in
    div [ class "space-y-6" ]
        [ div [ class "space-y-4" ]
            [ div [ class "grid grid-cols-2 gap-4" ]
                [ div []
                    [ label [ class "block text-sm font-medium text-gray-700" ]
                        [ text "First Name"
                        , errorIndicator "firstName"
                        ]
                    , input
                        [ type_ "text"
                        , class "mt-1 px-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500"
                        , value agent.firstName
                        , onInput (onFieldInput "firstName")
                        , disabled (not canEditField)
                        ]
                        []
                    ]
                , div []
                    [ label [ class "block text-sm font-medium text-gray-700" ]
                        [ text "Last Name"
                        , errorIndicator "lastName"
                        ]
                    , input
                        [ type_ "text"
                        , class "mt-1 px-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500"
                        , value agent.lastName
                        , onInput (onFieldInput "lastName")
                        , disabled (not canEditField)
                        ]
                        []
                    ]
                ]
            , div [ class "grid grid-cols-2 gap-4" ]
                [ div []
                    [ label [ class "block text-sm font-medium text-gray-700" ]
                        [ text "Email"
                        , errorIndicator "email"
                        ]
                    , input
                        [ type_ "email"
                        , class "mt-1 px-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500"
                        , value agent.email
                        , onInput (onFieldInput "email")
                        , disabled (not canEditField)
                        ]
                        []
                    ]
                , div []
                    [ label [ class "block text-sm font-medium text-gray-700" ]
                        [ text "Phone"
                        , errorIndicator "phone"
                        ]
                    , input
                        [ type_ "tel"
                        , class "mt-1 px-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                        , value formattedPhone
                        , onInput (onFieldInput "phone")
                        , placeholder "(555) 555-5555"
                        , disabled (not canEditField)
                        ]
                        []
                    ]
                ]
            ]
        , div [ class "mt-4" ]
            [ label [ class "block text-sm font-medium text-gray-700 mb-2" ]
                [ text "Administrator Status" ]
            , div [ class "flex items-center space-x-6" ]
                [ label
                    [ class "inline-flex items-center"
                    , classList [ ( "opacity-60", isCurrentUserAgent && agent.isAdmin ) ]
                    ]
                    [ input
                        [ type_ "checkbox"
                        , class "rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        , checked agent.isAdmin
                        , onClick (ToggleAgentRole agent.id "admin")
                        , disabled ((isCurrentUserAgent && agent.isAdmin) || not canEdit)
                        , title
                            (if isCurrentUserAgent && agent.isAdmin then
                                "You cannot remove your admin role"

                             else
                                ""
                            )
                        ]
                        []
                    , span [ class "ml-2 text-sm text-gray-700" ]
                        [ text "Admin" ]
                    ]
                ]
            ]
        , div [ class "mt-6" ]
            [ p [ class "text-sm text-gray-500" ]
                [ text "This agent will automatically use the carriers and state licenses from your organization settings." ]
            ]
        , if hasChanges then
            div [ class "mt-4 flex justify-end" ]
                [ button
                    [ class "px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                    , onClick (SaveAgentDetails agent.id)
                    , disabled isSaving
                    ]
                    [ if isSaving then
                        text "Saving..."

                      else
                        text "Save Changes"
                    ]
                ]

          else
            text ""
        ]


viewAddAgentButton : Html Msg
viewAddAgentButton =
    div [ class "text-center mt-8" ]
        [ button
            [ class "inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
            , onClick AddAnotherAgent
            ]
            [ span [ class "mr-2" ] [ text "+" ]
            , text "Add Agent"
            ]
        ]


viewBottomBar : Model -> Html Msg
viewBottomBar model =
    let
        allAgentsValid =
            List.all
                (\agent ->
                    not (String.isEmpty agent.phone)
                        && not (String.isEmpty agent.firstName)
                        && not (String.isEmpty agent.lastName)
                        && not (String.isEmpty agent.email)
                        && (agent.isAdmin || agent.isAgent)
                )
                model.agents

        canAdd =
            not (String.isEmpty (String.trim model.firstName))
                && not (String.isEmpty (String.trim model.lastName))
                && model.emailStatus
                == Valid
                && isValidPhone model.displayPhone
                && (model.isAdmin || model.isAgent)
    in
    div [ class "fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-4 sm:px-6 z-10" ]
        [ div [ class "max-w-3xl mx-auto" ]
            [ if model.error /= Nothing then
                div [ class "mb-4" ]
                    [ p [ class "text-red-600" ]
                        [ text (Maybe.withDefault "" model.error) ]
                    ]

              else
                text ""
            , if model.isSetup then
                div [ class "flex justify-end" ]
                    [ button
                        [ class "px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
                        , onClick FinishSetup
                        , disabled (not allAgentsValid || List.isEmpty model.agents)
                        ]
                        [ text "Continue to Dashboard" ]
                    ]

              else
                text ""
            ]
        ]


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )

        UpdateEmail email ->
            ( { model | email = email, emailStatus = NotChecked }, Cmd.none )

        UpdateFirstName name ->
            ( { model | firstName = name }, Cmd.none )

        UpdateLastName name ->
            ( { model | lastName = name }, Cmd.none )

        UpdatePhone input ->
            let
                rawDigits =
                    String.filter Char.isDigit input
                        |> String.left 10

                formattedPhone =
                    formatPhoneNumber rawDigits
            in
            ( { model
                | rawPhone = rawDigits
                , displayPhone = formattedPhone
                , pendingSave = Just "main" -- Add pending save for main agent
              }
            , Cmd.none
            )

        ToggleAdmin agentId ->
            let
                updatedAgents =
                    List.map
                        (\agent ->
                            if agent.id == agentId then
                                { agent | isAdmin = not agent.isAdmin }

                            else
                                agent
                        )
                        model.agents
            in
            ( { model | agents = updatedAgents }
            , case List.head (List.filter (\a -> a.id == agentId) updatedAgents) of
                Just agent ->
                    saveAgentDetails agent

                Nothing ->
                    Cmd.none
            )

        ToggleAgent agentId ->
            let
                updatedAgents =
                    List.map
                        (\agent ->
                            if agent.id == agentId then
                                { agent | isAgent = not agent.isAgent }

                            else
                                agent
                        )
                        model.agents
            in
            ( { model | agents = updatedAgents }
            , case List.head (List.filter (\a -> a.id == agentId) updatedAgents) of
                Just agent ->
                    saveAgentDetails agent

                Nothing ->
                    Cmd.none
            )

        UpdateField field value ->
            case model.currentUser of
                Just user ->
                    let
                        updatedUser =
                            case field of
                                "firstName" ->
                                    { user | firstName = value }

                                "lastName" ->
                                    { user | lastName = value }

                                "phone" ->
                                    { user | phone = String.filter Char.isDigit value }

                                _ ->
                                    user
                    in
                    ( { model | currentUser = Just updatedUser }
                    , Cmd.none
                    )

                Nothing ->
                    ( model, Cmd.none )

        SaveAgent ->
            if isFormValid model then
                ( { model | isLoading = True }
                , submitNewAgent model
                )

            else
                ( { model | error = Just "Please fill out all fields, ensure email is valid, and select at least one role (admin or agent)" }
                , Cmd.none
                )

        AgentSaved (Ok ()) ->
            if model.isSetup then
                ( { model
                    | showAddForm = False
                    , isAdmin = False
                    , firstName = ""
                    , lastName = ""
                    , email = ""
                    , rawPhone = ""
                    , displayPhone = ""
                    , carriers = []
                    , stateLicenses = []
                  }
                , Cmd.batch
                    [ fetchAgents -- Refresh the agents list
                    , fetchCurrentUser -- Refresh current user to get updated role
                    ]
                )

            else
                ( { model | error = Nothing }
                , Nav.pushUrl model.key "/agents"
                )

        AgentSaved (Err _) ->
            ( { model | error = Just "Failed to save agent" }
            , Cmd.none
            )

        ToggleAgentRole agentId role ->
            let
                isSelfUser agId =
                    case model.currentUser of
                        Just user ->
                            user.id == agId

                        Nothing ->
                            False

                updateAgent agent =
                    { agent | isAgent = True }

                -- hardcodding everyone as agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )

        CheckAgentEmail ->
            if String.isEmpty (String.trim model.email) then
                ( { model | emailStatus = NotChecked }
                , Cmd.none
                )

            else if model.emailStatus == Checking then
                ( model, Cmd.none )

            else
                ( { model | emailStatus = Checking }
                , checkAgentEmail model.email
                )

        FinishSetup ->
            ( model
            , Nav.pushUrl model.key "/dashboard"
            )

        LoadFromOrg ->
            ( { model | isLoading = True }
            , Http.get
                { url = "/api/settings"
                , expect = Http.expectJson GotOrgSettings (Decode.field "orgSettings" settingsObjectDecoder)
                }
            )

        GotOrgSettings (Ok settings) ->
            ( { model
                | carriers = settings.carrierContracts
                , stateLicenses = settings.stateLicenses
                , isLoading = False
                , orgSettings = Just settings
              }
            , Cmd.none
            )

        GotOrgSettings (Err _) ->
            ( { model
                | error = Just "Failed to load organization settings"
                , isLoading = False
              }
            , Cmd.none
            )

        AddAnotherAgent ->
            ( { model
                | showAddForm = True
                , firstName = ""
                , lastName = ""
                , email = ""
                , rawPhone = ""
                , displayPhone = ""
                , carriers = []
                , stateLicenses = []
                , isAdmin = False
                , isAgent = True
              }
            , Cmd.none
            )

        CancelAddAgent ->
            ( { model | showAddForm = False }, Cmd.none )

        RemoveAgent id ->
            ( { model | agents = List.filter (\agent -> agent.id /= id) model.agents }, Cmd.none )

        FetchAgents ->
            ( model, fetchAgents )

        GotAgents result ->
            case result of
                Ok agents ->
                    let
                        finalAgents =
                            if model.isSetup then
                                -- In setup mode, make sure we have at least the current user as an agent
                                case model.currentUser of
                                    Just user ->
                                        -- Check if the current user is already in the agents list
                                        if List.any (\a -> a.id == user.id) agents then
                                            -- Current user is already in the list, use the API result
                                            agents

                                        else
                                            -- Add the current user to the agents list
                                            { id = user.id
                                            , firstName = user.firstName
                                            , lastName = user.lastName
                                            , email = user.email
                                            , phone = user.phone
                                            , isAdmin = user.isAdmin
                                            , isAgent = user.isAgent -- Use actual agent status from user
                                            , carriers = []
                                            , stateLicenses = []
                                            , expanded = False
                                            }
                                                :: agents

                                    Nothing ->
                                        agents

                            else
                                -- In normal mode, use the API result
                                agents
                    in
                    ( { model | agents = finalAgents }, Cmd.none )

                Err error ->
                    case error of
                        Http.BadStatus 403 ->
                            -- For 403, keep the current user in the agents list
                            -- Don't show an error since this is expected for non-admin users
                            ( model, Cmd.none )

                        _ ->
                            let
                                errorMessage =
                                    case error of
                                        Http.BadUrl url ->
                                            "Invalid URL: " ++ url

                                        Http.Timeout ->
                                            "Request timed out"

                                        Http.NetworkError ->
                                            "Network error occurred"

                                        Http.BadStatus status ->
                                            "Server error: " ++ String.fromInt status

                                        Http.BadBody message ->
                                            "Data error: " ++ message
                            in
                            ( { model | error = Just errorMessage }, Cmd.none )

        GotCurrentUser result ->
            case result of
                Ok response ->
                    case response.user of
                        Just user ->
                            let
                                -- Create agent from current user
                                initialAgent =
                                    { id = user.id
                                    , firstName = user.firstName
                                    , lastName = user.lastName
                                    , email = user.email
                                    , phone = user.phone
                                    , isAdmin = user.isAdmin
                                    , isAgent = user.isAgent -- Use actual agent status
                                    , carriers = []
                                    , stateLicenses = []
                                    , expanded = False
                                    }

                                -- Include the current user in agents list for setup mode
                                updatedAgents =
                                    if model.isSetup then
                                        -- In setup mode, always have current user as the first agent
                                        if List.any (\a -> a.id == user.id) model.agents then
                                            -- If current user is already in the list, keep existing agents
                                            model.agents

                                        else
                                            -- Add current user to the list
                                            initialAgent :: model.agents

                                    else
                                        -- In normal mode, keep the existing agents
                                        model.agents
                            in
                            ( { model
                                | currentUser = Just user
                                , agents = updatedAgents
                                , error = Nothing -- Clear any previous errors
                              }
                            , Cmd.none
                            )

                        Nothing ->
                            ( { model | currentUser = Nothing }, Cmd.none )

                Err _ ->
                    ( { model | error = Just "Failed to load current user" }
                    , Cmd.none
                    )

        ToggleAgentExpanded agentId ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent | expanded = not agent.expanded }

                    else
                        agent
            in
            ( { model | agents = List.map updateAgent model.agents }, Cmd.none )

        UpdateAgentCarrier agentId carrier isSelected ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | carriers =
                                if isSelected then
                                    agent.carriers ++ [ carrier ]

                                else
                                    List.filter ((/=) carrier) agent.carriers
                        }

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )

        UpdateAgentState agentId state isSelected ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | stateLicenses =
                                if isSelected then
                                    agent.stateLicenses ++ [ state ]

                                else
                                    List.filter ((/=) state) agent.stateLicenses
                        }

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )

        SelectAllStatesForAgent agentId isSelected ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | stateLicenses =
                                if isSelected then
                                    allStates

                                else
                                    []
                        }

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )

        SelectCommonStatesForAgent agentId region ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | stateLicenses = agent.stateLicenses ++ getRegionStates region
                        }

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )

        LoadFromOrgForAgent agentId ->
            ( { model | isLoadingForAgent = Just agentId }
            , Http.get
                { url = "/api/settings"
                , expect = Http.expectJson (GotOrgSettingsForAgent agentId) (Decode.field "orgSettings" settingsObjectDecoder)
                }
            )

        GotOrgSettingsForAgent agentId (Ok settings) ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | carriers = settings.carrierContracts
                            , stateLicenses = settings.stateLicenses
                        }

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , isLoadingForAgent = Nothing -- Clear the Loading state
              }
            , Cmd.none
            )

        GotOrgSettingsForAgent agentId (Err _) ->
            ( { model
                | error = Just "Failed to load organization settings"
                , isLoadingForAgent = Nothing -- Clear the Loading state
              }
            , Cmd.none
            )

        SelectAllCarriers isSelected ->
            ( { model
                | carriers =
                    if isSelected then
                        allCarriers

                    else
                        []
              }
            , Cmd.none
            )

        SelectAllStates isSelected ->
            ( { model
                | stateLicenses =
                    if isSelected then
                        allStates

                    else
                        []
              }
            , Cmd.none
            )

        DeleteAgent agentId ->
            ( { model | showDeleteConfirm = Just agentId, reassignAgentId = Nothing }, Cmd.none )

        ConfirmDeleteAgent agentId reassignToAgentId ->
            ( { model | showDeleteConfirm = Nothing, reassignAgentId = reassignToAgentId, isLoading = True }
            , deleteAgent agentId reassignToAgentId
            )

        CloseDeleteConfirmModal ->
            ( { model | showDeleteConfirm = Nothing, error = Nothing }, Cmd.none )

        SelectCommonStates region ->
            ( { model | stateLicenses = model.stateLicenses ++ getRegionStates region }
            , Cmd.none
            )

        NavigateTo path ->
            ( model, Nav.pushUrl model.key path )

        ShowModal ->
            ( { model | showAddForm = True }, Cmd.none )

        CloseModal ->
            ( { model | showAddForm = False }, Cmd.none )

        ToggleCarrier agentId isSelected ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | carriers =
                                if isSelected then
                                    agent.carriers ++ [ agentId ]

                                else
                                    List.filter ((/=) agentId) agent.carriers
                        }

                    else
                        agent
            in
            ( { model | agents = List.map updateAgent model.agents }
            , Cmd.none
            )

        ToggleState agentId isSelected ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | stateLicenses =
                                if isSelected then
                                    agent.stateLicenses ++ [ agentId ]

                                else
                                    List.filter ((/=) agentId) agent.stateLicenses
                        }

                    else
                        agent
            in
            ( { model | agents = List.map updateAgent model.agents }
            , Cmd.none
            )

        SelectAllCarriersForAgent agentId isSelected ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | carriers =
                                if isSelected then
                                    allCarriers

                                else
                                    []
                        }

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )

        SaveAgentDetails agentId ->
            ( { model
                | pendingSave = Nothing
                , isLoadingForAgent = Just agentId
              }
            , case List.filter (\a -> a.id == agentId) model.agents of
                agent :: _ ->
                    saveAgentDetails agent

                [] ->
                    Cmd.none
            )

        AgentDetailsSaved agentId result ->
            case result of
                Ok _ ->
                    let
                        updateAgent agent =
                            if agent.id == agentId then
                                { agent | expanded = False }

                            else
                                agent
                    in
                    ( { model
                        | agents = List.map updateAgent model.agents
                        , isLoadingForAgent = Nothing
                        , error = Nothing
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to save agent details"
                        , isLoadingForAgent = Nothing
                      }
                    , Cmd.none
                    )

        AgentDeleted result ->
            case result of
                Ok _ ->
                    ( { model | isLoading = False, error = Nothing }
                    , fetchAgents
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to delete agent"
                        , isLoading = False
                      }
                    , Cmd.none
                    )

        DebounceSaveAgent agentId ->
            if agentId == "main" then
                -- Handle main agent save
                case model.currentUser of
                    Just user ->
                        let
                            agent =
                                { id = user.id
                                , firstName = user.firstName
                                , lastName = user.lastName
                                , email = user.email
                                , phone = user.phone
                                , isAdmin = user.isAdmin
                                , isAgent = user.isAgent
                                , carriers = []
                                , stateLicenses = []
                                , expanded = False
                                }
                        in
                        ( { model | pendingSave = Nothing }
                        , saveAgentDetails agent
                        )

                    Nothing ->
                        ( model, Cmd.none )

            else
                -- Handle sub-agent save
                ( { model | pendingSave = Nothing }
                , case List.filter (\a -> a.id == agentId) model.agents of
                    agent :: _ ->
                        saveAgentDetails agent

                    [] ->
                        Cmd.none
                )

        EditAgent agent ->
            ( { model
                | agents =
                    List.map
                        (\a ->
                            if a.id == agent.id then
                                { a | expanded = not a.expanded }

                            else
                                a
                        )
                        model.agents
              }
            , Cmd.none
            )

        UpdateAdminCheckbox value ->
            ( { model | isAdmin = value, isAgent = True }, Cmd.none )

        UpdateAgentCheckbox value ->
            -- not using anymore
            let
                -- Ensure at least one role is selected
                newIsAdmin =
                    if not value then
                        True
                        -- If agent is being unchecked, ensure admin is checked

                    else
                        model.isAdmin
            in
            ( { model | isAgent = value, isAdmin = newIsAdmin }, Cmd.none )

        GotEmailResponse result ->
            case result of
                Ok response ->
                    ( { model
                        | emailStatus =
                            if response.available then
                                Valid

                            else
                                Invalid response.message
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model
                        | emailStatus = Invalid "Failed to check email availability"
                      }
                    , Cmd.none
                    )

        UpdateAgentField agentId field value ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        case field of
                            "firstName" ->
                                { agent | firstName = value }

                            "lastName" ->
                                { agent | lastName = value }

                            "phone" ->
                                { agent | phone = formatPhoneNumber (String.filter Char.isDigit value) }

                            _ ->
                                agent

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )



-- Helper functions


formatPhoneNumber : String -> String
formatPhoneNumber rawPhone =
    let
        digits =
            String.filter Char.isDigit rawPhone
                |> String.left 10

        len =
            String.length digits
    in
    if len == 0 then
        ""

    else if len <= 3 then
        "(" ++ digits

    else if len <= 6 then
        "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

    else
        "("
            ++ String.left 3 digits
            ++ ") "
            ++ String.slice 3 6 digits
            ++ "-"
            ++ String.dropLeft 6 digits


saveAgent : User -> Model -> Cmd Msg
saveAgent user model =
    let
        carriers =
            case model.orgSettings of
                Just settings ->
                    settings.carrierContracts

                Nothing ->
                    []

        stateLicenses =
            case model.orgSettings of
                Just settings ->
                    settings.stateLicenses

                Nothing ->
                    []

        agent =
            { id = user.id
            , firstName = user.firstName
            , lastName = user.lastName
            , email = user.email
            , phone = user.phone
            , isAdmin = user.isAdmin
            , isAgent = True -- always true
            , carriers = carriers
            , stateLicenses = stateLicenses
            , expanded = False
            }
    in
    Http.post
        { url = "/api/agents"
        , body = Http.jsonBody (encodeAgent agent)
        , expect = Http.expectWhatever AgentSaved
        }


settingsDecoder : Decoder SettingsResponse
settingsDecoder =
    Decode.map2 SettingsResponse
        (Decode.field "orgSettings" settingsObjectDecoder)
        (Decode.field "canEditOrgSettings" Decode.bool)


type alias SettingsResponse =
    { orgSettings : Settings
    , canEditOrgSettings : Bool
    }


type alias Settings =
    { stateLicenses : List String
    , carrierContracts : List String
    , stateCarrierSettings : List StateCarrierSetting
    , allowAgentSettings : Bool
    , emailSendBirthday : Bool
    , emailSendPolicyAnniversary : Bool
    , emailSendAep : Bool
    , smartSendEnabled : Bool
    }


type alias StateCarrierSetting =
    { state : String
    , carrier : String
    , active : Bool
    , targetGI : Bool
    }


settingsObjectDecoder : Decoder Settings
settingsObjectDecoder =
    Decode.map8 Settings
        (Decode.field "stateLicenses" (Decode.list Decode.string))
        (Decode.field "carrierContracts" (Decode.list Decode.string))
        (Decode.field "stateCarrierSettings" (Decode.list stateCarrierSettingDecoder))
        (Decode.field "allowAgentSettings" Decode.bool)
        (Decode.field "emailSendBirthday" Decode.bool)
        (Decode.field "emailSendPolicyAnniversary" Decode.bool)
        (Decode.field "emailSendAep" Decode.bool)
        (Decode.field "smartSendEnabled" Decode.bool)


stateCarrierSettingDecoder : Decoder StateCarrierSetting
stateCarrierSettingDecoder =
    Decode.map4 StateCarrierSetting
        (Decode.field "state" Decode.string)
        (Decode.field "carrier" Decode.string)
        (Decode.field "active" Decode.bool)
        (Decode.field "targetGI" Decode.bool)


subscriptions : Model -> Sub Msg
subscriptions model =
    case model.pendingSave of
        Just agentId ->
            Time.every 2000 (\_ -> DebounceSaveAgent agentId)

        Nothing ->
            Sub.none


isValidEmail : String -> Bool
isValidEmail email =
    let
        containsAtSign =
            String.contains "@" email

        containsDot =
            String.contains "." email

        hasValidLength =
            String.length email >= 5
    in
    containsAtSign && containsDot && hasValidLength


isValidPhone : String -> Bool
isValidPhone phone =
    let
        -- Remove all non-digit characters
        digits =
            String.filter Char.isDigit phone
    in
    String.length digits == 10


canSave : Model -> Bool
canSave model =
    let
        hasValidName =
            not (String.isEmpty (String.trim model.firstName))
                && not (String.isEmpty (String.trim model.lastName))

        hasValidEmail =
            isValidEmail model.email

        hasValidPhone =
            isValidPhone model.displayPhone

        hasValidRole =
            model.isAdmin || model.isAgent

        allAgentsValid =
            List.all
                (\agent ->
                    not (String.isEmpty agent.phone)
                        && not (String.isEmpty agent.firstName)
                        && not (String.isEmpty agent.lastName)
                        && not (String.isEmpty agent.email)
                        && (agent.isAdmin || agent.isAgent)
                )
                model.agents
    in
    if model.showAddForm then
        hasValidName && hasValidEmail && hasValidPhone && hasValidRole

    else
        allAgentsValid


fetchAgents : Cmd Msg
fetchAgents =
    Http.get
        { url = "/api/agents"
        , expect =
            Http.expectStringResponse GotAgents
                (\response ->
                    case response of
                        Http.BadUrl_ url ->
                            Err (Http.BadUrl url)

                        Http.Timeout_ ->
                            Err Http.Timeout

                        Http.NetworkError_ ->
                            Err Http.NetworkError

                        Http.BadStatus_ metadata body ->
                            Err (Http.BadStatus metadata.statusCode)

                        Http.GoodStatus_ metadata body ->
                            case Decode.decodeString (Decode.list agentDecoder) body of
                                Ok value ->
                                    Ok value

                                Err err ->
                                    Err (Http.BadBody (Decode.errorToString err))
                )
        }


agentDecoder : Decoder Agent
agentDecoder =
    Decode.succeed Agent
        |> Pipeline.required "id" Decode.string
        |> Pipeline.required "firstName" Decode.string
        |> Pipeline.required "lastName" Decode.string
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "phone" Decode.string
        |> Pipeline.required "isAdmin" Decode.bool
        |> Pipeline.required "isAgent" Decode.bool
        |> Pipeline.optional "carriers" (Decode.list Decode.string) []
        |> Pipeline.optional "stateLicenses" (Decode.list Decode.string) []
        |> Pipeline.hardcoded False


encodeAgent : Agent -> Encode.Value
encodeAgent agent =
    Encode.object
        [ ( "firstName", Encode.string agent.firstName )
        , ( "lastName", Encode.string agent.lastName )
        , ( "email", Encode.string agent.email )
        , ( "phone", Encode.string agent.phone )
        , ( "isAdmin", Encode.bool agent.isAdmin )
        , ( "isAgent", Encode.bool agent.isAgent )
        , ( "carriers", Encode.list Encode.string agent.carriers )
        , ( "stateLicenses", Encode.list Encode.string agent.stateLicenses )
        ]


isAdminBecomingAgent : Model -> Bool
isAdminBecomingAgent model =
    case model.currentUser of
        Just user ->
            model.isAdmin && user.isAdmin

        Nothing ->
            False


fetchCurrentUser : Cmd Msg
fetchCurrentUser =
    Http.get
        { url = "/api/me"
        , expect = Http.expectJson GotCurrentUser currentUserResponseDecoder
        }


currentUserResponseDecoder : Decoder CurrentUserResponse
currentUserResponseDecoder =
    Decode.map2 CurrentUserResponse
        (Decode.field "success" Decode.bool)
        (Decode.maybe (Decode.field "user" userDecoder))


userDecoder : Decoder User
userDecoder =
    let
        idDecoder =
            Decode.oneOf
                [ Decode.field "id" Decode.string
                , Decode.field "id" (Decode.map String.fromInt Decode.int)
                ]

        -- Add decoders that handle different boolean formats
        boolDecoder =
            Decode.oneOf
                [ Decode.bool
                , Decode.map (\n -> n == 1) Decode.int
                , Decode.map (\s -> s == "1" || s == "true") Decode.string
                ]
    in
    Decode.map7 User
        idDecoder
        (Decode.field "email" Decode.string)
        (Decode.field "firstName" Decode.string)
        (Decode.field "lastName" Decode.string)
        (Decode.field "is_admin" boolDecoder)
        (Decode.field "is_agent" boolDecoder)
        (Decode.oneOf
            [ Decode.field "phone" Decode.string
            , Decode.succeed ""
            ]
        )


saveAgentDetails : Agent -> Cmd Msg
saveAgentDetails agent =
    Http.request
        { method = "PUT"
        , headers = []
        , url = "/api/agents/" ++ agent.id
        , body = Http.jsonBody (encodeAgent agent)
        , expect = Http.expectWhatever (AgentDetailsSaved agent.id)
        , timeout = Nothing
        , tracker = Nothing
        }


isCurrentUser : Agent -> Model -> Bool
isCurrentUser agent model =
    case model.currentUser of
        Just user ->
            user.id == agent.id

        Nothing ->
            False


canModifySettings : Model -> String -> Bool
canModifySettings model agentId =
    case ( model.currentUser, model.orgSettings ) of
        ( Just user, Just settings ) ->
            -- Admin and admin_agent can always modify settings
            user.isAdmin

        _ ->
            False


deleteAgent : String -> Maybe String -> Cmd Msg
deleteAgent agentId maybeReassignToAgentId =
    let
        url =
            case maybeReassignToAgentId of
                Just reassignToAgentId ->
                    "/api/agents/" ++ agentId ++ "?reassignTo=" ++ reassignToAgentId

                Nothing ->
                    "/api/agents/" ++ agentId
    in
    Http.request
        { method = "DELETE"
        , headers = []
        , url = url
        , body = Http.emptyBody
        , expect = Http.expectWhatever AgentDeleted
        , timeout = Nothing
        , tracker = Nothing
        }


viewDeleteConfirmationModal : Model -> Html Msg
viewDeleteConfirmationModal model =
    case model.showDeleteConfirm of
        Just agentId ->
            let
                targetAgent =
                    List.filter (\a -> a.id == agentId) model.agents
                        |> List.head

                otherAgents =
                    List.filter (\a -> a.id /= agentId) model.agents

                agentName =
                    case targetAgent of
                        Just agent ->
                            agent.firstName ++ " " ++ agent.lastName

                        Nothing ->
                            "this agent"

                errorMessageBlock =
                    if model.error /= Nothing && model.showDeleteConfirm /= Nothing then
                        div [ class "mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                            [ text (Maybe.withDefault "" model.error) ]

                    else
                        text ""
            in
            div [ class "fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50" ]
                [ div [ class "bg-white rounded-lg max-w-lg w-full p-6" ]
                    [ h3 [ class "text-lg font-medium text-gray-900 mb-4" ]
                        [ text ("Delete " ++ agentName ++ "?") ]
                    , p [ class "text-sm text-gray-500 mb-4" ]
                        [ text "This will permanently remove this agent from your organization and cannot be undone." ]
                    , errorMessageBlock
                    , if not (List.isEmpty model.contacts) then
                        div [ class "mb-6" ]
                            [ p [ class "text-sm text-gray-500 mb-2" ]
                                [ text "This agent has contacts assigned to them. What would you like to do with these contacts?" ]
                            , div [ class "mt-4" ]
                                [ select
                                    [ class "mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                                    , onInput
                                        (\val ->
                                            if val == "" then
                                                NoOp

                                            else
                                                ConfirmDeleteAgent agentId (Just val)
                                        )
                                    ]
                                    (option [ value "" ] [ text "Select an agent to reassign contacts" ]
                                        :: List.map
                                            (\agent ->
                                                option [ value agent.id ]
                                                    [ text (agent.firstName ++ " " ++ agent.lastName) ]
                                            )
                                            otherAgents
                                    )
                                ]
                            ]

                      else
                        text ""
                    , div [ class "flex justify-end space-x-3" ]
                        [ button
                            [ class "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                            , onClick (ConfirmDeleteAgent agentId Nothing)
                            ]
                            [ text "Delete Without Reassigning" ]
                        , button
                            [ class "px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700"
                            , onClick (ConfirmDeleteAgent agentId model.reassignAgentId)
                            ]
                            [ text "Delete" ]
                        , button
                            [ class "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                            , onClick CloseDeleteConfirmModal
                            ]
                            [ text "Cancel" ]
                        ]
                    ]
                ]

        Nothing ->
            text ""


viewEmailStatus : EmailStatus -> Html Msg
viewEmailStatus status =
    div [ class "mt-1 transition-all duration-200" ]
        [ case status of
            NotChecked ->
                text ""

            Checking ->
                div [ class "text-blue-600 text-sm flex items-center" ]
                    [ div [ class "animate-spin h-4 w-4 mr-2 border-2 border-blue-600 border-t-transparent rounded-full" ] []
                    , text "Checking availability..."
                    ]

            Valid ->
                div [ class "text-green-600 text-sm flex items-center" ]
                    [ -- Checkmark icon
                      svg
                        [ Svg.Attributes.class "h-4 w-4 mr-1"
                        , Svg.Attributes.fill "none"
                        , Svg.Attributes.viewBox "0 0 24 24"
                        , Svg.Attributes.stroke "currentColor"
                        ]
                        [ path
                            [ Svg.Attributes.strokeLinecap "round"
                            , Svg.Attributes.strokeLinejoin "round"
                            , Svg.Attributes.strokeWidth "2"
                            , Svg.Attributes.d "M5 13l4 4L19 7"
                            ]
                            []
                        ]
                    , text "Email is available"
                    ]

            Invalid message ->
                div [ class "text-red-600 text-sm flex items-center" ]
                    [ -- X icon
                      svg
                        [ Svg.Attributes.class "h-4 w-4 mr-1"
                        , Svg.Attributes.fill "none"
                        , Svg.Attributes.viewBox "0 0 24 24"
                        , Svg.Attributes.stroke "currentColor"
                        ]
                        [ path
                            [ Svg.Attributes.strokeLinecap "round"
                            , Svg.Attributes.strokeLinejoin "round"
                            , Svg.Attributes.strokeWidth "2"
                            , Svg.Attributes.d "M6 18L18 6M6 6l12 12"
                            ]
                            []
                        ]
                    , text message
                    ]
        ]


checkAgentEmail : String -> Cmd Msg
checkAgentEmail email =
    Http.get
        { url = "/api/organizations/check-email/" ++ Url.percentEncode email
        , expect = Http.expectJson GotEmailResponse emailResponseDecoder
        }


emailResponseDecoder : Decode.Decoder EmailResponse
emailResponseDecoder =
    Decode.map2 EmailResponse
        (Decode.field "available" Decode.bool)
        (Decode.field "message" Decode.string)


isFormValid : Model -> Bool
isFormValid model =
    let
        isEmailValid =
            model.emailStatus == Valid

        areNamesValid =
            not (String.isEmpty (String.trim model.firstName))
                && not (String.isEmpty (String.trim model.lastName))

        isPhoneValid =
            not (String.isEmpty (String.trim model.displayPhone))

        hasValidRole =
            model.isAdmin || model.isAgent
    in
    isEmailValid && areNamesValid && isPhoneValid && hasValidRole


submitNewAgent : Model -> Cmd Msg
submitNewAgent model =
    -- For new agents, we need to send a POST to /api/agents/create
    -- This endpoint should be more permissive than updating an existing agent
    Http.post
        { url = "/api/agents/create"
        , body =
            Http.jsonBody
                (Encode.object
                    [ ( "firstName", Encode.string model.firstName )
                    , ( "lastName", Encode.string model.lastName )
                    , ( "email", Encode.string model.email )
                    , ( "phone", Encode.string model.rawPhone )
                    , ( "isAdmin", Encode.bool model.isAdmin )
                    , ( "isAgent", Encode.bool model.isAgent )
                    , ( "carriers", Encode.list Encode.string model.carriers )
                    , ( "stateLicenses", Encode.list Encode.string model.stateLicenses )
                    ]
                )
        , expect = Http.expectWhatever AgentSaved
        }

================
File: src/AgeCalc.elm
================
module AgeCalc exposing (getAgeNextMonth)

import Date exposing (Date, Interval(..), Unit(..), add, fromIsoString, toIsoString)
import Time exposing (Month(..))


getAgeNextMonth : String -> Date -> Int
getAgeNextMonth birthDateStr currentDate =
    case fromIsoString birthDateStr of
        Ok birthDate ->
            let
                -- Get first of next month
                nextMonth =
                    currentDate
                        |> add Months 1
                        |> Date.floor Month

                -- Calculate years between birth date and first of next month
                years =
                    Date.diff Years birthDate nextMonth
            in
            years

        Err _ ->
            0

================
File: src/BirthdayRules.elm
================
module BirthdayRules exposing
    ( BirthdayRuleType(..)
    , StateRule
    , canPresentDifferentPlanOnly
    , getDelayedEmailDate
    , getStateRule
    , isInBirthdayRuleWindow
    , isInContinuousOpenEnrollment
    )

{-| This module handles birthday rules for different states.
It provides functionality to check if a contact is in a birthday rule window,
if they are in a continuous open enrollment state, and if they can only be
presented with different plan types during their birthday window.
-}

import Date exposing (Date)
import Time exposing (Month(..))


{-| Represents the type of birthday rule for a state.
-}
type BirthdayRuleType
    = BirthdayRule
    | AnniversaryRule
    | ContinuousOpenEnrollment
    | NoSpecialRule


{-| Represents a state's birthday rule configuration.
-}
type alias StateRule =
    { state : String
    , ruleType : BirthdayRuleType
    , daysBeforeBirthday : Int
    , totalDays : Int
    , canPresentDifferentPlan : Bool
    , notes : String
    }


{-| List of states with their birthday rules.
-}
stateRules : List StateRule
stateRules =
    [ { state = "CA"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 30
      , totalDays = 60
      , canPresentDifferentPlan = False
      , notes = "60-day period starting 30 days before your birthday"
      }
    , { state = "ID"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 63
      , canPresentDifferentPlan = False
      , notes = "63-day period starting on your birthday"
      }
    , { state = "IL"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 45
      , canPresentDifferentPlan = False
      , notes = "45-day period starting on your birthday; 76+ no special GI right"
      }
    , { state = "KY"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 60
      , canPresentDifferentPlan = True
      , notes = "60-day period following your birthday; Can switch sideways and get GI right; Only present different plans."
      }
    , { state = "LA"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 30
      , totalDays = 93
      , canPresentDifferentPlan = False
      , notes = "93-day period starting 30 days before your birthday"
      }
    , { state = "MD"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 31
      , canPresentDifferentPlan = False
      , notes = "31-day period starting on your birthday"
      }
    , { state = "NV"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 60
      , canPresentDifferentPlan = False
      , notes = "60-day period starting on the first day of your birth month"
      }
    , { state = "OK"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 60
      , canPresentDifferentPlan = False
      , notes = "60-day period starting on your birthday"
      }
    , { state = "OR"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 31
      , canPresentDifferentPlan = False
      , notes = "31-day period starting on your birthday"
      }
    , { state = "MO"
      , ruleType = AnniversaryRule
      , daysBeforeBirthday = 30
      , totalDays = 63
      , canPresentDifferentPlan = True
      , notes = "63-day period starting 30 days before your policy anniversary date; Can switch sideways and get GI right; Only present different plans."
      }
    , { state = "CT"
      , ruleType = ContinuousOpenEnrollment
      , daysBeforeBirthday = 0
      , totalDays = 0
      , canPresentDifferentPlan = False
      , notes = "Continuous"
      }
    , { state = "MA"
      , ruleType = ContinuousOpenEnrollment
      , daysBeforeBirthday = 0
      , totalDays = 0
      , canPresentDifferentPlan = False
      , notes = "Continuous"
      }
    , { state = "NY"
      , ruleType = ContinuousOpenEnrollment
      , daysBeforeBirthday = 0
      , totalDays = 0
      , canPresentDifferentPlan = False
      , notes = "Continuous"
      }
    , { state = "WA"
      , ruleType = ContinuousOpenEnrollment
      , daysBeforeBirthday = 0
      , totalDays = 0
      , canPresentDifferentPlan = False
      , notes = "Continuous"
      }
    ]


{-| Get the birthday rule for a specific state.
-}
getStateRule : String -> Maybe StateRule
getStateRule state =
    let
        normalizedState =
            String.toUpper state
    in
    List.filter (\rule -> rule.state == normalizedState) stateRules
        |> List.head


{-| Check if a state has continuous open enrollment.
-}
isInContinuousOpenEnrollment : String -> Bool
isInContinuousOpenEnrollment state =
    case getStateRule state of
        Just rule ->
            rule.ruleType == ContinuousOpenEnrollment

        Nothing ->
            False


{-| Check if a contact can only be presented with different plan types during their birthday window.
-}
canPresentDifferentPlanOnly : String -> Bool
canPresentDifferentPlanOnly state =
    case getStateRule state of
        Just rule ->
            rule.canPresentDifferentPlan

        Nothing ->
            False


{-| Calculate the start date of a birthday rule window.
-}
getBirthdayRuleStartDate : StateRule -> Date -> Date
getBirthdayRuleStartDate rule birthDate =
    let
        currentYear =
            Date.year (Date.fromCalendarDate 2024 Jan 1)

        -- This is just a placeholder, will be replaced with actual current date
        -- For Nevada, the window starts on the first day of the birth month
        startDate =
            if rule.state == "NV" then
                Date.fromCalendarDate currentYear (Date.month birthDate) 1

            else
                -- For other states, subtract the days before birthday from the birthday
                Date.add Date.Days -rule.daysBeforeBirthday (Date.fromCalendarDate currentYear (Date.month birthDate) (Date.day birthDate))
    in
    startDate


{-| Calculate the end date of a birthday rule window.
-}
getBirthdayRuleEndDate : StateRule -> Date -> Date
getBirthdayRuleEndDate rule birthDate =
    let
        startDate =
            getBirthdayRuleStartDate rule birthDate
    in
    Date.add Date.Days rule.totalDays startDate


{-| Check if a date is within a birthday rule window.
For Anniversary rules (Missouri), pass the effectiveDate as the second parameter.
For Birthday rules, pass the birthDate as the second parameter.
-}
isInBirthdayRuleWindow : String -> Date -> Date -> Bool
isInBirthdayRuleWindow state baseDate currentDate =
    case getStateRule state of
        Just rule ->
            let
                currentYear =
                    Date.year currentDate

                -- Adjust base date to current year
                adjustedBaseDate =
                    Date.fromCalendarDate currentYear (Date.month baseDate) (Date.day baseDate)

                startDate =
                    getBirthdayRuleStartDate rule adjustedBaseDate

                endDate =
                    getBirthdayRuleEndDate rule adjustedBaseDate
            in
            -- Only check window for Birthday and Anniversary rules
            case rule.ruleType of
                BirthdayRule ->
                    Date.compare currentDate startDate /= LT && Date.compare currentDate endDate /= GT

                AnniversaryRule ->
                    Date.compare currentDate startDate /= LT && Date.compare currentDate endDate /= GT

                ContinuousOpenEnrollment ->
                    -- For continuous open enrollment states, they're always in an "open enrollment window"
                    True

                NoSpecialRule ->
                    False

        Nothing ->
            False


{-| Calculate the date when an email should be sent after a birthday rule window.
For Anniversary rules (Missouri), pass the effectiveDate as the second parameter.
For Birthday rules, pass the birthDate as the second parameter.
The third parameter should be the scheduled date that needs to be delayed.
-}
getDelayedEmailDate : String -> Date -> Date -> Date
getDelayedEmailDate state baseDate scheduledDate =
    case getStateRule state of
        Just rule ->
            let
                -- Use the year from the scheduled date
                scheduledYear =
                    Date.year scheduledDate

                -- Adjust base date to scheduled year
                adjustedBaseDate =
                    Date.fromCalendarDate scheduledYear (Date.month baseDate) (Date.day baseDate)

                -- For Nevada, the window starts on the first day of the birth month
                windowStartDate =
                    if rule.state == "NV" then
                        Date.fromCalendarDate scheduledYear (Date.month baseDate) 1

                    else
                        -- For other states, subtract the days before birthday from the birthday
                        Date.add Date.Days -rule.daysBeforeBirthday adjustedBaseDate

                -- Calculate the end date of the window
                windowEndDate =
                    Date.add Date.Days rule.totalDays windowStartDate

                -- Add one month to the end date
                delayedDate =
                    Date.add Date.Months 1 windowEndDate
            in
            delayedDate

        Nothing ->
            -- If no rule exists, just return the scheduled date
            scheduledDate

================
File: src/Calculator.elm
================
module Calculator exposing (main)

import Browser
import Html exposing (Html, div, h3, input, li, p, text, ul)
import Html.Attributes exposing (max, min, step, type_, value)
import Html.Events exposing (onInput)



-- Model Definition


type alias Model =
    { totalContacts : String -- Total book of business size as string input
    , yearWeights : List Float -- Weights for distribution over 6 years
    , responseRate : String -- Response rate as percentage (e.g., "5" for 5%)
    }



-- Initial State


init : Model
init =
    { totalContacts = ""
    , yearWeights = [ 10.0, 20.0, 30.0, 40.0, 50.0, 60.0 ] -- Initial weights, heavier toward recent years
    , responseRate = "5" -- Default response rate of 5%
    }



-- Messages


type Msg
    = SetTotalContacts String -- Update total contacts
    | SetYearWeight Int String -- Update weight for a specific year (index, value)
    | SetResponseRate String -- Update response rate



-- Update Function


update : Msg -> Model -> Model
update msg model =
    case msg of
        SetTotalContacts s ->
            { model | totalContacts = s }

        SetYearWeight i s ->
            case String.toFloat s of
                Just f ->
                    let
                        yearWeights =
                            List.indexedMap
                                (\j w ->
                                    if j == i then
                                        f

                                    else
                                        w
                                )
                                model.yearWeights
                    in
                    { model | yearWeights = yearWeights }

                Nothing ->
                    model

        -- Ignore invalid slider input (shouldn’t happen with range)
        SetResponseRate s ->
            { model | responseRate = s }



-- View Function


view : Model -> Html Msg
view model =
    div []
        [ -- Input for Total Contacts
          p [] [ text "Total Book of Business Size:" ]
        , input [ type_ "text", value model.totalContacts, onInput SetTotalContacts ] []

        -- Sliders for Year Distribution
        , h3 [] [ text "Adjust Distribution Over Years:" ]
        , div []
            (List.indexedMap
                (\i weight ->
                    div []
                        [ text ("Policies started " ++ String.fromInt (5 - i) ++ " years ago: ")
                        , input
                            [ type_ "range"
                            , min "0"
                            , max "100"
                            , step "1"
                            , value (String.fromFloat weight)
                            , onInput (SetYearWeight i)
                            ]
                            []
                        ]
                )
                model.yearWeights
            )

        -- Input for Response Rate
        , p [] [ text "Response Rate (%):" ]
        , input [ type_ "text", value model.responseRate, onInput SetResponseRate ] []

        -- Calculated Outputs
        , case ( String.toFloat model.totalContacts, String.toFloat model.responseRate ) of
            ( Ok n, Ok r ) ->
                let
                    -- Distribution Calculation
                    sumWeights =
                        List.sum model.yearWeights

                    contactsPerYear =
                        if sumWeights > 0 then
                            List.map (\w -> (w / sumWeights) * n) model.yearWeights

                        else
                            List.repeat 6 0.0

                    -- Core Calculations
                    weeklyCalls =
                        (n / 52) * (r / 100)

                    -- Calls based on one event per contact per year
                    monthlyCost =
                        (n / 10000) * 100

                    -- $100 per 10,000 contacts
                    annualCost =
                        12 * monthlyCost

                    -- Yearly cost
                    totalCallsPerYear =
                        n * (r / 100)

                    -- Total calls in a year
                    numberOfSales =
                        totalCallsPerYear * 0.5

                    -- 50% close rate
                    totalRevenue =
                        numberOfSales * 500

                    -- $500 increased LTV
                    roi =
                        if annualCost > 0 then
                            ((totalRevenue - annualCost) / annualCost) * 100
                            -- ROI as percentage

                        else
                            0
                in
                div []
                    [ -- Distribution Display (Placeholder for Chart)
                      h3 [] [ text "Distribution of Contacts:" ]
                    , ul []
                        (List.indexedMap
                            (\i c ->
                                li [] [ text ("Year -" ++ String.fromInt (5 - i) ++ ": " ++ String.fromFloat c ++ " contacts") ]
                            )
                            contactsPerYear
                        )

                    -- Calculated Metrics
                    , h3 [] [ text "Results:" ]
                    , p [] [ text ("Weekly Calls: " ++ String.fromFloat weeklyCalls) ]
                    , p [] [ text ("Monthly Cost: $" ++ String.fromFloat monthlyCost) ]
                    , p [] [ text ("Annual Cost: $" ++ String.fromFloat annualCost) ]
                    , p [] [ text ("Total Calls per Year: " ++ String.fromFloat totalCallsPerYear) ]
                    , p [] [ text ("Number of Sales: " ++ String.fromFloat numberOfSales) ]
                    , p [] [ text ("Total Revenue: $" ++ String.fromFloat totalRevenue) ]
                    , p [] [ text ("ROI: " ++ String.fromFloat roi ++ "%") ]
                    ]

            _ ->
                p [] [ text "Please enter valid numbers for total contacts and response rate." ]
        ]



-- Main Program


main : Program () Model Msg
main =
    Browser.sandbox { init = init, update = update, view = view }

================
File: src/CarrierNaic.elm
================
module CarrierNaic exposing
    ( Carrier(..)
    , allCarriers
    , carrierToNaics
    , carrierToString
    , naicToCarrier
    , stringToCarrier
    )


type Carrier
    = Aetna
    | Humana
    | UnitedHealthcare
    | Cigna
    | Aflac
    | Allstate
    | MutualOfOmaha
    | AceChubb


allCarriers : List Carrier
allCarriers =
    [ Aetna
    , Humana
    , UnitedHealthcare
    , Cigna
    , Aflac
    , Allstate
    , MutualOfOmaha
    , AceChubb
    ]


carrierToString : Carrier -> String
carrierToString carrier =
    case carrier of
        Aetna ->
            "Aetna"

        Humana ->
            "Humana"

        UnitedHealthcare ->
            "UnitedHealthcare"

        Cigna ->
            "Cigna"

        Aflac ->
            "Aflac"

        Allstate ->
            "Allstate"

        MutualOfOmaha ->
            "Mutual of Omaha"

        AceChubb ->
            "Ace Chubb"


stringToCarrier : String -> Maybe Carrier
stringToCarrier str =
    case String.toLower str of
        "aetna" ->
            Just Aetna

        "humana" ->
            Just Humana

        "unitedhealthcare" ->
            Just UnitedHealthcare

        "uhc" ->
            Just UnitedHealthcare

        "united healthcare" ->
            Just UnitedHealthcare

        "cigna" ->
            Just Cigna

        "aflac" ->
            Just Aflac

        "allstate" ->
            Just Allstate

        "mutual of omaha" ->
            Just MutualOfOmaha

        "ace chubb" ->
            Just AceChubb

        "ace" ->
            Just AceChubb

        "chubb" ->
            Just AceChubb

        _ ->
            Nothing


carrierToNaics : Carrier -> List String
carrierToNaics carrier =
    case carrier of
        Aetna ->
            [ "72052" -- Aetna Hlth Ins Co
            , "78700" -- Aetna Hlth & Life Ins Co
            , "68500" -- Continental Life Ins Co Brentwood
            ]

        Humana ->
            [ "12634" -- Humana Ins Co of NY
            , "60052" -- Humana Insurance Company
            , "60219" -- Humana Insurance Company
            , "60984" -- Humana Insurance Company
            , "69671" -- Humana Insurance Company
            , "70580" -- Humana Insurance Company
            , "73288" -- Humana Ins Co
            , "88595" -- Humana Insurance Company
            , "95158" -- Humana Insurance Company
            ]

        UnitedHealthcare ->
            [ "60093" -- United Hlthcare Ins Co Of NY
            , "79413" -- UnitedHealthcare Ins Co
            ]

        Cigna ->
            [ "61727" -- Cigna National Health Ins Co
            , "65269" -- Cigna Ins Co
            , "65722" -- Loyal Amer Life Ins Co (CIGNA)
            , "67369" -- Cigna Hlth & Life Ins Co
            , "88366" -- American Retirement Life Ins Co (CIGNA)
            ]

        Aflac ->
            [ "60380" -- AFLAC
            ]

        Allstate ->
            [ "60534" -- Allstate Health Solutions (AHL)
            , "82538" -- Allstate Health Solutions
            ]

        MutualOfOmaha ->
            [ "13100" -- Omaha Ins Co
            , "71412" -- Mutual Of Omaha Ins Co
            , "72850" -- United World Life Ins Co
            ]

        AceChubb ->
            [ "20699" -- Ace Prop & Cas Ins Co
            ]


naicToCarrier : String -> Maybe Carrier
naicToCarrier naic =
    case naic of
        -- Aetna
        "72052" ->
            Just Aetna

        "78700" ->
            Just Aetna

        "68500" ->
            Just Aetna

        -- Humana
        "12634" ->
            Just Humana

        "60052" ->
            Just Humana

        "60219" ->
            Just Humana

        "60984" ->
            Just Humana

        "69671" ->
            Just Humana

        "70580" ->
            Just Humana

        "73288" ->
            Just Humana

        "88595" ->
            Just Humana

        "95158" ->
            Just Humana

        -- UnitedHealthcare
        "60093" ->
            Just UnitedHealthcare

        "79413" ->
            Just UnitedHealthcare

        -- Cigna
        "61727" ->
            Just Cigna

        "65269" ->
            Just Cigna

        "65722" ->
            Just Cigna

        "67369" ->
            Just Cigna

        "88366" ->
            Just Cigna

        -- Aflac
        "60380" ->
            Just Aflac

        -- Allstate
        "60534" ->
            Just Allstate

        "82538" ->
            Just Allstate

        -- Mutual of Omaha
        "13100" ->
            Just MutualOfOmaha

        "71412" ->
            Just MutualOfOmaha

        "72850" ->
            Just MutualOfOmaha

        -- Ace Chubb
        "20699" ->
            Just AceChubb

        _ ->
            Nothing

================
File: src/ChangePlan.elm
================
module ChangePlan exposing (Model, Msg, init, subscriptions, update, view)

import Browser exposing (Document)
import Browser.Navigation as Nav
import ChoosePlan
import Components.LimitBanner as LimitBanner
import Html exposing (Html, div, text)
import Html.Attributes exposing (class)
import Json.Decode as Decode


type alias Model =
    { choosePlanModel : ChoosePlan.Model
    , limitBanner : LimitBanner.Model
    }


type Msg
    = ChoosePlanMsg ChoosePlan.Msg
    | ChooseBannerMsg LimitBanner.Msg


init : { key : Nav.Key, session : String, orgSlug : String } -> ( Model, Cmd Msg )
init { key, session, orgSlug } =
    let
        ( choosePlanModel, choosePlanCmd ) =
            ChoosePlan.init orgSlug session key True

        ( limitBannerModel, limitBannerCmd ) =
            LimitBanner.init
    in
    ( { choosePlanModel = choosePlanModel
      , limitBanner = limitBannerModel
      }
    , Cmd.batch
        [ Cmd.map ChoosePlanMsg choosePlanCmd
        , Cmd.map ChooseBannerMsg limitBannerCmd
        ]
    )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        ChoosePlanMsg choosePlanMsg ->
            let
                ( updatedChoosePlanModel, choosePlanCmd ) =
                    ChoosePlan.update choosePlanMsg model.choosePlanModel
            in
            ( { model | choosePlanModel = updatedChoosePlanModel }
            , Cmd.map ChoosePlanMsg choosePlanCmd
            )

        ChooseBannerMsg chooseBannerMsg ->
            let
                ( updatedChooseBannerModel, chooseBannerCmd ) =
                    LimitBanner.update chooseBannerMsg model.limitBanner
            in
            ( { model | limitBanner = updatedChooseBannerModel }
            , Cmd.map ChooseBannerMsg chooseBannerCmd
            )


view : Model -> Document Msg
view model =
    { title = "Change Plan - Medicare Max"
    , body =
        [ LimitBanner.view model.limitBanner
            |> Html.map ChooseBannerMsg
        , ChoosePlan.viewChangePlan model.choosePlanModel
            |> Html.map ChoosePlanMsg
        ]
    }


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.map ChoosePlanMsg (ChoosePlan.subscriptions model.choosePlanModel)

================
File: src/ChoosePlan.elm
================
module ChoosePlan exposing (Model, Msg(..), init, subscriptions, update, view, viewChangePlan)

import Browser exposing (Document)
import Browser.Navigation as Nav
import Components.LimitBanner as LimitBanner exposing (LimitWarning(..))
import Components.SetupLayout as SetupLayout
import Html exposing (Html, button, div, h1, h2, h3, input, label, li, p, span, text, ul)
import Html.Attributes exposing (class, type_, value)
import Html.Events exposing (onClick, onInput)
import Http
import Json.Decode as Decode exposing (Decoder, field, int, list, string)
import Json.Encode as Encode


type SetupStep
    = PlanSelection
    | Payment
    | Complete


type alias SubscriptionTier =
    { id : String
    , name : String
    , price : String
    , agentLimit : Int
    , contactLimit : Int
    , features : List String
    }


type alias Model =
    { session : Maybe String
    , orgSlug : String
    , currentStep : SetupStep
    , selectedPlan : Maybe String
    , extraAgents : Int
    , extraContacts : Int
    , error : Maybe String
    , tiers : List SubscriptionTier
    , isLoading : Bool
    , key : Nav.Key
    , isProcessingPayment : Bool
    , showChangePlan : Bool
    , currentTier : Maybe String
    , currentAgentLimit : Int
    , currentContactLimit : Int
    , showTrialBanner : Bool
    }


type Msg
    = NextStep
    | SelectPlan String
    | SubmitPayment
    | CompleteSetup
    | GotTiers (Result Http.Error (List SubscriptionTier))
    | SubscriptionSaved (Result Http.Error ())
    | NavigateToTempLanding
    | GotSaveResponse (Result Http.Error ())
    | SetExtraAgents String
    | SetExtraContacts String
    | StripeCheckoutReady (Result Http.Error String)
    | ProcessPayment
    | CancelPayment
    | GotCurrentSubscription (Result Http.Error { tierId : String, agentLimit : Int, contactLimit : Int })
    | ConfirmPlan
    | GotConfirmation (Result Http.Error { success : Bool, redirectUrl : String })
    | NoOp
    | NavigateTo String
    | CloseBanner


init : String -> String -> Nav.Key -> Bool -> ( Model, Cmd Msg )
init orgSlug session key showChangePlan =
    ( { session = Just session
      , orgSlug = orgSlug
      , currentStep = PlanSelection
      , selectedPlan = Nothing
      , extraAgents = 0
      , extraContacts = 0
      , error = Nothing
      , tiers = []
      , isLoading = True
      , key = key
      , isProcessingPayment = False
      , showChangePlan = showChangePlan
      , currentTier = Nothing
      , currentAgentLimit = 0
      , currentContactLimit = 0
      , showTrialBanner = True
      }
    , Cmd.batch
        [ fetchSubscriptionTiers
        , if showChangePlan then
            fetchCurrentSubscription orgSlug

          else
            Cmd.none
        ]
    )


fetchCurrentSubscription : String -> Cmd Msg
fetchCurrentSubscription orgSlug =
    let
        url =
            "/api/organizations/" ++ orgSlug ++ "/subscription"
    in
    Http.get
        { url = url
        , expect = Http.expectJson GotCurrentSubscription currentSubscriptionDecoder
        }


fetchSubscriptionTiers : Cmd Msg
fetchSubscriptionTiers =
    Http.get
        { url = "/api/organizations/subscription-tiers"
        , expect = Http.expectJson GotTiers subscriptionTiersDecoder
        }


saveSubscription : String -> String -> Int -> Int -> Cmd Msg
saveSubscription orgSlug tierId extraAgents extraContacts =
    let
        url =
            "/api/organizations/" ++ orgSlug ++ "/subscription"
    in
    Http.post
        { url = url
        , body = Http.jsonBody (encodeSubscriptionUpdate tierId extraAgents extraContacts)
        , expect = Http.expectWhatever SubscriptionSaved
        }


createStripeCheckoutSession : String -> String -> Int -> Int -> Cmd Msg
createStripeCheckoutSession orgSlug tierId extraAgents extraContacts =
    let
        url =
            "/api/stripe/create-checkout-session"
    in
    Http.post
        { url = url
        , body = Http.jsonBody (encodeStripeCheckoutRequest orgSlug tierId extraAgents extraContacts)
        , expect = Http.expectJson StripeCheckoutReady (field "sessionId" string)
        }


redirectToStripeCheckout : String -> Cmd Msg
redirectToStripeCheckout sessionId =
    -- Use the session ID to redirect to Stripe Checkout
    -- In a real implementation, this would likely be a port to JavaScript
    -- For this demo, we're just simulating with a navigation
    Nav.load ("/api/stripe/redirect-to-checkout?session_id=" ++ sessionId)


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        SubscriptionSaved result ->
            case result of
                Ok _ ->
                    ( { model | error = Nothing }
                    , if model.showChangePlan then
                        -- For change plan, just reload the current page to show updated info
                        Nav.reload

                      else
                        -- For initial setup, continue to next step
                        case model.selectedPlan of
                            Just planId ->
                                Nav.pushUrl model.key ("/setup/settings?plan=" ++ planId)

                            Nothing ->
                                Nav.pushUrl model.key "/setup/settings"
                    )

                Err error ->
                    ( { model | error = Just "Failed to save subscription", isProcessingPayment = False }
                    , Cmd.none
                    )

        NextStep ->
            case model.currentStep of
                PlanSelection ->
                    case model.selectedPlan of
                        Just planId ->
                            if planId == "enterprise" then
                                -- For Enterprise, redirect to contact form
                                ( model
                                , Nav.pushUrl model.key "/enterprise-contact"
                                )

                            else if model.showChangePlan then
                                -- For change plan, we go directly to payment
                                ( { model | currentStep = Payment, isProcessingPayment = True }
                                , createStripeCheckoutSession model.orgSlug planId model.extraAgents model.extraContacts
                                )

                            else
                                -- For initial setup, save subscription then go to next page
                                ( { model | currentStep = Payment }
                                , saveSubscription model.orgSlug planId model.extraAgents model.extraContacts
                                )

                        Nothing ->
                            ( { model | error = Just "Please select a plan" }
                            , Cmd.none
                            )

                Payment ->
                    ( { model | currentStep = Complete }
                    , if model.showChangePlan then
                        Nav.pushUrl model.key "/dashboard"

                      else
                        Nav.pushUrl model.key "/templanding"
                    )

                Complete ->
                    ( model
                    , if model.showChangePlan then
                        Nav.pushUrl model.key "/dashboard"

                      else
                        Nav.pushUrl model.key "/templanding"
                    )

        SelectPlan plan ->
            ( { model | selectedPlan = Just plan }
            , Cmd.none
            )

        SetExtraAgents value ->
            let
                extraAgents =
                    String.toInt value |> Maybe.withDefault 0
            in
            ( { model | extraAgents = extraAgents }, Cmd.none )

        SetExtraContacts value ->
            let
                extraContacts =
                    String.toInt value |> Maybe.withDefault 0
            in
            ( { model | extraContacts = extraContacts }, Cmd.none )

        GotTiers result ->
            case result of
                Ok tiers ->
                    let
                        -- Look for Pro plans specifically
                        proPlans =
                            List.filter (\t -> t.id == "pro") tiers

                        -- Look for $99 Pro plan
                        proPlans99 =
                            List.filter (\t -> t.id == "pro" && t.price == "$99/mo") tiers

                        -- Apply filter
                        filteredTiers =
                            filterTiers tiers
                    in
                    ( { model
                        | tiers = filteredTiers
                        , isLoading = False
                      }
                    , Cmd.none
                    )

                Err error ->
                    let
                        errorString =
                            case error of
                                Http.BadUrl url ->
                                    "Bad URL: " ++ url

                                Http.Timeout ->
                                    "Request timed out"

                                Http.NetworkError ->
                                    "Network error"

                                Http.BadStatus statusCode ->
                                    "Bad status: " ++ String.fromInt statusCode

                                Http.BadBody message ->
                                    "Bad body: " ++ message
                    in
                    ( { model | error = Just "Failed to load subscription tiers", isLoading = False }
                    , Cmd.none
                    )

        GotCurrentSubscription result ->
            case result of
                Ok subscription ->
                    ( { model
                        | currentTier = Just subscription.tierId
                        , currentAgentLimit = subscription.agentLimit
                        , currentContactLimit = subscription.contactLimit
                        , isLoading = False
                      }
                    , Cmd.none
                    )

                Err error ->
                    -- Log the error in console using Debug.log
                    let
                        errorString =
                            case error of
                                Http.BadUrl url ->
                                    "Bad URL: " ++ url

                                Http.Timeout ->
                                    "Request timed out"

                                Http.NetworkError ->
                                    "Network error"

                                Http.BadStatus statusCode ->
                                    "Bad status: " ++ String.fromInt statusCode

                                Http.BadBody message ->
                                    "Bad body: " ++ message
                    in
                    ( { model | error = Just "Failed to load current subscription", isLoading = False }
                    , Cmd.none
                    )

        StripeCheckoutReady result ->
            case result of
                Ok sessionId ->
                    ( model
                    , redirectToStripeCheckout sessionId
                    )

                Err error ->
                    ( { model | error = Just "Failed to create payment session", isProcessingPayment = False }
                    , Cmd.none
                    )

        ProcessPayment ->
            case model.selectedPlan of
                Just planId ->
                    if model.showChangePlan && not (hasChanges model) then
                        -- No changes, show an error
                        ( { model | error = Just "No changes made to your subscription." }
                        , Cmd.none
                        )

                    else if planId == "enterprise" then
                        -- For Enterprise plans, always redirect to contact form
                        ( model
                        , Nav.pushUrl model.key "/enterprise-contact"
                        )

                    else if model.showChangePlan && not (hasChanges model) then
                        -- No changes, show an error (only for non-enterprise plans)
                        ( { model | error = Just "No changes made to your subscription." }
                        , Cmd.none
                        )

                    else
                        -- Process payment for changes
                        ( { model | isProcessingPayment = True }
                        , createStripeCheckoutSession model.orgSlug planId model.extraAgents model.extraContacts
                        )

                Nothing ->
                    ( { model | error = Just "Please select a plan" }
                    , Cmd.none
                    )

        CancelPayment ->
            ( { model | isProcessingPayment = False }
            , Cmd.none
            )

        GotSaveResponse result ->
            case result of
                Ok _ ->
                    ( { model | error = Nothing }
                    , Nav.pushUrl model.key "/brand-settings"
                    )

                Err error ->
                    ( { model
                        | error = Just "Failed to save subscription. Please try again."
                        , isLoading = False
                      }
                    , Cmd.none
                    )

        ConfirmPlan ->
            let
                plan =
                    model.selectedPlan |> Maybe.withDefault "basic"
            in
            ( { model | isLoading = True }
            , Http.post
                { url = "/api/choose-plan"
                , body =
                    Http.jsonBody
                        (Encode.object
                            [ ( "plan", Encode.string plan )
                            , ( "orgSlug", Encode.string model.orgSlug )
                            ]
                        )
                , expect = Http.expectJson GotConfirmation confirmationDecoder
                }
            )

        GotConfirmation (Ok response) ->
            if response.success then
                ( model
                , Nav.pushUrl model.key response.redirectUrl
                )

            else
                ( { model | isLoading = False, error = Just "Failed to update plan. Please try again." }
                , Cmd.none
                )

        GotConfirmation (Err _) ->
            ( { model | isLoading = False, error = Just "Failed to connect to server. Please try again." }
            , Cmd.none
            )

        NavigateTo url ->
            ( model
            , Nav.pushUrl model.key url
            )

        CloseBanner ->
            ( { model | showTrialBanner = False }, Cmd.none )

        _ ->
            ( model, Cmd.none )


view : Model -> Browser.Document Msg
view model =
    { title =
        if model.showChangePlan then
            "Change Plan - Medicare Max"

        else
            "Choose Plan - Medicare Max"
    , body =
        [ if model.showTrialBanner then
            getPlanLimitBanner model

          else
            text ""
        , if model.showChangePlan then
            -- Change Plan is not part of setup flow, but a standalone page
            -- Return just the content portion which will be wrapped by Main.elm
            viewChangePlan model

          else
            -- This is the setup flow which uses a different layout
            SetupLayout.view SetupLayout.PlanSelection
                -- For plan selection, we determine basic vs pro based on what the user has selected
                (case model.selectedPlan of
                    Just "basic" ->
                        True

                    _ ->
                        False
                )
                0
                -- Using 0 for PlanSelection as it's the first step
                [ if model.isLoading then
                    viewLoading

                  else
                    viewPlanSelection model
                ]
        ]
    }


viewChangePlan : Model -> Html Msg
viewChangePlan model =
    div [ class "container mx-auto py-8 px-4" ]
        [ div [ class "space-y-8" ]
            [ div [ class "mb-8" ]
                [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                    [ text "Change Your Plan" ]
                , p [ class "text-gray-600 mt-2" ]
                    [ text "Modify your subscription to better fit your organization's needs" ]
                ]
            , case model.currentTier of
                Just currentTierId ->
                    div [ class "p-4 bg-blue-50 rounded-lg border border-blue-200 mb-8" ]
                        [ h3 [ class "text-lg font-semibold text-gray-900" ]
                            [ text "Current Plan" ]
                        , p [ class "text-sm text-gray-600" ]
                            [ text
                                ("You are currently on the "
                                    ++ (model.tiers
                                            |> List.filter (\t -> t.id == currentTierId)
                                            |> List.head
                                            |> Maybe.map .name
                                            |> Maybe.withDefault currentTierId
                                       )
                                    ++ " plan with "
                                    ++ String.fromInt model.currentAgentLimit
                                    ++ " agent seats and "
                                    ++ String.fromInt model.currentContactLimit
                                    ++ " clients."
                                )
                            ]
                        ]

                Nothing ->
                    text ""
            , if model.isProcessingPayment then
                div [ class "text-center py-8" ]
                    [ div [ class "animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
                    , p [ class "mt-4 text-gray-500" ]
                        [ text "Preparing payment session..." ]
                    , button
                        [ class "mt-4 px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded"
                        , onClick CancelPayment
                        ]
                        [ text "Cancel" ]
                    ]

              else
                div []
                    [ div [ class "grid grid-cols-1 md:grid-cols-3 gap-4" ]
                        (List.map
                            (\tier ->
                                viewPlanOption
                                    tier.id
                                    tier.name
                                    tier.price
                                    tier.features
                                    tier.agentLimit
                                    tier.contactLimit
                                    model.selectedPlan
                            )
                            model.tiers
                        )
                    , if canAddExtraResources model.selectedPlan then
                        div [ class "mt-8 p-4 bg-gray-50 rounded-lg border border-gray-200" ]
                            [ h3 [ class "text-lg font-semibold text-gray-900 mb-4" ]
                                [ text "Additional Resources" ]
                            , div [ class "grid grid-cols-1 md:grid-cols-2 gap-6" ]
                                [ div [ class "space-y-2" ]
                                    [ label [ class "block text-sm font-medium text-gray-700" ]
                                        [ text "Extra Agents" ]
                                    , p [ class "text-xs text-gray-500" ]
                                        [ text "Add more agent seats beyond your plan's included limit ($20/agent seat/month)" ]
                                    , div [ class "flex items-center" ]
                                        [ button
                                            [ class "bg-gray-200 px-3 py-1 rounded-l-md hover:bg-gray-300"
                                            , onClick (SetExtraAgents (String.fromInt (max 0 (model.extraAgents - 1))))
                                            ]
                                            [ text "-" ]
                                        , input
                                            [ type_ "number"
                                            , class "w-16 text-center border-y border-gray-200 py-1"
                                            , value (String.fromInt model.extraAgents)
                                            , onInput SetExtraAgents
                                            ]
                                            []
                                        , button
                                            [ class "bg-gray-200 px-3 py-1 rounded-r-md hover:bg-gray-300"
                                            , onClick (SetExtraAgents (String.fromInt (model.extraAgents + 1)))
                                            ]
                                            [ text "+" ]
                                        , span [ class "ml-2 text-sm font-medium" ]
                                            [ text ("$" ++ String.fromInt (model.extraAgents * 20) ++ "/mo") ]
                                        ]
                                    ]
                                , div [ class "space-y-2" ]
                                    [ label [ class "block text-sm font-medium text-gray-700" ]
                                        [ text "Extra Clients" ]
                                    , p [ class "text-xs text-gray-500" ]
                                        [ text "Add more clients beyond your plan's included limit ($50/5,000 clients/month)" ]
                                    , div [ class "flex items-center" ]
                                        [ button
                                            [ class "bg-gray-200 px-3 py-1 rounded-l-md hover:bg-gray-300"
                                            , onClick (SetExtraContacts (String.fromInt (max 0 (model.extraContacts - 5000))))
                                            ]
                                            [ text "-" ]
                                        , input
                                            [ type_ "number"
                                            , class "w-20 text-center border-y border-gray-200 py-1"
                                            , value (String.fromInt model.extraContacts)
                                            , onInput SetExtraContacts
                                            , Html.Attributes.step "5000"
                                            ]
                                            []
                                        , button
                                            [ class "bg-gray-200 px-3 py-1 rounded-r-md hover:bg-gray-300"
                                            , onClick (SetExtraContacts (String.fromInt (model.extraContacts + 5000)))
                                            ]
                                            [ text "+" ]
                                        , span [ class "ml-2 text-sm font-medium" ]
                                            [ text ("$" ++ String.fromInt (model.extraContacts // 5000 * 50) ++ "/mo") ]
                                        ]
                                    ]
                                ]
                            ]

                      else
                        text ""
                    , if model.error /= Nothing then
                        div [ class "mt-4 text-red-500" ]
                            [ text (Maybe.withDefault "" model.error) ]

                      else
                        text ""
                    , div [ class "mt-8 flex justify-center space-x-4" ]
                        [ button
                            [ class
                                ("px-6 py-3 rounded-lg transition-colors duration-200 "
                                    ++ (if model.selectedPlan == Nothing || (model.showChangePlan && not (hasChanges model)) then
                                            "bg-[#2563EB]/50 cursor-not-allowed text-white"

                                        else
                                            "bg-[#2563EB] hover:bg-[#1D4ED8] text-white"
                                       )
                                )
                            , onClick
                                (if model.showChangePlan then
                                    ProcessPayment

                                 else
                                    NextStep
                                )
                            , Html.Attributes.disabled (model.selectedPlan == Nothing || (model.showChangePlan && not (hasChanges model)))
                            ]
                            [ text
                                (if model.showChangePlan then
                                    "Change Plan"

                                 else
                                    "Select"
                                )
                            ]
                        , if model.showChangePlan then
                            button
                                [ class "px-6 py-3 rounded-lg bg-gray-200 hover:bg-gray-300 text-gray-800"
                                , onClick NavigateToTempLanding
                                ]
                                [ text "Cancel" ]

                          else
                            text ""
                        ]
                    ]
            ]
        ]


viewLoading : Html Msg
viewLoading =
    div [ class "text-center" ]
        [ div [ class "animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading subscription tiers..." ]
        ]


viewPlanSelection : Model -> Html Msg
viewPlanSelection model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Choose your plan" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Select a plan that best fits your organization's needs" ]
            ]
        , div [ class "grid grid-cols-1 md:grid-cols-3 gap-4" ]
            (List.map
                (\tier ->
                    viewPlanOption
                        tier.id
                        tier.name
                        tier.price
                        tier.features
                        tier.agentLimit
                        tier.contactLimit
                        model.selectedPlan
                )
                model.tiers
            )
        , if canAddExtraResources model.selectedPlan then
            div [ class "mt-8 p-4 bg-gray-50 rounded-lg border border-gray-200" ]
                [ h3 [ class "text-lg font-semibold text-gray-900 mb-4" ]
                    [ text "Additional Resources" ]
                , div [ class "grid grid-cols-1 md:grid-cols-2 gap-6" ]
                    [ div [ class "space-y-2" ]
                        [ label [ class "block text-sm font-medium text-gray-700" ]
                            [ text "Extra Agents" ]
                        , p [ class "text-xs text-gray-500" ]
                            [ text "Add more agent seats beyond your plan's included limit ($20/agent seat/month)" ]
                        , div [ class "flex items-center" ]
                            [ button
                                [ class "bg-gray-200 px-3 py-1 rounded-l-md hover:bg-gray-300"
                                , onClick (SetExtraAgents (String.fromInt (max 0 (model.extraAgents - 1))))
                                ]
                                [ text "-" ]
                            , input
                                [ type_ "number"
                                , class "w-16 text-center border-y border-gray-200 py-1"
                                , value (String.fromInt model.extraAgents)
                                , onInput SetExtraAgents
                                ]
                                []
                            , button
                                [ class "bg-gray-200 px-3 py-1 rounded-r-md hover:bg-gray-300"
                                , onClick (SetExtraAgents (String.fromInt (model.extraAgents + 1)))
                                ]
                                [ text "+" ]
                            , span [ class "ml-2 text-sm font-medium" ]
                                [ text ("$" ++ String.fromInt (model.extraAgents * 20) ++ "/mo") ]
                            ]
                        ]
                    , div [ class "space-y-2" ]
                        [ label [ class "block text-sm font-medium text-gray-700" ]
                            [ text "Extra Clients" ]
                        , p [ class "text-xs text-gray-500" ]
                            [ text "Add more clients beyond your plan's included limit ($50/5,000 clients/month)" ]
                        , div [ class "flex items-center" ]
                            [ button
                                [ class "bg-gray-200 px-3 py-1 rounded-l-md hover:bg-gray-300"
                                , onClick (SetExtraContacts (String.fromInt (max 0 (model.extraContacts - 5000))))
                                ]
                                [ text "-" ]
                            , input
                                [ type_ "number"
                                , class "w-20 text-center border-y border-gray-200 py-1"
                                , value (String.fromInt model.extraContacts)
                                , onInput SetExtraContacts
                                , Html.Attributes.step "5000"
                                ]
                                []
                            , button
                                [ class "bg-gray-200 px-3 py-1 rounded-r-md hover:bg-gray-300"
                                , onClick (SetExtraContacts (String.fromInt (model.extraContacts + 5000)))
                                ]
                                [ text "+" ]
                            , span [ class "ml-2 text-sm font-medium" ]
                                [ text ("$" ++ String.fromInt (model.extraContacts // 5000 * 50) ++ "/mo") ]
                            ]
                        ]
                    ]
                ]

          else
            text ""
        , if model.error /= Nothing then
            div [ class "mt-4 text-red-500" ]
                [ text (Maybe.withDefault "" model.error) ]

          else
            text ""
        , div [ class "mt-8 flex justify-center" ]
            [ button
                [ class
                    ("px-6 py-3 rounded-lg transition-colors duration-200 "
                        ++ (if model.selectedPlan == Nothing then
                                "bg-[#2563EB]/50 cursor-not-allowed text-white"

                            else
                                "bg-[#2563EB] hover:bg-[#1D4ED8] text-white"
                           )
                    )
                , onClick NextStep
                , Html.Attributes.disabled (model.selectedPlan == Nothing)
                ]
                [ text "Select" ]
            ]
        ]


viewPlanOption : String -> String -> String -> List String -> Int -> Int -> Maybe String -> Html Msg
viewPlanOption id name price features agentLimit contactLimit selectedPlan =
    div
        [ class
            ("p-6 rounded-lg cursor-pointer transition-all "
                ++ (if Just id == selectedPlan then
                        "bg-[#2563EB]/10 ring-2 ring-[#2563EB]"

                    else
                        "bg-gray-50 hover:bg-gray-100"
                   )
            )
        , onClick (SelectPlan id)
        ]
        [ div [ class "space-y-4" ]
            [ div []
                [ h3 [ class "text-xl font-semibold text-gray-900" ] [ text name ]
                , p [ class "text-3xl font-bold text-gray-900 mt-2" ]
                    [ text
                        (if id == "enterprise" then
                            "Contact Us"

                         else
                            price
                        )
                    ]
                ]
            , div [ class "space-y-2 py-4 border-t border-b border-gray-200" ]
                [ if id /= "enterprise" then
                    div [ class "text-gray-600" ]
                        [ text
                            (if id == "pro" then
                                "Starts with up to " ++ String.fromInt agentLimit ++ " agent seats"

                             else if agentLimit == -1 then
                                "Unlimited agent seats"

                             else
                                "Up to " ++ String.fromInt agentLimit ++ " agent seats"
                            )
                        ]

                  else
                    text ""
                , if id /= "enterprise" then
                    div [ class "text-gray-600" ]
                        [ text
                            (if id == "pro" then
                                "Starts with up to " ++ String.fromInt contactLimit ++ " clients"

                             else if contactLimit == -1 then
                                "Unlimited clients"

                             else
                                "Up to " ++ String.fromInt contactLimit ++ " clients"
                            )
                        ]

                  else
                    text ""
                ]
            , div [ class "mt-4" ]
                [ p [ class "text-sm font-medium text-gray-900 mb-2" ] [ text "Features:" ]
                , ul [ class "space-y-2" ]
                    (List.map
                        (\feature ->
                            li [ class "flex items-center text-sm text-gray-600" ]
                                [ span [ class "text-[#059669] mr-2" ] [ text "✓" ]
                                , text feature
                                ]
                        )
                        features
                    )
                ]
            ]
        ]


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none


subscriptionTiersDecoder : Decoder (List SubscriptionTier)
subscriptionTiersDecoder =
    field "tiers"
        (list
            (Decode.map6 SubscriptionTier
                (field "id" string)
                (field "name" string)
                (field "price" string)
                (field "agentLimit" int)
                (field "contactLimit" int)
                (field "features" (list string))
            )
        )


currentSubscriptionDecoder : Decoder { tierId : String, agentLimit : Int, contactLimit : Int }
currentSubscriptionDecoder =
    let
        -- Try to decode from a success field first (for API format consistency)
        successDecoder =
            field "success" Decode.bool
                |> Decode.andThen
                    (\success ->
                        if success then
                            -- If success is true, look for the fields at the top level
                            Decode.map3
                                (\tierId agentLimit contactLimit ->
                                    { tierId = tierId
                                    , agentLimit = agentLimit
                                    , contactLimit = contactLimit
                                    }
                                )
                                (field "tierId" string)
                                (field "agentLimit" int)
                                (field "contactLimit" int)

                        else
                            -- If success is false, fail with the error message
                            field "error" string
                                |> Decode.andThen (\err -> Decode.fail err)
                    )

        -- Try the direct decoder as a fallback
        directDecoder =
            Decode.map3
                (\tierId agentLimit contactLimit ->
                    { tierId = tierId
                    , agentLimit = agentLimit
                    , contactLimit = contactLimit
                    }
                )
                (field "tierId" string)
                (field "agentLimit" int)
                (field "contactLimit" int)
    in
    -- Try to use the success wrapper first, fall back to direct decoder
    Decode.oneOf [ successDecoder, directDecoder ]


encodeSubscriptionUpdate : String -> Int -> Int -> Encode.Value
encodeSubscriptionUpdate tierId extraAgents extraContacts =
    Encode.object
        [ ( "tierId", Encode.string tierId )
        , ( "extraAgents", Encode.int extraAgents )
        , ( "extraContacts", Encode.int extraContacts )
        ]


encodeStripeCheckoutRequest : String -> String -> Int -> Int -> Encode.Value
encodeStripeCheckoutRequest orgSlug tierId extraAgents extraContacts =
    Encode.object
        [ ( "orgSlug", Encode.string orgSlug )
        , ( "tierId", Encode.string tierId )
        , ( "extraAgents", Encode.int extraAgents )
        , ( "extraContacts", Encode.int extraContacts )
        ]


filterTiers : List SubscriptionTier -> List SubscriptionTier
filterTiers tiers =
    let
        -- Keep only the $99 Pro plan (filter out any other Pro plans)
        filteredTiers =
            tiers
                |> List.filter
                    (\tier ->
                        -- Keep Basic and Enterprise tiers
                        tier.id
                            == "basic"
                            || tier.id
                            == "enterprise"
                            || -- Keep any Pro plan
                               tier.id
                            == "pro"
                    )

        -- Make sure we have the base tiers
        hasBasic =
            List.any (\t -> t.id == "basic") filteredTiers

        hasPro =
            List.any (\t -> t.id == "pro") filteredTiers

        hasEnterprise =
            List.any (\t -> t.id == "enterprise") filteredTiers

        -- Default tiers to add if missing
        defaultBasic =
            SubscriptionTier "basic" "Solo" "$49/mo" 1 1000 [ "1 Agent Seat", "Up to 1,000 Clients", "Analytics Dashboard", "Quote Tool", "Customizable Booking Options", "Access to our Smart Send Technology" ]

        defaultPro =
            SubscriptionTier "pro" "Agency / Solo+" "$99/mo" 5 5000 [ "Everything in the Solo package plus:", "5 Agent Seats", "Up to 5,000 Clients", "Admin and Organization Settings", "Organization Wide Analytics" ]

        defaultEnterprise =
            SubscriptionTier "enterprise" "Enterprise" "Contact Us" 10 30000 [ "Everything in Solo & Agency Packages", "10+ Agent Seats", "Up to 30,000+ Clients", "24/7 Platform Support", "White-Labeled Quote Tool and Dashboard" ]

        -- Add default tiers if missing
        tiersWithDefaults =
            (if not hasBasic then
                [ defaultBasic ]

             else
                []
            )
                ++ (if not hasPro then
                        [ defaultPro ]

                    else
                        []
                   )
                ++ (if not hasEnterprise then
                        [ defaultEnterprise ]

                    else
                        []
                   )
                ++ filteredTiers
    in
    tiersWithDefaults


canAddExtraResources : Maybe String -> Bool
canAddExtraResources selectedPlan =
    case selectedPlan of
        Just plan ->
            plan == "pro"

        -- Only Pro plan can add extra resources
        Nothing ->
            False



-- Add this function after filterTiers function


hasChanges : Model -> Bool
hasChanges model =
    let
        -- Check if the plan has changed
        planChanged =
            case ( model.currentTier, model.selectedPlan ) of
                ( Just currentTier, Just selectedTier ) ->
                    currentTier /= selectedTier

                _ ->
                    False

        -- Check if resources have changed
        resourcesChanged =
            model.extraAgents > 0 || model.extraContacts > 0
    in
    planChanged || resourcesChanged



-- Add the confirmation decoder


confirmationDecoder : Decoder { success : Bool, redirectUrl : String }
confirmationDecoder =
    Decode.map2 (\success redirectUrl -> { success = success, redirectUrl = redirectUrl })
        (Decode.field "success" Decode.bool)
        (Decode.field "redirectUrl" Decode.string)



-- New function to provide the appropriate banner based on subscription context


getPlanLimitBanner : Model -> Html Msg
getPlanLimitBanner model =
    -- When user is on trial plan
    if model.currentAgentLimit > 0 && model.extraAgents > model.currentAgentLimit then
        LimitBanner.viewLimitBanner
            (AgentLimit (model.currentAgentLimit + model.extraAgents) model.currentAgentLimit)
            CloseBanner
        -- When user is on basic plan (which only allows 1 agent)

    else if model.currentTier == Just "basic" then
        LimitBanner.viewLimitBanner
            (CustomWarning
                "Basic Plan Limitations"
                "Your current Basic plan only supports 1 agent. Please upgrade to a higher tier plan to add more agents."
            )
            CloseBanner
        -- When approaching contact limit (subscription data from API)

    else if model.currentContactLimit > 0 && model.extraContacts >= (model.currentContactLimit * 1 // 10) then
        LimitBanner.viewLimitBanner
            (ContactLimit (model.currentContactLimit + model.extraContacts) model.currentContactLimit)
            CloseBanner
        -- Default for new users or when no specific warning is needed

    else
        LimitBanner.viewLimitBanner
            (TrialEnding "June 15, 2024")
            CloseBanner

================
File: src/Compare.elm
================
module Compare exposing
    ( CompareParams
    , Model
    , Msg(..)
    , PlanType(..)
    , fetchPlans
    , init
    , subscriptions
    , update
    , view
    )

import BirthdayRules exposing (isInBirthdayRuleWindow)
import Browser
import Browser.Navigation as Nav
import CarrierNaic exposing (carrierToNaics, carrierToString, naicToCarrier, stringToCarrier)
import Date exposing (Date)
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick)
import Http
import Json.Decode as D exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as E
import Task
import Time
import Url exposing (Url)
import Url.Parser as UrlParser
import Url.Parser.Query as Query



-- TYPES


type PlanType
    = PlanG
    | PlanN


type alias CompareParams =
    { state : String
    , zip : String
    , county : String
    , gender : String
    , tobacco : Bool
    , age : Int
    , planType : String
    , currentCarrier : Maybe String
    , dateOfBirth : String
    , quoteId : Maybe String
    , trackingId : Maybe String
    }


type alias CoverageItem =
    { name : String
    , percentageCovered : Int
    , note : Maybe String
    }


type alias CoverageList =
    List CoverageItem


type alias Plan =
    { price : Float
    , priceDiscount : Float
    , flag : Maybe String
    , age : Int
    , description : String
    , gender : String
    , id : Int
    , image : String
    , naic : String
    , name : String
    , planType : String
    , premiumStability : String
    , ratingCategory : String
    , score : Int
    , select : Bool
    , state : String
    , tobacco : Bool
    , coverageSummary : CoverageList
    }


type alias Plans =
    { planG : List Plan
    , planN : List Plan
    }


type alias Model =
    { isLoading : Bool
    , error : Maybe String
    , plans : Plans
    , state : String
    , county : String
    , zip : String
    , age : Int
    , gender : String
    , tobacco : Bool
    , selectedPlanType : PlanType
    , showReviewVideo : Bool
    , showQualificationVideo : Bool
    , showGvsNVideo : Bool
    , showFAQ : Bool
    , currentCardIndex : Int
    , showRatesVideo : Bool
    , key : Nav.Key
    , showDiscount : Bool
    , currentCarrier : Maybe String
    , dateOfBirth : String
    , quoteId : Maybe String
    , orgSettings : Maybe Settings
    , currentDate : Maybe Date
    }


type alias Settings =
    { stateLicenses : List String
    , carrierContracts : List String
    , stateCarrierSettings : List StateCarrierSetting
    , allowAgentSettings : Bool
    , emailSendBirthday : Bool
    , emailSendPolicyAnniversary : Bool
    , emailSendAep : Bool
    , smartSendEnabled : Bool
    }


type alias StateCarrierSetting =
    { state : String
    , carrier : String
    , active : Bool
    , targetGI : Bool
    }


type Msg
    = GotPlans (Result Http.Error Plans)
    | TogglePlanType
    | SelectPlan Plan
    | CloseReviewVideo
    | OpenGvsNVideo
    | CloseGvsNVideo
    | ShowQualificationVideo
    | CloseQualificationVideo
    | ShowFAQ
    | CloseFAQ
    | NextCard
    | PreviousCard
    | CloseRatesVideo
    | NavigateTo String
    | ToggleDiscount
    | GotOrgSettings (Result Http.Error Settings)
    | GotCurrentDate Date
    | NoOp


type alias Flags =
    { state : String
    , zip : String
    , county : String
    , gender : String
    , tobacco : Bool
    , age : Int
    , planType : String
    , currentCarrier : Maybe String
    , dateOfBirth : String
    , quoteId : Maybe String
    }



-- INIT


init : Nav.Key -> Maybe CompareParams -> ( Model, Cmd Msg )
init key maybeParams =
    let
        -- Get values from params or use defaults
        defaultParams =
            { state = "TX"
            , county = "Dallas"
            , zip = "75001"
            , age = 65
            , gender = "M"
            , tobacco = False
            , planType = "G"
            , currentCarrier = Nothing
            , dateOfBirth = ""
            , quoteId = Nothing
            , trackingId = Nothing
            }

        params =
            maybeParams
                |> Maybe.withDefault defaultParams

        -- Extract plan type directly from params
        initialPlanType =
            if params.planType == "N" then
                PlanN

            else
                PlanG

        -- Ensure age is at least 65 for Medicare supplement plans
        minimumAge =
            if params.age < 65 then
                65

            else
                params.age

        model =
            { isLoading = True
            , error = Nothing
            , plans = { planG = [], planN = [] }
            , state = params.state
            , county = params.county
            , zip = params.zip
            , age = minimumAge
            , gender =
                if params.gender == "Male" || params.gender == "M" then
                    "M"

                else
                    "F"
            , tobacco = params.tobacco
            , selectedPlanType = initialPlanType
            , showReviewVideo = False
            , showQualificationVideo = False
            , showGvsNVideo = False
            , showFAQ = False
            , currentCardIndex = 0
            , showRatesVideo = False
            , key = key
            , showDiscount = False
            , currentCarrier = params.currentCarrier
            , dateOfBirth = params.dateOfBirth
            , quoteId = params.quoteId
            , orgSettings = Nothing
            , currentDate = Nothing
            }
    in
    ( model
    , Cmd.batch
        [ fetchPlans model
        , Http.get
            { url = "/api/settings"
            , expect = Http.expectJson GotOrgSettings settingsDecoder
            }
        , Task.perform GotCurrentDate Date.today
        ]
    )


defaultPlanType : Flags -> PlanType
defaultPlanType flags =
    case flags.planType of
        "G" ->
            PlanG

        "N" ->
            PlanN

        _ ->
            PlanG



-- HTTP


fetchPlans : Model -> Cmd Msg
fetchPlans model =
    Http.request
        { method = "POST"
        , headers = []
        , url = "/api/quotes"
        , body = Http.jsonBody (buildPlansBody model)
        , expect = Http.expectJson GotPlans (plansDecoder model)
        , timeout = Nothing
        , tracker = Nothing
        }


buildPlansBody : Model -> E.Value
buildPlansBody model =
    let
        -- Ensure age is at least 65 for Medicare supplement plans
        minimumAge =
            if model.age < 65 then
                65

            else
                model.age
    in
    E.object
        [ ( "zip_code", E.string model.zip )
        , ( "state", E.string model.state )
        , ( "county", E.string model.county )
        , ( "age", E.int minimumAge )
        , ( "gender"
          , E.string
                (if model.gender == "Male" then
                    "M"

                 else
                    "F"
                )
          )
        , ( "tobacco", E.bool model.tobacco )
        , ( "plans", E.list E.string [ "G", "N" ] )
        , ( "carriers", E.string "supported" )
        ]



-- DECODERS


plansDecoder : Model -> Decoder Plans
plansDecoder model =
    D.oneOf
        [ D.list quoteResponseDecoder
            |> D.map (\responses -> groupQuotesByPlan responses model)
        , D.succeed { planG = [], planN = [] }
        ]


type alias QuoteResponse =
    { naic : String
    , group : Int
    , companyName : String
    , quotes : List QuoteData
    }


type alias QuoteData =
    { rate : Float
    , discountRate : Float
    , discountCategory : Maybe String
    , age : Int
    , gender : String
    , plan : String
    , tobacco : Int
    }


quoteResponseDecoder : Decoder QuoteResponse
quoteResponseDecoder =
    D.map4 QuoteResponse
        (D.field "naic" D.string)
        (D.field "group" D.int)
        (D.field "company_name" D.string)
        (D.field "quotes" (D.list quoteDataDecoder))


quoteDataDecoder : Decoder QuoteData
quoteDataDecoder =
    D.map7 QuoteData
        (D.field "rate" D.float)
        (D.field "discount_rate" D.float)
        (D.field "discount_category" (D.nullable D.string))
        (D.field "age" D.int)
        (D.field "gender" D.string)
        (D.field "plan" D.string)
        (D.field "tobacco" D.int)


groupQuotesByPlan : List QuoteResponse -> Model -> Plans
groupQuotesByPlan responses model =
    let
        isCarrierSupported : String -> Bool
        isCarrierSupported naic =
            -- Always consider carriers supported until settings are loaded
            case model.orgSettings of
                Nothing ->
                    True

                Just settings ->
                    case naicToCarrier naic of
                        Just carrier ->
                            let
                                carrierStr =
                                    carrierToString carrier
                            in
                            List.member carrierStr settings.carrierContracts

                        Nothing ->
                            -- If we can't map the NAIC to a carrier, consider it supported
                            True

        convertToPlan : QuoteResponse -> QuoteData -> Plan
        convertToPlan response quote =
            let
                carrierImagePath =
                    case naicToCarrier response.naic of
                        Just carrier ->
                            "/images/" ++ carrierToString carrier ++ ".svg"

                        Nothing ->
                            -- Fallback to png if we can't match the carrier
                            "/images/medicare-max-logo.png"
            in
            { price = quote.rate / 100
            , priceDiscount = quote.discountRate / 100
            , flag = quote.discountCategory
            , age = quote.age
            , description = ""
            , gender = quote.gender
            , id = 0
            , image = carrierImagePath
            , naic = response.naic
            , name = response.companyName
            , planType = quote.plan
            , premiumStability = ""
            , ratingCategory = ""
            , score = 0
            , select = False
            , state = model.state
            , tobacco = quote.tobacco == 1
            , coverageSummary =
                if String.toUpper quote.plan == "G" then
                    planGCoverageList

                else
                    planNCoverageList
            }

        allQuotes =
            List.concatMap
                (\response ->
                    List.concatMap
                        (\quote ->
                            let
                                upperPlan =
                                    String.toUpper quote.plan
                            in
                            if List.member upperPlan [ "G", "N" ] then
                                [ convertToPlan response quote ]

                            else
                                []
                        )
                        response.quotes
                )
                responses

        planG =
            List.filter (\q -> String.toUpper q.planType == "G") allQuotes
                |> List.sortBy .price

        planN =
            List.filter (\q -> String.toUpper q.planType == "N") allQuotes
                |> List.sortBy .price

        result =
            { planG = planG
            , planN = planN
            }
    in
    result



-- COVERAGE LISTS


planGCoverageList : CoverageList
planGCoverageList =
    [ { name = "Part A Deductible", percentageCovered = 100, note = Nothing }
    , { name = "Hospital Co-Pays", percentageCovered = 100, note = Nothing }
    , { name = "Skilled Nursing Facility Co-Pays", percentageCovered = 100, note = Nothing }
    , { name = "Part B Annual Deductible", percentageCovered = 0, note = Just "$240 annual deductible" }
    , { name = "Part B Coinsurance", percentageCovered = 100, note = Nothing }
    , { name = "Excess Charges", percentageCovered = 100, note = Nothing }
    , { name = "Foreign Travel Emergency", percentageCovered = 80, note = Nothing }
    ]


planNCoverageList : CoverageList
planNCoverageList =
    [ { name = "Part A Deductible", percentageCovered = 100, note = Nothing }
    , { name = "Hospital Co-Pays", percentageCovered = 100, note = Nothing }
    , { name = "Skilled Nursing Facility Co-Pays", percentageCovered = 100, note = Nothing }
    , { name = "Part B Annual Deductible", percentageCovered = 0, note = Just "$240 annual deductible" }
    , { name = "Part B Coinsurance", percentageCovered = 100, note = Just "w/ some copayments" }
    , { name = "Excess Charges", percentageCovered = 0, note = Nothing }
    , { name = "Foreign Travel Emergency", percentageCovered = 80, note = Nothing }
    ]



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotOrgSettings (Ok settings) ->
            let
                updatedModel =
                    { model | orgSettings = Just settings }
            in
            ( updatedModel
            , fetchPlans updatedModel
            )

        GotOrgSettings (Err _) ->
            ( { model | error = Just "Failed to load organization settings" }
            , Cmd.none
            )

        ToggleDiscount ->
            ( { model | showDiscount = not model.showDiscount }
            , Cmd.none
            )

        GotPlans result ->
            case result of
                Ok plans ->
                    let
                        hasPlans =
                            not (List.isEmpty plans.planG && List.isEmpty plans.planN)

                        errorMsg =
                            if not hasPlans then
                                Just "No plans available for the selected criteria. Please try different parameters."

                            else
                                Nothing
                    in
                    ( { model
                        | plans = plans
                        , isLoading = False
                        , error = errorMsg
                      }
                    , Cmd.none
                    )

                Err error ->
                    ( { model
                        | error = Just (httpErrorToString error)
                        , isLoading = False
                      }
                    , Cmd.none
                    )

        TogglePlanType ->
            ( { model
                | selectedPlanType = togglePlanType model.selectedPlanType
                , currentCardIndex = 0
              }
            , Cmd.none
            )

        SelectPlan plan ->
            ( { model | showQualificationVideo = True }
            , Nav.pushUrl model.key
                (case model.quoteId of
                    Just id ->
                        "/eligibility?id=" ++ id

                    Nothing ->
                        "/eligibility"
                )
            )

        CloseReviewVideo ->
            ( { model | showReviewVideo = False }
            , Cmd.none
            )

        OpenGvsNVideo ->
            ( { model | showGvsNVideo = True }, Cmd.none )

        CloseGvsNVideo ->
            ( { model | showGvsNVideo = False }, Cmd.none )

        ShowQualificationVideo ->
            ( { model | showQualificationVideo = True }
            , Cmd.none
            )

        CloseQualificationVideo ->
            ( { model | showQualificationVideo = False }
            , Nav.pushUrl model.key "/eligibility"
            )

        ShowFAQ ->
            ( { model | showFAQ = True }
            , Cmd.none
            )

        CloseFAQ ->
            ( { model | showFAQ = False }
            , Cmd.none
            )

        NextCard ->
            ( { model | currentCardIndex = Basics.min (model.currentCardIndex + 1) (List.length (getSelectedPlans model) - 1) }
            , Cmd.none
            )

        PreviousCard ->
            ( { model | currentCardIndex = Basics.max (model.currentCardIndex - 1) 0 }
            , Cmd.none
            )

        CloseRatesVideo ->
            ( { model | showRatesVideo = False }, Cmd.none )

        NavigateTo path ->
            ( model, Nav.pushUrl model.key path )

        GotCurrentDate date ->
            ( { model | currentDate = Just date }, Cmd.none )

        NoOp ->
            ( model, Cmd.none )



-- HELPERS


togglePlanType : PlanType -> PlanType
togglePlanType planType =
    case planType of
        PlanG ->
            PlanN

        PlanN ->
            PlanG


getSelectedPlans : Model -> List Plan
getSelectedPlans model =
    let
        plans =
            case model.selectedPlanType of
                PlanG ->
                    model.plans.planG

                PlanN ->
                    model.plans.planN

        carrierNaics =
            model.currentCarrier
                |> Maybe.andThen stringToCarrier
                |> Maybe.map carrierToNaics

        filteredPlans =
            case carrierNaics of
                Just naicList ->
                    List.filter
                        (\plan ->
                            not (List.member plan.naic naicList)
                        )
                        plans

                Nothing ->
                    plans

        sortedAndLimited =
            List.sortBy .price filteredPlans
                |> List.take 3
    in
    sortedAndLimited



-- Only take the three cheapest plans


httpErrorToString : Http.Error -> String
httpErrorToString error =
    case error of
        Http.BadUrl url ->
            "Bad URL: " ++ url ++ ". Please check the URL and try again."

        Http.Timeout ->
            "Request timed out. The server took too long to respond. Please try again later or check your internet connection."

        Http.NetworkError ->
            "Network error. Unable to connect to the server. Please check your internet connection and try again."

        Http.BadStatus statusCode ->
            "Bad status: " ++ String.fromInt statusCode ++ ". The server returned an unexpected status code. Please try again later or contact support if the issue persists."

        Http.BadBody message ->
            "Bad body: " ++ message ++ ". The server response was not in the expected format. Please try again or contact support if the issue persists."



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Compare Medicare Plans - Medicare Max"
    , body =
        [ div [ class "container mx-auto px-4 py-8" ]
            [ if model.isLoading then
                viewLoading

              else
                case model.error of
                    Just error ->
                        viewError error

                    Nothing ->
                        div [ class "flex flex-col gap-6 text-center mx-auto max-w-3xl" ]
                            [ h1 [ class "text-2xl font-semibold text-[#1A1A1A] mb-2" ]
                                [ text "Select a Plan from these recommendations" ]
                            , div [ class "mt-6" ]
                                [ viewPlanToggle model ]
                            , div [ class "flex justify-center mt-4" ]
                                [ viewPillButton "Learn About Plan G vs. Plan N" True OpenGvsNVideo ]
                            , viewPlansCarousel model
                            ]
            ]
        , viewGvsNModal model
        , viewQualificationModal model
        , viewRatesModal model
        ]
    }


viewLoading : Html Msg
viewLoading =
    div [ class "flex flex-col items-center justify-center gap-4 text-center min-h-[400px]" ]
        [ div [ class "animate-spin text-brand w-10 h-10 border-4 border-current border-t-transparent rounded-full" ] []
        , p [ class "text-center text-lg font-medium text-neutral-600" ]
            [ text "Searching plans..." ]
        ]


viewError : String -> Html Msg
viewError error =
    div [ class "flex flex-col gap-6 text-center mx-auto max-w-3xl" ]
        [ h1 [ class "text-2xl font-semibold text-[#1A1A1A] mb-2" ]
            [ text "Unable to Load Plans" ]
        , div [ class "text-center text-xl font-medium text-red-600 mt-8 p-4 bg-red-50 rounded-lg" ]
            [ text error ]
        , div [ class "mt-6 flex justify-center" ]
            [ button
                [ class "px-6 py-3 bg-[#0066FF] text-white rounded-lg hover:bg-blue-700 transition-colors"
                , onClick (NavigateTo "/")
                ]
                [ text "Return to Home" ]
            ]
        ]


viewPlanToggle : Model -> Html Msg
viewPlanToggle model =
    let
        ( planGClass, planNClass ) =
            case model.selectedPlanType of
                PlanG ->
                    ( "font-medium text-[#1A1A1A]", "text-[#666666]" )

                PlanN ->
                    ( "text-[#666666]", "font-medium text-[#1A1A1A]" )
    in
    div [ class "flex justify-center items-center gap-3 text-base" ]
        [ span [ class planGClass ] [ text (getPlanGName model) ]
        , button
            [ onClick TogglePlanType
            , class "w-12 h-6 bg-[#0066FF] rounded-full relative"
            ]
            [ div
                [ class "absolute top-0.5 left-0.5 bg-white w-5 h-5 rounded-full shadow-sm transform duration-300 ease-in-out"
                , class
                    (if model.selectedPlanType == PlanN then
                        "translate-x-6"

                     else
                        "translate-x-0"
                    )
                ]
                []
            ]
        , span [ class planNClass ] [ text (getPlanNName model) ]
        ]


getPlanGName : Model -> String
getPlanGName model =
    case List.head model.plans.planG of
        Just firstPlan ->
            if firstPlan.state == "MN" || firstPlan.state == "WI" then
                "Extended"

            else if firstPlan.state == "MA" then
                "Expanded"

            else
                "Plan G"

        Nothing ->
            "Plan G"


getPlanNName : Model -> String
getPlanNName model =
    case List.head model.plans.planN of
        Just firstPlan ->
            case firstPlan.state of
                "MN" ->
                    "Basic"

                "WI" ->
                    ""

                "MA" ->
                    "Core"

                _ ->
                    "Plan N"

        Nothing ->
            "Plan N"


viewPlansCarousel : Model -> Html Msg
viewPlansCarousel model =
    let
        currentPlans =
            getSelectedPlans model

        totalCards =
            List.length currentPlans
    in
    div [ class "relative w-full max-w-[640px] mx-auto mt-8" ]
        [ div [ class "absolute left-1/2 transform -translate-x-1/2 -top-6 z-10" ]
            [ viewCarouselDots model totalCards ]
        , if List.isEmpty currentPlans then
            div [ class "text-center py-8" ]
                [ p [ class "text-gray-500" ] [ text "No plans available to display." ] ]

          else
            div [ class "overflow-hidden" ]
                [ div
                    [ class "flex transition-transform duration-300 ease-in-out"
                    , style "transform" ("translateX(-" ++ String.fromInt (model.currentCardIndex * 100) ++ "%)")
                    ]
                    (List.map (viewPlanCard model) currentPlans)
                ]
        , viewCarouselControls model totalCards
        , div [ class "mt-8 text-center text-sm text-[#666666] max-w-lg mx-auto" ]
            [ p [ class "mb-2" ]
                [ text "These are the three least expensive plans available. All Medicare Supplement plans of the same letter (G or N) provide identical coverage, as mandated by federal law." ]
            , p []
                [ text "Our recommendation: Choose an established insurance company with a strong financial rating, then select their most affordable plan since the coverage will be identical to other companies offering the same plan letter." ]
            ]
        ]


viewCarouselDots : Model -> Int -> Html Msg
viewCarouselDots model totalCards =
    div [ class "flex space-x-3" ]
        (List.range 0 (totalCards - 1)
            |> List.map
                (\index ->
                    div
                        [ class "w-3 h-3 rounded-full transition-colors duration-200"
                        , class
                            (if index == model.currentCardIndex then
                                "bg-[#0066FF]"

                             else
                                "bg-[#E5E5E5]"
                            )
                        ]
                        []
                )
        )


viewCarouselControls : Model -> Int -> Html Msg
viewCarouselControls model totalCards =
    div [ class "absolute w-full flex justify-between items-center", style "top" "50%" ]
        [ button
            [ class "bg-[#F5F8FF] w-10 h-10 rounded-lg shadow-sm -ml-5 flex justify-center items-center disabled:opacity-50 disabled:cursor-not-allowed hover:bg-[#E5EFFF] transition-colors"
            , onClick PreviousCard
            , disabled (model.currentCardIndex == 0)
            ]
            [ text "←" ]
        , button
            [ class "bg-[#F5F8FF] w-10 h-10 rounded-lg shadow-sm -mr-5 flex justify-center items-center disabled:opacity-50 disabled:cursor-not-allowed hover:bg-[#E5EFFF] transition-colors"
            , onClick NextCard
            , disabled (model.currentCardIndex == totalCards - 1)
            ]
            [ text "→" ]
        ]


viewPlanCard : Model -> Plan -> Html Msg
viewPlanCard model plan =
    let
        displayPrice =
            if model.showDiscount then
                plan.priceDiscount

            else
                plan.price
    in
    div [ class "flex-shrink-0 w-full px-4 relative" ]
        [ div [ class "bg-white rounded-2xl shadow-sm p-8" ]
            [ div [ class "mb-8 flex justify-center items-center h-16" ]
                [ img [ src plan.image, alt (plan.name ++ " logo"), class "h-full object-contain" ] [] ]
            , div [ class "text-center mb-6" ]
                [ p [ class "text-[#1A1A1A]" ]
                    [ span [ class "text-[48px] font-bold leading-none" ]
                        [ text ("$" ++ String.fromFloat displayPrice) ]
                    , span [ class "text-lg text-[#666666] ml-1" ] [ text "/mo" ]
                    ]
                ]
            , div [ class "mb-6" ]
                [ label [ class "flex items-center justify-center text-sm text-[#666666] gap-2" ]
                    [ input
                        [ type_ "checkbox"
                        , class "w-4 h-4 rounded border-gray-300 text-[#0066FF] focus:ring-[#0066FF]"
                        , checked model.showDiscount
                        , onClick ToggleDiscount
                        ]
                        []
                    , text ("Apply " ++ calculateDiscount plan ++ "% Household Discount")
                    ]
                ]
            , a
                [ href
                    (case model.quoteId of
                        Just id ->
                            "/eligibility?id=" ++ id

                        Nothing ->
                            "/eligibility"
                    )
                , class "w-full bg-[#7C3AED] text-white py-4 px-4 rounded-lg hover:bg-[#6D28D9] transition-colors mb-8 font-medium text-base inline-block text-center"
                , onClick (SelectPlan plan)
                ]
                [ text "See If I Qualify" ]
            , div [ class "border-t border-[#E5E5E5] pt-6" ]
                [ h3 [ class "font-medium text-base text-[#1A1A1A] text-left mb-4" ] [ text "GAPS Plan G Covers:" ]
                , ul [ class "space-y-3" ]
                    (List.map viewCoverageItem plan.coverageSummary)
                ]
            ]
        ]


calculateDiscount : Plan -> String
calculateDiscount plan =
    let
        discount =
            plan.priceDiscount / plan.price
    in
    (100 - (discount * 100 |> round)) |> String.fromInt


viewCoverageItem : CoverageItem -> Html Msg
viewCoverageItem item =
    li [ class "flex flex-col" ]
        [ div [ class "flex justify-between items-center" ]
            [ span [ class "text-sm text-left font-medium text-neutral-700" ] [ text item.name ]
            , div [ class "flex items-center" ]
                [ if item.percentageCovered == 0 then
                    span [ class "bg-medicare-danger-light text-medicare-danger text-xs font-medium px-2.5 py-1 rounded-full whitespace-nowrap" ]
                        [ text "NOT COVERED" ]

                  else if item.percentageCovered == 100 then
                    span [ class "bg-medicare-success-light text-medicare-success text-xs font-medium px-2.5 py-1 rounded-full" ]
                        [ text "COVERED" ]

                  else
                    span [ class "bg-medicare-success-light text-medicare-success text-xs font-medium px-2.5 py-1 rounded-full whitespace-nowrap" ]
                        [ text (String.fromInt item.percentageCovered ++ "% COVERED") ]
                ]
            ]
        , case item.note of
            Just noteText ->
                p [ class "text-xs text-neutral-500 mt-1 text-right" ] [ text noteText ]

            Nothing ->
                text ""
        ]


viewPillButton : String -> Bool -> Msg -> Html Msg
viewPillButton label isVideo msg =
    button
        [ class "mx-auto bg-white text-brand px-4 py-2 rounded-full border border-brand hover:bg-brand/5 transition-colors flex items-center justify-center gap-2"
        , onClick msg
        ]
        [ if isVideo then
            div [ class "flex items-center justify-center gap-1" ]
                [ text "▶"
                , span [ class "text-xs" ] [ text "Video" ]
                ]

          else
            text ""
        , text label
        ]


viewGvsNModal : Model -> Html Msg
viewGvsNModal model =
    if model.showGvsNVideo then
        div [ class "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" ]
            [ div [ class "bg-white rounded-lg p-8 w-[95%] max-w-5xl mx-auto flex flex-col items-center relative" ]
                [ button
                    [ class "absolute top-2 right-2 text-gray-500 hover:text-gray-700"
                    , onClick CloseGvsNVideo
                    ]
                    [ text "×" ]
                , h2 [ class "text-2xl font-bold mb-4 text-center" ] [ text "Plan G vs. Plan N" ]
                , p [ class "mb-4 text-center" ] [ text "Understanding the differences" ]
                , p [ class "mb-4 text-center" ] [ text "Watch this video to learn about the key differences between Plan G and Plan N" ]
                , div [ class "w-full max-w-3xl mx-auto" ]
                    [ div [ class "relative", style "padding-top" "125%" ]
                        [ iframe
                            [ src "https://player.vimeo.com/video/1018402330?autoplay=0&title=0&byline=0&portrait=0&responsive=1"
                            , class "w-full h-full absolute top-0 left-0"
                            , attribute "frameborder" "0"
                            , attribute "allow" "autoplay; fullscreen; picture-in-picture"
                            , attribute "allowfullscreen" ""
                            ]
                            []
                        ]
                    ]
                , button
                    [ class "bg-med-green-500 text-white px-6 py-2 rounded hover:bg-med-green-600 mt-4"
                    , onClick CloseGvsNVideo
                    ]
                    [ text "Continue" ]
                ]
            ]

    else
        text ""


viewQualificationModal : Model -> Html Msg
viewQualificationModal model =
    if model.showQualificationVideo then
        div [ class "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" ]
            [ div [ class "bg-white rounded-lg p-8 w-[95%] max-w-5xl mx-auto flex flex-col items-center relative" ]
                [ button
                    [ class "absolute top-2 right-2 text-gray-500 hover:text-gray-700"
                    , onClick CloseQualificationVideo
                    ]
                    [ text "×" ]
                , h1 [ class "text-2xl font-bold mb-4 text-center" ] [ text "Great Choice!" ]
                , h2 [ class "text-xl font-bold mb-4 text-center" ] [ text "Now let's see if you qualify" ]
                , p [ class "mb-4 text-center" ] [ text "Watch this video to understand the process of qualifying for the plan you selected" ]
                , div [ class "w-full max-w-3xl mx-auto" ]
                    [ div [ class "relative", style "padding-top" "125%" ]
                        [ iframe
                            [ src "https://player.vimeo.com/video/1018421414?autoplay=0&title=0&byline=0&portrait=0&responsive=1"
                            , class "w-full h-full absolute top-0 left-0"
                            , attribute "frameborder" "0"
                            , attribute "allow" "autoplay; fullscreen; picture-in-picture"
                            , attribute "allowfullscreen" ""
                            ]
                            []
                        ]
                    ]
                , button
                    [ class "bg-med-green-500 text-white px-6 py-2 rounded hover:bg-med-green-600 mt-4"
                    , onClick CloseQualificationVideo
                    ]
                    [ text "Continue" ]
                ]
            ]

    else
        text ""


viewRatesModal : Model -> Html Msg
viewRatesModal model =
    if model.showRatesVideo then
        let
            rateText =
                case List.head (getSelectedPlans model) of
                    Just plan ->
                        "$" ++ String.fromFloat plan.price

                    Nothing ->
                        ""

            countyText =
                model.county

            stateText =
                model.state

            planTypeText =
                case model.selectedPlanType of
                    PlanG ->
                        "Plan G"

                    PlanN ->
                        "Plan N"
        in
        div [ class "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4" ]
            [ div [ class "bg-white rounded-lg p-8 w-[95%] max-w-5xl mx-auto flex flex-col items-center relative" ]
                [ button
                    [ class "absolute top-2 right-2 text-gray-500 hover:text-gray-700"
                    , onClick CloseRatesVideo
                    ]
                    [ text "×" ]
                , h1 [ class "text-2xl font-bold mb-4 text-center" ] [ text "Good News!" ]
                , h2 [ class "text-xl font-bold mb-4 text-center" ]
                    [ text ("We found " ++ planTypeText ++ " options as low as " ++ rateText ++ " in " ++ countyText ++ " County, " ++ stateText) ]
                , p [ class "mb-4 text-center" ] [ text "Watch this quick video for 3 things to consider while reviewing your quotes" ]
                , div [ class "w-full max-w-3xl mx-auto" ]
                    [ div [ class "relative", style "padding-top" "125%" ]
                        [ iframe
                            [ src "https://player.vimeo.com/video/1018421439?autoplay=0&title=0&byline=0&portrait=0&responsive=1"
                            , class "w-full h-full absolute top-0 left-0"
                            , attribute "frameborder" "0"
                            , attribute "allow" "autoplay; fullscreen; picture-in-picture"
                            , attribute "allowfullscreen" ""
                            ]
                            []
                        ]
                    ]
                , button
                    [ class "bg-med-green-500 text-white px-6 py-2 rounded hover:bg-med-green-600 mt-4"
                    , onClick CloseRatesVideo
                    ]
                    [ text "Continue" ]
                ]
            ]

    else
        text ""


settingsDecoder : Decoder Settings
settingsDecoder =
    D.field "success" D.bool
        |> D.andThen
            (\success ->
                if success then
                    D.field "orgSettings" settingsObjectDecoder

                else
                    D.fail "Settings request was not successful"
            )


settingsObjectDecoder : Decoder Settings
settingsObjectDecoder =
    D.map8 Settings
        (D.field "stateLicenses" (D.list D.string))
        (D.field "carrierContracts" (D.list D.string))
        (D.field "stateCarrierSettings" (D.list stateCarrierSettingDecoder))
        (D.field "allowAgentSettings" D.bool)
        (D.field "emailSendBirthday" D.bool)
        (D.field "emailSendPolicyAnniversary" D.bool)
        (D.field "emailSendAep" D.bool)
        (D.field "smartSendEnabled" D.bool)


stateCarrierSettingDecoder : Decoder StateCarrierSetting
stateCarrierSettingDecoder =
    D.map4 StateCarrierSetting
        (D.field "state" D.string)
        (D.field "carrier" D.string)
        (D.field "active" D.bool)
        (D.field "targetGI" D.bool)


viewPlanList : Model -> PlanType -> List Plan -> Html Msg
viewPlanList model planType plans =
    let
        filteredPlans =
            plans
    in
    div []
        [ if List.isEmpty filteredPlans then
            div [ class "text-center py-8" ]
                [ p [ class "text-gray-500" ] [ text "No plans available to display." ] ]

          else
            div [ class "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" ]
                (List.map (viewPlanCard model) filteredPlans)
        ]

================
File: src/Contact.elm
================
module Contact exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Events
import Browser.Navigation as Nav
import Date exposing (Date)
import Dict exposing (Dict)
import EmailScheduler exposing (EmailSchedule, PlanType(..), ScheduledEmail, getScheduledEmails, init, viewFutureActivity)
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onBlur, onClick, onInput, onSubmit)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Process
import Task
import Time exposing (Month(..), Posix, Zone)



-- TYPES


type alias Contact =
    { id : Int
    , firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    , state : String
    , contactOwnerId : Maybe Int
    , contactOwner : Maybe User
    , currentCarrier : String
    , effectiveDate : String
    , birthDate : String
    , tobaccoUser : Bool
    , gender : String
    , zipCode : String
    , planType : String
    , status : String
    , agentId : Maybe Int
    , lastEmailed : Maybe String
    }


type alias User =
    { id : Int
    , email : String
    , firstName : String
    , lastName : String
    , isAdmin : Bool
    , isAgent : Bool
    , organizationId : Int
    , isActive : Bool
    , phone : String
    }


type alias ContactForm =
    { id : Maybe Int
    , firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    , state : String
    , contactOwnerId : Maybe Int
    , currentCarrier : String
    , effectiveDate : String
    , birthDate : String
    , tobaccoUser : Bool
    , gender : String
    , zipCode : String
    , planType : String
    }


emptyForm : ContactForm
emptyForm =
    { id = Nothing
    , firstName = ""
    , lastName = ""
    , email = ""
    , phoneNumber = ""
    , state = ""
    , contactOwnerId = Nothing
    , currentCarrier = ""
    , effectiveDate = ""
    , birthDate = ""
    , tobaccoUser = False
    , gender = "M"
    , zipCode = ""
    , planType = ""
    }



-- MODEL


type alias Activity =
    { submissionDate : String
    , status : ActivityStatus
    , carrierSelected : Maybe String
    , planSelected : Maybe String
    , quoteAmount : Maybe Float
    }


type ActivityStatus
    = QuoteCreated
    | EmailOpened
    | EmailSent Int -- Int represents which email number (1, 2, etc.)


type Modal
    = NoModal
    | EditModal
    | DeleteConfirmModal


type alias Model =
    { key : Nav.Key
    , contact : Maybe Contact
    , showModal : Modal
    , editForm : ContactForm
    , isSubmittingForm : Bool
    , error : Maybe String
    , activities : List Activity
    , isCheckingEmail : Bool
    , emailExists : Bool
    , isDeletingContact : Bool
    , emailSchedule : EmailSchedule
    , quoteUrl : Maybe String
    , isGeneratingQuote : Bool
    , healthStatus : Maybe HealthStatus
    , followUps : List FollowUpRequest
    , timeZone : Zone
    , showAllFollowUps : Bool
    , orgSettings : Maybe Settings
    , emailSendSuccess : Bool
    }


type alias HealthStatus =
    { status : String
    , answers : Maybe (Dict String Bool)
    }


type alias FollowUpRequest =
    { type_ : String
    , quoteId : String
    , createdAt : Posix
    }


type alias Settings =
    { stateLicenses : List String
    , carrierContracts : List String
    , stateCarrierSettings : List StateCarrierSetting
    , allowAgentSettings : Bool
    , emailSendBirthday : Bool
    , emailSendPolicyAnniversary : Bool
    , emailSendAep : Bool
    , smartSendEnabled : Bool
    }


type alias StateCarrierSetting =
    { state : String
    , carrier : String
    , active : Bool
    , targetGI : Bool
    }



-- DECODERS


contactDecoder : Decoder Contact
contactDecoder =
    Decode.succeed Contact
        |> Pipeline.required "id" Decode.int
        |> Pipeline.required "first_name" Decode.string
        |> Pipeline.required "last_name" Decode.string
        |> Pipeline.required "email" Decode.string
        |> Pipeline.optional "phone_number" Decode.string ""
        |> Pipeline.required "state" Decode.string
        |> Pipeline.optional "contact_owner_id" (Decode.nullable Decode.int) Nothing
        |> Pipeline.optional "contact_owner" (Decode.nullable userDecoder) Nothing
        |> Pipeline.required "current_carrier" Decode.string
        |> Pipeline.required "effective_date" Decode.string
        |> Pipeline.required "birth_date" Decode.string
        |> Pipeline.required "tobacco_user" Decode.bool
        |> Pipeline.required "gender" Decode.string
        |> Pipeline.required "zip_code" Decode.string
        |> Pipeline.required "plan_type" Decode.string
        |> Pipeline.optional "status" Decode.string "New"
        |> Pipeline.required "agent_id" (Decode.nullable Decode.int)
        |> Pipeline.optional "last_emailed_date" (Decode.nullable Decode.string) Nothing


userDecoder : Decoder User
userDecoder =
    Decode.succeed User
        |> Pipeline.required "id" Decode.int
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "first_name" Decode.string
        |> Pipeline.required "last_name" Decode.string
        |> Pipeline.required "is_admin" Decode.bool
        |> Pipeline.required "is_agent" Decode.bool
        |> Pipeline.required "organization_id" Decode.int
        |> Pipeline.required "is_active" Decode.bool
        |> Pipeline.required "phone" Decode.string


healthStatusDecoder : Decoder HealthStatus
healthStatusDecoder =
    Decode.map2 HealthStatus
        (Decode.field "status" Decode.string)
        (Decode.field "answers" (Decode.nullable (Decode.dict Decode.bool)))


settingsDecoder : Decoder Settings
settingsDecoder =
    Decode.field "success" Decode.bool
        |> Decode.andThen
            (\success ->
                if success then
                    Decode.field "orgSettings" settingsObjectDecoder

                else
                    Decode.fail "Settings request was not successful"
            )


settingsObjectDecoder : Decoder Settings
settingsObjectDecoder =
    Decode.map8 Settings
        (Decode.field "stateLicenses" (Decode.list Decode.string))
        (Decode.field "carrierContracts" (Decode.list Decode.string))
        (Decode.field "stateCarrierSettings" (Decode.list stateCarrierSettingDecoder))
        (Decode.field "allowAgentSettings" Decode.bool)
        (Decode.field "emailSendBirthday" Decode.bool)
        (Decode.field "emailSendPolicyAnniversary" Decode.bool)
        (Decode.field "emailSendAep" Decode.bool)
        (Decode.field "smartSendEnabled" Decode.bool)


stateCarrierSettingDecoder : Decoder StateCarrierSetting
stateCarrierSettingDecoder =
    Decode.map4 StateCarrierSetting
        (Decode.field "state" Decode.string)
        (Decode.field "carrier" Decode.string)
        (Decode.field "active" Decode.bool)
        (Decode.field "targetGI" Decode.bool)



-- INIT


type alias ZipInfo =
    { state : String
    , counties : List String
    , cities : List String
    }


init : Nav.Key -> String -> ( Model, Cmd Msg )
init key contactId =
    let
        initialSchedule =
            EmailScheduler.init
                (String.toInt contactId |> Maybe.withDefault 0)
                (Date.fromCalendarDate 2024 Jan 1)
                (Date.fromCalendarDate 2024 Jan 1)
                (Date.fromCalendarDate 2024 Jan 1)
                NoPlan
                ""
                -- Empty initial state
                []
                -- Empty initial state carrier settings
                []

        -- Empty initial state licenses
    in
    ( { key = key
      , contact = Nothing
      , showModal = NoModal
      , editForm = emptyForm
      , isSubmittingForm = False
      , error = Nothing
      , activities = []
      , isCheckingEmail = False
      , emailExists = False
      , isDeletingContact = False
      , emailSchedule = initialSchedule
      , quoteUrl = Nothing
      , isGeneratingQuote = False
      , healthStatus = Nothing
      , followUps = []
      , timeZone = Time.utc
      , showAllFollowUps = False
      , orgSettings = Nothing
      , emailSendSuccess = False
      }
    , Cmd.batch
        [ Http.get
            { url = "/api/contacts/" ++ contactId
            , expect = Http.expectJson GotContact contactDecoder
            }
        , Http.get
            { url = "/api/contacts/" ++ contactId ++ "/eligibility"
            , expect = Http.expectJson GotHealthStatus healthStatusDecoder
            }
        , Http.get
            { url = "/api/contacts/" ++ contactId ++ "/follow-ups"
            , expect = Http.expectJson GotFollowUps followUpsDecoder
            }
        , Task.perform GotCurrentTime Date.today
        , Task.perform GotTimeZone Time.here
        ]
    )



-- UPDATE


type Msg
    = NoOp
    | GotContact (Result Http.Error Contact)
    | GotCurrentTime Date
    | GotTimeZone Zone
    | ShowEditModal
    | CloseModal
    | BackToContacts
    | UpdateEditForm ContactFormField String
    | SubmitEditForm
    | ContactUpdated (Result Http.Error Contact)
    | CheckEmail String
    | EmailChecked (Result Http.Error { exists : Bool })
    | LookupZipCode String
    | GotZipLookup (Result Http.Error ZipInfo)
    | ShowDeleteConfirmModal
    | DeleteContact
    | ContactDeleted (Result Http.Error DeleteResponse)
    | GenerateQuoteLink
    | GotQuoteLink (Result Http.Error { quoteId : String, redirectUrl : String })
    | GotHealthStatus (Result Http.Error HealthStatus)
    | GotFollowUps (Result Http.Error (List FollowUpRequest))
    | ToggleFollowUps
    | GotOrgSettings (Result Http.Error Settings)
    | SendQuoteEmail
    | QuoteEmailSent (Result Http.Error { success : Bool, message : String })
    | ResetEmailSendState


type ContactFormField
    = FirstName
    | LastName
    | Email
    | PhoneNumber
    | State
    | ContactOwnerId
    | CurrentCarrier
    | EffectiveDate
    | BirthDate
    | TobaccoUser
    | Gender
    | ZipCode
    | PlanType


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )

        GotContact (Ok contact) ->
            case Date.fromIsoString contact.effectiveDate of
                Ok effectiveDate ->
                    case Date.fromIsoString contact.birthDate of
                        Ok birthDate ->
                            let
                                planType =
                                    case contact.planType of
                                        "Plan N" ->
                                            PlanN

                                        "N" ->
                                            PlanN

                                        "Plan G" ->
                                            PlanG

                                        "G" ->
                                            PlanG

                                        _ ->
                                            NoPlan

                                ( stateCarrierSettings, stateLicenses ) =
                                    case model.orgSettings of
                                        Just settings ->
                                            ( settings.stateCarrierSettings, settings.stateLicenses )

                                        Nothing ->
                                            ( [], [] )

                                newSchedule =
                                    EmailScheduler.init
                                        contact.id
                                        effectiveDate
                                        birthDate
                                        model.emailSchedule.currentDate
                                        planType
                                        contact.state
                                        stateCarrierSettings
                                        stateLicenses
                            in
                            ( { model | contact = Just contact, emailSchedule = newSchedule }
                            , Cmd.batch
                                [ Http.get
                                    { url = "/api/quotes/generate/" ++ String.fromInt contact.id
                                    , expect = Http.expectJson GotQuoteLink quoteLinkDecoder
                                    }
                                , Http.get
                                    { url = "/api/settings"
                                    , expect = Http.expectJson GotOrgSettings settingsDecoder
                                    }
                                ]
                            )

                        Err _ ->
                            ( { model | error = Just "Invalid birth date format" }, Cmd.none )

                Err _ ->
                    ( { model | error = Just "Invalid effective date format" }, Cmd.none )

        GotContact (Err _) ->
            ( { model | error = Just "Failed to load contact" }, Cmd.none )

        GotCurrentTime today ->
            let
                currentSchedule =
                    model.emailSchedule

                newSchedule =
                    { currentSchedule | currentDate = today }
            in
            ( { model | emailSchedule = newSchedule }
            , Cmd.none
            )

        GotTimeZone zone ->
            ( { model | timeZone = zone }, Cmd.none )

        ShowEditModal ->
            case model.contact of
                Just contact ->
                    ( { model
                        | showModal = EditModal
                        , editForm =
                            { id = Just contact.id
                            , firstName = contact.firstName
                            , lastName = contact.lastName
                            , email = contact.email
                            , phoneNumber = contact.phoneNumber
                            , state = contact.state
                            , contactOwnerId = contact.contactOwnerId
                            , currentCarrier = contact.currentCarrier
                            , effectiveDate = contact.effectiveDate
                            , birthDate = contact.birthDate
                            , tobaccoUser = contact.tobaccoUser
                            , gender = contact.gender
                            , zipCode = contact.zipCode
                            , planType = contact.planType
                            }
                      }
                    , Cmd.none
                    )

                Nothing ->
                    ( model, Cmd.none )

        CloseModal ->
            ( { model | showModal = NoModal }, Cmd.none )

        BackToContacts ->
            ( model, Nav.pushUrl model.key "/contacts" )

        UpdateEditForm field value ->
            let
                form =
                    model.editForm

                updatedForm =
                    case field of
                        FirstName ->
                            { form | firstName = value }

                        LastName ->
                            { form | lastName = value }

                        Email ->
                            { form | email = value }

                        PhoneNumber ->
                            { form | phoneNumber = String.filter Char.isDigit value |> String.left 10 }

                        State ->
                            { form | state = value }

                        ContactOwnerId ->
                            { form | contactOwnerId = String.toInt value }

                        CurrentCarrier ->
                            { form | currentCarrier = value }

                        EffectiveDate ->
                            { form | effectiveDate = value }

                        BirthDate ->
                            { form | birthDate = value }

                        TobaccoUser ->
                            { form | tobaccoUser = value == "true" }

                        Gender ->
                            { form | gender = value }

                        ZipCode ->
                            { form | zipCode = value }

                        PlanType ->
                            { form | planType = value }

                cmd =
                    if field == ZipCode && String.length value == 5 then
                        LookupZipCode value
                            |> Task.succeed
                            |> Task.perform identity

                    else if field == Email && String.length value > 0 then
                        checkEmail value

                    else
                        Cmd.none
            in
            ( { model
                | editForm = updatedForm
                , isCheckingEmail = field == Email && String.length value > 0
                , emailExists = False
                , error = Nothing
              }
            , cmd
            )

        SubmitEditForm ->
            case model.editForm.id of
                Just id ->
                    ( { model | isSubmittingForm = True }
                    , Http.request
                        { method = "PUT"
                        , headers = []
                        , url = "/api/contacts/" ++ String.fromInt id
                        , body = Http.jsonBody (encodeContactForm model.editForm)
                        , expect = Http.expectJson ContactUpdated contactDecoder
                        , timeout = Nothing
                        , tracker = Nothing
                        }
                    )

                Nothing ->
                    ( model, Cmd.none )

        ContactUpdated (Ok contact) ->
            ( { model
                | contact = Just contact
                , showModal = NoModal
                , isSubmittingForm = False
                , error = Nothing
              }
            , Cmd.none
            )

        ContactUpdated (Err _) ->
            ( { model
                | isSubmittingForm = False
                , error = Just "Failed to update contact"
              }
            , Cmd.none
            )

        CheckEmail email ->
            ( { model | isCheckingEmail = True }
            , checkEmail email
            )

        EmailChecked (Ok response) ->
            ( { model
                | isCheckingEmail = False
                , emailExists = response.exists
                , error =
                    if response.exists then
                        Just "A contact with this email already exists"

                    else
                        Nothing
              }
            , Cmd.none
            )

        EmailChecked (Err _) ->
            ( { model
                | isCheckingEmail = False
                , error = Just "Failed to check email. Please try again."
              }
            , Cmd.none
            )

        LookupZipCode zipCode ->
            ( model
            , Http.get
                { url = "/api/zip-lookup/" ++ zipCode
                , expect = Http.expectJson GotZipLookup zipInfoDecoder
                }
            )

        GotZipLookup (Ok zipInfo) ->
            let
                form =
                    model.editForm

                updatedForm =
                    { form | state = zipInfo.state }
            in
            ( { model | editForm = updatedForm }
            , Cmd.none
            )

        GotZipLookup (Err _) ->
            ( model, Cmd.none )

        ShowDeleteConfirmModal ->
            ( { model | showModal = DeleteConfirmModal }, Cmd.none )

        DeleteContact ->
            case model.contact of
                Just contact ->
                    ( { model | isDeletingContact = True }
                    , deleteContact contact.id
                    )

                Nothing ->
                    ( model, Cmd.none )

        ContactDeleted (Ok response) ->
            if response.success then
                ( model, Nav.pushUrl model.key "/contacts" )

            else
                ( { model | isDeletingContact = False, error = Just "Failed to delete contact" }, Cmd.none )

        ContactDeleted (Err _) ->
            ( { model | isDeletingContact = False, error = Just "Failed to delete contact" }, Cmd.none )

        GenerateQuoteLink ->
            case model.contact of
                Just contact ->
                    ( { model | isGeneratingQuote = True }
                    , Http.get
                        { url = "/api/quotes/generate/" ++ String.fromInt contact.id
                        , expect = Http.expectJson GotQuoteLink quoteLinkDecoder
                        }
                    )

                Nothing ->
                    ( model, Cmd.none )

        GotQuoteLink (Ok response) ->
            ( { model
                | quoteUrl =
                    case model.contact of
                        Just contact ->
                            Just ("/quote?id=" ++ response.quoteId ++ "&planType=" ++ contact.planType)

                        Nothing ->
                            Just ("/quote?id=" ++ response.quoteId)
                , isGeneratingQuote = False
              }
            , Cmd.none
            )

        GotQuoteLink (Err _) ->
            ( { model
                | error = Just "Failed to generate quote link"
                , isGeneratingQuote = False
              }
            , Cmd.none
            )

        GotHealthStatus (Ok status) ->
            ( { model | healthStatus = Just status }
            , Cmd.none
            )

        GotHealthStatus (Err _) ->
            ( model, Cmd.none )

        GotFollowUps (Ok followUps) ->
            ( { model | followUps = followUps }
            , Cmd.none
            )

        GotFollowUps (Err _) ->
            ( model, Cmd.none )

        ToggleFollowUps ->
            ( { model | showAllFollowUps = not model.showAllFollowUps }, Cmd.none )

        GotOrgSettings (Ok settings) ->
            let
                currentSchedule =
                    model.emailSchedule

                updatedSchedule =
                    { currentSchedule
                        | stateCarrierSettings = settings.stateCarrierSettings
                        , stateLicenses = settings.stateLicenses
                    }
            in
            ( { model | orgSettings = Just settings, emailSchedule = updatedSchedule }
            , Cmd.none
            )

        GotOrgSettings (Err _) ->
            ( { model | error = Just "Failed to load organization settings" }
            , Cmd.none
            )

        SendQuoteEmail ->
            case model.contact of
                Just contact ->
                    ( { model | isGeneratingQuote = True, emailSendSuccess = False }
                    , Http.post
                        { url = "/api/contacts/" ++ String.fromInt contact.id ++ "/send-quote-email"
                        , body = Http.emptyBody
                        , expect =
                            Http.expectJson QuoteEmailSent
                                (Decode.map2 (\s m -> { success = s, message = m })
                                    (Decode.field "success" Decode.bool)
                                    (Decode.field "message" Decode.string)
                                )
                        }
                    )

                Nothing ->
                    ( model, Cmd.none )

        QuoteEmailSent (Ok response) ->
            ( { model
                | isGeneratingQuote = False
                , emailSendSuccess = response.success
                , error =
                    if response.success then
                        Nothing

                    else
                        Just response.message
              }
            , if response.success then
                Process.sleep 5000
                    |> Task.perform (\_ -> ResetEmailSendState)

              else
                Cmd.none
            )

        QuoteEmailSent (Err _) ->
            ( { model
                | isGeneratingQuote = False
                , emailSendSuccess = False
                , error = Just "Failed to send quote email"
              }
            , Cmd.none
            )

        ResetEmailSendState ->
            ( { model | emailSendSuccess = False }, Cmd.none )



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Contact Details"
    , body =
        [ div [ class "min-h-screen bg-white" ]
            [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" ]
                [ viewBackButton
                , case model.contact of
                    Just contact ->
                        div []
                            [ viewHeader contact model
                            , viewContactSummary contact model.quoteUrl model.isGeneratingQuote model.healthStatus model.followUps model.timeZone model.showAllFollowUps
                            , if model.orgSettings /= Nothing && isStateActive model.emailSchedule then
                                div [ class "bg-white rounded-lg border border-gray-200 p-6 mb-8" ]
                                    [ viewFutureActivity (getScheduledEmails model.emailSchedule) ]

                              else
                                div [ class "bg-white rounded-lg border border-gray-200 p-6 mb-8" ]
                                    [ h2 [ class "text-lg font-medium mb-4" ] [ text "Future Activity" ]
                                    , div [ class "flex justify-center items-center py-8" ]
                                        [ viewSpinner
                                        , span [ class "ml-3 text-gray-500" ] [ text "Loading future activities..." ]
                                        ]
                                    ]
                            , viewActivity model.activities
                            ]

                    Nothing ->
                        viewLoading
                ]
            ]
        , viewModals model
        ]
    }


viewBackButton : Html Msg
viewBackButton =
    button
        [ class "mb-6 inline-flex items-center text-sm text-gray-600 hover:text-gray-900"
        , onClick BackToContacts
        ]
        [ span [ class "mr-2" ] [ text "←" ]
        , text "Back to Contacts"
        ]


viewHeader : Contact -> Model -> Html Msg
viewHeader contact model =
    div [ class "flex justify-between items-center mb-8" ]
        [ div [ class "flex items-center gap-4" ]
            [ h1 [ class "text-2xl font-semibold" ]
                [ text (contact.firstName ++ " " ++ contact.lastName) ]
            , viewStatus contact.status
            ]
        , div [ class "flex gap-2" ]
            [ button
                [ class "px-4 py-2 text-sm font-medium text-blue-600 hover:text-blue-700 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors duration-200 flex items-center gap-2"
                , onClick
                    (if model.isGeneratingQuote || model.emailSendSuccess then
                        NoOp

                     else
                        SendQuoteEmail
                    )
                ]
                (if model.isGeneratingQuote then
                    [ viewSpinner
                    , text "Sending..."
                    ]

                 else if model.emailSendSuccess then
                    [ span [ class "text-green-600" ] [ text "✓" ]
                    , text "Email Sent"
                    ]

                 else
                    [ text "Send Quote Email" ]
                )
            , button
                [ class "px-4 py-2 text-sm font-medium text-purple-600 hover:text-purple-700 bg-purple-50 hover:bg-purple-100 rounded-lg transition-colors duration-200 flex items-center gap-2"
                , onClick ShowEditModal
                ]
                [ text "Edit" ]
            , button
                [ class "px-4 py-2 text-sm font-medium text-red-600 hover:text-red-700 bg-red-50 hover:bg-red-100 rounded-lg transition-colors duration-200 flex items-center gap-2"
                , onClick ShowDeleteConfirmModal
                ]
                [ text "Delete" ]
            ]
        ]


viewContactSummary : Contact -> Maybe String -> Bool -> Maybe HealthStatus -> List FollowUpRequest -> Zone -> Bool -> Html Msg
viewContactSummary contact quoteUrl isGeneratingQuote healthStatus followUps zone showAllFollowUps =
    let
        followUpsSection =
            if not (List.isEmpty followUps) then
                div [ class "bg-white rounded-lg border border-gray-200 p-6 mb-8" ]
                    [ div [ class "flex justify-between items-center mb-6" ]
                        [ h2 [ class "text-lg font-medium" ] [ text "Follow-up Requests" ] ]
                    , div [ class "space-y-4" ]
                        (List.take
                            (if showAllFollowUps then
                                List.length followUps

                             else
                                2
                            )
                            followUps
                            |> List.map (viewFollowUpRequest zone)
                        )
                    , if not showAllFollowUps && List.length followUps > 2 then
                        div [ class "mt-4 text-center" ]
                            [ button
                                [ class "text-sm text-purple-600 hover:text-purple-800"
                                , onClick ToggleFollowUps
                                ]
                                [ text ("Show " ++ String.fromInt (List.length followUps - 2) ++ " More") ]
                            ]

                      else if showAllFollowUps then
                        div [ class "mt-4 text-center" ]
                            [ button
                                [ class "text-sm text-purple-600 hover:text-purple-800"
                                , onClick ToggleFollowUps
                                ]
                                [ text "Show Less" ]
                            ]

                      else
                        text ""
                    ]

            else
                text ""
    in
    div []
        [ div [ class "bg-white rounded-lg border border-gray-200 p-6 mb-8" ]
            [ h2 [ class "text-lg font-medium mb-6" ] [ text "Contact Summary" ]
            , div [ class "grid grid-cols-2 gap-x-8 gap-y-6" ]
                [ viewField "Date of Birth" contact.birthDate
                , viewField "Contact Owner" (Maybe.map .firstName contact.contactOwner |> Maybe.withDefault "Default")
                , viewField "Phone Number" (formatPhoneNumber contact.phoneNumber)
                , viewField "Email" contact.email
                , viewField "Current Carrier" contact.currentCarrier
                , viewField "Gender" contact.gender
                , viewField "Tobacco Use"
                    (if contact.tobaccoUser then
                        "Yes"

                     else
                        "No"
                    )
                , viewField "State" contact.state
                , viewField "Zip Code" contact.zipCode
                , viewField "Effective Date" contact.effectiveDate
                , viewField "Plan Type" contact.planType
                , viewQuoteField quoteUrl isGeneratingQuote
                , viewHealthStatusField healthStatus
                ]
            ]
        , followUpsSection
        ]


viewQuoteField : Maybe String -> Bool -> Html Msg
viewQuoteField quoteUrl isGeneratingQuote =
    div []
        [ div [ class "text-sm font-medium text-gray-500" ] [ text "Quote Link" ]
        , div [ class "mt-1" ]
            [ case quoteUrl of
                Just url ->
                    a
                        [ href url
                        , class "text-sm text-blue-600 hover:text-blue-800 underline"
                        , target "_blank"
                        ]
                        [ text "View Quote" ]

                Nothing ->
                    if isGeneratingQuote then
                        viewSpinner

                    else
                        text "-"
            ]
        ]


viewHealthStatusField : Maybe HealthStatus -> Html Msg
viewHealthStatusField maybeStatus =
    div []
        [ div [ class "text-sm font-medium text-gray-500" ] [ text "Health Status" ]
        , div [ class "mt-1" ]
            [ case maybeStatus of
                Just status ->
                    case status.status of
                        "pass" ->
                            div [ class "flex items-center text-green-600 text-sm" ]
                                [ span [ class "mr-1" ] [ text "✓" ]
                                , text "Pass"
                                ]

                        "flagged" ->
                            div [ class "flex items-center text-red-600 text-sm" ]
                                [ span [ class "mr-1" ] [ text "✕" ]
                                , text "Issue Flagged"
                                ]

                        _ ->
                            div [ class "text-gray-600 text-sm" ]
                                [ text "Incomplete" ]

                Nothing ->
                    div [ class "text-gray-600 text-sm" ]
                        [ text "Loading..." ]
            ]
        ]


viewField : String -> String -> Html Msg
viewField label value =
    div []
        [ div [ class "text-sm font-medium text-gray-500" ] [ text label ]
        , div [ class "mt-1 text-sm text-gray-900" ] [ text value ]
        ]


viewActivity : List Activity -> Html Msg
viewActivity activities =
    div [ class "bg-white rounded-lg border border-gray-200 p-6" ]
        [ h2 [ class "text-lg font-medium mb-6" ] [ text "Past Activity" ]
        , table [ class "min-w-full" ]
            [ thead [ class "bg-gray-50" ]
                [ tr []
                    [ th [ class "px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase" ] [ text "Submission Date" ]
                    , th [ class "px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase" ] [ text "Status" ]
                    , th [ class "px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase" ] [ text "Carrier Selected" ]
                    , th [ class "px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase" ] [ text "Plan Selected" ]
                    , th [ class "px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase" ] [ text "Quote Amount" ]
                    ]
                ]
            , tbody [ class "divide-y divide-gray-200" ]
                (List.map viewActivityRow activities)
            ]
        ]


viewActivityRow : Activity -> Html Msg
viewActivityRow activity =
    tr [ class "hover:bg-gray-50" ]
        [ td [ class "px-3 py-2 text-sm text-gray-900" ] [ text activity.submissionDate ]
        , td [ class "px-3 py-2 text-sm" ] [ viewActivityStatus activity.status ]
        , td [ class "px-3 py-2 text-sm text-gray-900" ] [ text (Maybe.withDefault "-" activity.carrierSelected) ]
        , td [ class "px-3 py-2 text-sm text-gray-900" ] [ text (Maybe.withDefault "-" activity.planSelected) ]
        , td [ class "px-3 py-2 text-sm text-gray-900" ]
            [ text
                (activity.quoteAmount
                    |> Maybe.map (\amount -> "$" ++ String.fromFloat amount)
                    |> Maybe.withDefault "-"
                )
            ]
        ]


viewActivityStatus : ActivityStatus -> Html Msg
viewActivityStatus status =
    let
        ( bgColor, textColor, statusText ) =
            case status of
                QuoteCreated ->
                    ( "bg-green-50", "text-green-700", "Quote Created" )

                EmailOpened ->
                    ( "bg-red-50", "text-red-700", "Email Opened" )

                EmailSent n ->
                    ( "bg-blue-50", "text-blue-700", "Email #" ++ String.fromInt n ++ " Sent" )
    in
    div [ class ("inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium " ++ bgColor ++ " " ++ textColor) ]
        [ text statusText ]


viewStatus : String -> Html Msg
viewStatus status =
    let
        ( bgColor, textColor ) =
            case status of
                "Quote Created" ->
                    ( "bg-green-50", "text-green-700" )

                "Opened Email" ->
                    ( "bg-red-50", "text-red-700" )

                "Email #2 Sent" ->
                    ( "bg-blue-50", "text-blue-700" )

                "Email #1 Sent" ->
                    ( "bg-blue-50", "text-blue-700" )

                "In Queue" ->
                    ( "bg-orange-50", "text-orange-700" )

                _ ->
                    ( "bg-gray-50", "text-gray-700" )
    in
    div [ class ("inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium " ++ bgColor ++ " " ++ textColor) ]
        [ text status ]


viewHealthStatus : Maybe HealthStatus -> Html Msg
viewHealthStatus maybeStatus =
    div [ class "p-4 rounded-lg flex items-center" ]
        [ div [ class "text-sm font-medium mr-2" ] [ text "Health Status:" ]
        , case maybeStatus of
            Just status ->
                case status.status of
                    "pass" ->
                        div [ class "flex items-center text-green-600" ]
                            [ span [ class "mr-2" ] [ text "✓" ]
                            , text "Pass"
                            ]

                    "flagged" ->
                        div [ class "flex items-center text-red-600" ]
                            [ span [ class "mr-2" ] [ text "✕" ]
                            , text "Issue Flagged"
                            ]

                    _ ->
                        div [ class "flex items-center text-gray-600" ]
                            [ text "Incomplete" ]

            Nothing ->
                div [ class "flex items-center text-gray-600" ]
                    [ text "Loading..." ]
        ]


viewModals : Model -> Html Msg
viewModals model =
    case model.showModal of
        NoModal ->
            text ""

        EditModal ->
            viewEditModal model

        DeleteConfirmModal ->
            viewDeleteConfirmModal model


viewEditModal : Model -> Html Msg
viewEditModal model =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-8" ]
        [ div [ class "bg-white rounded-xl p-10 max-w-5xl w-full mx-4 shadow-xl relative" ]
            [ button
                [ class "absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ text "×" ]
            , h2 [ class "text-2xl font-semibold text-gray-900 mb-8" ]
                [ text "Edit Contact" ]
            , viewContactForm model.editForm model.isSubmittingForm model
            ]
        ]


viewContactForm : ContactForm -> Bool -> Model -> Html Msg
viewContactForm form isSubmitting model =
    Html.form [ onSubmit SubmitEditForm ]
        [ div [ class "grid grid-cols-2 gap-x-8 gap-y-6" ]
            [ viewFormInput "First Name" "text" form.firstName FirstName True model
            , viewFormInput "Last Name" "text" form.lastName LastName True model
            , viewFormInput "Email" "email" form.email Email True model
            , viewFormInput "Phone Number" "text" (formatPhoneNumber form.phoneNumber) PhoneNumber True model
            , viewFormInput "Current Carrier" "text" form.currentCarrier CurrentCarrier True model
            , viewFormInput "Plan Type" "text" form.planType PlanType True model
            , viewFormInput "Effective Date" "date" form.effectiveDate EffectiveDate True model
            , viewFormInput "Birth Date" "date" form.birthDate BirthDate True model
            , viewFormRadioGroup "Tobacco User"
                (if form.tobaccoUser then
                    "true"

                 else
                    "false"
                )
                TobaccoUser
                [ ( "true", "Yes" ), ( "false", "No" ) ]
            , viewFormRadioGroup "Gender" form.gender Gender [ ( "M", "Male" ), ( "F", "Female" ) ]
            , div [ class "col-span-2 grid grid-cols-2 gap-x-8" ]
                [ viewFormInput "ZIP Code" "text" form.zipCode ZipCode True model
                , viewFormInput "State" "text" form.state State True model
                ]
            ]
        , div [ class "mt-10 flex justify-end space-x-4" ]
            [ button
                [ type_ "button"
                , onClick CloseModal
                , class "px-6 py-3 bg-white text-gray-700 text-sm font-medium rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200 focus:ring-4 focus:ring-purple-100"
                ]
                [ text "Cancel" ]
            , if isSubmitting then
                div [ class "px-6 py-3 flex items-center space-x-2" ] [ viewSpinner ]

              else
                button
                    [ type_ "submit"
                    , class "px-6 py-3 bg-purple-500 text-white text-sm font-medium rounded-lg hover:bg-purple-600 transition-colors duration-200 focus:ring-4 focus:ring-purple-200"
                    ]
                    [ text "Save Changes" ]
            ]
        ]


viewFormInput : String -> String -> String -> ContactFormField -> Bool -> Model -> Html Msg
viewFormInput labelText inputType inputValue field isRequired model =
    div [ class "form-group" ]
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text labelText ]
        , if field == Email then
            div [ class "relative" ]
                [ Html.input
                    [ type_ inputType
                    , class
                        ("w-full px-4 py-3 bg-white border-[2.5px] rounded-lg text-gray-700 placeholder-gray-400 shadow-sm transition-all duration-200 "
                            ++ (if model.emailExists then
                                    "border-red-300 hover:border-red-400 focus:border-red-500 focus:ring-2 focus:ring-red-200"

                                else
                                    "border-purple-300 hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200"
                               )
                        )
                    , Html.Attributes.value inputValue
                    , onInput (UpdateEditForm field)
                    , onBlur (CheckEmail inputValue)
                    , required isRequired
                    ]
                    []
                , if model.isCheckingEmail then
                    div [ class "absolute right-3 top-3" ]
                        [ viewSpinner ]

                  else if model.emailExists then
                    div [ class "absolute right-3 top-3 text-red-500" ]
                        [ text "✕" ]

                  else if String.length inputValue > 0 then
                    div [ class "absolute right-3 top-3 text-green-500" ]
                        [ text "✓" ]

                  else
                    text ""
                ]

          else if field == State then
            Html.input
                [ type_ inputType
                , class "w-full px-4 py-3 bg-white border-[2.5px] border-gray-200 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200"
                , Html.Attributes.value inputValue
                , Html.Attributes.disabled True
                , required isRequired
                ]
                []

          else
            Html.input
                [ type_ inputType
                , class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200"
                , Html.Attributes.value inputValue
                , onInput (UpdateEditForm field)
                , required isRequired
                ]
                []
        ]


viewFormRadioGroup : String -> String -> ContactFormField -> List ( String, String ) -> Html Msg
viewFormRadioGroup labelText selectedValue field options =
    div [ class "form-group" ]
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text labelText ]
        , div [ class "flex gap-4" ]
            (List.map
                (\( val, txt ) ->
                    label
                        [ class
                            ("flex items-center px-4 py-2 rounded-lg border-2 cursor-pointer transition-all duration-200 "
                                ++ (if selectedValue == val then
                                        "border-purple-500 bg-purple-50 text-purple-700"

                                    else
                                        "border-gray-200 hover:border-purple-200"
                                   )
                            )
                        ]
                        [ input
                            [ type_ "radio"
                            , value val
                            , checked (selectedValue == val)
                            , onInput (UpdateEditForm field)
                            , class "sr-only"
                            ]
                            []
                        , text txt
                        ]
                )
                options
            )
        ]


encodeContactForm : ContactForm -> Encode.Value
encodeContactForm form =
    Encode.object
        [ ( "first_name", Encode.string form.firstName )
        , ( "last_name", Encode.string form.lastName )
        , ( "email", Encode.string form.email )
        , ( "phone_number", Encode.string (String.filter Char.isDigit form.phoneNumber |> String.left 10) )
        , ( "state", Encode.string form.state )
        , ( "contact_owner_id", Maybe.map Encode.int form.contactOwnerId |> Maybe.withDefault Encode.null )
        , ( "current_carrier", Encode.string form.currentCarrier )
        , ( "effective_date", Encode.string form.effectiveDate )
        , ( "birth_date", Encode.string form.birthDate )
        , ( "tobacco_user", Encode.bool form.tobaccoUser )
        , ( "gender", Encode.string form.gender )
        , ( "zip_code", Encode.string form.zipCode )
        , ( "plan_type", Encode.string form.planType )
        ]


viewLoading : Html Msg
viewLoading =
    div [ class "flex justify-center items-center h-64" ]
        [ div [ class "animate-spin rounded-full h-8 w-8 border-2 border-purple-500 border-t-transparent" ] [] ]


viewSpinner : Html msg
viewSpinner =
    div [ class "animate-spin rounded-full h-5 w-5 border-2 border-purple-500 border-t-transparent" ] []


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    if String.isEmpty phone then
        ""

    else
        let
            digits =
                String.filter Char.isDigit phone
                    |> String.left 10

            len =
                String.length digits
        in
        if len == 0 then
            ""

        else if len <= 3 then
            "(" ++ digits

        else if len <= 6 then
            "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

        else
            "(" ++ String.left 3 digits ++ ") " ++ String.slice 3 6 digits ++ "-" ++ String.dropLeft 6 digits



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    if model.showModal /= NoModal then
        Browser.Events.onKeyDown
            (Decode.map
                (\key ->
                    if key == "Escape" then
                        CloseModal

                    else
                        NoOp
                )
                (Decode.field "key" Decode.string)
            )

    else
        Sub.none


checkEmail : String -> Cmd Msg
checkEmail email =
    Http.get
        { url = "/api/contacts/check-email/" ++ email
        , expect = Http.expectJson EmailChecked (Decode.map (\exists -> { exists = exists }) (Decode.field "exists" Decode.bool))
        }


lookupZipCode : String -> Cmd Msg
lookupZipCode zipCode =
    Http.get
        { url = "/api/zip-lookup/" ++ zipCode
        , expect = Http.expectJson GotZipLookup zipInfoDecoder
        }


zipInfoDecoder : Decode.Decoder ZipInfo
zipInfoDecoder =
    Decode.succeed ZipInfo
        |> Pipeline.required "state" Decode.string
        |> Pipeline.required "counties" (Decode.list Decode.string)
        |> Pipeline.required "cities" (Decode.list Decode.string)


deleteContact : Int -> Cmd Msg
deleteContact contactId =
    Http.request
        { method = "DELETE"
        , headers = []
        , url = "/api/contacts"
        , body = Http.jsonBody (Encode.list Encode.int [ contactId ])
        , expect = Http.expectJson ContactDeleted deleteResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


type alias DeleteResponse =
    { success : Bool
    , deletedIds : List Int
    , message : String
    }


deleteResponseDecoder : Decode.Decoder DeleteResponse
deleteResponseDecoder =
    Decode.map3 DeleteResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "deleted_ids" (Decode.list Decode.int))
        (Decode.field "message" Decode.string)


viewDeleteConfirmModal : Model -> Html Msg
viewDeleteConfirmModal model =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-8" ]
        [ div [ class "bg-white rounded-xl p-8 max-w-md w-full mx-4 shadow-xl relative" ]
            [ button
                [ class "absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ text "×" ]
            , h2 [ class "text-xl font-semibold text-gray-900 mb-4" ]
                [ text "Delete Contact" ]
            , p [ class "text-sm text-gray-600 mb-6" ]
                [ text "Are you sure you want to delete this contact? This action cannot be undone." ]
            , div [ class "flex justify-end space-x-4" ]
                [ button
                    [ class "px-4 py-2 text-gray-700 text-sm font-medium rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200"
                    , onClick CloseModal
                    ]
                    [ text "Cancel" ]
                , if model.isDeletingContact then
                    div [ class "px-4 py-2 flex items-center" ]
                        [ viewSpinner ]

                  else
                    button
                        [ class "px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors duration-200"
                        , onClick DeleteContact
                        ]
                        [ text "Delete" ]
                ]
            ]
        ]


quoteLinkDecoder : Decode.Decoder { quoteId : String, redirectUrl : String }
quoteLinkDecoder =
    Decode.map2 (\id url -> { quoteId = id, redirectUrl = url })
        (Decode.field "quoteId" Decode.string)
        (Decode.field "redirectUrl" Decode.string)


followUpsDecoder : Decoder (List FollowUpRequest)
followUpsDecoder =
    Decode.list
        (Decode.map3 FollowUpRequest
            (Decode.field "type" Decode.string)
            (Decode.field "quoteId" Decode.string)
            (Decode.field "createdAt" posixDecoder)
        )


posixDecoder : Decoder Posix
posixDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                let
                    parts =
                        String.split " " str

                    datePart =
                        List.head parts |> Maybe.withDefault ""

                    timePart =
                        List.drop 1 parts |> List.head |> Maybe.withDefault ""

                    dateParts =
                        String.split "-" datePart

                    year =
                        List.head dateParts |> Maybe.andThen String.toInt |> Maybe.withDefault 1970

                    month =
                        List.drop 1 dateParts |> List.head |> Maybe.andThen String.toInt |> Maybe.withDefault 1

                    day =
                        List.drop 2 dateParts |> List.head |> Maybe.andThen String.toInt |> Maybe.withDefault 1

                    timeComponents =
                        String.split ":" timePart

                    hour =
                        List.head timeComponents |> Maybe.andThen String.toInt |> Maybe.withDefault 0

                    minute =
                        List.drop 1 timeComponents |> List.head |> Maybe.andThen String.toInt |> Maybe.withDefault 0

                    second =
                        List.drop 2 timeComponents |> List.head |> Maybe.andThen (String.split "." >> List.head) |> Maybe.andThen String.toInt |> Maybe.withDefault 0

                    -- Calculate milliseconds since epoch
                    msPerDay =
                        86400000

                    msPerHour =
                        3600000

                    msPerMinute =
                        60000

                    msPerSecond =
                        1000

                    -- Start with Unix epoch (1970-01-01) and add days
                    daysFromEpoch =
                        (year - 1970)
                            * 365
                            + ((year - 1969) // 4)
                            + (case month of
                                1 ->
                                    0

                                2 ->
                                    31

                                3 ->
                                    59

                                4 ->
                                    90

                                5 ->
                                    120

                                6 ->
                                    151

                                7 ->
                                    181

                                8 ->
                                    212

                                9 ->
                                    243

                                10 ->
                                    273

                                11 ->
                                    304

                                12 ->
                                    334

                                _ ->
                                    0
                              )
                            + day
                            - 1

                    timestamp =
                        daysFromEpoch
                            * msPerDay
                            + hour
                            * msPerHour
                            + minute
                            * msPerMinute
                            + second
                            * msPerSecond
                in
                Decode.succeed (Time.millisToPosix timestamp)
            )


viewFollowUpRequest : Zone -> FollowUpRequest -> Html Msg
viewFollowUpRequest zone followUp =
    div [ class "flex items-center justify-between py-3 border-b border-gray-100 last:border-0" ]
        [ div [ class "flex items-center space-x-4" ]
            [ div [ class "text-sm text-gray-600" ]
                [ text (formatDate zone followUp.createdAt) ]
            , div [ class "text-sm font-medium" ]
                [ text
                    (case followUp.type_ of
                        "accept" ->
                            "Accepted - Ready to Switch"

                        "decline" ->
                            "Declined - Looking for Alternatives"

                        _ ->
                            "General Follow-up Request"
                    )
                ]
            ]
        ]


formatDate : Zone -> Posix -> String
formatDate zone time =
    let
        year =
            String.fromInt (Time.toYear zone time)

        month =
            case Time.toMonth zone time of
                Jan ->
                    "01"

                Feb ->
                    "02"

                Mar ->
                    "03"

                Apr ->
                    "04"

                May ->
                    "05"

                Jun ->
                    "06"

                Jul ->
                    "07"

                Aug ->
                    "08"

                Sep ->
                    "09"

                Oct ->
                    "10"

                Nov ->
                    "11"

                Dec ->
                    "12"

        day =
            String.padLeft 2 '0' (String.fromInt (Time.toDay zone time))

        hour =
            Time.toHour zone time

        ( displayHour, amPm ) =
            if hour == 0 then
                ( "12", "AM" )

            else if hour < 12 then
                ( String.fromInt hour, "AM" )

            else if hour == 12 then
                ( "12", "PM" )

            else
                ( String.fromInt (hour - 12), "PM" )

        minute =
            String.padLeft 2 '0' (String.fromInt (Time.toMinute zone time))
    in
    year ++ "-" ++ month ++ "-" ++ day ++ " at " ++ displayHour ++ ":" ++ minute ++ " " ++ amPm



-- HELPERS


stringToPosix : String -> Date
stringToPosix dateString =
    case Date.fromIsoString dateString of
        Ok date ->
            date

        Err _ ->
            -- Default to Unix epoch if invalid date
            Date.fromCalendarDate 1970 Jan 1


isStateActive : EmailSchedule -> Bool
isStateActive schedule =
    List.member schedule.state schedule.stateLicenses


updateContact : Contact -> List Contact -> List Contact
updateContact updated contacts =
    List.map
        (\contact ->
            if contact.id == updated.id then
                updated

            else
                contact
        )
        contacts

================
File: src/Contacts.elm
================
module Contacts exposing
    ( Model
    , Msg(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser
import Browser.Events
import Browser.Navigation as Nav
import Components.LimitBanner as LimitBanner
import File exposing (File)
import File.Download
import File.Select as Select
import Html exposing (Html, button, col, colgroup, details, div, h1, h2, h3, input, label, nav, option, p, select, span, summary, table, tbody, td, text, th, thead, tr)
import Html.Attributes exposing (attribute, checked, class, disabled, placeholder, required, selected, title, type_, value)
import Html.Events exposing (on, onClick, onInput, onSubmit, preventDefaultOn, stopPropagationOn)
import Http
import Json.Decode as Decode exposing (Decoder, bool, int, nullable, string)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import List.Extra
import Svg exposing (path, svg)
import Svg.Attributes exposing (d, fill, stroke, viewBox)
import Task
import Time
import Url exposing (Url)
import Url.Builder as Url



-- MAIN


main : Program () Model Msg
main =
    Browser.application
        { init = \flags url key -> init key Nothing
        , view = \model -> { title = "Dashboard", body = [ view model ] }
        , update = update
        , subscriptions = subscriptions
        , onUrlChange = \_ -> NoOp
        , onUrlRequest = \_ -> NoOp
        }



-- MODEL


type alias Contact =
    { id : Int
    , firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    , state : String
    , contactOwnerId : Maybe Int
    , contactOwner : Maybe User
    , currentCarrier : String
    , effectiveDate : String
    , birthDate : String
    , tobaccoUser : Bool
    , gender : String
    , zipCode : String
    , planType : String
    , status : String
    , agentId : Maybe Int
    , lastEmailed : Maybe String
    }


type Modal
    = NoModal
    | ContactChoiceModal
    | AddModal
    | EditModal Contact
    | CsvUploadModal UploadState
    | DeleteConfirmModal
    | ReassignAgentModal


type alias Model =
    { contacts : List Contact
    , selectedContacts : List Int
    , showModal : Modal
    , searchQuery : String
    , addForm : ContactForm
    , editForm : ContactForm
    , sortColumn : Maybe SortColumn
    , sortDirection : SortDirection
    , activeFilters : Filters
    , openFilter : Maybe FilterType
    , currentTime : Time.Posix
    , isLoadingContacts : Bool
    , isUploadingCsv : Bool
    , isDeletingContacts : Bool
    , isSubmittingForm : Bool
    , isCheckingEmail : Bool
    , emailExists : Bool
    , currentUser : Maybe User
    , showProfileMenu : Bool
    , error : Maybe String
    , saveOnUpdate : Bool
    , expandedContactId : Maybe Int
    , availableFilters : AvailableFilters
    , carriers : List String
    , agents : List User
    , key : Nav.Key
    , limitBanner : LimitBanner.Model
    }


type alias ContactForm =
    { id : Maybe Int
    , firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    , state : String
    , contactOwnerId : Maybe Int
    , currentCarrier : String
    , effectiveDate : String
    , birthDate : String
    , tobaccoUser : Bool
    , gender : String
    , zipCode : String
    , planType : String
    }


type SortColumn
    = NameCol
    | StatusCol
    | EmailCol
    | PhoneNumberCol
    | StateCol
    | ContactOwnerCol
    | CurrentCarrierCol
    | EffectiveDateCol


type SortDirection
    = Ascending
    | Descending


type alias Filters =
    { carriers : List String
    , states : List String
    , ageRange : Maybe ( Int, Int )
    , agents : List Int
    }


type alias ZipInfo =
    { state : String
    , counties : List String
    , cities : List String
    }


type alias UploadState =
    { dragOver : Bool
    , file : Maybe File
    , error : Maybe String
    , errorCsv : Maybe String
    , converted_carriers_csv : Maybe String
    , stats : Maybe UploadStats
    , overwriteDuplicates : Bool
    , selectedAgentId : Maybe Int
    }


type alias UploadStats =
    { totalRows : Int
    , errorRows : Int
    , validRows : Int
    , converted_carrier_rows : Int
    , supported_carriers : List { name : String, aliases : List String }
    }


type alias DeleteResponse =
    { success : Bool
    , deletedIds : List Int
    , message : String
    }


type alias ReassignResponse =
    { success : Bool
    , updatedIds : List Int
    , message : String
    }


type alias User =
    { id : Int
    , email : String
    , firstName : String
    , lastName : String
    , isAdmin : Bool
    , isAgent : Bool
    , organizationId : Int
    , isActive : Bool
    , phone : String
    , carriers : List String
    , stateLicenses : List String
    }


type alias AvailableFilters =
    { carriers : List String
    , states : List String
    }


type alias ContactsResponse =
    { contacts : List Contact
    , filterOptions : AvailableFilters
    }


init : Nav.Key -> Maybe User -> ( Model, Cmd Msg )
init key maybeUser =
    let
        -- Create filtered model if the user is an agent but not an admin
        initialFilters =
            case maybeUser of
                Just user ->
                    if user.isAgent && not user.isAdmin then
                        -- Set initial filter to only show contacts assigned to this agent
                        { carriers = []
                        , states = []
                        , ageRange = Nothing
                        , agents = [ user.id ] -- Add the current agent ID to the filters
                        }

                    else
                        emptyFilters

                Nothing ->
                    emptyFilters

        -- Set default contact owner to current user if they are an agent
        defaultOwnerId =
            case maybeUser of
                Just user ->
                    if user.isAgent then
                        Just user.id

                    else
                        Nothing

                Nothing ->
                    Nothing

        initialAddForm =
            { emptyForm | contactOwnerId = defaultOwnerId }

        ( limitBannerModel, limitBannerCmd ) =
            LimitBanner.init

        initialModel =
            { contacts = []
            , selectedContacts = []
            , showModal = NoModal
            , searchQuery = ""
            , addForm = initialAddForm
            , editForm = emptyForm
            , sortColumn = Nothing
            , sortDirection = Ascending
            , activeFilters = initialFilters -- Use our potentially filtered initial state
            , openFilter = Nothing
            , currentTime = Time.millisToPosix 0
            , isLoadingContacts = True
            , isUploadingCsv = False
            , isDeletingContacts = False
            , isSubmittingForm = False
            , isCheckingEmail = False
            , emailExists = False
            , currentUser = maybeUser -- Use the passed in user immediately
            , showProfileMenu = False
            , error = Nothing
            , saveOnUpdate = False
            , expandedContactId = Nothing
            , availableFilters = { carriers = [], states = [] }
            , carriers = []
            , agents = []
            , key = key
            , limitBanner = limitBannerModel
            }
    in
    ( initialModel
    , Cmd.batch
        [ fetchContacts initialModel
        , if maybeUser == Nothing then
            -- Only fetch the user if not provided
            fetchCurrentUser

          else
            Cmd.none
        , Task.perform GotCurrentTime Time.now
        , fetchCarriers
        , fetchAgents
        , Cmd.map LimitBannerMsg limitBannerCmd
        ]
    )


emptyForm : ContactForm
emptyForm =
    { id = Nothing
    , firstName = ""
    , lastName = ""
    , email = ""
    , phoneNumber = ""
    , state = ""
    , contactOwnerId = Nothing
    , currentCarrier = ""
    , effectiveDate = ""
    , birthDate = ""
    , tobaccoUser = False
    , gender = "M"
    , zipCode = ""
    , planType = ""
    }


emptyFilters : Filters
emptyFilters =
    { carriers = []
    , states = []
    , ageRange = Nothing
    , agents = []
    }


emptyUploadState : Model -> UploadState
emptyUploadState model =
    -- Pre-assign the current user's agent ID if they are not an admin
    let
        selectedAgentId =
            case model.currentUser of
                Just user ->
                    if user.isAgent && not user.isAdmin then
                        -- For non-admin agents, pre-select their own ID
                        Just user.id

                    else
                        -- For admins, leave it unselected initially
                        Nothing

                Nothing ->
                    Nothing

        -- For non-admin agents, always set overwriteDuplicates to false
        overwriteOption =
            case model.currentUser of
                Just user ->
                    not (user.isAgent && not user.isAdmin)

                -- Only true for admin users
                Nothing ->
                    True

        -- Default for when user is not yet loaded
    in
    { dragOver = False
    , file = Nothing
    , error = Nothing
    , errorCsv = Nothing
    , converted_carriers_csv = Nothing
    , stats = Nothing
    , overwriteDuplicates = overwriteOption
    , selectedAgentId = selectedAgentId
    }



-- UPDATE


type Msg
    = NoOp
    | ShowContactChoiceModal
    | ChooseSingleContact
    | ChooseMultipleContacts
    | ShowAddModal
    | ShowEditModal Contact
    | CloseModal
    | UpdateSearchQuery String
    | UpdateAddForm ContactFormField String
    | UpdateEditForm ContactFormField String
    | SubmitAddForm
    | SubmitEditForm
    | CheckEmail String
    | EmailChecked (Result Http.Error { exists : Bool })
    | GotContacts (Result Http.Error ContactsResponse)
    | ContactAdded (Result Http.Error Contact)
    | ContactUpdated (Result Http.Error Contact)
    | HandleKeyDown String
    | SetSort SortColumn
    | ToggleFilter FilterType String
    | SetAgeFilter Int Int
    | ClearFilters
    | LookupZipCode String
    | GotZipLookup (Result Http.Error ZipInfo)
    | Batch (List Msg)
    | ToggleFilterDropdown FilterType
    | SelectAllFilter FilterType Bool
    | CloseFilterDropdown
    | GotCurrentTime Time.Posix
    | ToggleSelectContact Int
    | SelectAllContacts
    | DeselectAllContacts
    | EmailSelectedCarriers
    | EmailSelectedContacts
    | ShowCsvUploadModal
    | DragEnter
    | DragLeave
    | FileDrop File
    | FileSelected File
    | ClickedSelectFile
    | UploadCsv
    | CsvUploaded (Result Http.Error UploadResponse)
    | DownloadErrorCsv String
    | DownloadCarrierConversionsCsv String
    | ShowDeleteConfirmModal
    | DeleteSelectedContacts
    | ContactsDeleted (Result Http.Error DeleteResponse)
    | ToggleOverwriteDuplicates Bool
    | GotCurrentUser (Result Http.Error User)
    | NavigateToContact Int
    | GotCarriers (Result Http.Error (List String))
    | GotAgents (Result Http.Error (List User))
    | SelectUploadAgent Int
    | ShowReassignAgentModal
    | SelectReassignAgent Int
    | ReassignSelectedContacts
    | ContactsReassigned (Result Http.Error ReassignResponse)
    | LimitBannerMsg LimitBanner.Msg


type ContactFormField
    = FirstName
    | LastName
    | Email
    | PhoneNumber
    | State
    | ContactOwnerId
    | CurrentCarrier
    | EffectiveDate
    | BirthDate
    | TobaccoUser
    | Gender
    | ZipCode
    | PlanType


type FilterType
    = CarrierFilter
    | StateFilter
    | AgeFilter
    | AgentFilter


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )

        ShowContactChoiceModal ->
            ( { model | showModal = ContactChoiceModal }, Cmd.none )

        ChooseSingleContact ->
            ( { model | showModal = AddModal }, Cmd.none )

        ChooseMultipleContacts ->
            ( { model | showModal = CsvUploadModal (emptyUploadState model) }, Cmd.none )

        ShowAddModal ->
            ( { model | showModal = AddModal }, Cmd.none )

        ShowEditModal contact ->
            ( { model
                | showModal = EditModal contact
                , editForm =
                    { id = Just contact.id
                    , firstName = contact.firstName
                    , lastName = contact.lastName
                    , email = contact.email
                    , phoneNumber = contact.phoneNumber
                    , state = contact.state
                    , contactOwnerId = contact.contactOwnerId
                    , currentCarrier = contact.currentCarrier
                    , effectiveDate = contact.effectiveDate
                    , birthDate = contact.birthDate
                    , tobaccoUser = contact.tobaccoUser
                    , gender = contact.gender
                    , zipCode = contact.zipCode
                    , planType = contact.planType
                    }
              }
            , Cmd.none
            )

        CloseModal ->
            ( { model
                | showModal = NoModal
                , addForm = emptyForm
                , editForm = emptyForm
                , isCheckingEmail = False
                , emailExists = False
                , error = Nothing
                , isSubmittingForm = False
              }
            , Cmd.none
            )

        UpdateSearchQuery query ->
            let
                updatedModel =
                    { model | searchQuery = query, isLoadingContacts = True }
            in
            ( updatedModel, fetchContacts updatedModel )

        UpdateAddForm field value ->
            let
                form =
                    model.addForm

                updatedForm =
                    case field of
                        FirstName ->
                            { form | firstName = value }

                        LastName ->
                            { form | lastName = value }

                        Email ->
                            { form | email = value }

                        PhoneNumber ->
                            { form | phoneNumber = String.filter Char.isDigit value |> String.left 10 }

                        State ->
                            { form | state = value }

                        ContactOwnerId ->
                            { form | contactOwnerId = String.toInt value }

                        CurrentCarrier ->
                            { form | currentCarrier = value }

                        EffectiveDate ->
                            { form | effectiveDate = value }

                        BirthDate ->
                            { form | birthDate = value }

                        TobaccoUser ->
                            { form | tobaccoUser = value == "true" }

                        Gender ->
                            { form | gender = value }

                        ZipCode ->
                            { form | zipCode = value }

                        PlanType ->
                            { form | planType = value }

                cmd =
                    if field == ZipCode && String.length value == 5 then
                        submitEditFormWithFlag updatedForm True

                    else if field == Email && String.length value > 0 then
                        checkEmail value

                    else
                        Cmd.none
            in
            case model.showModal of
                ContactChoiceModal ->
                    ( model, Cmd.none )

                AddModal ->
                    ( { model
                        | addForm = updatedForm
                        , isCheckingEmail = field == Email && String.length value > 0
                        , emailExists = False
                        , error = Nothing
                      }
                    , cmd
                    )

                EditModal _ ->
                    ( { model | editForm = updatedForm }, cmd )

                NoModal ->
                    ( model, Cmd.none )

                CsvUploadModal _ ->
                    ( model, Cmd.none )

                DeleteConfirmModal ->
                    ( model, Cmd.none )

                ReassignAgentModal ->
                    ( model, Cmd.none )

        UpdateEditForm field value ->
            let
                form =
                    model.editForm

                updatedForm =
                    case field of
                        FirstName ->
                            { form | firstName = value }

                        LastName ->
                            { form | lastName = value }

                        Email ->
                            { form | email = value }

                        PhoneNumber ->
                            { form | phoneNumber = String.filter Char.isDigit value |> String.left 10 }

                        State ->
                            { form | state = value }

                        ContactOwnerId ->
                            { form | contactOwnerId = String.toInt value }

                        CurrentCarrier ->
                            { form | currentCarrier = value }

                        EffectiveDate ->
                            { form | effectiveDate = value }

                        BirthDate ->
                            { form | birthDate = value }

                        TobaccoUser ->
                            { form | tobaccoUser = value == "true" }

                        Gender ->
                            { form | gender = value }

                        ZipCode ->
                            { form | zipCode = value }

                        PlanType ->
                            { form | planType = value }

                cmd =
                    if field == ZipCode && String.length value == 5 then
                        LookupZipCode value
                            |> Task.succeed
                            |> Task.perform identity

                    else if field == Email && String.length value > 0 then
                        checkEmail value

                    else
                        Cmd.none
            in
            case model.showModal of
                ContactChoiceModal ->
                    ( model, Cmd.none )

                AddModal ->
                    ( { model | addForm = updatedForm }, cmd )

                EditModal _ ->
                    ( { model | editForm = updatedForm }, cmd )

                NoModal ->
                    ( model, Cmd.none )

                CsvUploadModal _ ->
                    ( model, Cmd.none )

                DeleteConfirmModal ->
                    ( model, Cmd.none )

                ReassignAgentModal ->
                    ( model, Cmd.none )

        SubmitAddForm ->
            ( { model | isSubmittingForm = True }
            , submitAddForm model.addForm
            )

        SubmitEditForm ->
            ( { model
                | isSubmittingForm = True
                , saveOnUpdate = True
              }
            , submitEditFormWithFlag model.editForm False
            )

        CheckEmail email ->
            ( { model | isCheckingEmail = True }
            , checkEmail email
            )

        EmailChecked (Ok response) ->
            ( { model
                | isCheckingEmail = False
                , emailExists = response.exists
                , error =
                    if response.exists then
                        Just "A contact with this email already exists"

                    else
                        Nothing
              }
            , Cmd.none
            )

        EmailChecked (Err _) ->
            ( { model
                | isCheckingEmail = False
                , error = Just "Failed to check email. Please try again."
              }
            , Cmd.none
            )

        GotContacts (Ok response) ->
            ( { model
                | contacts = response.contacts
                , isLoadingContacts = False
                , availableFilters = response.filterOptions
              }
            , Cmd.none
            )

        GotContacts (Err error) ->
            ( { model | error = Just "Failed to load contacts" }, Cmd.none )

        ContactAdded (Ok contact) ->
            ( { model
                | contacts = contact :: model.contacts
                , showModal = NoModal
                , addForm = emptyForm
                , isSubmittingForm = False
              }
            , Cmd.none
            )

        ContactAdded (Err _) ->
            ( { model | isSubmittingForm = False }
            , Cmd.none
            )

        ContactUpdated (Ok contact) ->
            let
                updatedContacts =
                    updateContact contact model.contacts

                updatedModel =
                    if model.saveOnUpdate then
                        -- Close the modal for a final save
                        { model
                            | contacts = updatedContacts
                            , showModal = NoModal
                            , editForm = emptyForm
                            , isSubmittingForm = False
                            , error = Nothing
                            , saveOnUpdate = False
                        }

                    else
                        -- Just update the state field in the form
                        { model
                            | contacts = updatedContacts
                            , editForm =
                                model.editForm
                                    |> (\form -> { form | state = contact.state })
                            , isSubmittingForm = False
                            , error = Nothing
                        }
            in
            ( updatedModel, Cmd.none )

        ContactUpdated (Err error) ->
            ( { model
                | isSubmittingForm = False
                , error = Just "Failed to update contact. Please check the ZIP code is valid."
              }
            , Cmd.none
            )

        HandleKeyDown key ->
            if key == "Escape" then
                ( { model | showModal = NoModal }, Cmd.none )

            else
                ( model, Cmd.none )

        SetSort column ->
            let
                ( newColumn, newDirection ) =
                    case ( model.sortColumn, model.sortDirection ) of
                        ( Just currentColumn, direction ) ->
                            if currentColumn == column then
                                -- Toggle direction if same column
                                ( Just column
                                , if direction == Ascending then
                                    Descending

                                  else
                                    Ascending
                                )

                            else
                                -- New column, start with ascending
                                ( Just column, Ascending )

                        ( Nothing, _ ) ->
                            -- First time sorting, start with ascending
                            ( Just column, Ascending )
            in
            ( { model
                | sortColumn = newColumn
                , sortDirection = newDirection
              }
            , Cmd.none
            )

        ToggleFilter filterType value ->
            let
                updatedModel =
                    { model
                        | activeFilters = toggleFilter model.activeFilters filterType value
                        , isLoadingContacts = True
                    }
            in
            ( updatedModel, fetchContacts updatedModel )

        SetAgeFilter min max ->
            ( { model | activeFilters = setAgeFilter min max model.activeFilters }, Cmd.none )

        ClearFilters ->
            ( { model | activeFilters = emptyFilters }, Cmd.none )

        LookupZipCode zipCode ->
            ( model
            , Http.get
                { url = "/api/zip-lookup/" ++ zipCode
                , expect = Http.expectJson GotZipLookup zipInfoDecoder
                }
            )

        GotZipLookup (Ok zipInfo) ->
            let
                updateForm form =
                    { form | state = zipInfo.state }
            in
            case model.showModal of
                ContactChoiceModal ->
                    ( model, Cmd.none )

                AddModal ->
                    ( { model | addForm = updateForm model.addForm }, Cmd.none )

                EditModal _ ->
                    ( { model | editForm = updateForm model.editForm }, Cmd.none )

                NoModal ->
                    ( model, Cmd.none )

                CsvUploadModal _ ->
                    ( model, Cmd.none )

                DeleteConfirmModal ->
                    ( model, Cmd.none )

                ReassignAgentModal ->
                    ( model, Cmd.none )

        GotZipLookup (Err _) ->
            ( model, Cmd.none )

        Batch messages ->
            List.foldl
                (\msg_ ( model_, cmds ) ->
                    let
                        ( newModel, newCmd ) =
                            update msg_ model_
                    in
                    ( newModel, newCmd :: cmds )
                )
                ( model, [] )
                messages
                |> (\( m, cs ) -> ( m, Cmd.batch cs ))

        ToggleFilterDropdown filterType ->
            ( { model
                | openFilter =
                    if model.openFilter == Just filterType then
                        Nothing

                    else
                        Just filterType
              }
            , Cmd.none
            )

        SelectAllFilter filterType select ->
            let
                options =
                    case filterType of
                        CarrierFilter ->
                            model.availableFilters.carriers

                        StateFilter ->
                            model.availableFilters.states

                        AgentFilter ->
                            model.agents
                                |> List.filter (\agent -> agent.isAgent)
                                |> List.map (\agent -> agent.firstName ++ " " ++ agent.lastName)

                        _ ->
                            []

                updatedFilters =
                    case filterType of
                        CarrierFilter ->
                            { carriers =
                                if select then
                                    options

                                else
                                    []
                            , states = model.activeFilters.states
                            , ageRange = model.activeFilters.ageRange
                            , agents = model.activeFilters.agents
                            }

                        StateFilter ->
                            { carriers = model.activeFilters.carriers
                            , states =
                                if select then
                                    options

                                else
                                    []
                            , ageRange = model.activeFilters.ageRange
                            , agents = model.activeFilters.agents
                            }

                        AgentFilter ->
                            { carriers = model.activeFilters.carriers
                            , states = model.activeFilters.states
                            , ageRange = model.activeFilters.ageRange
                            , agents =
                                if select then
                                    model.agents
                                        |> List.filter (\agent -> agent.isAgent)
                                        |> List.map (\agent -> agent.id)

                                else
                                    []
                            }

                        _ ->
                            model.activeFilters

                updatedModel =
                    { model | activeFilters = updatedFilters }
            in
            ( updatedModel, fetchContacts updatedModel )

        CloseFilterDropdown ->
            -- Only close the dropdown, don't prevent further events
            ( { model | openFilter = Nothing }, Cmd.none )

        GotCurrentTime time ->
            ( { model | currentTime = time }, Cmd.none )

        ToggleSelectContact id ->
            ( { model
                | selectedContacts =
                    if List.member id model.selectedContacts then
                        List.filter (\x -> x /= id) model.selectedContacts

                    else
                        id :: model.selectedContacts
              }
            , Cmd.none
            )

        SelectAllContacts ->
            let
                visibleContacts =
                    model.contacts
                        |> filterContacts model.activeFilters model.searchQuery model.currentTime
                        |> List.map .id
            in
            ( { model | selectedContacts = visibleContacts }
            , Cmd.none
            )

        DeselectAllContacts ->
            ( { model | selectedContacts = [] }
            , Cmd.none
            )

        EmailSelectedCarriers ->
            -- For now, just a placeholder that does nothing
            ( model, Cmd.none )

        EmailSelectedContacts ->
            -- For now, just a placeholder that does nothing
            ( model, Cmd.none )

        ShowCsvUploadModal ->
            ( { model | showModal = CsvUploadModal (emptyUploadState model) }, Cmd.none )

        DragEnter ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | dragOver = True } }, Cmd.none )

                _ ->
                    ( model, Cmd.none )

        DragLeave ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | dragOver = False } }, Cmd.none )

                _ ->
                    ( model, Cmd.none )

        FileDrop file ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | file = Just file, dragOver = False } }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        FileSelected file ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | file = Just file } }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        ClickedSelectFile ->
            ( model
            , Select.file [ "text/csv" ] FileSelected
            )

        UploadCsv ->
            case model.showModal of
                CsvUploadModal state ->
                    case state.file of
                        Just file ->
                            ( { model
                                | showModal = CsvUploadModal { state | error = Nothing, errorCsv = Nothing, stats = Nothing }
                                , isUploadingCsv = True
                              }
                            , uploadCsv file state.overwriteDuplicates state.selectedAgentId model
                            )

                        Nothing ->
                            ( model, Cmd.none )

                _ ->
                    ( model, Cmd.none )

        CsvUploaded (Ok response) ->
            let
                errorMessage =
                    if response.success then
                        "CSV uploaded successfully with "
                            ++ String.fromInt response.validRows
                            ++ " contacts."
                            ++ (if response.errorRows > 0 then
                                    " There were " ++ String.fromInt response.errorRows ++ " errors."

                                else
                                    ""
                               )

                    else if String.startsWith "Missing required columns:" response.message then
                        let
                            missingColumns =
                                String.dropLeft (String.length "Missing required columns:") response.message
                                    |> String.trim
                                    |> String.split ","
                                    |> List.map String.trim
                                    |> String.join ", "
                        in
                        "Your CSV is missing the following required columns: " ++ missingColumns ++ ". Please add these columns and try again."

                    else
                        response.message

                -- Check if the message contains information about duplicates
                hasDuplicatesMessage =
                    String.contains "duplicate" response.message || String.contains "existing contact" response.message

                currentModal =
                    case model.showModal of
                        CsvUploadModal state ->
                            if response.success && response.errorRows == 0 && not hasDuplicatesMessage then
                                NoModal

                            else
                                CsvUploadModal
                                    { state
                                        | error = Just errorMessage
                                        , errorCsv = response.errorCsv
                                        , converted_carriers_csv = response.converted_carriers_csv
                                        , stats =
                                            Just
                                                { totalRows = response.totalRows
                                                , errorRows = response.errorRows
                                                , validRows = response.validRows
                                                , converted_carrier_rows = response.converted_carrier_rows
                                                , supported_carriers = response.supported_carriers
                                                }
                                    }

                        _ ->
                            model.showModal

                updatedModel =
                    { model
                        | showModal = currentModal
                        , isUploadingCsv = False
                    }
            in
            ( updatedModel
            , if response.success then
                fetchContacts updatedModel

              else
                Cmd.none
            )

        CsvUploaded (Err httpError) ->
            let
                errorMessage =
                    case httpError of
                        Http.BadUrl url ->
                            "Invalid URL: " ++ url

                        Http.BadStatus statusCode ->
                            if statusCode == 400 then
                                "The CSV format is invalid. Please check that all required columns are present and data is in the correct format."

                            else if statusCode == 413 then
                                "The file is too large. Please try a smaller file or split your data into multiple uploads."

                            else if statusCode == 403 then
                                "You don't have permission to upload contacts. Please contact your administrator."

                            else
                                "Server error (status " ++ String.fromInt statusCode ++ "). Please try again later."

                        Http.BadBody responseBody ->
                            "The server response was not in the expected format: " ++ responseBody

                        Http.NetworkError ->
                            "Network error. Please check your connection and try again."

                        Http.Timeout ->
                            "The upload timed out. Please try again."
            in
            case model.showModal of
                CsvUploadModal state ->
                    ( { model
                        | showModal = CsvUploadModal { state | error = Just errorMessage }
                        , isUploadingCsv = False
                      }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        DownloadErrorCsv csvContent ->
            ( model
            , File.Download.string "upload_errors.csv" "text/csv" csvContent
            )

        DownloadCarrierConversionsCsv csvContent ->
            ( model
            , File.Download.string "carrier_conversions.csv" "text/csv" csvContent
            )

        ShowDeleteConfirmModal ->
            ( { model | showModal = DeleteConfirmModal }, Cmd.none )

        DeleteSelectedContacts ->
            ( { model | isDeletingContacts = True, showModal = NoModal }
            , if List.isEmpty model.selectedContacts then
                Cmd.none

              else
                deleteContacts model.selectedContacts
            )

        ContactsDeleted (Ok response) ->
            if response.success then
                let
                    updatedModel =
                        { model
                            | contacts = List.filter (\c -> not (List.member c.id response.deletedIds)) model.contacts
                            , selectedContacts = []
                            , isDeletingContacts = False
                        }
                in
                ( updatedModel
                , fetchContacts updatedModel
                )

            else
                ( { model | isDeletingContacts = False }, Cmd.none )

        ContactsDeleted (Err _) ->
            ( model, Cmd.none )

        ToggleOverwriteDuplicates value ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | overwriteDuplicates = value } }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        GotCurrentUser (Ok user) ->
            ( { model | currentUser = Just user }, Cmd.none )

        GotCurrentUser (Err _) ->
            ( model, Cmd.none )

        NavigateToContact id ->
            ( model, Nav.pushUrl model.key ("/contact/" ++ String.fromInt id) )

        GotCarriers (Ok carriers) ->
            ( { model | carriers = carriers }
            , Cmd.none
            )

        GotCarriers (Err _) ->
            ( model, Cmd.none )

        GotAgents (Ok agents) ->
            ( { model | agents = agents }, Cmd.none )

        GotAgents (Err error) ->
            ( model, Cmd.none )

        SelectUploadAgent agentId ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | selectedAgentId = Just agentId } }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        ShowReassignAgentModal ->
            ( { model | showModal = ReassignAgentModal }, Cmd.none )

        SelectReassignAgent agentId ->
            let
                updatedForm =
                    model.editForm

                updatedFormWithAgent =
                    { updatedForm | contactOwnerId = Just agentId }
            in
            ( { model | editForm = updatedFormWithAgent }
            , Cmd.none
            )

        ReassignSelectedContacts ->
            if List.isEmpty model.selectedContacts then
                ( model, Cmd.none )

            else
                case model.editForm.contactOwnerId of
                    Just agentId ->
                        if agentId == 0 then
                            -- If "Default" (0) is selected, pass null for agent_id
                            ( { model | showModal = NoModal }
                            , reassignContacts model.selectedContacts 0
                            )

                        else
                            -- Normal agent reassignment
                            ( { model | showModal = NoModal }
                            , reassignContacts model.selectedContacts agentId
                            )

                    Nothing ->
                        ( { model | error = Just "Please select an agent to reassign contacts to" }
                        , Cmd.none
                        )

        ContactsReassigned (Ok response) ->
            let
                updatedModel =
                    { model | showModal = NoModal, selectedContacts = [], editForm = emptyForm }
            in
            ( updatedModel, fetchContacts updatedModel )

        ContactsReassigned (Err _) ->
            ( { model | error = Just "Failed to reassign contacts", showModal = NoModal }, Cmd.none )

        LimitBannerMsg limitBannerMsg ->
            let
                ( updatedLimitBannerModel, limitBannerCmd ) =
                    LimitBanner.update limitBannerMsg model.limitBanner
            in
            ( { model | limitBanner = updatedLimitBannerModel }
            , Cmd.map LimitBannerMsg limitBannerCmd
            )



-- TODO: Handle error
-- Add other update cases here...
-- VIEW


view : Model -> Html Msg
view model =
    div [ class "min-h-screen bg-white" ]
        [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" ]
            [ -- Limit banner - use our reusable component
              LimitBanner.view model.limitBanner
                |> Html.map LimitBannerMsg
            , -- Stats Section - Make more compact with reduced margins
              div [ class "grid grid-cols-4 gap-2 mb-3" ]
                [ statsCard "Total Contacts" (String.fromInt (List.length model.contacts))
                , statsCard "Emails Sent" "1824"
                , statsCard "Emails Clicked" "425"
                , statsCard "Quotes Created" "385"
                ]
            , -- Table Container with overflow handling - reduced vertical spacing
              div [ class "overflow-x-auto max-w-7xl mx-auto" ]
                [ -- Add a container around both the header and the table to ensure they have the same width
                  div [ class "w-full" ]
                    [ -- Contacts header and filters - reduced margin bottom
                      div [ class "flex justify-between items-center mb-3 w-full" ]
                        [ div [ class "flex items-center gap-2" ]
                            [ h1 [ class "text-base font-semibold" ] [ text "Contacts " ]
                            , span [ class "text-sm text-gray-500" ]
                                [ text ("(" ++ String.fromInt (List.length model.contacts) ++ ")") ]
                            ]
                        , div [ class "flex items-center gap-2" ]
                            [ -- Only show Agent filter for admins
                              if isAdminOrAdminAgent model.currentUser then
                                div [ class "relative" ]
                                    [ button
                                        [ class "inline-flex items-center gap-1 px-2 py-1 border rounded-md text-sm text-gray-700 hover:bg-gray-50"
                                        , onClick (ToggleFilterDropdown AgentFilter)
                                        ]
                                        [ text "Agent"
                                        , viewIcon "M19 9l-7 7-7-7"
                                        ]
                                    , if model.openFilter == Just AgentFilter then
                                        viewFilterDropdown model AgentFilter

                                      else
                                        text ""
                                    ]

                              else
                                text ""
                            , div [ class "relative" ]
                                [ button
                                    [ class "inline-flex items-center gap-1 px-2 py-1 border rounded-md text-sm text-gray-700 hover:bg-gray-50"
                                    , onClick (ToggleFilterDropdown CarrierFilter)
                                    ]
                                    [ text "Carrier"
                                    , viewIcon "M19 9l-7 7-7-7"
                                    ]
                                , if model.openFilter == Just CarrierFilter then
                                    viewFilterDropdown model CarrierFilter

                                  else
                                    text ""
                                ]
                            , div [ class "relative" ]
                                [ button
                                    [ class "inline-flex items-center gap-1 px-2 py-1 border rounded-md text-sm text-gray-700 hover:bg-gray-50"
                                    , onClick (ToggleFilterDropdown StateFilter)
                                    ]
                                    [ text "State"
                                    , viewIcon "M19 9l-7 7-7-7"
                                    ]
                                , if model.openFilter == Just StateFilter then
                                    viewFilterDropdown model StateFilter

                                  else
                                    text ""
                                ]
                            , div [ class "relative" ]
                                [ input
                                    [ class "w-48 px-2 py-1 border rounded-md text-sm placeholder-gray-500 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500"
                                    , placeholder "Search contacts..."
                                    , value model.searchQuery
                                    , onInput UpdateSearchQuery
                                    ]
                                    []
                                ]
                            , -- Add the add contact button with a different style
                              button
                                [ class "px-2 py-1 bg-black text-white rounded-md text-sm hover:bg-gray-800 transition-colors"
                                , onClick ShowContactChoiceModal
                                ]
                                [ text "+ Add Contact" ]
                            ]
                        ]
                    , table [ class "w-full" ]
                        [ colgroup []
                            [ col [ class "w-12" ] [] -- Checkbox
                            , col [ class "w-48" ] [] -- Name
                            , col [ class "w-32" ] [] -- Contact Status
                            , col [ class "w-48" ] [] -- Email
                            , col [ class "w-32" ] [] -- Phone Number
                            , col [ class "w-16" ] [] -- State
                            , col [ class "w-32" ] [] -- Assigned Agent
                            , col [ class "w-32" ] [] -- Current Carrier
                            , col [ class "w-28" ] [] -- Effective Date
                            , col [ class "w-20" ] [] -- Actions
                            ]
                        , thead [ class "bg-gray-50" ]
                            [ tr []
                                [ th [ class "sticky top-0 px-2 py-1 border-b border-gray-200 bg-gray-50" ]
                                    [ input
                                        [ type_ "checkbox"
                                        , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                                        , checked (not (List.isEmpty model.contacts) && List.length model.selectedContacts == List.length model.contacts)
                                        , onClick
                                            (if not (List.isEmpty model.contacts) && List.length model.selectedContacts == List.length model.contacts then
                                                DeselectAllContacts

                                             else
                                                SelectAllContacts
                                            )
                                        ]
                                        []
                                    ]
                                , tableHeader "Name"
                                , tableHeader "Contact Status"
                                , tableHeader "Email"
                                , tableHeader "Phone Number"
                                , tableHeader "State"
                                , tableHeader "Assigned Agent"
                                , tableHeader "Current Carrier"
                                , tableHeader "Effective Date"
                                , tableHeader "Actions"
                                ]
                            ]
                        , tbody [ class "bg-white" ]
                            (if model.isLoadingContacts then
                                [ tr []
                                    [ td
                                        [ class "px-3 py-8 text-sm text-gray-500 text-center border-t border-gray-200"
                                        , attribute "colspan" "10"
                                        ]
                                        [ div [ class "flex items-center justify-center gap-3" ]
                                            [ viewSpinner
                                            , text "Loading contacts..."
                                            ]
                                        ]
                                    ]
                                ]

                             else if List.isEmpty model.contacts then
                                [ tr []
                                    [ td
                                        [ class "px-3 py-2 text-sm text-gray-500 text-center border-t border-gray-200"
                                        , attribute "colspan" "10"
                                        ]
                                        [ text "No contacts found" ]
                                    ]
                                ]

                             else
                                List.concatMap (viewTableRow model) model.contacts
                            )
                        ]
                    ]
                ]
            ]
        , viewModals model
        , if not (List.isEmpty model.selectedContacts) then
            viewBulkActionBar model

          else
            text ""
        ]


viewBulkActionBar : Model -> Html Msg
viewBulkActionBar model =
    let
        isAdmin =
            isAdminOrAdminAgent model.currentUser
    in
    div
        [ class "fixed bottom-0 inset-x-0 bg-white border-t border-gray-200 shadow-lg transform transition-all duration-200" ]
        [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4" ]
            [ div [ class "flex justify-between items-center" ]
                [ div [ class "flex items-center gap-4" ]
                    [ span [ class "text-sm text-gray-600" ]
                        [ text (String.fromInt (List.length model.selectedContacts) ++ " contacts selected") ]
                    ]
                , div [ class "flex items-center gap-3" ]
                    [ button
                        [ class "px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900"
                        , onClick DeselectAllContacts
                        ]
                        [ text "Cancel" ]
                    , if isAdmin then
                        -- Reassign button (only for admins)
                        button
                            [ class "px-4 py-2 bg-purple-600 text-white text-sm font-medium rounded-lg hover:bg-purple-700 transition-colors duration-200 mr-2"
                            , onClick ShowReassignAgentModal
                            ]
                            [ text "Reassign Agent" ]

                      else
                        text ""
                    , button
                        [ class "px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors duration-200"
                        , onClick ShowDeleteConfirmModal
                        ]
                        [ if model.isDeletingContacts then
                            viewSpinner

                          else
                            text "Delete Selected"
                        ]
                    ]
                ]
            ]
        ]


statsCard : String -> String -> Html Msg
statsCard title value =
    div [ class "bg-white rounded-md border p-2 hover:shadow-md transition-shadow flex flex-col items-center" ]
        [ div [ class "text-xs text-gray-600 mb-0.5 text-center" ] [ text title ]
        , div [ class "text-xl font-semibold text-center" ] [ text value ]
        ]


tableHeader : String -> Html Msg
tableHeader headerText =
    th [ class "px-2 py-1 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-200 bg-gray-50" ]
        [ text headerText ]


viewTableRow : Model -> Contact -> List (Html Msg)
viewTableRow model contact =
    let
        cellClass =
            "px-2 py-1 text-sm border-t border-gray-200"

        initials =
            String.left 1 contact.firstName ++ String.left 1 contact.lastName

        agentName =
            case contact.contactOwner of
                Just owner ->
                    owner.firstName ++ " " ++ owner.lastName

                Nothing ->
                    case contact.agentId of
                        Just agentId ->
                            -- Try to find the agent in our agents list
                            let
                                matchingAgent =
                                    List.filter (\agent -> agent.id == agentId) model.agents
                                        |> List.head
                            in
                            case matchingAgent of
                                Just agent ->
                                    agent.firstName ++ " " ++ agent.lastName

                                Nothing ->
                                    -- Fallback if agent not found in list
                                    "Agent #" ++ String.fromInt agentId

                        Nothing ->
                            "Default"
    in
    [ tr [ class "hover:bg-gray-50 transition-colors duration-200" ]
        [ td
            [ class (cellClass ++ " text-center")
            ]
            [ input
                [ type_ "checkbox"
                , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                , checked (List.member contact.id model.selectedContacts)
                , onClick (ToggleSelectContact contact.id)
                ]
                []
            ]
        , td [ class cellClass ]
            [ div [ class "flex items-center" ]
                [ div [ class "h-8 w-8 rounded-full bg-purple-100 flex items-center justify-center text-sm text-purple-700 font-medium uppercase" ]
                    [ text initials ]
                , div [ class "ml-3 text-sm text-gray-900" ]
                    [ button
                        [ class "text-left text-gray-900 hover:text-purple-600 transition-colors duration-200"
                        , onClick (NavigateToContact contact.id)
                        ]
                        [ text (contact.firstName ++ " " ++ contact.lastName) ]
                    ]
                ]
            ]
        , td [ class cellClass ]
            [ viewStatus contact.status ]
        , td [ class cellClass ]
            [ text contact.email ]
        , td [ class cellClass ]
            [ text (formatPhoneNumber contact.phoneNumber) ]
        , td [ class cellClass ]
            [ text contact.state ]
        , td [ class cellClass ]
            [ text agentName ]
        , td [ class cellClass ]
            [ text contact.currentCarrier ]
        , td [ class cellClass ]
            [ text contact.effectiveDate ]
        , td [ class cellClass ]
            [ button
                [ class "text-purple-600 hover:text-purple-800 transition-colors duration-200"
                , onClick (NavigateToContact contact.id)
                ]
                [ viewIcon "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" ]
            ]
        ]
    ]


viewStatus : String -> Html Msg
viewStatus status =
    let
        ( bgColor, textColor, statusText ) =
            case status of
                "Quote Created" ->
                    ( "bg-green-50", "text-green-700", "Quote Created" )

                "Opened Email" ->
                    ( "bg-red-50", "text-red-700", "Opened Email" )

                "Email #2 Sent" ->
                    ( "bg-blue-50", "text-blue-700", "Email #2 Sent" )

                "Email #1 Sent" ->
                    ( "bg-blue-50", "text-blue-700", "Email #1 Sent" )

                "In Queue" ->
                    ( "bg-orange-50", "text-orange-700", "In Queue" )

                _ ->
                    ( "bg-gray-50", "text-gray-700", status )
    in
    div [ class ("inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium " ++ bgColor ++ " " ++ textColor) ]
        [ text statusText ]



-- HELPERS


updateContact : Contact -> List Contact -> List Contact
updateContact updated contacts =
    List.map
        (\contact ->
            if contact.id == updated.id then
                updated

            else
                contact
        )
        contacts



-- HTTP


submitAddForm : ContactForm -> Cmd Msg
submitAddForm form =
    Http.post
        { url = "/api/contacts"
        , body = Http.jsonBody (encodeContactForm form)
        , expect = Http.expectJson ContactAdded contactDecoder
        }


submitEditFormWithFlag : ContactForm -> Bool -> Cmd Msg
submitEditFormWithFlag form isZipUpdate =
    case form.id of
        Just id ->
            let
                url =
                    if isZipUpdate then
                        "/api/contacts/" ++ String.fromInt id ++ "?zip_update=true"

                    else
                        "/api/contacts/" ++ String.fromInt id
            in
            Http.request
                { method = "PUT"
                , headers = []
                , url = url
                , body = Http.jsonBody (encodeContactForm form)
                , expect = Http.expectJson ContactUpdated contactDecoder
                , timeout = Nothing
                , tracker = Nothing
                }

        Nothing ->
            Cmd.none



-- JSON


contactDecoder : Decode.Decoder Contact
contactDecoder =
    Decode.succeed Contact
        |> Pipeline.required "id" Decode.int
        |> Pipeline.required "first_name" Decode.string
        |> Pipeline.required "last_name" Decode.string
        |> Pipeline.required "email" Decode.string
        |> Pipeline.optional "phone_number"
            (Decode.string
                |> Decode.andThen
                    (\val -> Decode.succeed val)
            )
            ""
        |> Pipeline.required "state" Decode.string
        |> Pipeline.optional "contact_owner_id" (Decode.nullable Decode.int) Nothing
        |> Pipeline.optional "contact_owner" (Decode.nullable userDecoder) Nothing
        |> Pipeline.required "current_carrier" Decode.string
        |> Pipeline.required "effective_date" Decode.string
        |> Pipeline.required "birth_date" Decode.string
        |> Pipeline.required "tobacco_user" Decode.bool
        |> Pipeline.required "gender" Decode.string
        |> Pipeline.required "zip_code" Decode.string
        |> Pipeline.required "plan_type" Decode.string
        |> Pipeline.optional "status" Decode.string "New"
        |> Pipeline.required "agent_id" (Decode.nullable Decode.int)
        |> Pipeline.required "last_emailed" (Decode.nullable Decode.string)


contactsDecoder : Decode.Decoder ContactsResponse
contactsDecoder =
    Decode.succeed ContactsResponse
        |> Pipeline.required "contacts" (Decode.list contactDecoder)
        |> Pipeline.required "filterOptions" filterOptionsDecoder


filterOptionsDecoder : Decode.Decoder AvailableFilters
filterOptionsDecoder =
    Decode.succeed AvailableFilters
        |> Pipeline.required "carriers" (Decode.list Decode.string)
        |> Pipeline.required "states" (Decode.list Decode.string)


encodeContactForm : ContactForm -> Encode.Value
encodeContactForm form =
    Encode.object
        [ ( "first_name", Encode.string form.firstName )
        , ( "last_name", Encode.string form.lastName )
        , ( "email", Encode.string form.email )
        , ( "phone_number", Encode.string (String.filter Char.isDigit form.phoneNumber |> String.left 10) )
        , ( "state", Encode.string form.state )
        , ( "contact_owner_id", Maybe.map Encode.int form.contactOwnerId |> Maybe.withDefault Encode.null )
        , ( "current_carrier", Encode.string form.currentCarrier )
        , ( "effective_date", Encode.string form.effectiveDate )
        , ( "birth_date", Encode.string form.birthDate )
        , ( "tobacco_user", Encode.bool form.tobaccoUser )
        , ( "gender", Encode.string form.gender )
        , ( "zip_code", Encode.string form.zipCode )
        , ( "plan_type", Encode.string form.planType )
        ]


viewModals : Model -> Html Msg
viewModals model =
    case model.showModal of
        NoModal ->
            text ""

        ContactChoiceModal ->
            viewContactChoiceModal

        AddModal ->
            viewAddModal model model.isSubmittingForm

        EditModal contact ->
            viewEditModal model model.isSubmittingForm

        CsvUploadModal state ->
            viewCsvUploadModal state model.isUploadingCsv model

        DeleteConfirmModal ->
            viewDeleteConfirmModal model

        ReassignAgentModal ->
            viewReassignAgentModal model


viewContactChoiceModal : Html Msg
viewContactChoiceModal =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-4" ]
        [ div [ class "bg-white rounded-md p-5 max-w-lg w-full mx-2 shadow-lg relative" ]
            [ button
                [ class "absolute top-2 right-2 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-xl font-semibold text-gray-900 mb-2" ]
                [ text "Add Contacts" ]
            , div [ class "text-xs text-gray-600 mb-4" ]
                [ text "Select how you want to add your new contacts." ]
            , div [ class "grid grid-cols-2 gap-3" ]
                [ div
                    [ class "p-3 border border-gray-200 rounded-md hover:border-[#03045E] hover:bg-[#03045E]/5 cursor-pointer transition-colors"
                    , onClick ChooseSingleContact
                    ]
                    [ div [ class "flex items-center mb-2" ]
                        [ div [ class "h-6 w-6 rounded-full bg-purple-100 flex items-center justify-center text-xs text-purple-700 font-medium" ]
                            [ viewIcon "M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" ]
                        ]
                    , h3 [ class "text-base font-medium text-gray-900 mb-1" ]
                        [ text "Single Contact" ]
                    , p [ class "text-xs text-gray-600" ]
                        [ text "Individual Form" ]
                    ]
                , div
                    [ class "p-3 border border-gray-200 rounded-md hover:border-[#03045E] hover:bg-[#03045E]/5 cursor-pointer transition-colors"
                    , onClick ChooseMultipleContacts
                    ]
                    [ div [ class "flex items-center mb-2" ]
                        [ div [ class "h-6 w-6 rounded-full bg-purple-100 flex items-center justify-center text-xs text-purple-700 font-medium" ]
                            [ viewIcon "M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" ]
                        ]
                    , h3 [ class "text-base font-medium text-gray-900 mb-1" ]
                        [ text "Multiple Contacts" ]
                    , p [ class "text-xs text-gray-600" ]
                        [ text "CSV Upload" ]
                    ]
                ]
            ]
        ]


viewAddModal : Model -> Bool -> Html Msg
viewAddModal model isSubmitting =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-4" ]
        [ div [ class "bg-white rounded-md p-5 max-w-lg w-full mx-2 shadow-lg relative max-h-[90vh] flex flex-col" ]
            [ button
                [ class "absolute top-2 right-2 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-xl font-semibold text-gray-900 mb-4" ]
                [ text "Add New Client" ]
            , div [ class "overflow-y-auto pr-1 flex-grow" ]
                [ viewContactForm model model.addForm UpdateAddForm SubmitAddForm "Add Client" isSubmitting ]
            ]
        ]


viewEditModal : Model -> Bool -> Html Msg
viewEditModal model isSubmitting =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-4" ]
        [ div [ class "bg-white rounded-md p-5 max-w-lg w-full mx-2 shadow-lg relative max-h-[90vh] flex flex-col" ]
            [ button
                [ class "absolute top-2 right-2 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-xl font-semibold text-gray-900 mb-4" ]
                [ text "Edit Client" ]
            , div [ class "overflow-y-auto pr-1 flex-grow" ]
                [ viewContactForm model model.editForm UpdateEditForm SubmitEditForm "Save Changes" isSubmitting ]
            ]
        ]


viewCsvUploadModal : UploadState -> Bool -> Model -> Html Msg
viewCsvUploadModal state isUploading model =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-8" ]
        [ div [ class "bg-white rounded-xl p-10 max-w-2xl w-full mx-4 shadow-xl relative" ]
            [ button
                [ class "absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-2xl font-semibold text-gray-900 mb-8" ]
                [ text "Upload CSV" ]
            , div [ class "mb-6 text-sm text-gray-600" ]
                [ text "Need help formatting your CSV? "
                , Html.a
                    [ class "text-purple-600 hover:text-purple-800 hover:underline"
                    , Html.Attributes.href "/example.csv"
                    , Html.Attributes.download "example.csv"
                    ]
                    [ text "Download example CSV file" ]
                ]
            , if state.error /= Nothing then
                div [ class "mb-6" ]
                    [ if state.stats /= Nothing then
                        let
                            stats =
                                Maybe.withDefault
                                    { totalRows = 0
                                    , errorRows = 0
                                    , validRows = 0
                                    , converted_carrier_rows = 0
                                    , supported_carriers = []
                                    }
                                    state.stats
                        in
                        div []
                            [ if stats.errorRows > 0 then
                                div [ class "p-4 mb-4 bg-red-50 border border-red-200 rounded-lg" ]
                                    [ div [ class "flex items-start" ]
                                        [ div [ class "flex-shrink-0" ]
                                            [ viewIcon "M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" ]
                                        , div [ class "ml-3" ]
                                            [ h3 [ class "text-sm font-medium text-red-800" ]
                                                [ text "Upload Errors" ]
                                            , div [ class "mt-2 text-sm text-red-700" ]
                                                [ text ("Found " ++ String.fromInt stats.errorRows ++ " rows with errors. Successfully imported " ++ String.fromInt stats.validRows ++ " rows.")
                                                , case state.errorCsv of
                                                    Just csvContent ->
                                                        div [ class "mt-2 font-medium" ]
                                                            [ button
                                                                [ class "text-purple-600 hover:text-purple-800 hover:underline"
                                                                , onClick (DownloadErrorCsv csvContent)
                                                                ]
                                                                [ text "Download and Fix Error Rows" ]
                                                            ]

                                                    Nothing ->
                                                        text ""
                                                ]
                                            ]
                                        ]
                                    ]

                              else
                                text ""
                            , if stats.converted_carrier_rows > 0 then
                                -- Rest of error display (unchanged)
                                div [ class "p-4 bg-yellow-50 border border-yellow-200 rounded-lg" ]
                                    [ div [ class "flex items-start" ]
                                        [ div [ class "flex-shrink-0" ]
                                            [ viewIcon "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" ]
                                        , div [ class "ml-3" ]
                                            [ h3 [ class "text-sm font-medium text-yellow-800 mb-3" ]
                                                [ text "Carrier Conversions" ]
                                            , div [ class "space-y-4 text-sm text-yellow-700" ]
                                                [ p []
                                                    [ text (String.fromInt stats.converted_carrier_rows ++ " rows had carriers we do not currently recognize or provide quotes for. This is normal and expected -- we will still email these contacts with quotes from supported Carriers.") ]
                                                , p []
                                                    [ text "However, this can also happen if there is a misspelling of a supported carrier. Please review to ensure the data is correct." ]
                                                , case state.converted_carriers_csv of
                                                    Just csvContent ->
                                                        div [ class "pt-1" ]
                                                            [ button
                                                                [ class "text-purple-600 hover:text-purple-800 hover:underline font-medium"
                                                                , onClick (DownloadCarrierConversionsCsv csvContent)
                                                                ]
                                                                [ text "Download Unrecognized Carrier Rows" ]
                                                            ]

                                                    Nothing ->
                                                        text ""
                                                , div [ class "pt-2 border-t border-yellow-200" ]
                                                    [ details [ class "text-sm" ]
                                                        [ summary [ class "cursor-pointer text-purple-600 hover:text-purple-800 font-medium" ]
                                                            [ text "Click to see supported carriers" ]
                                                        , div [ class "mt-3 pl-4 space-y-2" ]
                                                            (List.map
                                                                (\carrier ->
                                                                    div [ class "flex items-baseline" ]
                                                                        [ span [ class "font-medium" ] [ text carrier.name ]
                                                                        , if not (List.isEmpty carrier.aliases) then
                                                                            span [ class "ml-4 text-yellow-800" ]
                                                                                [ text ("Also accepts: " ++ String.join ", " carrier.aliases) ]

                                                                          else
                                                                            text ""
                                                                        ]
                                                                )
                                                                stats.supported_carriers
                                                            )
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]

                              else
                                text ""
                            ]

                      else
                        div [ class "p-4 bg-red-50 border border-red-200 rounded-lg" ]
                            [ div [ class "flex items-start" ]
                                [ div [ class "flex-shrink-0" ]
                                    [ viewIcon "M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" ]
                                , div [ class "ml-3" ]
                                    [ h3 [ class "text-sm font-medium text-red-800" ]
                                        [ text "Error uploading CSV" ]
                                    , div [ class "mt-2 text-sm text-red-700" ]
                                        [ text (Maybe.withDefault "" state.error) ]
                                    ]
                                ]
                            ]
                    ]

              else
                text ""
            , div [ class "mb-4 space-y-4" ]
                [ -- Only show overwrite checkbox for admins
                  case model.currentUser of
                    Just user ->
                        if user.isAdmin then
                            div [ class "flex items-center space-x-2" ]
                                [ input
                                    [ type_ "checkbox"
                                    , checked state.overwriteDuplicates
                                    , onInput (\val -> ToggleOverwriteDuplicates (val == "true"))
                                    , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                                    ]
                                    []
                                , label [ class "text-sm text-gray-600" ]
                                    [ text "Overwrite existing contacts (matched on email address)" ]
                                ]

                        else
                            -- For non-admin agents, don't show the overwrite option
                            text ""

                    Nothing ->
                        -- Show checkbox if user info isn't loaded yet
                        div [ class "flex items-center space-x-2" ]
                            [ input
                                [ type_ "checkbox"
                                , checked state.overwriteDuplicates
                                , onInput (\val -> ToggleOverwriteDuplicates (val == "true"))
                                , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                                ]
                                []
                            , label [ class "text-sm text-gray-600" ]
                                [ text "Overwrite existing contacts (matched on email address)" ]
                            ]
                , div [ class "form-group" ]
                    [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
                        [ text "Assign to Agent" ]
                    , div [ class "relative" ]
                        [ if List.isEmpty model.agents then
                            div [ class "p-2 text-gray-500 border rounded" ]
                                [ text "Loading agents..." ]

                          else
                            case model.currentUser of
                                Just user ->
                                    if user.isAgent && not user.isAdmin then
                                        -- For non-admin agents, show their name as fixed value
                                        let
                                            agentName =
                                                model.agents
                                                    |> List.filter (\agent -> agent.id == user.id)
                                                    |> List.head
                                                    |> Maybe.map (\agent -> agent.firstName ++ " " ++ agent.lastName)
                                                    |> Maybe.withDefault (user.firstName ++ " " ++ user.lastName)
                                        in
                                        div [ class "w-full px-4 py-3 bg-gray-100 border-[2.5px] border-gray-300 rounded-lg text-gray-700" ]
                                            [ text agentName ]

                                    else
                                        -- For admins, show dropdown with all agents
                                        let
                                            agentOptions =
                                                List.map
                                                    (\agent ->
                                                        ( String.fromInt agent.id
                                                        , agent.firstName ++ " " ++ agent.lastName
                                                        )
                                                    )
                                                    model.agents
                                        in
                                        Html.select
                                            [ class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200 appearance-none"
                                            , value (String.fromInt (Maybe.withDefault 0 state.selectedAgentId))
                                            , onInput (\val -> SelectUploadAgent (String.toInt val |> Maybe.withDefault 0))
                                            ]
                                            (List.map
                                                (\( val, label ) ->
                                                    option [ value val ] [ text label ]
                                                )
                                                agentOptions
                                            )

                                Nothing ->
                                    -- Default when user is not loaded yet
                                    let
                                        agentOptions =
                                            List.map
                                                (\agent ->
                                                    ( String.fromInt agent.id
                                                    , agent.firstName ++ " " ++ agent.lastName
                                                    )
                                                )
                                                model.agents
                                    in
                                    Html.select
                                        [ class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200 appearance-none"
                                        , value (String.fromInt (Maybe.withDefault 0 state.selectedAgentId))
                                        , onInput (\val -> SelectUploadAgent (String.toInt val |> Maybe.withDefault 0))
                                        ]
                                        (List.map
                                            (\( val, label ) ->
                                                option [ value val ] [ text label ]
                                            )
                                            agentOptions
                                        )
                        , case model.currentUser of
                            Just user ->
                                if user.isAgent && not user.isAdmin then
                                    -- No dropdown icon for non-admin agents
                                    text ""

                                else
                                    -- Show dropdown icon for admins
                                    div [ class "absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none" ]
                                        [ viewIcon "M19 9l-7 7-7-7" ]

                            Nothing ->
                                -- Show dropdown icon when user is not loaded yet
                                div [ class "absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none" ]
                                    [ viewIcon "M19 9l-7 7-7-7" ]
                        ]
                    ]
                ]
            , div
                [ class
                    ("w-full h-64 border-2 border-dashed rounded-lg flex flex-col items-center justify-center p-8 transition-colors "
                        ++ (if state.dragOver then
                                "border-purple-500 bg-purple-50"

                            else
                                "border-gray-300 hover:border-purple-400"
                           )
                    )
                , preventDefaultOn "dragenter" (Decode.succeed ( DragEnter, True ))
                , preventDefaultOn "dragover" (Decode.succeed ( NoOp, True ))
                , preventDefaultOn "dragleave" (Decode.succeed ( DragLeave, True ))
                , preventDefaultOn "drop" (dropDecoder FileDrop)
                ]
                [ div [ class "text-gray-500 text-center" ]
                    [ span [ class "block text-lg font-medium mb-2" ]
                        [ text "Drag and drop your CSV file here, or " ]
                    , button
                        [ class "text-purple-600 font-semibold hover:text-purple-700 focus:outline-none focus:underline"
                        , onClick ClickedSelectFile
                        ]
                        [ text "browse" ]
                    , if state.file /= Nothing then
                        div [ class "mt-4 text-sm bg-green-50 text-green-800 px-3 py-2 rounded-lg" ]
                            [ text ("File selected: " ++ (Maybe.map File.name state.file |> Maybe.withDefault "")) ]

                      else
                        text ""
                    ]
                ]
            , div [ class "mt-8 flex justify-end space-x-4" ]
                [ button
                    [ class "px-6 py-3 bg-gray-100 text-gray-600 text-sm font-medium rounded-lg hover:bg-gray-200 transition-colors duration-200 focus:ring-4 focus:ring-gray-200"
                    , onClick CloseModal
                    ]
                    [ text "Cancel" ]
                , if isUploading then
                    div [ class "px-6 py-3 flex items-center space-x-2" ]
                        [ viewSpinner ]

                  else
                    button
                        [ type_ "submit"
                        , class "px-6 py-3 bg-purple-500 text-white text-sm font-medium rounded-lg hover:bg-purple-600 transition-colors duration-200 focus:ring-4 focus:ring-purple-200"
                        , onClick UploadCsv
                        , Html.Attributes.disabled (state.file == Nothing)
                        ]
                        [ text "Upload" ]
                ]
            ]
        ]


dropDecoder : (File -> msg) -> Decoder ( msg, Bool )
dropDecoder toMsg =
    Decode.at [ "dataTransfer", "files" ] (Decode.index 0 File.decoder)
        |> Decode.map (\file -> ( toMsg file, True ))


uploadCsv : File -> Bool -> Maybe Int -> Model -> Cmd Msg
uploadCsv file overwriteDuplicates maybeAgentId model =
    let
        -- For non-admin agents, always enforce overwriteDuplicates=false
        actualOverwriteValue =
            case model.currentUser of
                Just user ->
                    if user.isAgent && not user.isAdmin then
                        False
                        -- Always force false for non-admin agents

                    else
                        overwriteDuplicates

                -- Use the provided value for admins
                Nothing ->
                    overwriteDuplicates

        -- Use the provided value if user is not loaded
        body =
            Http.multipartBody
                ([ Http.filePart "file" file
                 , Http.stringPart "duplicateStrategy"
                    (if actualOverwriteValue then
                        "overwrite"

                     else
                        "skip"
                    )
                 , Http.stringPart "overwrite_duplicates"
                    (if actualOverwriteValue then
                        "true"

                     else
                        "false"
                    )
                 ]
                    ++ (case maybeAgentId of
                            Just agentId ->
                                [ Http.stringPart "agent_id" (String.fromInt agentId) ]

                            Nothing ->
                                []
                       )
                )
    in
    Http.post
        { url = "/api/contacts/upload"
        , body = body
        , expect = Http.expectJson CsvUploaded uploadResponseDecoder
        }


uploadResponseDecoder : Decode.Decoder UploadResponse
uploadResponseDecoder =
    let
        errorCsvDecoder =
            Decode.oneOf
                [ Decode.string |> Decode.map Just
                , Decode.null Nothing
                ]
    in
    Decode.succeed UploadResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "message" Decode.string
        |> Pipeline.required "error_csv" errorCsvDecoder
        |> Pipeline.required "converted_carriers_csv" errorCsvDecoder
        |> Pipeline.required "total_rows" Decode.int
        |> Pipeline.required "error_rows" Decode.int
        |> Pipeline.required "valid_rows" Decode.int
        |> Pipeline.required "converted_carrier_rows" Decode.int
        |> Pipeline.required "supported_carriers" (Decode.list carrierDecoder)


type alias UploadResponse =
    { success : Bool
    , message : String
    , errorCsv : Maybe String
    , converted_carriers_csv : Maybe String
    , totalRows : Int
    , errorRows : Int
    , validRows : Int
    , converted_carrier_rows : Int
    , supported_carriers : List { name : String, aliases : List String }
    }


formatUploadError : String -> String
formatUploadError message =
    if String.startsWith "Missing required columns:" message then
        let
            missingColumns =
                String.dropLeft (String.length "Missing required columns:") message
                    |> String.trim
                    |> String.split ","
                    |> List.map String.trim
                    |> String.join ", "
        in
        "Your CSV is missing the following required columns: " ++ missingColumns ++ ". Please add these columns and try again."

    else
        message



-- Add this new subscription function


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.batch
        [ case model.showModal of
            NoModal ->
                Sub.none

            ContactChoiceModal ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))

            AddModal ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))

            EditModal _ ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))

            CsvUploadModal _ ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))

            DeleteConfirmModal ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))

            ReassignAgentModal ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))
        , if model.openFilter /= Nothing then
            -- Only listen for clicks outside when a dropdown is open
            Browser.Events.onMouseDown (Decode.succeed CloseFilterDropdown)

          else
            Sub.none
        ]


sortContacts : Maybe SortColumn -> SortDirection -> List Contact -> List Contact
sortContacts maybeColumn direction contacts =
    case maybeColumn of
        Nothing ->
            contacts

        Just column ->
            let
                comparator =
                    case column of
                        NameCol ->
                            \a b ->
                                compare
                                    (a.firstName ++ " " ++ a.lastName)
                                    (b.firstName ++ " " ++ b.lastName)

                        StatusCol ->
                            \a b -> compare a.status b.status

                        EmailCol ->
                            \a b -> compare a.email b.email

                        PhoneNumberCol ->
                            \a b -> compare a.phoneNumber b.phoneNumber

                        StateCol ->
                            \a b -> compare a.state b.state

                        ContactOwnerCol ->
                            \a b ->
                                compare
                                    (Maybe.map .firstName a.contactOwner |> Maybe.withDefault "Default")
                                    (Maybe.map .firstName b.contactOwner |> Maybe.withDefault "Default")

                        CurrentCarrierCol ->
                            \a b -> compare a.currentCarrier b.currentCarrier

                        EffectiveDateCol ->
                            \a b -> compare a.effectiveDate b.effectiveDate
            in
            List.sortWith
                (if direction == Ascending then
                    comparator

                 else
                    \a b -> comparator b a
                )
                contacts


filterContacts : Filters -> String -> Time.Posix -> List Contact -> List Contact
filterContacts filters searchQuery currentTime contacts =
    contacts
        |> filterBySearch searchQuery
        |> filterByList .currentCarrier filters.carriers
        |> filterByList .state filters.states
        |> filterByAge filters.ageRange
        |> filterByAgents filters.agents


filterBySearch : String -> List Contact -> List Contact
filterBySearch query contacts =
    if String.isEmpty query then
        contacts

    else
        let
            loweredQuery =
                String.toLower query
        in
        List.filter
            (\contact ->
                String.contains loweredQuery (String.toLower contact.firstName)
                    || String.contains loweredQuery (String.toLower contact.lastName)
                    || String.contains loweredQuery (String.toLower contact.currentCarrier)
            )
            contacts


filterByAge : Maybe ( Int, Int ) -> List Contact -> List Contact
filterByAge maybeRange contacts =
    case maybeRange of
        Nothing ->
            contacts

        Just ( min, max ) ->
            List.filter
                (\contact ->
                    let
                        age =
                            calculateAge contact.birthDate
                    in
                    age >= min && age <= max
                )
                contacts


calculateAge : String -> Int
calculateAge birthDate =
    -- This is a simplified version. You might want to use a proper date library
    2024 - (String.left 4 birthDate |> String.toInt |> Maybe.withDefault 0)


toggleFilter : Filters -> FilterType -> String -> Filters
toggleFilter filters filterType value =
    case filterType of
        CarrierFilter ->
            { filters | carriers = toggleList filters.carriers value }

        StateFilter ->
            { filters | states = toggleList filters.states value }

        AgeFilter ->
            { filters | ageRange = toggleAgeRange filters.ageRange value }

        AgentFilter ->
            { filters | agents = toggleAgentList filters.agents (String.toInt value |> Maybe.withDefault 0) }


toggleList : List String -> String -> List String
toggleList list value =
    if List.member value list then
        List.filter (\v -> v /= value) list

    else
        value :: list


toggleAgeRange : Maybe ( Int, Int ) -> String -> Maybe ( Int, Int )
toggleAgeRange maybeRange value =
    case maybeRange of
        Nothing ->
            Just ( String.toInt value |> Maybe.withDefault 0, String.toInt value |> Maybe.withDefault 0 )

        Just ( min, max ) ->
            if min == (String.toInt value |> Maybe.withDefault 0) then
                Just ( String.toInt value |> Maybe.withDefault 0, max )

            else if max == (String.toInt value |> Maybe.withDefault 0) then
                Just ( min, String.toInt value |> Maybe.withDefault 0 )

            else
                Just ( min, max )


setAgeFilter : Int -> Int -> Filters -> Filters
setAgeFilter min max filters =
    if max < 1 then
        { filters | ageRange = Nothing }
        -- Don't apply filter if max is 0 or negative

    else
        { filters | ageRange = Just ( min, max ) }



-- Helper function to get unique values from contacts


getUniqueValues : (Contact -> String) -> List Contact -> List String
getUniqueValues getter contacts =
    contacts
        |> List.map getter
        |> List.sort
        |> List.Extra.unique


zipInfoDecoder : Decode.Decoder ZipInfo
zipInfoDecoder =
    Decode.succeed ZipInfo
        |> Pipeline.required "state" Decode.string
        |> Pipeline.required "counties" (Decode.list Decode.string)
        |> Pipeline.required "cities" (Decode.list Decode.string)


filterByList : (Contact -> String) -> List String -> List Contact -> List Contact
filterByList getter selectedValues contacts =
    if List.isEmpty selectedValues then
        contacts

    else
        List.filter
            (\contact ->
                List.member (getter contact) selectedValues
            )
            contacts


viewContactForm : Model -> ContactForm -> (ContactFormField -> String -> Msg) -> Msg -> String -> Bool -> Html Msg
viewContactForm model form updateMsg submitMsg buttonText isSubmitting =
    let
        carrierOptions =
            ( "", "Select a carrier" ) :: List.map (\c -> ( c, c )) (model.carriers ++ [ "Other" ])

        planTypeOptions =
            [ ( "", "Select a plan type" ), ( "Plan N", "Plan N" ), ( "Plan G", "Plan G" ), ( "Other", "Other" ) ]

        -- Simple agent dropdown options - show all available agents
        agentOptions =
            if List.isEmpty model.agents then
                -- If no agents loaded, use current user as fallback if they're an agent
                case model.currentUser of
                    Just user ->
                        [ ( String.fromInt user.id, user.firstName ++ " " ++ user.lastName ) ]

                    Nothing ->
                        []

            else
                -- Just show all available agents
                List.map
                    (\agent ->
                        ( String.fromInt agent.id, agent.firstName ++ " " ++ agent.lastName )
                    )
                    model.agents

        -- Get the selected agent ID or default to first agent
        defaultAgentId =
            case List.head model.agents of
                Just agent ->
                    String.fromInt agent.id

                Nothing ->
                    -- Try current user as fallback
                    case model.currentUser of
                        Just user ->
                            String.fromInt user.id

                        Nothing ->
                            ""

        selectedAgentId =
            case form.contactOwnerId of
                Just id ->
                    String.fromInt id

                Nothing ->
                    defaultAgentId

        emailField =
            div [ class "form-group mb-3 relative" ]
                [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
                    [ text "Email" ]
                , div [ class "relative" ]
                    [ Html.input
                        [ type_ "email"
                        , class
                            ("w-full px-2 py-1.5 bg-white border-[1.5px] rounded-md text-sm text-gray-700 placeholder-gray-400 shadow-sm transition-all duration-200 "
                                ++ (if model.emailExists then
                                        "border-red-300 hover:border-red-400 focus:border-red-500 focus:ring-1 focus:ring-red-200"

                                    else
                                        "border-purple-300 hover:border-purple-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-200"
                                   )
                            )
                        , value form.email
                        , onInput (updateMsg Email)
                        , required True
                        ]
                        []
                    , if model.isCheckingEmail then
                        div [ class "absolute right-2 top-1.5" ]
                            [ viewSpinner ]

                      else if model.emailExists then
                        div
                            [ class "absolute right-2 top-1.5 text-red-500" ]
                            [ viewIcon "M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" ]

                      else if String.length form.email > 0 then
                        div
                            [ class "absolute right-2 top-1.5 text-green-500" ]
                            [ viewIcon "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" ]

                      else
                        text ""
                    ]
                , if model.emailExists then
                    div [ class "mt-1 text-xs text-red-600" ]
                        [ text "A contact with this email already exists" ]

                  else
                    text ""
                ]
    in
    Html.form [ onSubmit submitMsg ]
        [ div [ class "grid grid-cols-2 gap-x-4 gap-y-3" ]
            [ viewFormInput "First Name" "text" form.firstName FirstName updateMsg True
            , viewFormInput "Last Name" "text" form.lastName LastName updateMsg True
            , emailField
            , viewFormInput "Phone Number" "text" form.phoneNumber PhoneNumber updateMsg True
            , viewFormSelect "Current Carrier" form.currentCarrier CurrentCarrier updateMsg carrierOptions
            , viewFormSelect "Plan Type" form.planType PlanType updateMsg planTypeOptions
            , viewFormSelectWithValue "Assigned Agent" selectedAgentId ContactOwnerId updateMsg agentOptions
            , viewFormInput "Effective Date" "date" form.effectiveDate EffectiveDate updateMsg True
            , viewFormInput "Birth Date" "date" form.birthDate BirthDate updateMsg True
            , viewFormRadioGroup "Tobacco User"
                (if form.tobaccoUser then
                    "true"

                 else
                    "false"
                )
                TobaccoUser
                updateMsg
                [ ( "true", "Yes" ), ( "false", "No" ) ]
            , viewFormRadioGroup "Gender" form.gender Gender updateMsg [ ( "M", "Male" ), ( "F", "Female" ) ]
            , div [ class "col-span-2 grid grid-cols-2 gap-x-4" ]
                [ viewZipCodeField model form
                , viewStateField form
                ]
            ]
        , if model.error /= Nothing && not model.emailExists then
            div [ class "mt-2 text-red-600 text-xs" ] [ text (Maybe.withDefault "" model.error) ]

          else
            text ""
        , div [ class "mt-4 flex justify-end space-x-2" ]
            [ button
                [ type_ "button"
                , onClick CloseModal
                , class "px-3 py-1.5 bg-white text-gray-700 text-sm font-medium rounded-md border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200 focus:ring-1 focus:ring-purple-100"
                ]
                [ text "Cancel" ]
            , if isSubmitting then
                div [ class "px-3 py-1.5 flex items-center" ] [ viewSpinner ]

              else
                let
                    isValid =
                        isContactFormValid form && not model.emailExists && not model.isCheckingEmail
                in
                button
                    [ type_ "submit"
                    , class
                        ("px-3 py-1.5 text-white text-sm font-medium rounded-md transition-colors duration-200 focus:ring-1 focus:ring-purple-200 "
                            ++ (if isValid then
                                    "bg-purple-500 hover:bg-purple-600"

                                else
                                    "bg-gray-300 cursor-not-allowed"
                               )
                        )
                    , Html.Attributes.disabled (not isValid)
                    ]
                    [ text buttonText ]
            ]
        ]


viewFormInput : String -> String -> String -> ContactFormField -> (ContactFormField -> String -> Msg) -> Bool -> Html Msg
viewFormInput labelText inputType inputValue field updateMsg isRequired =
    let
        displayValue =
            if field == PhoneNumber then
                formatPhoneNumber inputValue

            else
                inputValue

        inputHandler =
            if field == PhoneNumber then
                \val ->
                    let
                        digits =
                            String.filter Char.isDigit val |> String.left 10
                    in
                    updateMsg field digits

            else
                updateMsg field

        placeholderText =
            if field == PhoneNumber then
                "(555) 555-5555"

            else
                ""
    in
    div [ class "form-group mb-3" ]
        [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
            [ text labelText ]
        , Html.input
            [ type_ inputType
            , class "w-full px-2 py-1.5 bg-white border-[1.5px] border-purple-300 rounded-md text-sm text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-200 focus:bg-white transition-all duration-200"
            , value displayValue
            , onInput inputHandler
            , required isRequired
            , placeholder placeholderText
            ]
            []
        ]


viewFormSelect : String -> String -> ContactFormField -> (ContactFormField -> String -> Msg) -> List ( String, String ) -> Html Msg
viewFormSelect labelText selectedValue field updateMsg options =
    div [ class "form-group mb-3" ]
        [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
            [ text labelText ]
        , Html.select
            [ class "w-full px-2 py-1.5 bg-white border-[1.5px] border-purple-300 rounded-md text-sm text-gray-700 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-200 focus:bg-white transition-all duration-200"
            , value selectedValue
            , onInput (updateMsg field)
            ]
            (List.map
                (\( val, label ) ->
                    Html.option
                        [ value val, selected (val == selectedValue) ]
                        [ text label ]
                )
                options
            )
        ]


viewFormRadioGroup : String -> String -> ContactFormField -> (ContactFormField -> String -> Msg) -> List ( String, String ) -> Html Msg
viewFormRadioGroup labelText selectedValue field updateMsg options =
    div [ class "form-group mb-3" ]
        [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
            [ text labelText ]
        , div [ class "flex gap-2" ]
            (List.map
                (\( val, txt ) ->
                    label
                        [ class
                            ("flex items-center px-2 py-1 rounded-md border text-sm cursor-pointer transition-all duration-200 "
                                ++ (if selectedValue == val then
                                        "border-purple-500 bg-purple-50 text-purple-700"

                                    else
                                        "border-gray-200 hover:border-purple-200"
                                   )
                            )
                        ]
                        [ input
                            [ type_ "radio"
                            , value val
                            , checked (selectedValue == val)
                            , onInput (\_ -> updateMsg field val)
                            , class "sr-only" -- Hide the actual radio button
                            ]
                            []
                        , text txt
                        ]
                )
                options
            )
        ]


viewZipCodeField : Model -> ContactForm -> Html Msg
viewZipCodeField model form =
    div [ class "form-group mb-3" ]
        [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
            [ text "ZIP Code" ]
        , Html.input
            [ type_ "text"
            , class "w-full px-2 py-1.5 bg-white border-[1.5px] border-purple-300 rounded-md text-sm text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-200 focus:bg-white transition-all duration-200"
            , value form.zipCode
            , onInput
                (\zip ->
                    Batch
                        [ case model.showModal of
                            AddModal ->
                                UpdateAddForm ZipCode zip

                            EditModal _ ->
                                UpdateEditForm ZipCode zip

                            _ ->
                                NoOp
                        , if String.length zip == 5 then
                            LookupZipCode zip

                          else
                            NoOp
                        ]
                )
            ]
            []
        ]


viewStateField : ContactForm -> Html Msg
viewStateField form =
    div [ class "form-group mb-3" ]
        [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
            [ text "State" ]
        , Html.input
            [ type_ "text"
            , class "w-full px-2 py-1.5 bg-white border-[1.5px] border-gray-200 rounded-md text-sm text-gray-700 placeholder-gray-400 shadow-sm focus:ring-1 focus:ring-purple-200 focus:bg-white transition-all duration-200"
            , value form.state
            , Html.Attributes.disabled True
            ]
            []
        ]


viewSpinner : Html msg
viewSpinner =
    div [ class "animate-spin rounded-full h-5 w-5 border-2 border-purple-500 border-t-transparent" ] []


onClickOutside : msg -> Html.Attribute msg
onClickOutside msg =
    on "click" (Decode.succeed msg)


userDecoder : Decode.Decoder User
userDecoder =
    Decode.succeed User
        |> Pipeline.required "id" Decode.int
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "first_name" Decode.string
        |> Pipeline.required "last_name" Decode.string
        |> Pipeline.required "is_admin" Decode.bool
        |> Pipeline.required "is_agent" Decode.bool
        |> Pipeline.required "organization_id" Decode.int
        |> Pipeline.required "is_active" Decode.bool
        |> Pipeline.required "phone" Decode.string
        |> Pipeline.optional "carriers" (Decode.list Decode.string) []
        |> Pipeline.optional "stateLicenses" (Decode.list Decode.string) []


deleteContacts : List Int -> Cmd Msg
deleteContacts contactIds =
    Http.request
        { method = "DELETE"
        , headers = []
        , url = "/api/contacts"
        , body = Http.jsonBody (encodeContactIds contactIds)
        , expect = Http.expectJson ContactsDeleted deleteResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


encodeContactIds : List Int -> Encode.Value
encodeContactIds ids =
    Encode.list Encode.int ids


deleteResponseDecoder : Decode.Decoder DeleteResponse
deleteResponseDecoder =
    Decode.map3 DeleteResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "deleted_ids" (Decode.list Decode.int))
        (Decode.field "message" Decode.string)



-- HELPER FUNCTIONS


isAdminOrAdminAgent : Maybe User -> Bool
isAdminOrAdminAgent maybeUser =
    case maybeUser of
        Just user ->
            let
                isAdmin =
                    user.isAdmin
            in
            isAdmin

        Nothing ->
            False


viewExpandedContent : Contact -> Html Msg
viewExpandedContent contact =
    div
        [ class "grid grid-cols-5 gap-4 py-2 px-4 transition-all duration-200 ease-in-out" ]
        [ viewExpandedField "Birth Date" contact.birthDate
        , viewExpandedField "Tobacco User"
            (if contact.tobaccoUser then
                "Yes"

             else
                "No"
            )
        , viewExpandedField "Gender" contact.gender
        , viewExpandedField "ZIP Code" contact.zipCode
        , viewExpandedField "Plan Type" contact.planType
        ]


viewExpandedField : String -> String -> Html Msg
viewExpandedField label value =
    div [ class "text-sm" ]
        [ span [ class "font-medium text-gray-500" ] [ text label ]
        , div [ class "mt-1 text-gray-900" ] [ text value ]
        ]


viewIcon : String -> Html Msg
viewIcon path =
    svg
        [ Svg.Attributes.class "w-4 h-4"
        , Svg.Attributes.fill "none"
        , Svg.Attributes.stroke "currentColor"
        , Svg.Attributes.viewBox "0 0 24 24"
        ]
        [ Svg.path [ Svg.Attributes.d path ] [] ]



-- HTTP FUNCTIONS


fetchContacts : Model -> Cmd Msg
fetchContacts model =
    let
        queryParams =
            [ ( "search", model.searchQuery )
            , ( "states", String.join "," model.activeFilters.states )
            , ( "carriers", String.join "," model.activeFilters.carriers )
            , ( "agents"
              , model.activeFilters.agents
                    |> List.map String.fromInt
                    |> String.join ","
              )
            ]
                |> List.filter (\( _, value ) -> not (String.isEmpty value))
                |> List.map (\( key, value ) -> Url.string key value)
    in
    Http.get
        { url = Url.absolute [ "api", "contacts" ] queryParams
        , expect = Http.expectJson GotContacts contactsDecoder
        }


fetchCurrentUser : Cmd Msg
fetchCurrentUser =
    Http.get
        { url = "/api/me"
        , expect = Http.expectJson GotCurrentUser userDecoder
        }


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    if String.isEmpty phone then
        ""

    else
        let
            digits =
                String.filter Char.isDigit phone
                    |> String.left 10

            len =
                String.length digits
        in
        if len == 0 then
            ""

        else if len <= 3 then
            "(" ++ digits

        else if len <= 6 then
            "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

        else
            "(" ++ String.left 3 digits ++ ") " ++ String.slice 3 6 digits ++ "-" ++ String.dropLeft 6 digits


viewFilterDropdown : Model -> FilterType -> Html Msg
viewFilterDropdown model filterType =
    let
        options =
            case filterType of
                CarrierFilter ->
                    model.availableFilters.carriers

                StateFilter ->
                    model.availableFilters.states

                AgentFilter ->
                    -- Add "Default" option for unassigned contacts
                    "Default"
                        :: (model.agents
                                |> List.filter (\agent -> agent.isAgent)
                                |> List.map
                                    (\agent ->
                                        agent.firstName ++ " " ++ agent.lastName
                                    )
                           )

                _ ->
                    []

        activeFilters =
            case filterType of
                CarrierFilter ->
                    model.activeFilters.carriers

                StateFilter ->
                    model.activeFilters.states

                AgentFilter ->
                    model.activeFilters.agents
                        |> List.map String.fromInt

                _ ->
                    []

        hasActiveFilters =
            not (List.isEmpty activeFilters)
    in
    div
        [ class "absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-10"

        -- IMPORTANT: This mousedown handler prevents the dropdown from closing when clicking inside it
        , Html.Events.stopPropagationOn "mousedown" (Decode.succeed ( NoOp, True ))
        ]
        [ div [ class "py-1" ]
            [ div [ class "p-2 border-b border-gray-200" ]
                [ button
                    [ class
                        ("w-full text-left text-sm font-medium "
                            ++ (if hasActiveFilters then
                                    "text-purple-600 hover:text-purple-800 cursor-pointer"

                                else
                                    "text-gray-400 cursor-not-allowed"
                               )
                        )
                    , onClick (SelectAllFilter filterType False)
                    , Html.Attributes.disabled (not hasActiveFilters)
                    ]
                    [ text "Clear Filters" ]
                ]
            , div [ class "max-h-48 overflow-y-auto p-2" ]
                (case filterType of
                    AgentFilter ->
                        -- Special handling for agent filter since it's using IDs
                        -- First add the Default option (agentId = 0 means unassigned/default)
                        label
                            [ class "flex items-center space-x-2 py-1" ]
                            [ input
                                [ type_ "checkbox"
                                , checked (List.member 0 model.activeFilters.agents)
                                , onClick (ToggleFilter filterType (String.fromInt 0))
                                , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                                ]
                                []
                            , span [ class "text-sm text-gray-600" ]
                                [ text "Default" ]
                            ]
                            :: (model.agents
                                    |> List.filter (\agent -> agent.isAgent)
                                    |> List.map
                                        (\agent ->
                                            label
                                                [ class "flex items-center space-x-2 py-1" ]
                                                [ input
                                                    [ type_ "checkbox"
                                                    , checked (List.member agent.id model.activeFilters.agents)
                                                    , onClick (ToggleFilter filterType (String.fromInt agent.id))
                                                    , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                                                    ]
                                                    []
                                                , span [ class "text-sm text-gray-600" ]
                                                    [ text (agent.firstName ++ " " ++ agent.lastName) ]
                                                ]
                                        )
                               )

                    _ ->
                        -- Original handling for other filters
                        List.map
                            (\option ->
                                label
                                    [ class "flex items-center space-x-2 py-1" ]
                                    [ input
                                        [ type_ "checkbox"
                                        , checked (List.member option activeFilters)
                                        , onClick (ToggleFilter filterType option)
                                        , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                                        ]
                                        []
                                    , span [ class "text-sm text-gray-600" ]
                                        [ text option ]
                                    ]
                            )
                            options
                )
            ]
        ]


isContactFormValid : ContactForm -> Bool
isContactFormValid form =
    String.length form.firstName
        > 0
        && String.length form.lastName
        > 0
        && String.length form.email
        > 0
        && String.length form.phoneNumber
        > 0
        && String.length form.state
        > 0
        && String.length form.currentCarrier
        > 0
        && String.length form.effectiveDate
        > 0
        && String.length form.birthDate
        > 0
        && String.length form.zipCode
        > 0
        && String.length form.planType
        > 0


fetchCarriers : Cmd Msg
fetchCarriers =
    Http.get
        { url = "/api/settings/carriers"
        , expect = Http.expectJson GotCarriers (Decode.list (Decode.field "name" Decode.string))
        }


fetchAgents : Cmd Msg
fetchAgents =
    Http.get
        { url = "/api/agents"
        , expect = Http.expectJson GotAgents (Decode.list agentDecoder)
        }


checkEmail : String -> Cmd Msg
checkEmail email =
    Http.get
        { url = "/api/contacts/check-email/" ++ email
        , expect = Http.expectJson EmailChecked emailCheckDecoder
        }


emailCheckDecoder : Decode.Decoder { exists : Bool }
emailCheckDecoder =
    Decode.map (\exists -> { exists = exists })
        (Decode.field "exists" Decode.bool)


carrierDecoder : Decode.Decoder { name : String, aliases : List String }
carrierDecoder =
    Decode.succeed (\name aliases -> { name = name, aliases = aliases })
        |> Pipeline.required "name" Decode.string
        |> Pipeline.required "aliases" (Decode.list Decode.string)


viewDeleteConfirmModal : Model -> Html Msg
viewDeleteConfirmModal model =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-8" ]
        [ div [ class "bg-white rounded-xl p-8 max-w-md w-full mx-4 shadow-xl relative" ]
            [ button
                [ class "absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ text "×" ]
            , h2 [ class "text-xl font-semibold text-gray-900 mb-4" ]
                [ text "Delete Contacts" ]
            , p [ class "text-sm text-gray-600 mb-6" ]
                [ text ("Are you sure you want to delete " ++ String.fromInt (List.length model.selectedContacts) ++ " contacts? This action cannot be undone.") ]
            , div [ class "flex justify-end space-x-4" ]
                [ button
                    [ class "px-4 py-2 text-gray-700 text-sm font-medium rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200"
                    , onClick CloseModal
                    ]
                    [ text "Cancel" ]
                , if model.isDeletingContacts then
                    div [ class "px-4 py-2 flex items-center" ]
                        [ viewSpinner ]

                  else
                    button
                        [ class "px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors duration-200"
                        , onClick DeleteSelectedContacts
                        ]
                        [ text "Delete" ]
                ]
            ]
        ]



-- Add a new function to allow setting a custom selected value


viewFormSelectWithValue : String -> String -> ContactFormField -> (ContactFormField -> String -> Msg) -> List ( String, String ) -> Html Msg
viewFormSelectWithValue labelText selectedValue field updateMsg options =
    div [ class "form-group mb-3" ]
        [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
            [ text labelText ]
        , div [ class "relative" ]
            [ Html.select
                [ class "w-full px-2 py-1.5 bg-white border-[1.5px] border-purple-300 rounded-md text-sm text-gray-700 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-200 focus:bg-white transition-all duration-200 appearance-none"
                , value selectedValue
                , onInput (updateMsg field)
                ]
                (option [ value "", disabled True, selected (selectedValue == "") ] [ text "Select an Agent" ]
                    :: List.map (\( val, txt ) -> option [ value val, selected (val == selectedValue) ] [ text txt ]) options
                )
            , div [ class "absolute inset-y-0 right-0 flex items-center px-1 pointer-events-none text-gray-500" ]
                [ viewIcon "M19 9l-7 7-7-7" ]
            ]
        ]


agentDecoder : Decode.Decoder User
agentDecoder =
    Decode.succeed User
        |> Pipeline.required "id"
            (Decode.oneOf
                [ -- Try to decode as an integer directly
                  Decode.int
                , -- If that fails, try to decode as a string and convert to int
                  Decode.string
                    |> Decode.andThen
                        (\str ->
                            case String.toInt str of
                                Just intVal ->
                                    Decode.succeed intVal

                                Nothing ->
                                    Decode.fail ("Could not convert agent ID string to integer: " ++ str)
                        )
                ]
            )
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "firstName" Decode.string
        |> Pipeline.required "lastName" Decode.string
        |> Pipeline.required "isAdmin" Decode.bool
        |> Pipeline.required "isAgent" Decode.bool
        |> Pipeline.optional "organizationId" Decode.int 0
        -- Add default value for isActive since it's not in the API response
        |> Pipeline.hardcoded True
        -- Assume agents are active
        |> Pipeline.optional "phone" Decode.string ""
        |> Pipeline.optional "carriers" (Decode.list Decode.string) []
        |> Pipeline.optional "stateLicenses" (Decode.list Decode.string) []


viewReassignAgentModal : Model -> Html Msg
viewReassignAgentModal model =
    let
        -- Filter to only include actual agents
        agentList =
            model.agents
                |> List.filter (\user -> user.isAgent)

        -- Add a "Default" option (NULL agent_id)
        agentOptions =
            ( 0, "Default" )
                :: List.map
                    (\agent ->
                        ( agent.id
                        , agent.firstName ++ " " ++ agent.lastName
                        )
                    )
                    agentList
    in
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-8" ]
        [ div [ class "bg-white rounded-xl p-10 max-w-2xl w-full mx-4 shadow-xl relative" ]
            [ button
                [ class "absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-2xl font-semibold text-gray-900 mb-8" ]
                [ text "Reassign Contacts" ]
            , div [ class "mb-6 text-sm text-gray-600" ]
                [ text "Select an agent to reassign the selected contacts to." ]
            , div [ class "form-group" ]
                [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
                    [ text "Select Agent" ]
                , div [ class "relative" ]
                    [ if List.isEmpty model.agents then
                        div [ class "p-2 text-gray-500 border rounded" ]
                            [ text "Loading agents..." ]

                      else
                        Html.select
                            [ class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200 appearance-none"
                            , value (String.fromInt (Maybe.withDefault 0 model.editForm.contactOwnerId))
                            , onInput (\val -> SelectReassignAgent (String.toInt val |> Maybe.withDefault 0))
                            ]
                            (List.map
                                (\( val, label ) ->
                                    option [ value (String.fromInt val) ] [ text label ]
                                )
                                agentOptions
                            )
                    , div [ class "absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none" ]
                        [ viewIcon "M19 9l-7 7-7-7" ]
                    ]
                ]
            , div [ class "mt-8 flex justify-end space-x-4" ]
                [ button
                    [ class "px-6 py-3 bg-white text-gray-700 text-sm font-medium rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200 focus:ring-4 focus:ring-purple-100"
                    , onClick CloseModal
                    ]
                    [ text "Cancel" ]
                , button
                    [ class "px-6 py-3 bg-purple-500 text-white text-sm font-medium rounded-lg hover:bg-purple-600 transition-colors duration-200 focus:ring-4 focus:ring-purple-200"
                    , onClick ReassignSelectedContacts
                    ]
                    [ text "Reassign" ]
                ]
            ]
        ]


reassignContacts : List Int -> Int -> Cmd Msg
reassignContacts contactIds agentId =
    Http.request
        { method = "PUT"
        , headers = []
        , url = "/api/contacts/reassign"
        , body =
            Http.jsonBody
                (Encode.object
                    [ ( "contact_ids", Encode.list Encode.int contactIds )
                    , ( "agent_id"
                      , if agentId == 0 then
                            -- Send null for Default option
                            Encode.null

                        else
                            Encode.int agentId
                      )
                    ]
                )
        , expect = Http.expectJson ContactsReassigned reassignResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


reassignResponseDecoder : Decode.Decoder ReassignResponse
reassignResponseDecoder =
    Decode.succeed ReassignResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "updated_ids" (Decode.list Decode.int)
        |> Pipeline.required "message" Decode.string


toggleAgentList : List Int -> Int -> List Int
toggleAgentList list value =
    if List.member value list then
        List.filter (\v -> v /= value) list

    else
        value :: list



-- Add the filterByAgents function


filterByAgents : List Int -> List Contact -> List Contact
filterByAgents agentIds contacts =
    if List.isEmpty agentIds then
        contacts

    else
        List.filter
            (\contact ->
                case contact.agentId of
                    Just agentId ->
                        List.member agentId agentIds

                    Nothing ->
                        False
            )
            contacts



-- Replace the old contact limit banner functions with this more streamlined one

================
File: src/Dashboard.elm
================
module Dashboard exposing (Model, Msg, init, subscriptions, update, view)

import Browser exposing (Document)
import Chart as C
import Chart.Attributes as CA
import Chart.Events as CE
import Chart.Item as CI
import Components.LimitBanner as LimitBanner exposing (LimitWarning(..))
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Time


type alias Model =
    { hovering : Maybe Point
    , limitBanner : LimitBanner.Model
    , showTutorialModal : Bool
    }


type alias Point =
    { x : Float
    , y : Float
    }


type alias ChartData =
    { x : Float
    , sends : Float
    , views : Float
    , followUps : Float
    }


type Msg
    = OnHover (Maybe Point)
    | NoOp
    | LimitBannerMsg LimitBanner.Msg
    | CloseTutorialModal
    | OpenTutorialModal


type alias Flags =
    { isPostPayment : Maybe Bool
    }


init : Flags -> ( Model, Cmd Msg )
init flags =
    let
        ( limitBannerModel, limitBannerCmd ) =
            LimitBanner.init
    in
    ( { hovering = Nothing
      , limitBanner = limitBannerModel
      , showTutorialModal = Maybe.withDefault False flags.isPostPayment
      }
    , Cmd.map LimitBannerMsg limitBannerCmd
    )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        OnHover point ->
            ( { model | hovering = point }
            , Cmd.none
            )

        LimitBannerMsg limitBannerMsg ->
            let
                ( limitBanner, cmd ) =
                    LimitBanner.update limitBannerMsg model.limitBanner
            in
            ( { model | limitBanner = limitBanner }
            , Cmd.map LimitBannerMsg cmd
            )

        CloseTutorialModal ->
            ( { model | showTutorialModal = False }
            , Cmd.none
            )

        OpenTutorialModal ->
            ( { model | showTutorialModal = True }
            , Cmd.none
            )

        NoOp ->
            ( model, Cmd.none )


view : Model -> Document Msg
view model =
    { title = "Dashboard"
    , body =
        [ div [ class "p-6 max-w-7xl mx-auto" ]
            [ LimitBanner.view model.limitBanner
                |> Html.map LimitBannerMsg
            , if model.showTutorialModal then
                viewTutorialModal

              else
                text ""
            , div [ class "grid grid-cols-3 gap-6" ]
                [ -- Stats cards
                  viewStatsCard "Quotes Sent" "912" "text-purple-600"
                , viewStatsCard "Quotes Viewed" "912" "text-purple-600"
                , viewStatsCard "Follow Ups Requested" "912" "text-purple-600"
                ]
            , div [ class "mt-8 grid grid-cols-4 gap-6" ]
                [ div [ class "col-span-3" ]
                    [ -- Chart section
                      div [ class "bg-white rounded-lg shadow p-6" ]
                        [ h3 [ class "text-lg font-semibold mb-4" ] [ text "Quote Results" ]
                        , div [ class "h-64" ]
                            [ viewChart model ]
                        , div [ class "flex justify-center mt-16 space-x-8 text-sm text-gray-600 border-t border-gray-200 pt-8" ]
                            [ div [ class "flex items-center" ]
                                [ div [ class "w-3 h-3 rounded-full bg-[#DCE2E5] mr-2" ] []
                                , text "Quotes Sent"
                                ]
                            , div [ class "flex items-center" ]
                                [ div [ class "w-3 h-3 rounded-full bg-[#53389E] mr-2" ] []
                                , text "Quotes Viewed"
                                ]
                            , div [ class "flex items-center" ]
                                [ div [ class "w-3 h-3 rounded-full bg-[#03045E] mr-2" ] []
                                , text "Follow-up Requests"
                                ]
                            ]
                        ]
                    ]
                , div [ class "col-span-1" ]
                    [ -- Next Renewals section
                      div [ class "bg-white rounded-lg shadow p-6" ]
                        [ h3 [ class "text-lg font-semibold mb-4" ] [ text "Next Renewals" ]
                        , div [ class "space-y-4" ]
                            [-- We'll add renewal items here later
                            ]
                        ]
                    ]
                ]
            ]
        ]
    }


viewTutorialModal : Html Msg
viewTutorialModal =
    div [ class "fixed inset-0 z-50 bg-gray-600 bg-opacity-50 flex items-center justify-center" ]
        [ div [ class "bg-white p-6 rounded-lg shadow-lg max-w-2xl w-full" ]
            [ div [ class "flex justify-between items-center mb-4" ]
                [ h2 [ class "text-xl font-semibold text-[#03045E]" ] [ text "Welcome to MedicareMax!" ]
                , button
                    [ class "text-gray-400 hover:text-gray-600", onClick CloseTutorialModal ]
                    [ text "×" ]
                ]
            , div [ class "mb-6" ]
                [ iframe
                    [ src "https://www.youtube.com/embed/dQw4w9WgXcQ" -- Replace with actual tutorial video
                    , class "w-full h-96"
                    , attribute "allowfullscreen" ""
                    , attribute "frameborder" "0"
                    ]
                    []
                ]
            , p [ class "mb-4 text-gray-600" ]
                [ text "This quick setup tutorial will help you get started with MedicareMax and show you how to make the most of its features." ]
            , div [ class "flex justify-end" ]
                [ button
                    [ class "px-4 py-2 bg-[#03045E] text-white rounded-md hover:bg-opacity-90"
                    , onClick CloseTutorialModal
                    ]
                    [ text "Close" ]
                ]
            ]
        ]


viewStatsCard : String -> String -> String -> Html Msg
viewStatsCard title value colorClass =
    div [ class "bg-white rounded-lg shadow p-6" ]
        [ div [ class "text-gray-600 text-sm" ] [ text title ]
        , div [ class "text-4xl font-bold mt-2 text-[#03045E]" ] [ text value ]
        ]


viewChart : Model -> Html Msg
viewChart model =
    C.chart
        [ CA.height 300
        , CA.width 800
        , CA.margin { top = 10, bottom = 45, left = 30, right = 10 }
        ]
        [ C.xLabels
            [ CA.withGrid
            , CA.amount 12
            , CA.fontSize 12
            , CA.moveDown 35
            , CA.format
                (\x ->
                    case round x of
                        0 ->
                            "Jan"

                        1 ->
                            "Feb"

                        2 ->
                            "Mar"

                        3 ->
                            "Apr"

                        4 ->
                            "May"

                        5 ->
                            "Jun"

                        6 ->
                            "Jul"

                        7 ->
                            "Aug"

                        8 ->
                            "Sep"

                        9 ->
                            "Oct"

                        10 ->
                            "Nov"

                        11 ->
                            "Dec"

                        _ ->
                            ""
                )
            ]
        , C.yLabels [ CA.withGrid ]
        , C.bars []
            [ C.stacked
                [ C.bar .sends [ CA.color "#DCE2E5" ]
                , C.bar .views [ CA.color "#53389E" ]
                , C.bar .followUps [ CA.color "#03045E" ]
                ]
            ]
            chartData
        ]


chartData : List ChartData
chartData =
    [ { x = 0, sends = 10, views = 8, followUps = 5 }
    , { x = 1, sends = 15, views = 12, followUps = 8 }
    , { x = 2, sends = 8, views = 6, followUps = 4 }
    , { x = 3, sends = 12, views = 10, followUps = 7 }
    , { x = 4, sends = 20, views = 15, followUps = 10 }
    , { x = 5, sends = 18, views = 14, followUps = 9 }
    , { x = 6, sends = 25, views = 20, followUps = 15 }
    , { x = 7, sends = 22, views = 18, followUps = 12 }
    , { x = 8, sends = 28, views = 22, followUps = 16 }
    , { x = 9, sends = 30, views = 25, followUps = 18 }
    , { x = 10, sends = 35, views = 28, followUps = 20 }
    , { x = 11, sends = 40, views = 32, followUps = 25 }
    ]


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Decline.elm
================
module Decline exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onInput, onSubmit)
import Http
import Json.Decode as D
import Json.Encode as E
import Url.Parser.Query as Query


type alias Model =
    { name : String
    , email : String
    , isSubmitting : Bool
    , error : Maybe String
    , success : Bool
    , quoteId : Maybe String
    , key : Nav.Key
    }


type Msg
    = UpdateName String
    | UpdateEmail String
    | SubmitForm
    | GotSubmitResponse (Result Http.Error ())
    | GotContactInfo (Result Http.Error ContactInfo)


type alias ContactInfo =
    { email : String
    , firstName : String
    , lastName : String
    }


init : Nav.Key -> Maybe String -> ( Model, Cmd Msg )
init key maybeQuoteId =
    ( { name = ""
      , email = ""
      , isSubmitting = False
      , error = Nothing
      , success = False
      , quoteId = maybeQuoteId
      , key = key
      }
    , case maybeQuoteId of
        Just quoteId ->
            Http.get
                { url = "/api/quotes/decode/" ++ quoteId
                , expect = Http.expectJson GotContactInfo contactInfoDecoder
                }

        Nothing ->
            Cmd.none
    )


contactInfoDecoder : D.Decoder ContactInfo
contactInfoDecoder =
    D.field "contact"
        (D.map3 ContactInfo
            (D.field "email" D.string)
            (D.field "firstName" D.string)
            (D.field "lastName" D.string)
        )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateName name ->
            ( { model | name = name }, Cmd.none )

        UpdateEmail email ->
            ( { model | email = email }, Cmd.none )

        SubmitForm ->
            ( { model | isSubmitting = True }
            , Http.post
                { url = "/api/contact-request"
                , body = Http.jsonBody (encodeForm model)
                , expect = Http.expectWhatever GotSubmitResponse
                }
            )

        GotSubmitResponse result ->
            case result of
                Ok _ ->
                    ( { model | isSubmitting = False, success = True }, Cmd.none )

                Err _ ->
                    ( { model | isSubmitting = False, error = Just "Failed to submit form. Please try again." }, Cmd.none )

        GotContactInfo result ->
            case result of
                Ok info ->
                    ( { model
                        | email = info.email
                        , name = info.firstName ++ " " ++ info.lastName
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( model, Cmd.none )


encodeForm : Model -> E.Value
encodeForm model =
    E.object
        [ ( "name", E.string model.name )
        , ( "email", E.string model.email )
        , ( "type", E.string "decline" )
        , ( "quoteId", Maybe.map E.string model.quoteId |> Maybe.withDefault E.null )
        ]


view : Model -> Browser.Document Msg
view model =
    { title = "Not Eligible - Medicare Max"
    , body =
        [ div [ class "min-h-screen bg-white" ]
            [ nav [ class "bg-white border-b border-gray-200" ]
                [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" ]
                    [ div [ class "flex justify-between h-16 items-center" ]
                        [ div [ class "flex-shrink-0" ]
                            [ img [ src "/images/medicare-max-logo.png", class "h-8 w-auto", alt "Medicare Max" ] [] ]
                        ]
                    ]
                ]
            , div [ class "max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12" ]
                [ if model.success then
                    div [ class "text-center" ]
                        [ h1 [ class "text-3xl font-bold text-gray-900 mb-4" ]
                            [ text "Thank You" ]
                        , p [ class "text-gray-600" ]
                            [ text "We'll be in touch soon to discuss your options." ]
                        ]

                  else
                    div []
                        [ h1 [ class "text-3xl font-bold text-center text-gray-900 mb-4" ]
                            [ text "We Need to Talk" ]
                        , p [ class "text-gray-600 text-center mb-8" ]
                            [ text "Based on your answers, you may not qualify for this plan. However, we'd love to help you find a different plan that's a perfect fit for your needs." ]
                        , case model.error of
                            Just error ->
                                div [ class "bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" ]
                                    [ text error ]

                            Nothing ->
                                text ""
                        , Html.form [ onSubmit SubmitForm, class "space-y-6 max-w-lg mx-auto" ]
                            [ div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                    [ text "Name" ]
                                , input
                                    [ type_ "text"
                                    , class "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
                                    , value model.name
                                    , onInput UpdateName
                                    , required True
                                    ]
                                    []
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                    [ text "Email" ]
                                , input
                                    [ type_ "email"
                                    , class "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
                                    , value model.email
                                    , onInput UpdateEmail
                                    , required True
                                    ]
                                    []
                                ]
                            , button
                                [ class "w-full bg-purple-600 text-white py-3 px-4 rounded-lg hover:bg-purple-700 transition-colors duration-200 disabled:opacity-50"
                                , type_ "submit"
                                , disabled model.isSubmitting
                                ]
                                [ if model.isSubmitting then
                                    text "Submitting..."

                                  else
                                    text "Request Follow-up"
                                ]
                            ]
                        ]
                ]
            ]
        ]
    }


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Eligibility.elm
================
module Eligibility exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onSubmit)
import Http
import Json.Encode as E
import Url.Builder as Builder



-- TYPES


type alias Question =
    { id : Int
    , text : String
    , answer : Maybe Bool
    }


type alias Model =
    { key : Nav.Key
    , questions : List Question
    , quoteId : Maybe String
    }


type Msg
    = AnswerQuestion Int Bool
    | SubmitAnswers
    | SkipQuestions
    | GotSubmitResponse (Result Http.Error ())



-- INIT


init : Nav.Key -> Maybe String -> ( Model, Cmd Msg )
init key maybeQuoteId =
    ( { key = key
      , questions =
            [ { id = 1
              , text = "Are you currently hospitalized or in a nursing home or assisted living facility; or, are you bedridden or confined to a wheelchair, or require the assistance of motorized mobility aid, or have you had any amputation caused by disease?"
              , answer = Nothing
              }
            , { id = 2
              , text = "Within the past 24 months, have you been hospitalized two or more times, or been confined to a nursing home or assisted living facility?"
              , answer = Nothing
              }
            , { id = 3
              , text = "Have you been advised by a medical professional to have surgery, medical tests, treatment or therapy that has not been performed?"
              , answer = Nothing
              }
            ]
      , quoteId = maybeQuoteId
      }
    , Cmd.none
    )



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        SkipQuestions ->
            ( model
            , Nav.pushUrl model.key
                (case model.quoteId of
                    Just id ->
                        "/schedule?id=" ++ id

                    Nothing ->
                        "/schedule"
                )
            )

        AnswerQuestion id answer ->
            ( { model
                | questions =
                    List.map
                        (\q ->
                            if q.id == id then
                                { q | answer = Just answer }

                            else
                                q
                        )
                        model.questions
              }
            , Cmd.none
            )

        GotSubmitResponse result ->
            case result of
                Ok _ ->
                    let
                        anyNo =
                            List.any (\q -> q.answer == Just False) model.questions

                        nextUrl =
                            case model.quoteId of
                                Just id ->
                                    if anyNo then
                                        "/schedule?id=" ++ id ++ "&status=decline"

                                    else
                                        "/schedule?id=" ++ id ++ "&status=accept"

                                Nothing ->
                                    if anyNo then
                                        "/schedule?status=decline"

                                    else
                                        "/schedule?status=accept"
                    in
                    ( model
                    , Nav.pushUrl model.key nextUrl
                    )

                Err _ ->
                    -- On error, still proceed to next page but don't save answers
                    let
                        anyNo =
                            List.any (\q -> q.answer == Just False) model.questions

                        nextUrl =
                            case model.quoteId of
                                Just id ->
                                    if anyNo then
                                        "/schedule?id=" ++ id ++ "&status=decline"

                                    else
                                        "/schedule?id=" ++ id ++ "&status=accept"

                                Nothing ->
                                    if anyNo then
                                        "/schedule?status=decline"

                                    else
                                        "/schedule?status=accept"
                    in
                    ( model
                    , Nav.pushUrl model.key nextUrl
                    )

        SubmitAnswers ->
            let
                allAnswered =
                    List.all (.answer >> (/=) Nothing) model.questions

                submitAnswers =
                    case model.quoteId of
                        Just quoteId ->
                            Http.post
                                { url = "/api/eligibility-answers"
                                , body =
                                    Http.jsonBody <|
                                        E.object
                                            [ ( "quote_id", E.string quoteId )
                                            , ( "answers"
                                              , E.object
                                                    (List.filterMap
                                                        (\q ->
                                                            case q.answer of
                                                                Just ans ->
                                                                    Just ( String.fromInt q.id, E.bool ans )

                                                                Nothing ->
                                                                    Nothing
                                                        )
                                                        model.questions
                                                    )
                                              )
                                            ]
                                , expect = Http.expectWhatever GotSubmitResponse
                                }

                        Nothing ->
                            -- If no quote ID, just proceed without saving
                            Cmd.none
            in
            if allAnswered then
                ( model
                , submitAnswers
                )

            else
                ( model
                , Cmd.none
                )



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Underwriting Assessment"
    , body =
        [ div [ class "min-h-screen bg-white" ]
            [ div [ class "max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12" ]
                [ h1 [ class "text-3xl font-bold text-center text-gray-900 mb-4" ]
                    [ text "Underwriting Assessment" ]
                , p [ class "text-gray-600 text-center mb-12" ]
                    [ text "In order to qualify for a new Supplemental plan you must past medical underwriting. This is a quick questionnaire to assess the likelihood of you being able to pass." ]
                , Html.form [ onSubmit SubmitAnswers, class "space-y-8" ]
                    (List.map viewQuestion model.questions
                        ++ [ viewSubmitButton model ]
                    )
                , div [ class "text-center mt-6" ]
                    [ button
                        [ onClick SkipQuestions
                        , class "text-blue-600 hover:text-blue-800 underline text-sm"
                        , type_ "button"
                        ]
                        [ text "Skip" ]
                    ]
                ]
            ]
        ]
    }


viewQuestion : Question -> Html Msg
viewQuestion question =
    div [ class "space-y-4" ]
        [ p [ class "text-gray-900 text-lg" ]
            [ text question.text ]
        , div [ class "grid grid-cols-2 gap-4" ]
            [ viewRadioButton question "Yes" True
            , viewRadioButton question "No" False
            ]
        ]


viewRadioButton : Question -> String -> Bool -> Html Msg
viewRadioButton question labelText value =
    label
        [ class
            ("flex items-center justify-center px-6 py-3 rounded-lg border-[2.5px] cursor-pointer transition-all duration-200 w-full "
                ++ (if question.answer == Just value then
                        "border-blue-500 bg-white text-gray-900"

                    else
                        "border-gray-200 hover:border-blue-200 text-gray-700"
                   )
            )
        , onClick (AnswerQuestion question.id value)
        ]
        [ input
            [ type_ "radio"
            , name ("question-" ++ String.fromInt question.id)
            , checked (question.answer == Just value)
            , class "sr-only"
            ]
            []
        , span [ class "font-medium" ] [ text labelText ]
        ]


viewSubmitButton : Model -> Html Msg
viewSubmitButton model =
    let
        allAnswered =
            List.all (.answer >> (/=) Nothing) model.questions

        buttonClass =
            "w-full py-4 rounded-lg text-white font-medium transition-colors duration-200 mt-8 "
                ++ (if allAnswered then
                        "bg-purple-600 hover:bg-purple-700"

                    else
                        "bg-gray-300 cursor-not-allowed"
                   )
    in
    button
        [ class buttonClass
        , type_ "submit"
        , disabled (not allAnswered)
        ]
        [ text "Next" ]



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/EmailScheduler.elm
================
module EmailScheduler exposing
    ( EmailSchedule
    , PlanType(..)
    , ScheduledEmail
    , ScheduledEmailStatus(..)
    , ScheduledEmailType(..)
    , getScheduledEmails
    , init
    , scheduledEmailTypeToString
    , viewFutureActivity
    , viewScheduledEmail
    )

{-| This module manages email scheduling for various events such as birthdays,
anniversaries, New Year greetings, and October blasts. It supports different plan
types and provides functionality to schedule emails, check their status, and display upcoming activities.

The module includes:

  - Type definitions for email schedules and statuses.
  - Initialization of email schedules.
  - Logic to calculate scheduled emails with status checks.
  - Views to display future scheduled emails in a user-friendly table format.

Dependencies:

  - `Date` for handling dates.
  - `Html` for rendering views.

-}

import BirthdayRules exposing (canPresentDifferentPlanOnly, getDelayedEmailDate, getStateRule, isInBirthdayRuleWindow, isInContinuousOpenEnrollment)
import Date exposing (Date)
import Html exposing (Html, div, h2, span, table, tbody, td, text, th, thead, tr)
import Html.Attributes exposing (class)
import Time exposing (Month(..))



-- TYPES


{-| Represents an email schedule for a contact, including key dates and plan information.

  - `contactId`: Unique identifier for the contact.
  - `effectiveDate`: The date when the plan became effective.
  - `birthDate`: The contact's birth date.
  - `currentDate`: The current date for reference.
  - `planType`: The type of plan (PlanN, PlanG, or NoPlan).
  - `state`: The state of the contact.
  - `stateCarrierSettings`: List of state carrier settings.
  - `stateLicenses`: List of state licenses.

-}
type alias EmailSchedule =
    { contactId : Int
    , effectiveDate : Date
    , birthDate : Date
    , currentDate : Date
    , planType : PlanType
    , state : String
    , stateCarrierSettings : List StateCarrierSetting
    , stateLicenses : List String
    }


{-| Represents a scheduled email with its type, scheduled time, and status.

  - `emailType`: The type of email (e.g., Birthday, Anniversary).
  - `scheduledTime`: The date when the email is scheduled to be sent.
  - `status`: The status of the email (Scheduled or Skipped with a reason).

-}
type alias ScheduledEmail =
    { emailType : ScheduledEmailType
    , scheduledTime : Date
    , status : ScheduledEmailStatus
    }


{-| Represents the status of a scheduled email.

  - `Scheduled`: The email is scheduled to be sent.
  - `Skipped reason`: The email was skipped, with a reason provided.
  - `Delayed reason`: The email was delayed due to birthday rules, with a reason provided.

-}
type ScheduledEmailStatus
    = Scheduled
    | Skipped String
    | Delayed String


{-| Represents the type of scheduled email, associated with a plan type.

  - `Birthday`: Email for the contact's birthday.
  - `Anniversary`: Email for the plan's anniversary.
  - `NewYear`: Email for New Year greetings.
  - `OctoberBlast`: Email for an October promotional blast.
  - `NoEmails`: No scheduled emails.

-}
type ScheduledEmailType
    = Birthday
    | Anniversary
    | NewYear
    | OctoberBlast
    | NoEmails


{-| Represents the plan type for a contact.

  - `PlanN`: Plan N (specific benefits).
  - `PlanG`: Plan G (specific benefits).
  - `NoPlan`: No plan assigned.

-}
type PlanType
    = PlanN
    | PlanG
    | NoPlan


{-| Represents a state carrier setting.

  - `state`: The state.
  - `carrier`: The carrier.
  - `active`: Whether the setting is active.
  - `targetGI`: Whether the setting targets GI.

-}
type alias StateCarrierSetting =
    { state : String
    , carrier : String
    , active : Bool
    , targetGI : Bool
    }



-- INITIALIZATION


{-| Initializes an email schedule for a contact.

  - `contactId`: Unique identifier for the contact.
  - `effective`: The effective date of the plan.
  - `birth`: The contact's birth date.
  - `current`: The current date for scheduling reference.
  - `plan`: The plan type.
  - `state`: The state of the contact.
  - `settings`: List of state carrier settings.
  - `licenses`: List of state licenses.
    Returns an `EmailSchedule` record with the provided values.

-}
init : Int -> Date -> Date -> Date -> PlanType -> String -> List StateCarrierSetting -> List String -> EmailSchedule
init contactId effective birth current plan state settings licenses =
    { contactId = contactId
    , effectiveDate = effective
    , birthDate = birth
    , currentDate = current
    , planType = plan
    , state = state
    , stateCarrierSettings = settings
    , stateLicenses = licenses
    }



-- CALCULATIONS


{-| Checks if a contact's state is active.

  - `schedule`: The email schedule to check.
    Returns `True` if the contact's state is active, otherwise `False`.

-}
isStateActive : EmailSchedule -> Bool
isStateActive schedule =
    List.member schedule.state schedule.stateLicenses


{-| Calculates the list of scheduled emails for a given email schedule.

  - `schedule`: The email schedule to process.
    Returns a list of `ScheduledEmail` records, each with a type, scheduled time, and status.
    Emails are scheduled for:
  - The contact's next birthday.
  - The plan's next anniversary.
  - The next New Year (January 1st).
  - The next October blast (October 1st).
    Emails within the first year of the effective date are skipped.
    Emails for contacts in states with continuous open enrollment are skipped.
    Emails for contacts in their birthday rule window are delayed.

-}
getScheduledEmails : EmailSchedule -> List ScheduledEmail
getScheduledEmails schedule =
    if not (isStateActive schedule) then
        [ { emailType = NoEmails
          , scheduledTime = schedule.currentDate
          , status = Skipped "Contact's state is not active"
          }
        ]

    else if isInContinuousOpenEnrollment schedule.state then
        [ { emailType = NoEmails
          , scheduledTime = schedule.currentDate
          , status = Skipped "Contact's state has continuous open enrollment"
          }
        ]

    else
        let
            -- Calculate the date one year after the effective date for status checks.
            oneYearAfterEffective : Date
            oneYearAfterEffective =
                Date.add Date.Years 1 schedule.effectiveDate

            -- Calculate the next occurrence of an event based on the email type and base date.
            nextOccurrence : ScheduledEmailType -> Date -> Date
            nextOccurrence emailType baseDate =
                let
                    currentYear : Int
                    currentYear =
                        Date.year schedule.currentDate

                    -- Calculate next year's date for birthday and anniversary
                    nextBirthdayOrAnniversaryYear : Date -> Int
                    nextBirthdayOrAnniversaryYear date =
                        let
                            thisYearDate =
                                Date.fromCalendarDate currentYear (Date.month date) (Date.day date)
                        in
                        if Date.compare thisYearDate schedule.currentDate == LT then
                            currentYear + 1

                        else
                            currentYear

                    -- Calculate next New Year's date
                    nextNewYearDate : Date
                    nextNewYearDate =
                        let
                            nextJan1 =
                                Date.fromCalendarDate (currentYear + 1) Jan 1
                        in
                        nextJan1

                    -- For October blast, use current year if October hasn't passed yet
                    octoberThisYear : Date
                    octoberThisYear =
                        Date.fromCalendarDate currentYear Oct 1

                    shouldUseNextYearForOctober : Bool
                    shouldUseNextYearForOctober =
                        Date.compare octoberThisYear schedule.currentDate == LT

                    result =
                        case emailType of
                            Birthday ->
                                Date.fromCalendarDate
                                    (nextBirthdayOrAnniversaryYear baseDate)
                                    (Date.month baseDate)
                                    (Date.day baseDate)

                            Anniversary ->
                                Date.fromCalendarDate
                                    (nextBirthdayOrAnniversaryYear baseDate)
                                    (Date.month baseDate)
                                    (Date.day baseDate)

                            NewYear ->
                                nextNewYearDate

                            OctoberBlast ->
                                Date.fromCalendarDate
                                    (if shouldUseNextYearForOctober then
                                        currentYear + 1

                                     else
                                        currentYear
                                    )
                                    Oct
                                    1

                            NoEmails ->
                                schedule.currentDate
                in
                result

            -- Check if an email should be delayed due to birthday rules
            checkBirthdayRuleDelay : ScheduledEmailType -> Date -> ( Date, ScheduledEmailStatus )
            checkBirthdayRuleDelay emailType scheduledDate =
                let
                    -- Check if the scheduled date falls within a birthday rule window
                    isScheduledDateInWindow : Date -> Date -> Bool
                    isScheduledDateInWindow referenceDate dateToCheck =
                        -- Get the rule for the state
                        case getStateRule schedule.state of
                            Just rule ->
                                let
                                    -- Calculate the start and end dates of the window for the scheduled year
                                    scheduledYear =
                                        Date.year dateToCheck

                                    adjustedReferenceDate =
                                        Date.fromCalendarDate scheduledYear (Date.month referenceDate) (Date.day referenceDate)

                                    -- For Nevada, the window starts on the first day of the birth month
                                    windowStartDate =
                                        if rule.state == "NV" then
                                            Date.fromCalendarDate scheduledYear (Date.month referenceDate) 1

                                        else
                                            -- For other states, subtract the days before birthday from the birthday
                                            Date.add Date.Days -rule.daysBeforeBirthday adjustedReferenceDate

                                    windowEndDate =
                                        Date.add Date.Days rule.totalDays windowStartDate
                                in
                                -- Check if the scheduled date falls within the window
                                Date.compare dateToCheck windowStartDate /= LT && Date.compare dateToCheck windowEndDate /= GT

                            Nothing ->
                                False
                in
                case emailType of
                    Birthday ->
                        -- For birthday emails, check if the state is Missouri (which doesn't have a birthday rule)
                        if schedule.state == "MO" then
                            -- Missouri only has anniversary rule, not birthday rule
                            ( scheduledDate, Scheduled )
                            -- For other states, check if the scheduled date falls within the birthday rule window

                        else if isScheduledDateInWindow schedule.birthDate scheduledDate then
                            -- If it does, delay until after the window
                            let
                                delayedDate =
                                    getDelayedEmailDate schedule.state schedule.birthDate scheduledDate
                            in
                            ( delayedDate, Delayed "due to birthday rule window" )

                        else
                            ( scheduledDate, Scheduled )

                    Anniversary ->
                        -- For Missouri anniversary rule
                        if schedule.state == "MO" then
                            -- Check if the scheduled date falls within the anniversary rule window
                            if isScheduledDateInWindow schedule.effectiveDate scheduledDate then
                                -- If the contact already has Plan G and we're sending a Plan G email, delay it
                                if schedule.planType == PlanG then
                                    let
                                        delayedDate =
                                            getDelayedEmailDate schedule.state schedule.effectiveDate scheduledDate
                                    in
                                    ( delayedDate, Delayed "due to anniversary rule window" )

                                else
                                    -- If it's a different plan type, we can send it during the window
                                    ( scheduledDate, Scheduled )

                            else
                                -- Outside the window, schedule normally
                                ( scheduledDate, Scheduled )

                        else
                            -- For other states, no delay for anniversary emails
                            ( scheduledDate, Scheduled )

                    _ ->
                        -- No delay for other email types
                        ( scheduledDate, Scheduled )

            -- Create a scheduled email with the appropriate status.
            createScheduledEmail : ScheduledEmailType -> Date -> ScheduledEmail
            createScheduledEmail emailType baseDate =
                let
                    scheduledTime : Date
                    scheduledTime =
                        nextOccurrence emailType baseDate

                    ( finalScheduledTime, birthdayRuleStatus ) =
                        checkBirthdayRuleDelay emailType scheduledTime

                    status : ScheduledEmailStatus
                    status =
                        if Date.compare scheduledTime schedule.currentDate == LT then
                            -- Skip if the date is in the past
                            Skipped "Date is in the past"

                        else if
                            Date.compare scheduledTime oneYearAfterEffective
                                == LT
                                && Date.compare scheduledTime schedule.effectiveDate
                                == GT
                        then
                            Skipped "Within first year of effective date"

                        else
                            birthdayRuleStatus
                in
                { emailType = emailType
                , scheduledTime =
                    if status == Delayed "due to birthday rule window" || status == Delayed "due to anniversary rule window" then
                        finalScheduledTime

                    else
                        scheduledTime
                , status = status
                }

            -- Helper function to create plan-specific emails for each event type.
            planSpecificEmail : ScheduledEmailType -> ScheduledEmail
            planSpecificEmail emailType =
                let
                    baseDate =
                        case emailType of
                            Birthday ->
                                schedule.birthDate

                            Anniversary ->
                                schedule.effectiveDate

                            NewYear ->
                                -- For New Year, we don't need a base date since we always use Jan 1
                                Date.fromCalendarDate (Date.year schedule.currentDate) Jan 1

                            OctoberBlast ->
                                -- For October blast, we don't need a base date since we always use Oct 1
                                Date.fromCalendarDate (Date.year schedule.currentDate) Oct 1

                            NoEmails ->
                                schedule.currentDate
                in
                createScheduledEmail emailType baseDate

            emails =
                [ planSpecificEmail Birthday
                , planSpecificEmail Anniversary
                , planSpecificEmail NewYear
                , planSpecificEmail OctoberBlast
                ]
        in
        -- Include both scheduled and delayed emails, but filter out skipped ones
        List.filter
            (\email ->
                case email.status of
                    Scheduled ->
                        True

                    Delayed _ ->
                        True

                    Skipped _ ->
                        False
            )
            emails
            |> List.sortWith
                (\a b ->
                    Date.compare a.scheduledTime b.scheduledTime
                )



-- VIEW FUNCTIONS


{-| Displays a table of future scheduled emails.

  - `scheduledEmails`: The list of scheduled emails to display.
    Returns an HTML view with a table showing the email type, scheduled date, and status.

-}
viewFutureActivity : List ScheduledEmail -> Html msg
viewFutureActivity scheduledEmails =
    div []
        [ h2 [ class "text-lg font-medium text-gray-900 mb-4" ] [ text "Future Activity" ]
        , table [ class "min-w-full divide-y divide-gray-300" ]
            [ thead [ class "bg-gray-50" ]
                [ tr []
                    [ th [ class "px-3 py-3.5 text-left text-sm font-semibold text-gray-900" ] [ text "TYPE" ]
                    , th [ class "px-3 py-3.5 text-left text-sm font-semibold text-gray-900" ] [ text "SCHEDULED DATE" ]
                    , th [ class "px-3 py-3.5 text-left text-sm font-semibold text-gray-900" ] [ text "STATUS" ]
                    ]
                ]
            , tbody [ class "divide-y divide-gray-200 bg-white" ]
                (List.map
                    (\email ->
                        tr [ class "hover:bg-gray-50" ]
                            [ td [ class "px-3 py-2 text-sm text-gray-900" ]
                                [ text (scheduledEmailTypeToString email.emailType) ]
                            , td [ class "px-3 py-2 text-sm text-gray-900" ]
                                [ text (Date.format "MMMM ddd, yyyy" email.scheduledTime) ]
                            , td [ class "px-3 py-2 text-sm" ]
                                [ case email.status of
                                    Scheduled ->
                                        span [ class "text-green-600" ] [ text "Scheduled" ]

                                    Skipped reason ->
                                        span [ class "text-orange-600" ] [ text ("Skipped: " ++ reason) ]

                                    Delayed reason ->
                                        span [ class "text-blue-600" ] [ text ("Scheduled - Delayed " ++ reason) ]
                                ]
                            ]
                    )
                    scheduledEmails
                )
            ]
        ]


{-| Displays a single scheduled email as a table row.

  - `email`: The scheduled email to display.
    Returns an HTML table row with the email type, scheduled date, and status.

-}
viewScheduledEmail : ScheduledEmail -> Html msg
viewScheduledEmail email =
    tr [ class "hover:bg-gray-50" ]
        [ td [ class "px-3 py-2 text-sm text-gray-900" ]
            [ text (scheduledEmailTypeToString email.emailType) ]
        , td [ class "px-3 py-2 text-sm text-gray-900" ]
            [ text (Date.format "MMMM ddd, y" email.scheduledTime) ]
        , td [ class "px-3 py-2 text-sm" ]
            [ case email.status of
                Scheduled ->
                    span [ class "text-green-600" ] [ text "Scheduled" ]

                Skipped reason ->
                    span [ class "text-orange-600" ] [ text ("Skipped: " ++ reason) ]

                Delayed reason ->
                    span [ class "text-blue-600" ] [ text ("Delayed " ++ reason) ]
            ]
        ]


{-| Converts a scheduled email type to a human-readable string.

  - `emailType`: The scheduled email type to convert.
    Returns a string representation, including the plan type (e.g., "Birthday (Plan N)").

-}
scheduledEmailTypeToString : ScheduledEmailType -> String
scheduledEmailTypeToString emailType =
    case emailType of
        Birthday ->
            "Birthday"

        Anniversary ->
            "Anniversary"

        NewYear ->
            "New Year"

        OctoberBlast ->
            "AEP Blast"

        NoEmails ->
            "No Scheduled Emails"

================
File: src/Home.elm
================
module Home exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick)
import Http
import Json.Decode as Decode
import Ports exposing (clearSessionCookie)



-- MODEL


type alias Model =
    { key : Nav.Key
    , sessionState : SessionState
    }


type SessionState
    = Unknown
    | Checking
    | Valid
    | Invalid


type Msg
    = CheckSession
    | GotSessionResponse (Result Http.Error SessionResponse)
    | NavigateTo String
    | NavigateSignup
    | NoOp


type alias SessionResponse =
    { valid : Bool }


init : Nav.Key -> ( Model, Cmd Msg )
init key =
    ( { key = key
      , sessionState = Unknown
      }
    , checkSession
    )


checkSession : Cmd Msg
checkSession =
    Http.get
        { url = "/api/auth/session"
        , expect = Http.expectJson GotSessionResponse sessionResponseDecoder
        }


sessionResponseDecoder : Decode.Decoder SessionResponse
sessionResponseDecoder =
    Decode.map SessionResponse
        (Decode.field "valid" Decode.bool)



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        CheckSession ->
            ( { model | sessionState = Checking }
            , checkSession
            )

        GotSessionResponse result ->
            case result of
                Ok response ->
                    ( { model
                        | sessionState =
                            if response.valid then
                                Valid

                            else
                                Invalid
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model | sessionState = Invalid }
                    , Cmd.none
                    )

        NavigateTo path ->
            case ( path, model.sessionState ) of
                ( "/login", Valid ) ->
                    -- If trying to go to login but already logged in, go to dashboard
                    ( model, Nav.pushUrl model.key "/dashboard" )

                _ ->
                    -- Otherwise go to requested path
                    ( model, Nav.pushUrl model.key path )

        NavigateSignup ->
            -- Direct navigation to onboarding plan
            ( model
            , Nav.pushUrl model.key "/onboarding/plan"
            )

        NoOp ->
            ( model, Cmd.none )



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Medicare Max - Automate Client Retention"
    , body =
        [ div [ class "min-h-screen bg-white" ]
            [ nav [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6" ]
                [ div [ class "flex justify-between items-center" ]
                    [ div [ class "flex items-center" ]
                        [ img
                            [ src "/images/medicare-max-logo.png"
                            , class "h-8 w-auto"
                            , alt "Medicare Max logo"
                            ]
                            []
                        ]
                    , div [ class "flex items-center space-x-4" ]
                        [ button
                            [ onClick (NavigateTo "/login")
                            , class "text-gray-600 hover:text-gray-900 px-4 py-2 text-sm font-medium"
                            ]
                            [ text "Log in" ]
                        , button
                            [ onClick NavigateSignup
                            , class "bg-[#0A0F4F] text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-[#1a1f5f] transition-colors duration-200"
                            ]
                            [ text "Sign up" ]
                        ]
                    ]
                ]
            , div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-24 pb-32" ]
                [ div [ class "lg:grid lg:grid-cols-12 lg:gap-8" ]
                    [ div [ class "sm:text-center md:max-w-2xl md:mx-auto lg:col-span-6 lg:text-left" ]
                        [ div [ class "inline-flex items-center space-x-2 bg-[#F4F3FF] rounded-full px-4 py-1.5 mb-8" ]
                            [ span [ class "text-sm font-medium text-[#0A0F4F]" ] [ text "What's new?" ]
                            , span [ class "text-sm text-gray-600" ] [ text "Instantly issue virtual cards" ]
                            ]
                        , h1
                            [ class "text-5xl tracking-tight font-bold text-gray-900 sm:text-6xl md:text-7xl" ]
                            [ text "Automate client retention." ]
                        , p
                            [ class "mt-6 text-lg text-gray-600 leading-relaxed" ]
                            [ text "Automatically engage clients in key moments of their medigap journey, and sit back as they enroll" ]
                        , div [ class "mt-10" ]
                            [ button
                                [ onClick NavigateSignup
                                , class "inline-flex items-center px-6 py-3 rounded-lg text-base font-medium text-white bg-[#0A0F4F] hover:bg-[#1a1f5f] transition-colors duration-200"
                                ]
                                [ text "Sign up" ]
                            ]
                        ]
                    , div [ class "mt-16 relative sm:max-w-lg sm:mx-auto lg:mt-0 lg:max-w-none lg:mx-0 lg:col-span-6 lg:flex lg:items-center" ]
                        [ div [ class "relative mx-auto w-full rounded-2xl shadow-xl overflow-hidden bg-gray-100" ]
                            [ img
                                [ src "/images/dashboard.png"
                                , class "w-full"
                                , alt "Dashboard preview"
                                ]
                                []
                            ]
                        ]
                    ]
                ]
            , div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16" ]
                [ p [ class "text-center text-gray-600 mb-12" ]
                    [ text "Join 200+ companies retaining their clients" ]
                , div [ class "grid grid-cols-2 gap-8 md:grid-cols-5 items-center justify-items-center" ]
                    [ img [ src "/company-logos/bitshift.svg", class "h-8", alt "Bitshift logo" ] []
                    , img [ src "/company-logos/lightbox.svg", class "h-8", alt "Lightbox logo" ] []
                    , img [ src "/company-logos/greenway.svg", class "h-8", alt "Greenway logo" ] []
                    , img [ src "/company-logos/skyline.svg", class "h-8", alt "Skyline logo" ] []
                    , img [ src "/company-logos/clockwork.svg", class "h-8", alt "Clockwork logo" ] []
                    ]
                ]
            ]
        ]
    }



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Login.elm
================
module Login exposing (Model, Msg, init, subscriptions, update, view)

import Basics
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onInput, onSubmit)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import Time
import Url
import Url.Parser as Parser exposing ((</>), (<?>), Parser, s, string)
import Url.Parser.Query as Query


type alias Model =
    { email : String
    , status : Status
    , isLoggedIn : Bool
    , key : Nav.Key
    , resendAvailableAt : Maybe Time.Posix
    , isFromOnboarding : Bool
    , prefilledEmail : Maybe String
    }


type Status
    = Idle
    | Submitting
    | Success
    | Failed String
    | LinkSent


type alias LoginResponse =
    { success : Bool
    }


type alias SessionCheckResponse =
    { valid : Bool }


type Msg
    = EmailChanged String
    | SubmitForm
    | GotLoginResponse (Result Http.Error LoginResponse)
    | GotSessionCheck (Result Http.Error SessionCheckResponse)
    | LogOut
    | NoOp
    | CheckResendAvailable Time.Posix
    | ResendLink


init : Nav.Key -> Bool -> Url.Url -> ( Model, Cmd Msg )
init key isLoggedIn url =
    let
        queryParams =
            extractQueryParams url
    in
    ( { email = Maybe.withDefault "" queryParams.email
      , status = Idle
      , isLoggedIn = isLoggedIn
      , key = key
      , resendAvailableAt = Nothing
      , isFromOnboarding = queryParams.onboarding
      , prefilledEmail = queryParams.email
      }
    , Cmd.none
    )



-- Helper to extract query parameters


extractQueryParams : Url.Url -> { onboarding : Bool, email : Maybe String }
extractQueryParams url =
    let
        parser =
            Query.map2
                (\onboarding email -> { onboarding = onboarding == Just "completed", email = email })
                (Query.string "onboarding")
                (Query.string "email")

        route =
            { url | path = "" }
                |> Parser.parse (Parser.top <?> parser)
    in
    Maybe.withDefault { onboarding = False, email = Nothing } route


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        EmailChanged email ->
            ( { model | email = email, status = Idle }
            , Cmd.none
            )

        SubmitForm ->
            if String.isEmpty model.email then
                ( { model | status = Failed "Please enter your email address" }
                , Cmd.none
                )

            else
                ( { model | status = Submitting }
                , Http.get
                    { url = "/api/auth/session"
                    , expect = Http.expectJson GotSessionCheck sessionCheckDecoder
                    }
                )

        GotSessionCheck result ->
            case result of
                Ok response ->
                    if response.valid then
                        -- If session is valid, redirect to dashboard
                        ( model
                        , Nav.pushUrl model.key "/dashboard"
                        )

                    else
                        -- If no valid session, proceed with login
                        let
                            -- Set resend cooldown to 60 seconds from now
                            now =
                                Time.millisToPosix 0

                            -- Placeholder, would normally use actual current time
                            cooldownTime =
                                Time.millisToPosix (Time.posixToMillis now + 60000)
                        in
                        ( { model | resendAvailableAt = Just cooldownTime }
                        , Http.post
                            { url = "/api/auth/login"
                            , body = Http.jsonBody (encodeLoginBody model.email)
                            , expect = Http.expectJson GotLoginResponse loginResponseDecoder
                            }
                        )

                Err _ ->
                    -- On error checking session, proceed with normal login flow
                    let
                        -- Set resend cooldown to 60 seconds from now
                        now =
                            Time.millisToPosix 0

                        -- Placeholder, would normally use actual current time
                        cooldownTime =
                            Time.millisToPosix (Time.posixToMillis now + 60000)
                    in
                    ( { model | resendAvailableAt = Just cooldownTime }
                    , Http.post
                        { url = "/api/auth/login"
                        , body = Http.jsonBody (encodeLoginBody model.email)
                        , expect = Http.expectJson GotLoginResponse loginResponseDecoder
                        }
                    )

        NoOp ->
            ( model, Cmd.none )

        LogOut ->
            ( { model
                | isLoggedIn = False
                , status = Idle
              }
            , Http.post
                { url = "/api/auth/logout"
                , body = Http.emptyBody
                , expect = Http.expectWhatever (\_ -> NoOp)
                }
            )

        GotLoginResponse result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model | status = LinkSent }
                        , Cmd.none
                        )

                    else
                        ( { model | status = Failed "Failed to send login link. Please try again." }
                        , Cmd.none
                        )

                Err _ ->
                    ( { model | status = Failed "Failed to send login link. Please try again." }
                    , Cmd.none
                    )

        CheckResendAvailable currentTime ->
            case model.resendAvailableAt of
                Just availableAt ->
                    if Time.posixToMillis currentTime >= Time.posixToMillis availableAt then
                        ( { model | resendAvailableAt = Nothing }, Cmd.none )

                    else
                        ( model, Cmd.none )

                Nothing ->
                    ( model, Cmd.none )

        ResendLink ->
            update SubmitForm model


viewLoginForm : Model -> { title : String, body : List (Html Msg) }
viewLoginForm model =
    { title = "Login"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8" ]
            [ div [ class "sm:mx-auto sm:w-full sm:max-w-md" ]
                [ h2 [ class "mt-6 text-center text-3xl font-extrabold text-gray-900" ]
                    [ if model.isFromOnboarding then
                        text "Activate Your Account"

                      else
                        text "Welcome Back To MedicareMax"
                    ]
                ]
            , div [ class "mt-8 sm:mx-auto sm:w-full sm:max-w-md" ]
                [ div [ class "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10" ]
                    [ if model.isFromOnboarding then
                        div [ class "mb-6 bg-blue-50 p-4 rounded-md border border-blue-200" ]
                            [ p [ class "text-blue-800" ]
                                [ text "Your account has been created successfully! Please check your email for an activation link to continue to your new account." ]
                            ]

                      else
                        text ""
                    , Html.form [ onSubmit SubmitForm ]
                        [ div []
                            [ label [ for "email", class "block text-sm font-medium text-gray-700" ]
                                [ text "Email address" ]
                            , div [ class "mt-1" ]
                                [ input
                                    [ type_ "email"
                                    , name "email"
                                    , id "email"
                                    , class "appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                    , placeholder "you@example.com"
                                    , value model.email
                                    , onInput EmailChanged
                                    ]
                                    []
                                ]
                            ]
                        , div [ class "mt-6" ]
                            [ button
                                [ type_ "submit"
                                , class "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                                ]
                                [ text "Send login link" ]
                            ]
                        ]
                    , viewStatus model.status model
                    , div [ class "mt-4 text-center text-sm" ]
                        [ text "Not Yet a MedicareMax User? "
                        , a [ href "/signup", class "font-medium text-indigo-600 hover:text-indigo-500" ]
                            [ text "Sign Up Here" ]
                        ]
                    ]
                ]
            ]
        ]
    }


viewStatus : Status -> Model -> Html Msg
viewStatus status model =
    case status of
        LinkSent ->
            div [ class "mt-4 p-4 bg-green-50 rounded-md" ]
                [ p [ class "text-sm text-green-700 text-center" ]
                    [ p [ class "mb-2" ] [ text "If your email is registered, you'll receive a login link soon." ]
                    , p [] [ text "Check your inbox and spam folder." ]
                    ]
                , div [ class "mt-2 text-center" ]
                    [ viewResendLink model ]
                ]

        Failed error ->
            div [ class "mt-4 p-4 bg-red-50 rounded-md" ]
                [ p [ class "text-sm text-red-700" ]
                    [ text error ]
                ]

        Submitting ->
            div [ class "mt-4 text-center text-gray-600" ]
                [ text "Sending login link..." ]

        _ ->
            text ""


viewResendLink : Model -> Html Msg
viewResendLink model =
    case model.resendAvailableAt of
        Just availableAt ->
            let
                currentTime =
                    Time.millisToPosix 0

                -- Placeholder, would normally use actual current time
                diff =
                    Basics.max 0 ((Time.posixToMillis availableAt - Time.posixToMillis currentTime) // 1000)
            in
            if diff <= 0 then
                button
                    [ onClick ResendLink
                    , class "text-sm text-blue-600 hover:text-blue-800 underline"
                    ]
                    [ text "Resend link" ]

            else
                span [ class "text-sm text-gray-600" ]
                    [ text ("Resend link in " ++ String.fromInt diff ++ " seconds") ]

        Nothing ->
            button
                [ onClick ResendLink
                , class "text-sm text-blue-600 hover:text-blue-800 underline"
                ]
                [ text "Resend link" ]


encodeLoginBody : String -> Encode.Value
encodeLoginBody email =
    Encode.object
        [ ( "email", Encode.string email )
        ]


loginResponseDecoder : Decode.Decoder LoginResponse
loginResponseDecoder =
    Decode.map LoginResponse
        (Decode.field "success" Decode.bool)


sessionCheckDecoder : Decode.Decoder SessionCheckResponse
sessionCheckDecoder =
    Decode.map SessionCheckResponse
        (Decode.field "valid" Decode.bool)


subscriptions : Model -> Sub Msg
subscriptions model =
    case model.resendAvailableAt of
        Just _ ->
            Time.every 1000 CheckResendAvailable

        Nothing ->
            Sub.none


view : Model -> { title : String, body : List (Html Msg) }
view model =
    if model.isLoggedIn then
        { title = "Already Logged In"
        , body =
            [ div [ class "min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8" ]
                [ div [ class "sm:mx-auto sm:w-full sm:max-w-md" ]
                    [ h2 [ class "mt-6 text-center text-3xl font-extrabold text-gray-900" ]
                        [ text "Already Logged In" ]
                    , div [ class "mt-8 sm:mx-auto sm:w-full sm:max-w-md" ]
                        [ div [ class "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10" ]
                            [ p [ class "text-center text-gray-600 mb-6" ]
                                [ text "You are already logged in." ]
                            , button
                                [ onClick LogOut
                                , class "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                                ]
                                [ text "Log Out" ]
                            ]
                        ]
                    ]
                ]
            ]
        }

    else
        viewLoginForm model

================
File: src/Logout.elm
================
module Logout exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Http


type alias Model =
    { key : Nav.Key }


type Msg
    = LogoutCompleted (Result Http.Error ())
    | NoOp


init : Nav.Key -> ( Model, Cmd Msg )
init key =
    ( { key = key }
    , Http.post
        { url = "/api/auth/logout"
        , body = Http.emptyBody
        , expect = Http.expectWhatever LogoutCompleted
        }
    )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        LogoutCompleted (Ok _) ->
            ( model
            , Nav.load "/"
            )

        LogoutCompleted (Err _) ->
            -- Even if the logout request fails, we'll redirect to home
            ( model
            , Nav.load "/"
            )

        NoOp ->
            ( model, Cmd.none )


view : Model -> Browser.Document Msg
view _ =
    { title = "Logging out..."
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex items-center justify-center" ]
            [ div [ class "animate-spin rounded-full h-8 w-8 border-2 border-purple-500 border-t-transparent" ] []
            ]
        ]
    }


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Main.elm
================
module Main exposing (main)

import AddAgent
import Browser exposing (Document)
import Browser.Events
import Browser.Navigation as Nav
import ChangePlan
import ChoosePlan
import Compare exposing (CompareParams)
import Components.AccountStatusBanner as AccountStatusBanner
import Contact
import Contacts
import Dashboard
import Eligibility
import Home
import Html exposing (Html, a, button, div, h1, img, nav, p, text)
import Html.Attributes exposing (alt, class, href, src)
import Html.Events exposing (onClick, stopPropagationOn)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as E
import Login
import Logout
import Onboarding.Onboarding as Onboarding
import Process
import Profile
import Quote
import Schedule
import Settings
import Signup
import Svg exposing (path, svg)
import Svg.Attributes exposing (d, fill, viewBox)
import Task
import TempLanding
import Url exposing (Url)
import Url.Parser as Parser exposing ((</>), (<?>), Parser, map, oneOf, s, string, top)
import Url.Parser.Query as Query
import Walkthrough



-- ONBOARDING STEP TYPES


type OnboardingStep
    = PlanStep
    | PersonalStep
    | CompanyStep
    | LicensingStep
    | AgentsStep
    | PaymentStep
    | EnterpriseStep



-- PORTS
-- Send a message to JavaScript to clear the session cookie


type alias VerificationResponse =
    { success : Bool
    , redirectUrl : String
    , session : String
    , email : String
    , orgSlug : String
    }


type alias SessionResponse =
    { valid : Bool
    , session : String
    , email : String
    , organizationSlug : String
    , firstName : String
    , lastName : String
    , id : String
    }


verificationDecoder : Decoder VerificationResponse
verificationDecoder =
    Decode.map5 VerificationResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "redirectUrl" Decode.string)
        (Decode.field "session" Decode.string)
        (Decode.field "email" Decode.string)
        (Decode.field "orgSlug" Decode.string)


sessionDecoder : Decoder SessionResponse
sessionDecoder =
    Decode.map7 SessionResponse
        (Decode.field "valid" Decode.bool)
        (Decode.field "session" Decode.string)
        (Decode.field "email" Decode.string)
        (Decode.field "organizationSlug" Decode.string)
        (Decode.oneOf
            [ Decode.field "firstName" Decode.string
            , Decode.field "first_name" Decode.string
            ]
        )
        (Decode.oneOf
            [ Decode.field "lastName" Decode.string
            , Decode.field "last_name" Decode.string
            ]
        )
        (Decode.field "id" (Decode.map String.fromInt Decode.int))


type Role
    = AdminOnly
    | AdminAgent
    | AgentOnly


type alias User =
    { id : String
    , email : String
    , isAdmin : Bool
    , isAgent : Bool
    , organizationSlug : String
    , organizationId : String
    , firstName : String
    , lastName : String
    , subscriptionTier : String
    , accountStatus : Maybe AccountStatusBanner.AccountStatusDetails
    }



-- Account status types


type alias AccountStatus =
    String


type alias AccountStatusDetails =
    { status : AccountStatus
    , message : String
    , organizationId : Int
    , organizationName : String
    , organizationSlug : String
    , subscriptionTier : String
    , subscriptionStatus : String
    , agentLimit : Int
    , contactLimit : Int
    , currentAgentCount : Int
    , currentContactCount : Int
    , billingCycleEnd : Maybe String
    , paymentFailureCount : Int
    }


type alias Model =
    { key : Nav.Key
    , url : Url
    , page : Page
    , session : SessionState
    , currentUser : Maybe User
    , isSetup : Bool
    , intendedDestination : Maybe String
    , showDropdown : Bool
    , showStatusBanner : Bool
    }


type SessionState
    = Unknown -- Initial state
    | Verified String -- Has valid session
    | NoSession -- Definitely no valid session


type Page
    = NotFoundPage
    | LoginPage Login.Model
    | ContactsPage Contacts.Model
    | TempLandingPage TempLanding.Model
    | SettingsPage Settings.Model
    | Signup Signup.Model
    | ChoosePlanPage ChoosePlan.Model
    | ChangePlanPage ChangePlan.Model
    | AddAgentsPage AddAgent.Model
    | ProfilePage Profile.Model
    | LoadingPage
    | HomePage Home.Model
    | ContactPage Contact.Model
    | ComparePage Compare.Model
    | QuotePage Quote.Model
    | EligibilityPage Eligibility.Model
    | SchedulePage Schedule.Model
    | DashboardPage Dashboard.Model
    | LogoutPage Logout.Model
    | OnboardingPage Onboarding.Model
    | WalkthroughPage Walkthrough.Model


type Msg
    = LinkClicked Browser.UrlRequest
    | InternalLinkClicked String
    | UrlChanged Url
    | LoginMsg Login.Msg
    | ContactsMsg Contacts.Msg
    | TempLandingMsg TempLanding.Msg
    | SettingsMsg Settings.Msg
    | SignupMsg Signup.Msg
    | ChoosePlanMsg ChoosePlan.Msg
    | ChangePlanMsg ChangePlan.Msg
    | AddAgentsMsg AddAgent.Msg
    | GotVerification (Result Http.Error VerificationResponse)
    | GotSession (Result Http.Error SessionResponse)
    | ProfileMsg Profile.Msg
    | HomeMsg Home.Msg
    | ContactMsg Contact.Msg
    | CompareMsg Compare.Msg
    | QuoteMsg Quote.Msg
    | EligibilityMsg Eligibility.Msg
    | ScheduleMsg Schedule.Msg
    | DashboardMsg Dashboard.Msg
    | NoOp
    | GotCurrentUser (Result Http.Error CurrentUserResponse)
    | OrgFinalized (Result Http.Error ())
    | LogoutMsg Logout.Msg
    | OnboardingMsg Onboarding.Msg
    | ToggleDropdown
    | CloseDropdown
    | InitiateLogout
    | GotAccountStatus (Result Http.Error AccountStatusResponse)
    | CloseStatusBanner
    | WalkthroughMsg Walkthrough.Msg
    | ShowDropdown
    | HideDropdown
    | ToggleStatusBanner
    | PerformRedirect String
    | DirectPageUpdate


type alias Flags =
    { initialSession : Maybe String }


type alias CompareFlags =
    { state : String
    , zip : String
    , county : String
    , gender : String
    , tobacco : Bool
    , age : Int
    , planType : String
    , currentCarrier : Maybe String
    , dateOfBirth : String
    , quoteId : Maybe String
    }


main : Program Flags Model Msg
main =
    Browser.application
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        , onUrlChange = UrlChanged
        , onUrlRequest = LinkClicked
        }


type alias AccountStatusResponse =
    { success : Bool
    , status : AccountStatusDetails
    }


accountStatusDecoder : Decoder AccountStatusDetails
accountStatusDecoder =
    Decode.succeed AccountStatusDetails
        |> Pipeline.required "status" Decode.string
        |> Pipeline.required "message" Decode.string
        |> Pipeline.required "organizationId" Decode.int
        |> Pipeline.required "organizationName" Decode.string
        |> Pipeline.required "organizationSlug" Decode.string
        |> Pipeline.required "subscriptionTier" Decode.string
        |> Pipeline.required "subscriptionStatus" Decode.string
        |> Pipeline.required "agentLimit" Decode.int
        |> Pipeline.required "contactLimit" Decode.int
        |> Pipeline.required "currentAgentCount" Decode.int
        |> Pipeline.required "currentContactCount" Decode.int
        |> Pipeline.optional "billingCycleEnd" (Decode.nullable Decode.string) Nothing
        |> Pipeline.required "paymentFailureCount" Decode.int


accountStatusResponseDecoder : Decoder AccountStatusResponse
accountStatusResponseDecoder =
    Decode.succeed AccountStatusResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "status" accountStatusDecoder


init : Flags -> Url.Url -> Nav.Key -> ( Model, Cmd Msg )
init flags url key =
    let
        initialSession =
            case flags.initialSession of
                Just session ->
                    Verified session

                Nothing ->
                    Unknown

        -- Parse the initial route to determine if we're on a public page
        initialRoute =
            Parser.parse routeParser url

        -- Determine if this is a public route that can be rendered immediately
        isPublicRoute =
            case initialRoute of
                Just (PublicRoute _) ->
                    True

                _ ->
                    False

        -- Set initial page appropriately
        initialPage =
            if isPublicRoute then
                -- For public routes, we'll immediately handle this in updatePageForcePublic below
                LoadingPage

            else
                -- For protected routes, we need to wait for session verification
                LoadingPage

        model =
            { key = key
            , url = url
            , page = initialPage
            , session = initialSession
            , currentUser = Nothing
            , isSetup = False
            , intendedDestination = Nothing
            , showDropdown = False
            , showStatusBanner = True
            }

        checkSession =
            Http.get
                { url = "/api/auth/session"
                , expect = Http.expectJson GotSession sessionDecoder
                }

        -- Use a very short timer for the initial direct page update for public routes
        directPageUpdate =
            Task.perform (\_ -> DirectPageUpdate) (Process.sleep 50)

        -- Check session and also immediately try to render public routes
        cmds =
            case initialSession of
                Verified _ ->
                    -- If we have a session, also fetch the current user immediately
                    Cmd.batch [ checkSession, fetchCurrentUser, directPageUpdate ]

                _ ->
                    Cmd.batch [ checkSession, directPageUpdate ]
    in
    -- For public routes, immediately try to render without waiting for session
    if isPublicRoute then
        -- Try to render public route immediately
        updatePageForcePublic url ( model, cmds )

    else
        -- For protected routes, wait for session verification
        ( model, cmds )


type alias CompareParams =
    { state : String
    , zip : String
    , county : String
    , gender : String
    , tobacco : Bool
    , age : Int
    , planType : String
    , currentCarrier : Maybe String
    , dateOfBirth : String
    , quoteId : Maybe String
    , trackingId : Maybe String
    }


type alias CompareParamsPartial1 =
    { state : String
    , zip : String
    , county : String
    , gender : String
    }


type alias CompareParamsPartial2 =
    { tobacco : Bool
    , age : Int
    , planType : String
    , currentCarrier : Maybe String
    }


type Route
    = PublicRoute PublicPage
    | ProtectedRoute ProtectedPage
    | AdminRoute AdminPage
    | SetupRoute SetupPage
    | NotFound


type VerifyParams
    = VerifyParams String String


type PublicPage
    = HomeRoute
    | LoginRoute
    | SignupRoute
    | OnboardingRoute OnboardingStep
    | VerifyRoute VerifyParams
    | CompareRoute CompareParams
    | QuoteRoute ( Maybe String, Maybe String, Maybe String )
    | EligibilityRoute ( Maybe String, Maybe String )
    | ScheduleRoute ( Maybe String, Maybe String, Maybe String )


type ProtectedPage
    = ContactsRoute
    | ProfileRoute
    | TempLandingRoute
    | ContactRoute String
    | DashboardRoute
    | ChangePlanRoute
    | WalkthroughRoute


type AdminPage
    = SettingsRoute
    | AgentsRoute


type SetupPage
    = ChoosePlanRoute (Maybe SetupProgress)
    | SetupSettingsRoute (Maybe SetupProgress)
    | AddAgentsRoute (Maybe SetupProgress)


type alias SetupProgress =
    { plan : Maybe String
    , orgSettings : Bool
    }


type RouteAccess
    = Public -- No auth needed (login, home)
    | Protected -- Requires valid session
    | Setup -- Special setup flow routes


setupProgressDecoder : Query.Parser (Maybe SetupProgress)
setupProgressDecoder =
    Query.map2
        (\plan org ->
            case ( plan, org ) of
                ( Just p, Just o ) ->
                    Just
                        { plan = Just p
                        , orgSettings = o == "complete"
                        }

                _ ->
                    Nothing
        )
        (Query.string "plan")
        (Query.string "org")


compareParamsParser : Query.Parser CompareParams
compareParamsParser =
    let
        part1 =
            Query.map4 CompareParamsPartial1
                (Query.string "state" |> Query.map (Maybe.withDefault "TX"))
                (Query.string "zip" |> Query.map (Maybe.withDefault "75201"))
                (Query.string "county" |> Query.map (Maybe.withDefault "Dallas"))
                (Query.string "gender" |> Query.map (Maybe.withDefault "Male"))

        part2 =
            Query.map4 CompareParamsPartial2
                (Query.string "tobacco" |> Query.map (Maybe.map (\t -> t == "yes") >> Maybe.withDefault False))
                (Query.string "age" |> Query.map (Maybe.andThen String.toInt >> Maybe.withDefault 65))
                (Query.string "planType" |> Query.map (Maybe.withDefault "G"))
                (Query.string "currentCarrier")

        combineParams p1 p2 dateOfBirth quoteId trackingId =
            { state = p1.state
            , zip = p1.zip
            , county = p1.county
            , gender = p1.gender
            , tobacco = p2.tobacco
            , age = p2.age
            , planType = p2.planType
            , currentCarrier = p2.currentCarrier
            , dateOfBirth = dateOfBirth
            , quoteId = quoteId
            , trackingId = trackingId
            }
    in
    Query.map5 combineParams
        part1
        part2
        (Query.string "dateOfBirth" |> Query.map (Maybe.withDefault ""))
        (Query.string "id")
        (Query.string "tid")


routeParser : Parser (Route -> a) a
routeParser =
    oneOf
        [ map (PublicRoute HomeRoute) top
        , map (PublicRoute LoginRoute) (s "login")
        , map (PublicRoute SignupRoute) (s "signup")
        , map (PublicRoute (OnboardingRoute PlanStep)) (s "onboarding" </> s "plan")
        , map (PublicRoute (OnboardingRoute PersonalStep)) (s "onboarding" </> s "personal")
        , map (PublicRoute (OnboardingRoute CompanyStep)) (s "onboarding" </> s "company")
        , map (PublicRoute (OnboardingRoute LicensingStep)) (s "onboarding" </> s "licensing")
        , map (PublicRoute (OnboardingRoute AgentsStep)) (s "onboarding" </> s "agents")
        , map (PublicRoute (OnboardingRoute PaymentStep)) (s "onboarding" </> s "payment")
        , map (PublicRoute (OnboardingRoute EnterpriseStep)) (s "onboarding" </> s "enterprise")
        , map (PublicRoute (OnboardingRoute PlanStep)) (s "onboarding") -- Default to plan step
        , map (\orgSlug -> \token -> PublicRoute (VerifyRoute (VerifyParams orgSlug token)))
            (s "auth" </> s "verify" </> string </> string)
        , map (PublicRoute << CompareRoute) (s "compare" <?> compareParamsParser)
        , map (PublicRoute << QuoteRoute)
            (s "quote"
                <?> Query.map3 (\id tid planType -> ( id, tid, planType ))
                        (Query.string "id")
                        (Query.string "tid")
                        (Query.string "planType")
            )
        , map (PublicRoute << EligibilityRoute)
            (s "eligibility"
                <?> Query.map2 Tuple.pair
                        (Query.string "id")
                        (Query.string "tid")
            )
        , map (PublicRoute << ScheduleRoute)
            (s "schedule"
                <?> Query.map3 (\id status tid -> ( id, status, tid ))
                        (Query.string "id")
                        (Query.string "status")
                        (Query.string "tid")
            )
        , map (ProtectedRoute ChangePlanRoute) (s "change-plan")
        , map (ProtectedRoute ContactsRoute) (s "contacts")
        , map (AdminRoute SettingsRoute) (s "settings")
        , map (ProtectedRoute ProfileRoute) (s "profile")
        , map (ProtectedRoute TempLandingRoute) (s "templanding")
        , map (ProtectedRoute WalkthroughRoute) (s "walkthrough")
        , map (AdminRoute AgentsRoute) (s "add-agents")
        , map (ProtectedRoute DashboardRoute) (s "dashboard")
        , map (\id -> ProtectedRoute (ContactRoute id)) (s "contact" </> string)
        , map (\progress -> SetupRoute (ChoosePlanRoute progress))
            (s "choose-plan" <?> setupProgressDecoder)
        , map (\progress -> SetupRoute (SetupSettingsRoute progress))
            (s "setup" </> s "settings" <?> setupProgressDecoder)
        , map (\progress -> SetupRoute (AddAgentsRoute progress))
            (s "setup" </> s "add-agents" <?> setupProgressDecoder)
        ]


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        DirectPageUpdate ->
            -- Force updatePage even if we're in Unknown session state
            updatePageForcePublic model.url ( model, Cmd.none )

        LinkClicked urlRequest ->
            case urlRequest of
                Browser.Internal url ->
                    ( model
                    , Nav.pushUrl model.key (Url.toString url)
                    )

                Browser.External href ->
                    ( model
                    , Nav.load href
                    )

        InternalLinkClicked frag ->
            ( { model | showDropdown = False }
            , Nav.pushUrl model.key frag
            )

        UrlChanged url ->
            ( { model | url = url }
            , Cmd.none
            )
                |> updatePage url

        LoginMsg subMsg ->
            case model.page of
                LoginPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Login.update subMsg pageModel
                    in
                    ( { model | page = LoginPage newPageModel }
                    , Cmd.map LoginMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ContactsMsg subMsg ->
            case model.page of
                ContactsPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Contacts.update subMsg pageModel
                    in
                    ( { model | page = ContactsPage newPageModel }
                    , Cmd.map ContactsMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        TempLandingMsg subMsg ->
            case model.page of
                TempLandingPage pageModel ->
                    case subMsg of
                        TempLanding.NavigateTo path ->
                            ( model
                            , Nav.pushUrl model.key path
                            )

                _ ->
                    ( model, Cmd.none )

        SettingsMsg subMsg ->
            case model.page of
                SettingsPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Settings.update subMsg pageModel
                    in
                    ( { model | page = SettingsPage newPageModel }
                    , Cmd.map SettingsMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        SignupMsg subMsg ->
            case model.page of
                Signup signupModel ->
                    let
                        ( newSignupModel, newCmd ) =
                            Signup.update subMsg signupModel
                    in
                    ( { model | page = Signup newSignupModel }
                    , Cmd.map SignupMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ChoosePlanMsg subMsg ->
            case model.page of
                ChoosePlanPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            ChoosePlan.update subMsg pageModel
                    in
                    ( { model | page = ChoosePlanPage newPageModel }
                    , Cmd.map ChoosePlanMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ChangePlanMsg subMsg ->
            case model.page of
                ChangePlanPage pageModel ->
                    let
                        ( updatedPageModel, updatedCmd ) =
                            ChangePlan.update subMsg pageModel
                    in
                    ( { model | page = ChangePlanPage updatedPageModel }
                    , Cmd.map ChangePlanMsg updatedCmd
                    )

                _ ->
                    ( model, Cmd.none )

        AddAgentsMsg subMsg ->
            case model.page of
                AddAgentsPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            AddAgent.update subMsg pageModel
                    in
                    ( { model | page = AddAgentsPage newPageModel }
                    , Cmd.map AddAgentsMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        GotVerification result ->
            case result of
                Ok response ->
                    if response.success then
                        let
                            ( choosePlanModel, choosePlanCmd ) =
                                ChoosePlan.init response.orgSlug response.session model.key False

                            -- Only set isSetup to True if we're being redirected to a setup route
                            isInSetup =
                                String.startsWith "/choose-plan" response.redirectUrl
                                    || String.startsWith "/setup" response.redirectUrl

                            newModel =
                                { model
                                    | session = Verified response.session
                                    , currentUser =
                                        Just
                                            { id = ""
                                            , email = response.email
                                            , isAdmin = False
                                            , isAgent = False
                                            , organizationSlug = response.orgSlug
                                            , organizationId = response.orgSlug
                                            , firstName = ""
                                            , lastName = ""
                                            , subscriptionTier = ""
                                            , accountStatus = Nothing
                                            }
                                    , isSetup = isInSetup
                                    , page = LoadingPage -- Force to loading page to prevent UI flicker during redirection
                                }
                        in
                        ( newModel
                        , Cmd.batch
                            [ -- Instead of direct navigation, use a message to redirect
                              case model.intendedDestination of
                                Just destination ->
                                    Task.perform PerformRedirect (Task.succeed destination)

                                Nothing ->
                                    Task.perform PerformRedirect (Task.succeed response.redirectUrl)
                            , fetchCurrentUser
                            ]
                        )

                    else
                        ( model, Nav.pushUrl model.key "/login" )

                Err error ->
                    ( model, Nav.pushUrl model.key "/login" )

        PerformRedirect url ->
            -- Navigate to the specified URL
            ( model, Nav.pushUrl model.key url )

        GotSession result ->
            case result of
                Ok response ->
                    if response.valid then
                        let
                            user =
                                { id = response.id
                                , email = response.email
                                , isAdmin = False -- We'll get this from /api/me endpoint
                                , isAgent = False -- We'll get this from /api/me endpoint
                                , organizationSlug = response.organizationSlug
                                , organizationId = response.organizationSlug -- Use the org slug as org ID for now
                                , firstName = response.firstName
                                , lastName = response.lastName
                                , subscriptionTier = ""
                                , accountStatus = Nothing
                                }

                            -- Only set isSetup to True if we're in the middle of setup
                            isInSetup =
                                case Parser.parse routeParser model.url of
                                    Just (SetupRoute _) ->
                                        True

                                    _ ->
                                        False

                            newModel =
                                { model
                                    | session = Verified response.session
                                    , currentUser = Just user
                                    , isSetup = isInSetup
                                }
                        in
                        Cmd.batch [ fetchCurrentUser, updatePage model.url ( newModel, Cmd.none ) |> Tuple.second ]
                            |> (\cmd -> ( newModel, cmd ))

                    else
                        let
                            newModel =
                                { model | session = NoSession }
                        in
                        -- For invalid session, update page which will handle redirects
                        updatePage model.url ( newModel, Cmd.none )

                Err error ->
                    let
                        newModel =
                            { model | session = NoSession }
                    in
                    -- For session error, update page which will handle redirects
                    updatePage model.url ( newModel, Cmd.none )

        ProfileMsg subMsg ->
            case model.page of
                ProfilePage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Profile.update subMsg pageModel
                    in
                    ( { model | page = ProfilePage newPageModel }
                    , case subMsg of
                        Profile.NavigateTo path ->
                            Nav.pushUrl model.key path

                        _ ->
                            Cmd.map ProfileMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        HomeMsg subMsg ->
            case model.page of
                HomePage pageModel ->
                    let
                        ( newPageModel, homeCmd ) =
                            Home.update subMsg pageModel
                    in
                    ( { model | page = HomePage newPageModel }
                    , Cmd.map HomeMsg homeCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ContactMsg subMsg ->
            case model.page of
                ContactPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Contact.update subMsg pageModel
                    in
                    ( { model | page = ContactPage newPageModel }
                    , Cmd.map ContactMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        CompareMsg subMsg ->
            case model.page of
                ComparePage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Compare.update subMsg pageModel
                    in
                    ( { model | page = ComparePage newPageModel }
                    , Cmd.map CompareMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        QuoteMsg subMsg ->
            case model.page of
                QuotePage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Quote.update subMsg pageModel
                    in
                    ( { model | page = QuotePage newPageModel }
                    , Cmd.map QuoteMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        EligibilityMsg subMsg ->
            case model.page of
                EligibilityPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Eligibility.update subMsg pageModel
                    in
                    ( { model | page = EligibilityPage newPageModel }
                    , Cmd.map EligibilityMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ScheduleMsg subMsg ->
            case model.page of
                SchedulePage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Schedule.update subMsg pageModel
                    in
                    ( { model | page = SchedulePage newPageModel }
                    , Cmd.map ScheduleMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        DashboardMsg subMsg ->
            case model.page of
                DashboardPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Dashboard.update subMsg pageModel
                    in
                    ( { model | page = DashboardPage newPageModel }
                    , Cmd.map DashboardMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        GotCurrentUser result ->
            case result of
                Ok response ->
                    case response.user of
                        Just user ->
                            let
                                currentUser =
                                    Just
                                        { id = user.id
                                        , email = user.email
                                        , isAdmin = user.isAdmin
                                        , isAgent = user.isAgent
                                        , organizationSlug = user.organizationSlug
                                        , organizationId = user.organizationId
                                        , firstName = user.firstName
                                        , lastName = user.lastName
                                        , subscriptionTier = user.subscriptionTier
                                        , accountStatus = Nothing -- Will fetch this separately
                                        }

                                newModel =
                                    { model | currentUser = currentUser }

                                -- Fetch account status after user is loaded
                                cmd =
                                    fetchAccountStatus user.organizationSlug
                            in
                            -- Check if we were already on the right page with the right data
                            -- Only update the page if something meaningful has changed
                            case model.currentUser of
                                Just existingUser ->
                                    if existingUser.id == user.id && existingUser.organizationSlug == user.organizationSlug then
                                        -- We already have the same user, just update the model without triggering updatePage
                                        ( newModel, cmd )

                                    else
                                        -- User has changed, update the page
                                        updatePage model.url ( newModel, cmd )

                                Nothing ->
                                    -- We didn't have a user before, update the page
                                    updatePage model.url ( newModel, cmd )

                        Nothing ->
                            -- No user data, but we should still update the page to avoid being stuck
                            updatePage model.url ( model, Cmd.none )

                Err error ->
                    -- Error retrieving user data, but we should still update the page to avoid being stuck
                    updatePage model.url ( model, Cmd.none )

        GotAccountStatus result ->
            case result of
                Ok response ->
                    if response.success then
                        -- Update user with account status
                        let
                            updatedUser =
                                model.currentUser
                                    |> Maybe.map
                                        (\user ->
                                            { user | accountStatus = Just response.status }
                                        )

                            updatedModel =
                                { model | currentUser = updatedUser }
                        in
                        -- Now that we have all data (session, user, account status), update the page
                        updatePage model.url ( updatedModel, Cmd.none )

                    else
                        ( model, Cmd.none )

                Err _ ->
                    -- Even if there's an error getting account status, we should still update the page
                    -- rather than staying on the loading screen
                    updatePage model.url ( model, Cmd.none )

        CloseStatusBanner ->
            ( { model | showStatusBanner = False }
            , Cmd.none
            )

        OrgFinalized result ->
            case result of
                Ok _ ->
                    ( model, Cmd.none )

                -- Navigation already happened
                Err _ ->
                    ( { model | page = LoadingPage }
                    , Nav.pushUrl model.key "/settings"
                      -- Redirect to settings on error
                    )

        LogoutMsg subMsg ->
            case model.page of
                LogoutPage logoutModel ->
                    let
                        ( newLogoutModel, logoutCmd ) =
                            Logout.update subMsg logoutModel
                    in
                    ( { model | page = LogoutPage newLogoutModel }
                    , Cmd.map LogoutMsg logoutCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ToggleDropdown ->
            ( { model | showDropdown = not model.showDropdown }
            , Cmd.none
            )

        CloseDropdown ->
            ( { model | showDropdown = False }
            , Cmd.none
            )

        InitiateLogout ->
            ( { model
                | session = NoSession
                , currentUser = Nothing
                , showDropdown = False
              }
            , Cmd.batch
                [ Nav.pushUrl model.key "/"
                , Http.post
                    { url = "/api/auth/logout"
                    , body = Http.emptyBody
                    , expect = Http.expectWhatever (\_ -> NoOp)
                    }
                ]
            )

        NoOp ->
            ( model, Cmd.none )

        OnboardingMsg subMsg ->
            case model.page of
                OnboardingPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Onboarding.update subMsg pageModel
                    in
                    ( { model | page = OnboardingPage newPageModel }
                    , Cmd.map OnboardingMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        WalkthroughMsg subMsg ->
            case model.page of
                WalkthroughPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Walkthrough.update subMsg pageModel
                    in
                    ( { model | page = WalkthroughPage newPageModel }
                    , Cmd.map WalkthroughMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ShowDropdown ->
            ( { model | showDropdown = True }, Cmd.none )

        HideDropdown ->
            ( { model | showDropdown = False }, Cmd.none )

        ToggleStatusBanner ->
            ( { model | showStatusBanner = not model.showStatusBanner }, Cmd.none )


view : Model -> Browser.Document Msg
view model =
    let
        viewPage =
            case model.page of
                NotFoundPage ->
                    viewNotFound

                LoginPage loginModel ->
                    let
                        loginView =
                            Login.view loginModel
                    in
                    { title = loginView.title
                    , body = List.map (Html.map LoginMsg) loginView.body
                    }

                ContactsPage contactsModel ->
                    { title = "Contacts"
                    , body = [ viewWithNav model (Html.map ContactsMsg (Contacts.view contactsModel)) ]
                    }

                TempLandingPage landingModel ->
                    let
                        landingView =
                            TempLanding.view landingModel
                    in
                    { title = landingView.title
                    , body = [ viewWithNav model (Html.map TempLandingMsg (div [] landingView.body)) ]
                    }

                SettingsPage settingsModel ->
                    let
                        settingsView =
                            Settings.view settingsModel
                    in
                    { title = settingsView.title
                    , body = [ viewWithNav model (Html.map SettingsMsg (div [] settingsView.body)) ]
                    }

                Signup signupModel ->
                    let
                        signupView =
                            Signup.view signupModel
                    in
                    { title = signupView.title
                    , body = [ viewWithNav model (Html.map SignupMsg (div [] signupView.body)) ]
                    }

                ChoosePlanPage choosePlanModel ->
                    let
                        choosePlanView =
                            ChoosePlan.view choosePlanModel
                    in
                    { title = choosePlanView.title
                    , body = [ viewWithNav model (Html.map ChoosePlanMsg (div [] choosePlanView.body)) ]
                    }

                ChangePlanPage changePlanModel ->
                    let
                        changePlanView =
                            ChangePlan.view changePlanModel
                    in
                    { title = changePlanView.title
                    , body = [ viewWithNav model (Html.map ChangePlanMsg (div [] changePlanView.body)) ]
                    }

                AddAgentsPage addAgentModel ->
                    let
                        addAgentView =
                            AddAgent.view addAgentModel
                    in
                    { title = addAgentView.title
                    , body =
                        if addAgentModel.isSetup then
                            -- In setup flow, don't show the header
                            [ Html.map AddAgentsMsg (div [] addAgentView.body) ]

                        else
                            -- Not in setup flow, show the header
                            [ viewWithNav model (Html.map AddAgentsMsg (div [] addAgentView.body)) ]
                    }

                ProfilePage profileModel ->
                    let
                        profileView =
                            Profile.view profileModel
                    in
                    { title = profileView.title
                    , body = [ viewWithNav model (Html.map ProfileMsg (div [] profileView.body)) ]
                    }

                LoadingPage ->
                    { title = "Loading..."
                    , body = [ viewLoading ]
                    }

                HomePage homeModel ->
                    let
                        homeView =
                            Home.view homeModel
                    in
                    { title = homeView.title
                    , body = List.map (Html.map HomeMsg) homeView.body
                    }

                ContactPage contactModel ->
                    let
                        contactView =
                            Contact.view contactModel
                    in
                    { title = contactView.title
                    , body = [ viewWithNav model (Html.map ContactMsg (div [] contactView.body)) ]
                    }

                ComparePage compareModel ->
                    let
                        compareView =
                            Compare.view compareModel
                    in
                    { title = compareView.title
                    , body = [ viewWithNav model (Html.map CompareMsg (div [] compareView.body)) ]
                    }

                QuotePage quoteModel ->
                    let
                        quoteView =
                            Quote.view quoteModel
                    in
                    { title = quoteView.title
                    , body = [ viewWithNav model (Html.map QuoteMsg (div [] quoteView.body)) ]
                    }

                EligibilityPage eligibilityModel ->
                    let
                        eligibilityView =
                            Eligibility.view eligibilityModel
                    in
                    { title = eligibilityView.title
                    , body = [ viewWithNav model (Html.map EligibilityMsg (div [] eligibilityView.body)) ]
                    }

                SchedulePage scheduleModel ->
                    let
                        scheduleView =
                            Schedule.view scheduleModel
                    in
                    { title = scheduleView.title
                    , body = [ viewWithNav model (Html.map ScheduleMsg (div [] scheduleView.body)) ]
                    }

                DashboardPage dashboardModel ->
                    let
                        dashboardView =
                            Dashboard.view dashboardModel
                    in
                    { title = dashboardView.title
                    , body = [ viewWithNav model (Html.map DashboardMsg (div [] dashboardView.body)) ]
                    }

                LogoutPage logoutModel ->
                    let
                        logoutView =
                            Logout.view logoutModel
                    in
                    { title = logoutView.title
                    , body = List.map (Html.map LogoutMsg) logoutView.body
                    }

                OnboardingPage pageModel ->
                    let
                        onboardingView =
                            Onboarding.view pageModel
                    in
                    { title = onboardingView.title
                    , body = [ Html.map OnboardingMsg (div [] onboardingView.body) ]
                    }

                WalkthroughPage pageModel ->
                    let
                        walkthroughView =
                            Walkthrough.view pageModel
                    in
                    { title = walkthroughView.title
                    , body = [ viewWithNav model (Html.map WalkthroughMsg (div [] walkthroughView.body)) ]
                    }
    in
    viewPage


viewWithNav : Model -> Html Msg -> Html Msg
viewWithNav model content =
    div []
        [ if model.isSetup then
            -- Don't show header during setup flow
            content

          else
            -- Show header for regular pages
            div []
                [ viewNavHeader model
                , content
                ]
        ]


viewNavHeader : Model -> Html Msg
viewNavHeader model =
    let
        -- Check if current page is one of the quote flow pages that should have simplified header
        isQuoteFlowPage =
            case model.page of
                QuotePage _ ->
                    True

                ComparePage _ ->
                    True

                EligibilityPage _ ->
                    True

                SchedulePage _ ->
                    True

                _ ->
                    False
    in
    if isQuoteFlowPage then
        -- Simplified header with just the logo for quote flow pages
        nav [ class "bg-white border-b border-gray-200" ]
            [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" ]
                [ div [ class "flex justify-center h-16" ]
                    [ div [ class "shrink-0 flex items-center" ]
                        [ a
                            [ href "#"
                            , onClick (InternalLinkClicked "/")
                            , class "cursor-pointer"
                            ]
                            [ img
                                [ src "/images/medicare-max-logo.png"
                                , class "h-8 w-auto"
                                , alt "Medicare Max logo"
                                ]
                                []
                            ]
                        ]
                    ]
                ]
            ]

    else
        -- Full header with navigation for other pages
        nav [ class "bg-white border-b border-gray-200" ]
            [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" ]
                [ div [ class "flex justify-between h-16" ]
                    [ div [ class "flex items-center space-x-4" ]
                        [ div [ class "shrink-0 flex items-center" ]
                            [ a
                                [ href "#"
                                , onClick (InternalLinkClicked "/")
                                , class "cursor-pointer"
                                ]
                                [ img
                                    [ src "/images/medicare-max-logo.png"
                                    , class "h-8 w-auto mr-8"
                                    , alt "Medicare Max logo"
                                    ]
                                    []
                                ]
                            ]
                        , button
                            [ class "px-3 py-1.5 text-gray-700 text-sm font-medium hover:bg-[#DCE2E5] rounded-md transition-colors duration-200"
                            , onClick (InternalLinkClicked "/dashboard")
                            ]
                            [ text "Dashboard" ]
                        , button
                            [ class "px-3 py-1.5 text-gray-700 text-sm font-medium hover:bg-[#DCE2E5] rounded-md transition-colors duration-200"
                            , onClick (InternalLinkClicked "/contacts")
                            ]
                            [ text "Contacts" ]
                        ]
                    , div [ class "flex items-center space-x-4" ]
                        [ div [ class "relative" ]
                            [ button
                                [ class "flex items-center space-x-2 px-3 py-1.5 text-gray-700 text-sm font-medium hover:bg-[#DCE2E5] rounded-md transition-colors duration-200"
                                , onClick ToggleDropdown
                                , stopPropagationOn "mousedown" (Decode.succeed ( NoOp, True ))
                                ]
                                [ case model.currentUser of
                                    Just user ->
                                        text (user.firstName ++ " " ++ user.lastName)

                                    Nothing ->
                                        text "Menu"
                                , div [ class "w-4 h-4" ]
                                    [ svg
                                        [ Svg.Attributes.viewBox "0 0 20 20"
                                        , Svg.Attributes.fill "currentColor"
                                        ]
                                        [ path
                                            [ Svg.Attributes.d "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" ]
                                            []
                                        ]
                                    ]
                                ]
                            , if model.showDropdown then
                                div
                                    [ class "absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 z-50"
                                    , stopPropagationOn "mousedown" (Decode.succeed ( NoOp, True ))
                                    ]
                                    [ if isAdmin model.currentUser then
                                        button
                                            [ class "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-[#DCE2E5]"
                                            , onClick (InternalLinkClicked "/profile")
                                            ]
                                            [ text "Profile" ]

                                      else
                                        text ""
                                    , if isAdmin model.currentUser then
                                        button
                                            [ class "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-[#DCE2E5]"
                                            , onClick (InternalLinkClicked "/settings")
                                            ]
                                            [ text "Organization Settings" ]

                                      else
                                        text ""
                                    , if isAdmin model.currentUser then
                                        button
                                            [ class "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-[#DCE2E5]"
                                            , onClick (InternalLinkClicked "/add-agents")
                                            ]
                                            [ text "Agents" ]

                                      else
                                        text ""
                                    , button
                                        [ class "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-[#DCE2E5]"
                                        , onClick (InternalLinkClicked "/change-plan")
                                        ]
                                        [ text "Change Plan" ]
                                    , button
                                        [ class "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-[#DCE2E5]"
                                        , onClick InitiateLogout
                                        ]
                                        [ text "Log out" ]
                                    ]

                              else
                                text ""
                            ]
                        ]
                    ]
                ]
            ]


isAdminOrAdminAgent : Maybe User -> Bool
isAdminOrAdminAgent maybeUser =
    case maybeUser of
        Just user ->
            user.isAdmin && user.isAgent

        Nothing ->
            False


isAdmin : Maybe User -> Bool
isAdmin maybeUser =
    case maybeUser of
        Just user ->
            user.isAdmin

        Nothing ->
            False


viewNotFound : Browser.Document msg
viewNotFound =
    { title = "404 - Page Not Found"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex flex-col items-center justify-center" ]
            [ h1 [ class "text-4xl font-bold text-gray-900 mb-4" ]
                [ text "404 - Page Not Found" ]
            , p [ class "text-gray-600" ]
                [ text "The page you're looking for doesn't exist." ]
            ]
        ]
    }


viewLoading : Html msg
viewLoading =
    div [ class "min-h-screen bg-gray-50 flex items-center justify-center" ]
        [ div [ class "animate-spin rounded-full h-8 w-8 border-2 border-purple-500 border-t-transparent" ] []
        ]


subscriptions : Model -> Sub Msg
subscriptions model =
    let
        dropdownSub =
            if model.showDropdown then
                Browser.Events.onMouseDown (Decode.succeed CloseDropdown)

            else
                Sub.none

        pageSubs =
            case model.page of
                LoadingPage ->
                    Sub.none

                LoginPage pageModel ->
                    Sub.map LoginMsg (Login.subscriptions pageModel)

                ContactsPage pageModel ->
                    Sub.map ContactsMsg (Contacts.subscriptions pageModel)

                TempLandingPage pageModel ->
                    Sub.map TempLandingMsg (TempLanding.subscriptions pageModel)

                SettingsPage pageModel ->
                    Sub.map SettingsMsg (Settings.subscriptions pageModel)

                Signup signupModel ->
                    Sub.map SignupMsg (Signup.subscriptions signupModel)

                ChoosePlanPage pageModel ->
                    Sub.map ChoosePlanMsg (ChoosePlan.subscriptions pageModel)

                ChangePlanPage pageModel ->
                    Sub.map ChangePlanMsg (ChangePlan.subscriptions pageModel)

                AddAgentsPage pageModel ->
                    Sub.map AddAgentsMsg (AddAgent.subscriptions pageModel)

                ProfilePage pageModel ->
                    Sub.map ProfileMsg (Profile.subscriptions pageModel)

                HomePage pageModel ->
                    Sub.map HomeMsg (Home.subscriptions pageModel)

                ContactPage pageModel ->
                    Sub.map ContactMsg (Contact.subscriptions pageModel)

                ComparePage pageModel ->
                    Sub.map CompareMsg (Compare.subscriptions pageModel)

                QuotePage pageModel ->
                    Sub.map QuoteMsg (Quote.subscriptions pageModel)

                EligibilityPage pageModel ->
                    Sub.map EligibilityMsg (Eligibility.subscriptions pageModel)

                SchedulePage pageModel ->
                    Sub.map ScheduleMsg (Schedule.subscriptions pageModel)

                DashboardPage pageModel ->
                    Sub.map DashboardMsg (Dashboard.subscriptions pageModel)

                NotFoundPage ->
                    Sub.none

                LogoutPage pageModel ->
                    Sub.map LogoutMsg (Logout.subscriptions pageModel)

                OnboardingPage pageModel ->
                    Sub.map OnboardingMsg (Onboarding.subscriptions pageModel)

                WalkthroughPage pageModel ->
                    Sub.map WalkthroughMsg (Walkthrough.subscriptions pageModel)
    in
    Sub.batch [ dropdownSub, pageSubs ]


routeAccessType : Route -> RouteAccess
routeAccessType route =
    case route of
        PublicRoute _ ->
            Public

        ProtectedRoute _ ->
            Protected

        AdminRoute _ ->
            Protected

        -- Still Protected, but we'll check admin status separately
        SetupRoute _ ->
            Setup

        NotFound ->
            Public


userDecoder : Decoder User
userDecoder =
    Decode.succeed User
        |> Pipeline.required "id" (Decode.map String.fromInt Decode.int)
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "is_admin"
            (Decode.oneOf
                [ Decode.bool
                , Decode.int |> Decode.map (\n -> n == 1)
                ]
            )
        |> Pipeline.required "is_agent"
            (Decode.oneOf
                [ Decode.bool
                , Decode.int |> Decode.map (\n -> n == 1)
                ]
            )
        |> Pipeline.required "organization_slug" Decode.string
        |> Pipeline.required "organization_id" (Decode.map String.fromInt Decode.int)
        |> Pipeline.required "firstName" Decode.string
        |> Pipeline.required "lastName" Decode.string
        |> Pipeline.required "subscription_tier" Decode.string
        |> Pipeline.optional "accountStatus" (Decode.nullable accountStatusDecoder) Nothing


type SetupStep
    = NotStarted
    | PlanSelection
    | OrganizationSetup
    | AgentSetup
    | Complete


getSetupStep : Model -> SetupStep
getSetupStep model =
    case model.currentUser of
        Nothing ->
            NotStarted

        Just user ->
            if not model.isSetup then
                PlanSelection

            else if not (hasOrganizationSettings user) then
                OrganizationSetup

            else if not (hasAgents user) then
                AgentSetup

            else
                Complete


hasOrganizationSettings : User -> Bool
hasOrganizationSettings user =
    -- Check if both organization and brand settings are configured
    case user.organizationSlug of
        "" ->
            False

        _ ->
            -- For now return True since we've merged brand settings into org settings
            -- TODO: Add actual check for required settings once API is updated
            True


hasAgents : User -> Bool
hasAgents user =
    -- TODO: Add actual check for agents
    True


redirectToSetupStep : Model -> ( Model, Cmd Msg )
redirectToSetupStep model =
    case getSetupStep model of
        NotStarted ->
            ( model, Nav.pushUrl model.key "/login" )

        PlanSelection ->
            ( model, Nav.pushUrl model.key "/choose-plan" )

        OrganizationSetup ->
            case model.currentUser of
                Just user ->
                    ( model
                    , Nav.pushUrl model.key
                        ("/setup/settings?plan=" ++ user.organizationSlug)
                    )

                Nothing ->
                    ( model, Nav.pushUrl model.key "/setup/settings" )

        AgentSetup ->
            case model.currentUser of
                Just user ->
                    ( model
                    , Nav.pushUrl model.key
                        ("/setup/add-agents?plan=" ++ user.organizationSlug ++ "&org=complete")
                    )

                Nothing ->
                    ( model, Nav.pushUrl model.key "/setup/add-agents" )

        Complete ->
            ( model, Nav.pushUrl model.key "/contacts" )


shouldRedirectAdminRoute : Route -> Model -> Maybe String
shouldRedirectAdminRoute route model =
    case route of
        AdminRoute _ ->
            case model.currentUser of
                Just user ->
                    if user.isAdmin then
                        Nothing
                        -- Admin user, no redirect needed

                    else
                        Just "/contacts"

                -- Non-admin user, redirect to contacts
                Nothing ->
                    Just "/login"

        -- Not logged in, redirect to login
        _ ->
            Nothing


shouldRedirectToLogin : Route -> Model -> Bool
shouldRedirectToLogin route model =
    let
        result =
            case route of
                PublicRoute _ ->
                    False

                NotFound ->
                    False

                AdminRoute _ ->
                    case model.session of
                        Verified _ ->
                            False

                        _ ->
                            True

                _ ->
                    case model.session of
                        Verified _ ->
                            False

                        _ ->
                            True
    in
    -- Add a debug log for the redirect check
    result


shouldRedirectToSetup : Route -> Model -> Bool
shouldRedirectToSetup route model =
    -- Only check setup state if we're in setup mode
    if model.isSetup then
        case route of
            SetupRoute _ ->
                -- Already in a setup route, no redirect needed
                False

            PublicRoute _ ->
                -- Public routes are always accessible
                False

            NotFound ->
                -- Not found routes don't redirect
                False

            AdminRoute _ ->
                -- Admin routes redirect if setup is not complete
                getSetupStep model /= Complete

            ProtectedRoute _ ->
                -- Protected routes redirect if setup is not complete
                getSetupStep model /= Complete

    else
        False


updatePage : Url -> ( Model, Cmd Msg ) -> ( Model, Cmd Msg )
updatePage url ( model, cmd ) =
    case model.session of
        Unknown ->
            -- When session state is Unknown, still allow public routes to render
            case Parser.parse routeParser url of
                Just route ->
                    case routeAccessType route of
                        Public ->
                            -- For public routes, redirect to the force update function
                            updatePageForcePublic url ( model, cmd )

                        _ ->
                            -- For non-public routes, keep showing loading while we wait
                            ( { model | page = LoadingPage }
                            , cmd
                            )

                Nothing ->
                    ( { model | page = NotFoundPage }
                    , cmd
                    )

        -- Rest of the function remains the same for Verified and NoSession states
        _ ->
            case Parser.parse routeParser url of
                Just route ->
                    let
                        -- Update isSetup based on the route
                        modelWithUpdatedSetup =
                            updateIsSetup model route

                        adminRedirect =
                            shouldRedirectAdminRoute route modelWithUpdatedSetup

                        -- Determine if we should make authenticated requests based on session state
                        -- Only fetch user data if we have a verified session AND don't already have user info
                        authCmd =
                            case ( model.session, model.currentUser ) of
                                ( Verified _, Nothing ) ->
                                    -- Only fetch user data if we have a verified session but no user data
                                    fetchCurrentUser

                                _ ->
                                    -- Don't make authenticated requests if no session or already have user data
                                    Cmd.none
                    in
                    case adminRedirect of
                        Just redirectUrl ->
                            ( modelWithUpdatedSetup, Nav.pushUrl modelWithUpdatedSetup.key redirectUrl )

                        Nothing ->
                            let
                                needsLogin =
                                    shouldRedirectToLogin route modelWithUpdatedSetup

                                needsSetup =
                                    shouldRedirectToSetup route modelWithUpdatedSetup
                            in
                            if needsLogin then
                                ( { modelWithUpdatedSetup
                                    | intendedDestination = Just (Url.toString url)
                                    , page = LoginPage (Login.init modelWithUpdatedSetup.key False url |> Tuple.first)
                                  }
                                , if String.contains "/login" (Url.toString url) then
                                    -- Already on login page, don't redirect
                                    Cmd.none

                                  else
                                    Nav.pushUrl modelWithUpdatedSetup.key "/login"
                                )

                            else if needsSetup then
                                -- Check if we're already on a setup route to prevent redirect loops
                                case route of
                                    SetupRoute _ ->
                                        -- Already on a setup route, just update the page
                                        ( modelWithUpdatedSetup, authCmd )

                                    _ ->
                                        redirectToSetupStep modelWithUpdatedSetup

                            else
                                -- Continue with the original logic for handling different routes
                                -- Rest of the function remains the same
                                case route of
                                    PublicRoute HomeRoute ->
                                        -- Home page handles its own session checking
                                        let
                                            ( homeModel, homeCmd ) =
                                                Home.init modelWithUpdatedSetup.key
                                        in
                                        ( { modelWithUpdatedSetup | page = HomePage homeModel }
                                        , Cmd.map HomeMsg homeCmd
                                        )

                                    PublicRoute LoginRoute ->
                                        let
                                            ( loginModel, loginCmd ) =
                                                Login.init modelWithUpdatedSetup.key False url
                                        in
                                        ( { modelWithUpdatedSetup | page = LoginPage loginModel }
                                        , Cmd.map LoginMsg loginCmd
                                        )

                                    PublicRoute SignupRoute ->
                                        -- Initialize signup page without making authenticated API calls
                                        let
                                            ( signupModel, signupCmd ) =
                                                Signup.init modelWithUpdatedSetup.key
                                        in
                                        ( { modelWithUpdatedSetup | page = Signup signupModel }
                                        , Cmd.map SignupMsg signupCmd
                                        )

                                    PublicRoute (OnboardingRoute step) ->
                                        -- Check if we already have an onboarding page
                                        case modelWithUpdatedSetup.page of
                                            OnboardingPage existingModel ->
                                                -- We already have an onboarding model, just update the step
                                                -- This preserves all state between steps
                                                ( { modelWithUpdatedSetup
                                                    | page = OnboardingPage { existingModel | step = onboardingStepToStep step }
                                                  }
                                                , Cmd.none
                                                )

                                            _ ->
                                                -- Initialize onboarding without authenticated calls for new users
                                                let
                                                    -- Extract session if available
                                                    sessionToken =
                                                        extractSession model.session

                                                    -- Get organization slug if available, empty string for new users
                                                    orgSlug =
                                                        model.currentUser
                                                            |> Maybe.map .organizationSlug
                                                            |> Maybe.withDefault ""

                                                    -- Initialize onboarding with correct step
                                                    ( onboardingModel, onboardingCmd ) =
                                                        Onboarding.init
                                                            modelWithUpdatedSetup.key
                                                            orgSlug
                                                            sessionToken
                                                            (onboardingStepToStep step)
                                                in
                                                -- Always set up the onboarding page, even if no session exists
                                                ( { modelWithUpdatedSetup | page = OnboardingPage onboardingModel }
                                                , Cmd.map OnboardingMsg onboardingCmd
                                                )

                                    PublicRoute (VerifyRoute params) ->
                                        -- For verification, we need to make an API call
                                        let
                                            verifyUrl =
                                                case params of
                                                    VerifyParams orgSlug token ->
                                                        "/api/auth/verify/" ++ orgSlug ++ "/" ++ token

                                            verifyCmd =
                                                Http.get
                                                    { url = verifyUrl
                                                    , expect = Http.expectJson GotVerification verificationDecoder
                                                    }
                                        in
                                        ( model, verifyCmd )

                                    PublicRoute (CompareRoute params) ->
                                        let
                                            ( compareModel, compareCmd ) =
                                                Compare.init model.key (Just params)
                                        in
                                        ( { model | page = ComparePage compareModel }
                                        , Cmd.map CompareMsg compareCmd
                                        )

                                    PublicRoute (QuoteRoute params) ->
                                        let
                                            initialValues =
                                                { zipCode = Nothing
                                                , dateOfBirth = Nothing
                                                , tobacco = Nothing
                                                , gender = Nothing
                                                , quoteId = (\( id, _, _ ) -> id) params
                                                , planType = (\( _, _, planType ) -> planType) params
                                                }

                                            ( quoteModel, quoteCmd ) =
                                                Quote.init model.key initialValues
                                        in
                                        ( { model | page = QuotePage quoteModel }
                                        , Cmd.map QuoteMsg quoteCmd
                                        )

                                    PublicRoute (EligibilityRoute params) ->
                                        let
                                            ( eligibilityModel, eligibilityCmd ) =
                                                Eligibility.init model.key (Tuple.first params)
                                        in
                                        ( { model | page = EligibilityPage eligibilityModel }
                                        , Cmd.map EligibilityMsg eligibilityCmd
                                        )

                                    PublicRoute (ScheduleRoute params) ->
                                        let
                                            ( scheduleModel, scheduleCmd ) =
                                                Schedule.init model.key
                                                    ((\( id, _, _ ) -> id) params)
                                                    ((\( _, status, _ ) -> status) params)
                                        in
                                        ( { model | page = SchedulePage scheduleModel }
                                        , Cmd.map ScheduleMsg scheduleCmd
                                        )

                                    ProtectedRoute ContactsRoute ->
                                        let
                                            -- Convert Main.elm User to Contacts.elm User format
                                            contactsUser =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map
                                                        (\user ->
                                                            { id = String.toInt user.id |> Maybe.withDefault 0
                                                            , email = user.email
                                                            , firstName = user.firstName
                                                            , lastName = user.lastName
                                                            , isAdmin = user.isAdmin
                                                            , isAgent = user.isAgent
                                                            , organizationId = String.toInt user.organizationId |> Maybe.withDefault 0
                                                            , isActive = True -- Assume active
                                                            , phone = "" -- Default empty
                                                            , carriers = [] -- Default empty
                                                            , stateLicenses = [] -- Default empty
                                                            }
                                                        )

                                            ( contactsModel, contactsCmd ) =
                                                Contacts.init modelWithUpdatedSetup.key contactsUser
                                        in
                                        ( { modelWithUpdatedSetup | page = ContactsPage contactsModel }
                                        , Cmd.batch
                                            [ Cmd.map ContactsMsg contactsCmd
                                            , authCmd
                                            ]
                                        )

                                    ProtectedRoute ProfileRoute ->
                                        let
                                            ( profileModel, profileCmd ) =
                                                Profile.init ()
                                        in
                                        ( { modelWithUpdatedSetup | page = ProfilePage profileModel }
                                        , Cmd.batch
                                            [ Cmd.map ProfileMsg profileCmd
                                            , authCmd
                                            ]
                                        )

                                    ProtectedRoute TempLandingRoute ->
                                        let
                                            ( tempLandingModel, tempLandingCmd ) =
                                                TempLanding.init ()
                                        in
                                        ( { modelWithUpdatedSetup | page = TempLandingPage tempLandingModel }
                                        , Cmd.batch
                                            [ Cmd.map TempLandingMsg tempLandingCmd
                                            , authCmd
                                            ]
                                        )

                                    ProtectedRoute (ContactRoute id) ->
                                        let
                                            ( contactModel, contactCmd ) =
                                                Contact.init modelWithUpdatedSetup.key id
                                        in
                                        ( { modelWithUpdatedSetup | page = ContactPage contactModel }
                                        , Cmd.batch
                                            [ Cmd.map ContactMsg contactCmd
                                            , authCmd
                                            ]
                                        )

                                    ProtectedRoute ChangePlanRoute ->
                                        let
                                            ( changePlanModel, changePlanCmd ) =
                                                ChangePlan.init
                                                    { key = modelWithUpdatedSetup.key
                                                    , session = extractSession modelWithUpdatedSetup.session
                                                    , orgSlug = modelWithUpdatedSetup.currentUser |> Maybe.map .organizationSlug |> Maybe.withDefault ""
                                                    }
                                        in
                                        ( { modelWithUpdatedSetup | page = ChangePlanPage changePlanModel }
                                        , Cmd.batch
                                            [ Cmd.map ChangePlanMsg changePlanCmd
                                            , authCmd
                                            ]
                                        )

                                    ProtectedRoute DashboardRoute ->
                                        let
                                            dashboardFlags =
                                                { isPostPayment =
                                                    case
                                                        Parser.parse
                                                            (Parser.s "dashboard" <?> Query.string "payment_success")
                                                            url
                                                    of
                                                        Just (Just "true") ->
                                                            Just True

                                                        _ ->
                                                            Nothing
                                                }

                                            ( dashboardModel, dashboardCmd ) =
                                                Dashboard.init dashboardFlags
                                        in
                                        ( { modelWithUpdatedSetup | page = DashboardPage dashboardModel }
                                        , Cmd.batch
                                            [ Cmd.map DashboardMsg dashboardCmd
                                            , authCmd
                                            ]
                                        )

                                    ProtectedRoute WalkthroughRoute ->
                                        let
                                            currentUser =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map
                                                        (\user ->
                                                            { id = user.id
                                                            , name = user.firstName ++ " " ++ user.lastName
                                                            , email = user.email
                                                            , isAdmin = user.isAdmin
                                                            , isAgent = user.isAgent
                                                            }
                                                        )

                                            ( walkthroughModel, walkthroughCmd ) =
                                                Walkthrough.init modelWithUpdatedSetup.key currentUser
                                        in
                                        ( { modelWithUpdatedSetup | page = WalkthroughPage walkthroughModel }
                                        , Cmd.batch
                                            [ Cmd.map WalkthroughMsg walkthroughCmd
                                            , authCmd
                                            ]
                                        )

                                    AdminRoute SettingsRoute ->
                                        let
                                            -- Convert Main.elm User to Settings.elm CurrentUser format
                                            settingsUser =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map
                                                        (\user ->
                                                            { id = user.id
                                                            , email = user.email
                                                            , isAdmin = user.isAdmin
                                                            , isAgent = user.isAgent
                                                            , organizationSlug = user.organizationSlug
                                                            , organizationId = user.organizationId
                                                            }
                                                        )

                                            ( settingsModel, settingsCmd ) =
                                                Settings.init
                                                    { isSetup = False
                                                    , key = modelWithUpdatedSetup.key
                                                    , currentUser = settingsUser
                                                    , planType =
                                                        modelWithUpdatedSetup.currentUser
                                                            |> Maybe.map .subscriptionTier
                                                            |> Maybe.withDefault ""
                                                    }
                                        in
                                        ( { modelWithUpdatedSetup | page = SettingsPage settingsModel }
                                        , Cmd.batch
                                            [ Cmd.map SettingsMsg settingsCmd
                                            , authCmd
                                            ]
                                        )

                                    AdminRoute AgentsRoute ->
                                        let
                                            -- Convert Main.elm User to AddAgent.elm CurrentUser format
                                            addAgentUser =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map
                                                        (\user ->
                                                            { id = user.id
                                                            , email = user.email
                                                            , firstName = user.firstName
                                                            , lastName = user.lastName
                                                            , isAdmin = user.isAdmin
                                                            , isAgent = user.isAgent
                                                            , phone = ""
                                                            }
                                                        )

                                            ( addAgentModel, addAgentCmd ) =
                                                AddAgent.init
                                                    False
                                                    modelWithUpdatedSetup.key
                                                    addAgentUser
                                                    (modelWithUpdatedSetup.currentUser
                                                        |> Maybe.map .subscriptionTier
                                                        |> Maybe.withDefault ""
                                                    )
                                        in
                                        ( { modelWithUpdatedSetup | page = AddAgentsPage addAgentModel }
                                        , Cmd.batch
                                            [ Cmd.map AddAgentsMsg addAgentCmd
                                            , authCmd
                                            ]
                                        )

                                    SetupRoute (ChoosePlanRoute progress) ->
                                        let
                                            orgSlug =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map .organizationSlug
                                                    |> Maybe.withDefault ""

                                            session =
                                                extractSession modelWithUpdatedSetup.session

                                            ( choosePlanModel, choosePlanCmd ) =
                                                ChoosePlan.init orgSlug session modelWithUpdatedSetup.key True
                                        in
                                        ( { modelWithUpdatedSetup | page = ChoosePlanPage choosePlanModel }
                                        , Cmd.batch
                                            [ Cmd.map ChoosePlanMsg choosePlanCmd
                                            , authCmd
                                            ]
                                        )

                                    SetupRoute (SetupSettingsRoute progress) ->
                                        let
                                            -- Get plan type from progress if available, otherwise use subscription tier
                                            planType =
                                                progress
                                                    |> Maybe.andThen .plan
                                                    |> Maybe.withDefault
                                                        (modelWithUpdatedSetup.currentUser
                                                            |> Maybe.map .subscriptionTier
                                                            |> Maybe.withDefault ""
                                                        )

                                            -- Convert Main.elm User to Settings.elm CurrentUser format
                                            settingsUser =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map
                                                        (\user ->
                                                            { id = user.id
                                                            , email = user.email
                                                            , isAdmin = user.isAdmin
                                                            , isAgent = user.isAgent
                                                            , organizationSlug = user.organizationSlug
                                                            , organizationId = user.organizationId
                                                            }
                                                        )

                                            ( settingsModel, settingsCmd ) =
                                                Settings.init
                                                    { isSetup = True
                                                    , key = modelWithUpdatedSetup.key
                                                    , currentUser = settingsUser
                                                    , planType = planType
                                                    }
                                        in
                                        ( { modelWithUpdatedSetup | page = SettingsPage settingsModel }
                                        , Cmd.batch
                                            [ Cmd.map SettingsMsg settingsCmd
                                            , authCmd
                                            ]
                                        )

                                    SetupRoute (AddAgentsRoute progress) ->
                                        let
                                            -- Get plan type from progress if available, otherwise use subscription tier
                                            planType =
                                                progress
                                                    |> Maybe.andThen .plan
                                                    |> Maybe.withDefault
                                                        (modelWithUpdatedSetup.currentUser
                                                            |> Maybe.map .subscriptionTier
                                                            |> Maybe.withDefault ""
                                                        )

                                            -- Convert Main.elm User to AddAgent.elm CurrentUser format
                                            addAgentUser =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map
                                                        (\user ->
                                                            { id = user.id
                                                            , email = user.email
                                                            , firstName = user.firstName
                                                            , lastName = user.lastName
                                                            , isAdmin = user.isAdmin
                                                            , isAgent = user.isAgent
                                                            , phone = ""
                                                            }
                                                        )

                                            ( addAgentModel, addAgentCmd ) =
                                                AddAgent.init True modelWithUpdatedSetup.key addAgentUser planType
                                        in
                                        ( { modelWithUpdatedSetup | page = AddAgentsPage addAgentModel }
                                        , Cmd.batch
                                            [ Cmd.map AddAgentsMsg addAgentCmd
                                            , authCmd
                                            ]
                                        )

                                    NotFound ->
                                        ( modelWithUpdatedSetup, Cmd.none )

                Nothing ->
                    ( { model | page = NotFoundPage }
                    , cmd
                    )


type alias CurrentUserResponse =
    { success : Bool
    , user : Maybe User
    }


fetchCurrentUser : Cmd Msg
fetchCurrentUser =
    Http.get
        { url = "/api/me"
        , expect = Http.expectJson GotCurrentUser currentUserResponseDecoder
        }


fetchAccountStatus : String -> Cmd Msg
fetchAccountStatus orgSlug =
    Http.get
        { url = "/api/organizations/" ++ orgSlug ++ "/account-status"
        , expect = Http.expectJson GotAccountStatus accountStatusResponseDecoder
        }


currentUserResponseDecoder : Decoder CurrentUserResponse
currentUserResponseDecoder =
    Decode.map2 CurrentUserResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "user"
            (Decode.nullable
                (Decode.value
                    |> Decode.andThen
                        (\_ ->
                            userDecoder
                        )
                )
            )
        )



-- Wrap the user in Just since our type expects Maybe User


isBasicPlan : Model -> Bool
isBasicPlan model =
    case model.currentUser of
        Just user ->
            user.organizationSlug == "basic"

        Nothing ->
            True


finalizeOrganization : String -> Cmd Msg
finalizeOrganization orgId =
    Http.post
        { url = "/api/organizations/" ++ orgId ++ "/finalize"
        , body = Http.emptyBody
        , expect = Http.expectWhatever OrgFinalized
        }



-- Helper function to extract session string from SessionState


extractSession : SessionState -> String
extractSession sessionState =
    case sessionState of
        Verified session ->
            session

        _ ->
            ""



-- Helper function to map Document msg to Document Msg


mapDocument : (msg -> Msg) -> Browser.Document msg -> Browser.Document Msg
mapDocument toMsg document =
    { title = document.title
    , body = List.map (Html.map toMsg) document.body
    }



-- Update the isSetup flag based on the current URL and route


updateIsSetup : Model -> Route -> Model
updateIsSetup model route =
    let
        -- Determine if we're in setup mode based on the route
        newIsSetup =
            case route of
                SetupRoute _ ->
                    True

                _ ->
                    -- For non-setup routes, only keep isSetup = True if we're in the middle
                    -- of setup flow (haven't completed it yet)
                    model.isSetup && (getSetupStep model /= Complete)
    in
    { model | isSetup = newIsSetup }



-- Convert Main.OnboardingStep to Onboarding.Step


onboardingStepToStep : OnboardingStep -> Onboarding.Step
onboardingStepToStep step =
    case step of
        PlanStep ->
            Onboarding.PlanSelectionStep

        PersonalStep ->
            Onboarding.UserDetailsStep

        CompanyStep ->
            Onboarding.CompanyDetailsStep

        LicensingStep ->
            Onboarding.LicensingSettingsStep

        AgentsStep ->
            Onboarding.AddAgentsStep

        PaymentStep ->
            Onboarding.PaymentStep

        EnterpriseStep ->
            Onboarding.EnterpriseFormStep



-- Add a new function to force update public routes


updatePageForcePublic : Url -> ( Model, Cmd Msg ) -> ( Model, Cmd Msg )
updatePageForcePublic url ( model, cmd ) =
    case Parser.parse routeParser url of
        Just route ->
            case routeAccessType route of
                Public ->
                    -- For public routes, directly initialize the appropriate page
                    -- without waiting for session checks
                    case route of
                        PublicRoute HomeRoute ->
                            let
                                ( homeModel, homeCmd ) =
                                    Home.init model.key
                            in
                            ( { model | page = HomePage homeModel }
                            , Cmd.map HomeMsg homeCmd
                            )

                        PublicRoute LoginRoute ->
                            let
                                ( loginModel, loginCmd ) =
                                    Login.init model.key False url
                            in
                            ( { model | page = LoginPage loginModel }
                            , Cmd.map LoginMsg loginCmd
                            )

                        PublicRoute SignupRoute ->
                            let
                                ( signupModel, signupCmd ) =
                                    Signup.init model.key
                            in
                            ( { model | page = Signup signupModel }
                            , Cmd.map SignupMsg signupCmd
                            )

                        PublicRoute (OnboardingRoute step) ->
                            let
                                ( onboardingModel, onboardingCmd ) =
                                    Onboarding.init
                                        model.key
                                        (model.currentUser
                                            |> Maybe.map .organizationSlug
                                            |> Maybe.withDefault ""
                                        )
                                        (extractSession model.session)
                                        (onboardingStepToStep step)
                            in
                            ( { model | page = OnboardingPage onboardingModel }
                            , Cmd.map OnboardingMsg onboardingCmd
                            )

                        PublicRoute (CompareRoute params) ->
                            let
                                ( compareModel, compareCmd ) =
                                    Compare.init model.key (Just params)
                            in
                            ( { model | page = ComparePage compareModel }
                            , Cmd.map CompareMsg compareCmd
                            )

                        PublicRoute (QuoteRoute params) ->
                            let
                                initialValues =
                                    { zipCode = Nothing
                                    , dateOfBirth = Nothing
                                    , tobacco = Nothing
                                    , gender = Nothing
                                    , quoteId = (\( id, _, _ ) -> id) params
                                    , planType = (\( _, _, planType ) -> planType) params
                                    }

                                ( quoteModel, quoteCmd ) =
                                    Quote.init model.key initialValues
                            in
                            ( { model | page = QuotePage quoteModel }
                            , Cmd.map QuoteMsg quoteCmd
                            )

                        PublicRoute (EligibilityRoute params) ->
                            let
                                ( eligibilityModel, eligibilityCmd ) =
                                    Eligibility.init model.key (Tuple.first params)
                            in
                            ( { model | page = EligibilityPage eligibilityModel }
                            , Cmd.map EligibilityMsg eligibilityCmd
                            )

                        PublicRoute (ScheduleRoute params) ->
                            let
                                ( scheduleModel, scheduleCmd ) =
                                    Schedule.init model.key
                                        ((\( id, _, _ ) -> id) params)
                                        ((\( _, status, _ ) -> status) params)
                            in
                            ( { model | page = SchedulePage scheduleModel }
                            , Cmd.map ScheduleMsg scheduleCmd
                            )

                        PublicRoute (VerifyRoute params) ->
                            -- For verification, we need to make an API call
                            let
                                verifyUrl =
                                    case params of
                                        VerifyParams orgSlug token ->
                                            "/api/auth/verify/" ++ orgSlug ++ "/" ++ token

                                verifyCmd =
                                    Http.get
                                        { url = verifyUrl
                                        , expect = Http.expectJson GotVerification verificationDecoder
                                        }
                            in
                            ( model, verifyCmd )

                        -- For any other routes, use the standard updatePage
                        _ ->
                            updatePage url ( model, cmd )

                _ ->
                    -- For protected routes, use the standard updatePage
                    updatePage url ( model, cmd )

        Nothing ->
            -- For invalid routes, show the not found page
            ( { model | page = NotFoundPage }
            , cmd
            )

================
File: src/main.ts
================
import './styles.css'
import { Elm } from './Main.elm'
import './stripe-integration.js'

const root = document.querySelector('#app')
if (!root) {
  console.error('Could not find root element')
  throw new Error('Could not find root element')
}

// Get session cookie if it exists
const getCookie = (name: string) => {
  const value = `; ${document.cookie}`
  const parts = value.split(`; ${name}=`)
  if (parts.length === 2) return parts.pop()?.split(';').shift()
  return null
}

const sessionCookie = getCookie('session')
console.log('Found session cookie:', sessionCookie)

// Favicon is now set directly in index.html

try {
  // @ts-ignore - Will be used for ports in the future
  const app = Elm.Main.init({
    node: root,
    flags: {
      apiUrl: 'http://localhost:3000',
      initialSession: sessionCookie || null
    }
  })


  
  // Stripe integration ports
  if (app.ports) {
    // Initialize Stripe
    if (app.ports.initializeStripe) {
      app.ports.initializeStripe.subscribe((publishableKey: string) => {
        console.log('Initializing Stripe with key:', publishableKey.substring(0, 8) + '...')
        try {
          // @ts-ignore - stripeIntegration is attached to window
          const initialized = window.stripeIntegration.initializeStripe(publishableKey)
          if (app.ports.stripeInitialized) {
            app.ports.stripeInitialized.send(initialized)
          }
        } catch (error) {
          console.error('Failed to initialize Stripe:', error)
          if (app.ports.stripeInitialized) {
            app.ports.stripeInitialized.send(false)
          }
        }
      })
    }

    // Process payment
    if (app.ports.processPayment) {
      app.ports.processPayment.subscribe((clientSecret: string) => {
        console.log('Processing payment with client secret:', clientSecret.substring(0, 8) + '...')
        try {
          // @ts-ignore - stripeIntegration is attached to window
          window.stripeIntegration.processPayment(clientSecret)
            .then((result: any) => {
              if (app.ports.paymentProcessed) {
                app.ports.paymentProcessed.send(result)
              }
            })
            .catch((error: Error) => {
              console.error('Payment processing error:', error)
              if (app.ports.paymentProcessed) {
                app.ports.paymentProcessed.send({ success: false, error: error.message })
              }
            })
        } catch (error) {
          console.error('Failed to process payment:', error)
          if (app.ports.paymentProcessed) {
            app.ports.paymentProcessed.send({ success: false, error: 'Failed to process payment' })
          }
        }
      })
    }

    // Clean up Stripe
    if (app.ports.cleanupStripe) {
      app.ports.cleanupStripe.subscribe(() => {
        console.log('Cleaning up Stripe')
        try {
          // @ts-ignore - stripeIntegration is attached to window
          window.stripeIntegration.cleanupStripe()
        } catch (error) {
          console.error('Failed to clean up Stripe:', error)
        }
      })
    }
  }
} catch (error) {
  console.error('Failed to initialize Elm application:', error)
  root.innerHTML = 'Failed to load application. Please try refreshing the page.'
}

================
File: src/Ports.elm
================
port module Ports exposing (clearSessionCookie)


port clearSessionCookie : () -> Cmd msg

================
File: src/Profile.elm
================
module Profile exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Svg exposing (path, svg)
import Svg.Attributes as SvgAttr
import Time



-- MODEL


type alias Model =
    { currentUser : Maybe User
    , originalUser : Maybe User -- Store original user data for comparison
    , isLoading : Bool
    , error : Maybe String
    , pendingSave : Bool
    }


type alias User =
    { id : Int
    , email : String
    , firstName : String
    , lastName : String
    , phone : String
    , isAdmin : Bool
    , isAgent : Bool
    , calendarUrl : String
    }


init : () -> ( Model, Cmd Msg )
init _ =
    ( { currentUser = Nothing
      , originalUser = Nothing
      , isLoading = True
      , error = Nothing
      , pendingSave = False
      }
    , fetchCurrentUser
    )



-- UPDATE


type Msg
    = GotCurrentUser (Result Http.Error CurrentUserResponse)
    | UpdateField String String
    | SaveProfile
    | ProfileSaved (Result Http.Error ())
    | NavigateTo String
    | WatchTutorial


type alias CurrentUserResponse =
    { success : Bool
    , user : Maybe User
    }


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotCurrentUser (Ok response) ->
            ( { model
                | currentUser = response.user
                , originalUser = response.user -- Store original user data
                , isLoading = False
              }
            , Cmd.none
            )

        GotCurrentUser (Err error) ->
            ( { model
                | error = Just "Failed to load profile"
                , isLoading = False
              }
            , Cmd.none
            )

        UpdateField field value ->
            case model.currentUser of
                Just user ->
                    let
                        updatedUser =
                            case field of
                                "firstName" ->
                                    { user | firstName = value }

                                "lastName" ->
                                    { user | lastName = value }

                                "phone" ->
                                    { user | phone = String.filter Char.isDigit value }

                                "calendarUrl" ->
                                    { user | calendarUrl = value }

                                _ ->
                                    user
                    in
                    ( { model | currentUser = Just updatedUser }
                    , Cmd.none
                    )

                Nothing ->
                    ( model, Cmd.none )

        SaveProfile ->
            ( { model | pendingSave = True }
            , case model.currentUser of
                Just user ->
                    saveProfile user

                Nothing ->
                    Cmd.none
            )

        ProfileSaved (Ok _) ->
            ( { model
                | pendingSave = False
                , originalUser = model.currentUser -- Update original user after successful save
              }
            , Cmd.none
            )

        ProfileSaved (Err _) ->
            ( { model
                | pendingSave = False
                , error = Just "Failed to save profile changes"
              }
            , Cmd.none
            )

        NavigateTo path ->
            ( model, Cmd.none )

        WatchTutorial ->
            ( model, Cmd.none )



-- Main.elm will handle the actual navigation
-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Profile"
    , body =
        [ div [ class "min-h-screen bg-gray-50" ]
            [ div [ class "max-w-3xl mx-auto py-12 px-4 sm:px-6 lg:px-8" ]
                [ h1 [ class "text-3xl font-bold text-gray-900 mb-8" ]
                    [ text "Profile" ]
                , viewContent model
                ]
            ]
        ]
    }


viewContent : Model -> Html Msg
viewContent model =
    if model.isLoading then
        div [ class "flex justify-center items-center h-64" ]
            [ viewSpinner ]

    else
        case model.currentUser of
            Just user ->
                div [ class "bg-white shadow rounded-lg p-6 space-y-6" ]
                    [ div [ class "mb-4 flex justify-end space-x-4" ]
                        [ button
                            [ class "flex items-center text-sm text-blue-600 hover:text-blue-800"
                            , onClick (NavigateTo "/dashboard?payment_success=true")
                            ]
                            [ div [ class "mr-2" ]
                                [ svg
                                    [ SvgAttr.class "h-5 w-5"
                                    , SvgAttr.viewBox "0 0 20 20"
                                    , SvgAttr.fill "currentColor"
                                    ]
                                    [ path
                                        [ SvgAttr.d "M10 12a2 2 0 100-4 2 2 0 000 4z" ]
                                        []
                                    , path
                                        [ SvgAttr.fillRule "evenodd"
                                        , SvgAttr.d "M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                                        , SvgAttr.clipRule "evenodd"
                                        ]
                                        []
                                    ]
                                ]
                            , text "Watch Setup Tutorial"
                            ]
                        , if user.isAdmin then
                            button
                                [ class "flex items-center text-sm text-purple-600 hover:text-purple-800"
                                , onClick (NavigateTo "/subscription")
                                ]
                                [ div [ class "mr-2" ]
                                    [ svg
                                        [ SvgAttr.class "h-5 w-5"
                                        , SvgAttr.viewBox "0 0 20 20"
                                        , SvgAttr.fill "currentColor"
                                        ]
                                        [ path
                                            [ SvgAttr.d "M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4z" ]
                                            []
                                        , path
                                            [ SvgAttr.fillRule "evenodd"
                                            , SvgAttr.d "M18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z"
                                            , SvgAttr.clipRule "evenodd"
                                            ]
                                            []
                                        ]
                                    ]
                                , text "Subscription & Payments"
                                ]

                          else
                            text ""
                        ]
                    , viewBasicInfo user
                    , viewSaveButton model
                    ]

            Nothing ->
                div [ class "text-center text-gray-600" ]
                    [ text "Failed to load profile" ]


viewBasicInfo : User -> Html Msg
viewBasicInfo user =
    div [ class "space-y-6" ]
        [ div [ class "border-b border-gray-200 pb-4" ]
            [ h2 [ class "text-lg font-medium text-gray-900" ]
                [ text "Basic Information" ]
            ]
        , div [ class "grid grid-cols-2 gap-4" ]
            [ viewField "First Name" "text" user.firstName "firstName"
            , viewField "Last Name" "text" user.lastName "lastName"
            , viewField "Email" "email" user.email "email"
            , viewField "Phone" "tel" user.phone "phone"
            , viewField "Calendar URL" "url" user.calendarUrl "calendarUrl"
            ]
        , viewRoleInfo user
        ]


viewField : String -> String -> String -> String -> Html Msg
viewField label inputType value field =
    div []
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text label ]
        , input
            [ type_ inputType
            , class "mt-1 px-3.5 py-2.5 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500"
            , Html.Attributes.value
                (if field == "phone" then
                    formatPhoneNumber value

                 else
                    value
                )
            , onInput (UpdateField field)
            , disabled (field == "email") -- Email cannot be changed
            ]
            []
        ]


viewRoleInfo : User -> Html Msg
viewRoleInfo user =
    if user.isAdmin then
        div [ class "mb-6" ]
            [ label [ class "block text-sm font-medium text-gray-700 mb-2" ]
                [ text "Role" ]
            , div [ class "mt-2 text-sm text-gray-500" ]
                [ text "You have administrator privileges" ]
            ]

    else
        text ""


viewSaveButton : Model -> Html Msg
viewSaveButton model =
    div [ class "mt-8 flex justify-center" ]
        [ if model.pendingSave then
            div [ class "px-6 py-3 flex items-center space-x-2" ]
                [ viewSpinner ]

          else
            button
                [ class "px-6 py-3 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-blue-600"
                , onClick SaveProfile
                , disabled (not (hasChanges model))
                ]
                [ text "Save Changes" ]
        ]


viewSpinner : Html Msg
viewSpinner =
    div [ class "animate-spin rounded-full h-5 w-5 border-2 border-blue-500 border-t-transparent" ] []



-- HTTP


fetchCurrentUser : Cmd Msg
fetchCurrentUser =
    Http.get
        { url = "/api/me"
        , expect = Http.expectJson GotCurrentUser currentUserResponseDecoder
        }


saveProfile : User -> Cmd Msg
saveProfile user =
    Http.request
        { method = "PUT"
        , headers = []
        , url = "/api/profile"
        , body = Http.jsonBody (encodeUser user)
        , expect = Http.expectWhatever ProfileSaved
        , timeout = Nothing
        , tracker = Nothing
        }



-- DECODERS


currentUserResponseDecoder : Decoder CurrentUserResponse
currentUserResponseDecoder =
    Decode.map2 CurrentUserResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "user" (Decode.nullable userDecoder))


userDecoder : Decoder User
userDecoder =
    Decode.succeed User
        |> Pipeline.required "id" Decode.int
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "firstName" Decode.string
        |> Pipeline.required "lastName" Decode.string
        |> Pipeline.required "phone" Decode.string
        |> Pipeline.required "is_admin" Decode.bool
        |> Pipeline.required "is_agent" Decode.bool
        |> Pipeline.optional "calendar_url" Decode.string ""



-- ENCODERS


encodeUser : User -> Encode.Value
encodeUser user =
    Encode.object
        [ ( "firstName", Encode.string user.firstName )
        , ( "lastName", Encode.string user.lastName )
        , ( "email", Encode.string user.email )
        , ( "phone", Encode.string user.phone )
        , ( "calendar_url", Encode.string user.calendarUrl )
        ]



-- HELPERS


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    let
        digits =
            String.filter Char.isDigit phone
                |> String.left 10

        len =
            String.length digits
    in
    if len == 0 then
        ""

    else if len <= 3 then
        "(" ++ digits

    else if len <= 6 then
        "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

    else
        "("
            ++ String.left 3 digits
            ++ ") "
            ++ String.slice 3 6 digits
            ++ "-"
            ++ String.dropLeft 6 digits


formatRole : User -> String
formatRole user =
    if user.isAdmin && user.isAgent then
        "Admin"

    else if user.isAdmin then
        "Admin"

    else if user.isAgent then
        "Agent"

    else
        "User"


isAgent : User -> Bool
isAgent user =
    user.isAgent



-- Add this helper function to check for changes


hasChanges : Model -> Bool
hasChanges model =
    case ( model.currentUser, model.originalUser ) of
        ( Just current, Just original ) ->
            current.firstName
                /= original.firstName
                || current.lastName
                /= original.lastName
                || current.phone
                /= original.phone

        _ ->
            False



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Quote.elm
================
module Quote exposing (Model, Msg(..), init, subscriptions, update, view)

import AgeCalc exposing (getAgeNextMonth)
import Browser
import Browser.Navigation as Nav
import Date exposing (Date)
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onInput, onSubmit)
import Http
import Json.Decode as D
import Task
import Time
import Url.Builder as Builder
import Url.Parser as Parser exposing ((<?>), Parser)
import Url.Parser.Query as Query


type alias Model =
    { zipCode : String
    , dateOfBirth : String
    , key : Nav.Key
    , tobacco : Bool
    , gender : String
    , currentDate : Maybe Date
    , quoteId : Maybe String
    , error : Maybe String
    , currentCarrier : Maybe String
    , planType : Maybe String
    , state : Maybe String
    , counties : List String
    , selectedCounty : Maybe String
    , isLoadingZipData : Bool
    , zipError : Maybe String
    }


type Msg
    = UpdateZipCode String
    | UpdateDateOfBirth String
    | UpdateTobacco String
    | UpdateGender String
    | SubmitForm
    | GotCurrentDate Date
    | GotQuoteInfo (Result Http.Error QuoteInfo)
    | GotZipInfo (Result Http.Error ZipInfo)
    | UpdateSelectedCounty String


type alias InitialValues =
    { zipCode : Maybe String
    , dateOfBirth : Maybe String
    , tobacco : Maybe Bool
    , gender : Maybe String
    , quoteId : Maybe String
    , planType : Maybe String
    }


type alias QuoteInfo =
    { zipCode : String
    , dateOfBirth : String
    , tobacco : Bool
    , gender : String
    , currentCarrier : String
    }


type alias ZipInfo =
    { state : String
    , counties : List String
    }


init : Nav.Key -> InitialValues -> ( Model, Cmd Msg )
init key initialValues =
    let
        model =
            { zipCode = Maybe.withDefault "" initialValues.zipCode
            , dateOfBirth = Maybe.withDefault "" initialValues.dateOfBirth
            , key = key
            , tobacco = Maybe.withDefault False initialValues.tobacco
            , gender = Maybe.withDefault "M" initialValues.gender
            , currentDate = Nothing
            , quoteId = initialValues.quoteId
            , error = Nothing
            , currentCarrier = Nothing
            , planType = initialValues.planType
            , state = Nothing
            , counties = []
            , selectedCounty = Nothing
            , isLoadingZipData = False
            , zipError = Nothing
            }

        commands =
            [ Task.perform GotCurrentDate Date.today
            , case initialValues.quoteId of
                Just id ->
                    fetchQuoteInfo id

                Nothing ->
                    Cmd.none
            ]
                ++ (if String.length model.zipCode == 5 then
                        [ fetchZipInfo model.zipCode ]

                    else
                        []
                   )
    in
    ( model, Cmd.batch commands )


fetchQuoteInfo : String -> Cmd Msg
fetchQuoteInfo quoteId =
    Http.get
        { url = "/api/quotes/decode/" ++ quoteId
        , expect = Http.expectJson GotQuoteInfo quoteInfoDecoder
        }


fetchZipInfo : String -> Cmd Msg
fetchZipInfo zipCode =
    Http.get
        { url = "/api/zipinfo/" ++ zipCode
        , expect = Http.expectJson GotZipInfo zipInfoDecoder
        }


quoteInfoDecoder : D.Decoder QuoteInfo
quoteInfoDecoder =
    D.field "contact"
        (D.map5 QuoteInfo
            (D.field "zipCode" D.string)
            (D.field "dateOfBirth" D.string)
            (D.field "tobacco" D.bool)
            (D.field "gender" D.string)
            (D.field "currentCarrier" D.string)
        )


zipInfoDecoder : D.Decoder ZipInfo
zipInfoDecoder =
    D.field "success" D.bool
        |> D.andThen
            (\success ->
                if success then
                    D.field "data"
                        (D.map2 ZipInfo
                            (D.field "state" D.string)
                            (D.field "counties" (D.list D.string))
                        )

                else
                    D.field "error" D.string
                        |> D.andThen (\error -> D.fail error)
            )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateZipCode zip ->
            let
                filteredZip =
                    String.filter Char.isDigit zip |> String.left 5

                cmd =
                    if String.length filteredZip == 5 && filteredZip /= model.zipCode then
                        fetchZipInfo filteredZip

                    else
                        Cmd.none
            in
            ( { model
                | zipCode = filteredZip
                , isLoadingZipData = String.length filteredZip == 5 && filteredZip /= model.zipCode
                , state =
                    if String.length filteredZip /= 5 then
                        Nothing

                    else
                        model.state
                , counties =
                    if String.length filteredZip /= 5 then
                        []

                    else
                        model.counties
                , selectedCounty =
                    if String.length filteredZip /= 5 then
                        Nothing

                    else
                        model.selectedCounty
                , zipError = Nothing
              }
            , cmd
            )

        UpdateDateOfBirth dob ->
            ( { model | dateOfBirth = dob }, Cmd.none )

        UpdateTobacco value ->
            ( { model | tobacco = value == "true" }, Cmd.none )

        UpdateGender value ->
            ( { model | gender = value }, Cmd.none )

        GotCurrentDate date ->
            ( { model | currentDate = Just date }, Cmd.none )

        GotQuoteInfo result ->
            case result of
                Ok quoteInfo ->
                    let
                        updatedModel =
                            { model
                                | zipCode = quoteInfo.zipCode
                                , dateOfBirth = quoteInfo.dateOfBirth
                                , tobacco = quoteInfo.tobacco
                                , gender = quoteInfo.gender
                                , currentCarrier =
                                    if String.isEmpty quoteInfo.currentCarrier then
                                        Nothing

                                    else
                                        Just quoteInfo.currentCarrier
                            }

                        cmd =
                            if String.length quoteInfo.zipCode == 5 then
                                fetchZipInfo quoteInfo.zipCode

                            else
                                Cmd.none
                    in
                    ( updatedModel, cmd )

                Err _ ->
                    ( { model | error = Just "Failed to load quote information" }, Cmd.none )

        GotZipInfo result ->
            case result of
                Ok zipInfo ->
                    let
                        -- Always select the first county as default
                        selectedCounty =
                            List.head zipInfo.counties
                    in
                    ( { model
                        | state = Just zipInfo.state
                        , counties = zipInfo.counties
                        , selectedCounty = selectedCounty
                        , isLoadingZipData = False
                        , zipError = Nothing
                      }
                    , Cmd.none
                    )

                Err error ->
                    ( { model
                        | state = Nothing
                        , counties = []
                        , selectedCounty = Nothing
                        , isLoadingZipData = False
                        , zipError = Just (httpErrorToString error)
                      }
                    , Cmd.none
                    )

        UpdateSelectedCounty county ->
            ( { model | selectedCounty = Just county }, Cmd.none )

        SubmitForm ->
            if String.length model.zipCode /= 5 then
                ( { model | zipError = Just "Please enter a valid 5-digit zip code" }, Cmd.none )

            else if model.state == Nothing then
                ( { model | zipError = Just "Unable to determine state from zip code" }, Cmd.none )

            else
                let
                    age =
                        case model.currentDate of
                            Just currentDate ->
                                getAgeNextMonth model.dateOfBirth currentDate
                                    |> String.fromInt

                            Nothing ->
                                "65"

                    -- Get the selected county or the first one from the list
                    county =
                        case model.selectedCounty of
                            Just c ->
                                c

                            Nothing ->
                                List.head model.counties
                                    |> Maybe.withDefault ""

                    state =
                        model.state
                            |> Maybe.withDefault ""

                    -- Build the URL with all parameters
                    compareUrl =
                        Builder.absolute [ "compare" ]
                            ([ Builder.string "zip" model.zipCode
                             , Builder.string "state" state
                             , Builder.string "county" county
                             , Builder.string "gender" model.gender
                             , Builder.string "tobacco"
                                (if model.tobacco then
                                    "true"

                                 else
                                    "false"
                                )
                             , Builder.string "age" age
                             , Builder.string "dateOfBirth" model.dateOfBirth
                             ]
                                ++ (case model.quoteId of
                                        Just id ->
                                            [ Builder.string "id" id ]

                                        Nothing ->
                                            []
                                   )
                                ++ (case model.currentCarrier of
                                        Just carrier ->
                                            [ Builder.string "currentCarrier" carrier ]

                                        Nothing ->
                                            []
                                   )
                                ++ (case model.planType of
                                        Just planType ->
                                            [ Builder.string "planType" planType ]

                                        Nothing ->
                                            [ Builder.string "planType" "G" ]
                                    -- Default to G if no plan type provided
                                   )
                            )
                in
                ( model
                , Nav.pushUrl model.key compareUrl
                )


view : Model -> Browser.Document Msg
view model =
    { title = "Get Your Quote - Medicare Max"
    , body =
        [ div [ class "container mx-auto px-4 py-8 max-w-xl" ]
            [ h1 [ class "text-3xl font-bold text-center mb-6" ]
                [ text "Get Your Quote" ]
            , div [ class "flex justify-center mb-8" ]
                [ button
                    [ class "flex items-center gap-2 px-4 py-2 rounded-full border border-blue-500 text-blue-500 hover:bg-blue-50 transition-colors"
                    ]
                    [ span [ class "text-sm" ] [ text "▶ Video" ]
                    , text "Rates and Plan Options"
                    ]
                ]
            , case model.error of
                Just error ->
                    div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" ]
                        [ text error ]

                Nothing ->
                    text ""
            , Html.form [ onSubmit SubmitForm, class "space-y-6" ]
                [ viewFormInput "Zip Code" "text" model.zipCode UpdateZipCode True

                -- Show zip code loading state or error if any
                , if model.isLoadingZipData then
                    div [ class "text-sm text-blue-600" ]
                        [ text "Looking up location..." ]

                  else if model.zipError /= Nothing then
                    div [ class "text-sm text-red-600" ]
                        [ text (Maybe.withDefault "Invalid zip code" model.zipError) ]

                  else
                    text ""

                -- Only show the county dropdown if there are multiple counties
                , if List.length model.counties > 1 then
                    viewCountyDropdown model.counties model.selectedCounty

                  else
                    text ""
                , viewFormInput "Date of Birth" "date" model.dateOfBirth UpdateDateOfBirth True
                , viewFormRadioGroup "Tobacco User"
                    (if model.tobacco then
                        "true"

                     else
                        "false"
                    )
                    UpdateTobacco
                    [ ( "true", "Yes" ), ( "false", "No" ) ]
                , viewFormRadioGroup "Gender"
                    model.gender
                    UpdateGender
                    [ ( "M", "Male" ), ( "F", "Female" ) ]
                , button
                    [ class "w-full bg-purple-600 text-white py-4 rounded-lg hover:bg-purple-700 transition-colors mt-8"
                    , type_ "submit"
                    ]
                    [ text "Next" ]
                ]
            ]
        ]
    }


viewCountyDropdown : List String -> Maybe String -> Html Msg
viewCountyDropdown counties selectedCounty =
    div [ class "form-group" ]
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text "County" ]
        , select
            [ class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200"
            , onInput UpdateSelectedCounty
            , required True
            ]
            (option [ value "", disabled True, selected (selectedCounty == Nothing) ]
                [ text "Select your county" ]
                :: List.map
                    (\county ->
                        option
                            [ value county
                            , selected (selectedCounty == Just county)
                            ]
                            [ text county ]
                    )
                    counties
            )
        ]


viewFormInput : String -> String -> String -> (String -> Msg) -> Bool -> Html Msg
viewFormInput labelText inputType inputValue msg isRequired =
    div [ class "form-group" ]
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text labelText ]
        , if inputType == "date" then
            input
                [ type_ inputType
                , class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200"
                , Html.Attributes.value inputValue
                , onInput msg
                , required isRequired
                ]
                []

          else if labelText == "Zip Code" then
            input
                [ type_ inputType
                , class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200"
                , Html.Attributes.value (formatZipCode inputValue)
                , onInput msg
                , required isRequired
                , Html.Attributes.maxlength 5
                , Html.Attributes.pattern "[0-9]*"
                ]
                []

          else
            input
                [ type_ inputType
                , class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200"
                , Html.Attributes.value inputValue
                , onInput msg
                , required isRequired
                ]
                []
        ]


viewFormRadioGroup : String -> String -> (String -> Msg) -> List ( String, String ) -> Html Msg
viewFormRadioGroup labelText selectedValue msg options =
    div [ class "form-group" ]
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text labelText ]
        , div [ class "flex gap-4" ]
            (List.map
                (\( val, txt ) ->
                    label
                        [ class
                            ("flex items-center px-4 py-2 rounded-lg border-2 cursor-pointer transition-all duration-200 "
                                ++ (if selectedValue == val then
                                        "border-purple-500 bg-purple-50 text-purple-700"

                                    else
                                        "border-gray-200 hover:border-purple-200"
                                   )
                            )
                        ]
                        [ input
                            [ type_ "radio"
                            , value val
                            , checked (selectedValue == val)
                            , onInput msg
                            , class "sr-only"
                            ]
                            []
                        , text txt
                        ]
                )
                options
            )
        ]


formatZipCode : String -> String
formatZipCode zip =
    String.filter Char.isDigit zip |> String.left 5


httpErrorToString : Http.Error -> String
httpErrorToString error =
    case error of
        Http.BadUrl url ->
            "Bad URL: " ++ url

        Http.Timeout ->
            "Request timed out"

        Http.NetworkError ->
            "Network error"

        Http.BadStatus statusCode ->
            "Bad status: " ++ String.fromInt statusCode

        Http.BadBody message ->
            "Data error: " ++ message


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/QuoteBirthdayRules.elm
================
module QuoteBirthdayRules exposing
    ( PlanRestriction(..)
    , canPresentPlan
    , getQuotePlanRestriction
    )

{-| This module handles birthday rule restrictions for the quote page.
It determines which plans can be presented based on the contact's state and current plan.
-}

import BirthdayRules exposing (canPresentDifferentPlanOnly, isInBirthdayRuleWindow)
import Date exposing (Date)


{-| Represents the plan restriction for a quote.
-}
type PlanRestriction
    = NoRestriction
    | DifferentPlanOnly
    | NoQuoteAllowed


{-| Determines which plans can be presented based on the contact's state, birth date, and current plan.
-}
getQuotePlanRestriction : String -> Date -> Date -> String -> PlanRestriction
getQuotePlanRestriction state birthDate currentDate currentPlan =
    if isInBirthdayRuleWindow state birthDate currentDate then
        if canPresentDifferentPlanOnly state then
            DifferentPlanOnly

        else
            NoQuoteAllowed

    else
        NoRestriction


{-| Checks if a plan can be presented based on the restriction and the contact's current plan.
-}
canPresentPlan : PlanRestriction -> String -> String -> Bool
canPresentPlan restriction currentPlan planToPresent =
    case restriction of
        NoRestriction ->
            True

        NoQuoteAllowed ->
            False

        DifferentPlanOnly ->
            -- Only allow presenting a different plan type
            -- For example, if current plan is "Plan G", only allow "Plan N" and vice versa
            case ( currentPlan, planToPresent ) of
                ( "Plan G", "Plan N" ) ->
                    True

                ( "G", "Plan N" ) ->
                    True

                ( "G", "N" ) ->
                    True

                ( "Plan G", "N" ) ->
                    True

                ( "Plan N", "Plan G" ) ->
                    True

                ( "N", "Plan G" ) ->
                    True

                ( "N", "G" ) ->
                    True

                ( "Plan N", "G" ) ->
                    True

                _ ->
                    False

================
File: src/Schedule.elm
================
module Schedule exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onInput, onSubmit)
import Http
import Json.Decode as D
import Json.Encode as E
import List.Extra
import Url


type EligibilityStatus
    = Accept
    | Decline
    | Generic


type alias OrgInfo =
    { redirectUrl : Maybe String
    , agentName : String
    }


type alias Model =
    { name : Maybe String
    , email : Maybe String
    , phoneNumber : Maybe String
    , isSubmitting : Bool
    , error : Maybe String
    , success : Bool
    , quoteId : Maybe String
    , key : Nav.Key
    , status : EligibilityStatus
    , redirectUrl : Maybe String
    }


type Msg
    = UpdateName String
    | UpdateEmail String
    | UpdatePhoneNumber String
    | SubmitForm
    | GotSubmitResponse (Result Http.Error SubmitResponse)
    | GotContactInfo (Result Http.Error ContactInfo)


type alias ContactInfo =
    { email : String
    , firstName : String
    , lastName : String
    , phoneNumber : String
    }


type alias SubmitResponse =
    { success : Bool
    , message : String
    }


init : Nav.Key -> Maybe String -> Maybe String -> ( Model, Cmd Msg )
init key maybeQuoteId maybeStatus =
    let
        status =
            case maybeStatus of
                Just "accept" ->
                    Accept

                Just "decline" ->
                    Decline

                _ ->
                    Generic

        commands =
            case maybeQuoteId of
                Just quoteId ->
                    [ Http.get
                        { url = "/api/quotes/decode/" ++ quoteId
                        , expect = Http.expectJson GotContactInfo contactInfoDecoder
                        }
                    ]

                Nothing ->
                    []
    in
    ( { name = Nothing
      , email = Nothing
      , phoneNumber = Nothing
      , isSubmitting = False
      , error = Nothing
      , success = False
      , quoteId = maybeQuoteId
      , key = key
      , status = status
      , redirectUrl = Just "https://calendly.com/medicareschool-max/30min"
      }
    , Cmd.batch commands
    )


contactInfoDecoder : D.Decoder ContactInfo
contactInfoDecoder =
    D.field "contact"
        (D.map4 ContactInfo
            (D.field "email" D.string)
            (D.field "firstName" D.string)
            (D.field "lastName" D.string)
            (D.field "phoneNumber" D.string)
        )


submitResponseDecoder : D.Decoder SubmitResponse
submitResponseDecoder =
    D.map2 SubmitResponse
        (D.field "success" D.bool)
        (D.field "message" D.string)


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateName name ->
            ( { model | name = Just name }, Cmd.none )

        UpdateEmail email ->
            ( { model | email = Just email }, Cmd.none )

        UpdatePhoneNumber phoneNumber ->
            ( { model | phoneNumber = Just (stripPhoneNumber phoneNumber) }, Cmd.none )

        SubmitForm ->
            ( { model | isSubmitting = True }
            , Http.post
                { url = "/api/contact-request"
                , body = Http.jsonBody (encodeForm model)
                , expect = Http.expectJson GotSubmitResponse submitResponseDecoder
                }
            )

        GotSubmitResponse result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model | isSubmitting = False, success = True }
                        , Cmd.none
                        )

                    else
                        ( { model | isSubmitting = False, error = Just response.message }
                        , Cmd.none
                        )

                Err _ ->
                    ( { model | isSubmitting = False, error = Just "Failed to submit form. Please try again." }
                    , Cmd.none
                    )

        GotContactInfo result ->
            case result of
                Ok info ->
                    ( { model
                        | email = Just info.email
                        , name = Just (info.firstName ++ " " ++ info.lastName)
                        , phoneNumber = Just info.phoneNumber
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( model, Cmd.none )


stripPhoneNumber : String -> String
stripPhoneNumber phoneNumber =
    String.filter Char.isDigit phoneNumber


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    if String.isEmpty phone then
        ""

    else
        let
            digits =
                String.filter Char.isDigit phone
                    |> String.left 10

            len =
                String.length digits
        in
        if len == 0 then
            ""

        else if len <= 3 then
            "(" ++ digits

        else if len <= 6 then
            "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

        else
            "(" ++ String.left 3 digits ++ ") " ++ String.slice 3 6 digits ++ "-" ++ String.dropLeft 6 digits


encodeForm : Model -> E.Value
encodeForm model =
    E.object
        [ ( "name", model.name |> Maybe.map Url.percentEncode |> Maybe.map E.string |> Maybe.withDefault E.null )
        , ( "email", model.email |> Maybe.map Url.percentEncode |> Maybe.map E.string |> Maybe.withDefault E.null )
        , ( "phoneNumber", model.phoneNumber |> Maybe.map stripPhoneNumber |> Maybe.map E.string |> Maybe.withDefault E.null )
        , ( "type"
          , E.string
                (case model.status of
                    Accept ->
                        "accept"

                    Decline ->
                        "decline"

                    Generic ->
                        "generic"
                )
          )
        , ( "quoteId", Maybe.map E.string model.quoteId |> Maybe.withDefault E.null )
        ]


view : Model -> Browser.Document Msg
view model =
    { title = getTitle model.status
    , body =
        [ div [ class "min-h-screen bg-white" ]
            [ div [ class "max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12" ]
                [ if model.success then
                    div [ class "text-center" ]
                        [ h1 [ class "text-3xl font-bold text-gray-900 mb-4" ]
                            [ text "Thank You" ]
                        , p [ class "text-gray-600" ]
                            [ text "We'll be in touch soon to discuss your options." ]
                        ]

                  else
                    div []
                        [ h1 [ class "text-3xl font-bold text-center text-gray-900 mb-4" ]
                            [ text (getHeading model.status) ]
                        , p [ class "text-gray-600 text-center mb-8" ]
                            [ text (getMessage model.status) ]
                        , case model.error of
                            Just error ->
                                div [ class "bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" ]
                                    [ text error ]

                            Nothing ->
                                text ""
                        , Html.form [ onSubmit SubmitForm, class "space-y-6 max-w-lg mx-auto" ]
                            [ div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                    [ text "Name" ]
                                , input
                                    [ type_ "text"
                                    , class "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
                                    , value (model.name |> Maybe.withDefault "")
                                    , onInput UpdateName
                                    , required True
                                    ]
                                    []
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                    [ text "Email" ]
                                , input
                                    [ type_ "email"
                                    , class "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
                                    , value (model.email |> Maybe.withDefault "")
                                    , onInput UpdateEmail
                                    , required True
                                    ]
                                    []
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                    [ text "Phone Number" ]
                                , input
                                    [ type_ "tel"
                                    , class "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
                                    , value (model.phoneNumber |> Maybe.map formatPhoneNumber |> Maybe.withDefault "")
                                    , onInput UpdatePhoneNumber
                                    , required True
                                    ]
                                    []
                                ]
                            , case model.redirectUrl of
                                Just url ->
                                    let
                                        fullUrl =
                                            List.Extra.zip
                                                [ "email", "name", "location" ]
                                                [ model.email
                                                , model.name
                                                , model.phoneNumber
                                                ]
                                                |> List.filterMap
                                                    (\( key, value ) ->
                                                        case value of
                                                            Just s ->
                                                                case key of
                                                                    "location" ->
                                                                        Just (key ++ "=1" ++ Url.percentEncode s)

                                                                    _ ->
                                                                        Just (key ++ "=" ++ Url.percentEncode s)

                                                            Nothing ->
                                                                Nothing
                                                    )
                                                |> String.join "&"
                                                |> (\s -> url ++ "?" ++ s)
                                    in
                                    a
                                        [ class "w-full bg-purple-600 text-white py-3 px-4 rounded-lg hover:bg-purple-700 transition-colors duration-200 disabled:opacity-50 text-center block"
                                        , href fullUrl
                                        , target "_blank"
                                        ]
                                        [ text "Schedule Follow-up" ]

                                Nothing ->
                                    button
                                        [ class "w-full bg-purple-600 text-white py-3 px-4 rounded-lg hover:bg-purple-700 transition-colors duration-200 disabled:opacity-50"
                                        , type_ "submit"
                                        , disabled model.isSubmitting
                                        ]
                                        [ if model.isSubmitting then
                                            text "Submitting..."

                                          else
                                            text "Schedule Follow-up"
                                        ]
                            ]
                        ]
                ]
            ]
        ]
    }


getTitle : EligibilityStatus -> String
getTitle status =
    case status of
        Accept ->
            "Good News! - Medicare Max"

        Decline ->
            "Not Eligible - Medicare Max"

        Generic ->
            "Schedule Follow-up - Medicare Max"


getHeading : EligibilityStatus -> String
getHeading status =
    case status of
        Accept ->
            "Great News!"

        Decline ->
            "We Need to Talk"

        Generic ->
            "Let's Connect"


getMessage : EligibilityStatus -> String
getMessage status =
    case status of
        Accept ->
            "Based on your answers, you look like a good candidate to switch plans. Let's schedule a follow-up to discuss your options."

        Decline ->
            "Based on your answers, you may not qualify for this plan. However, we'd love to help you find a different plan that's a perfect fit for your needs."

        Generic ->
            "Let's schedule a follow-up call to discuss your Medicare options and find the best plan for your needs."


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/Settings.elm
================
module Settings exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Components.ProgressIndicator
import Components.SetupLayout as SetupLayout
import File exposing (File)
import File.Select as Select
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onCheck, onClick, onInput)
import Http exposing (expectJson, jsonBody)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import StateRegions exposing (Region(..), getRegionStates, regionToString)
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, viewBox)
import Task



-- Constants


allStates : List String
allStates =
    [ "AL"
    , "AK"
    , "AZ"
    , "AR"
    , "CA"
    , "CO"
    , "CT"
    , "DE"
    , "FL"
    , "GA"
    , "HI"
    , "ID"
    , "IL"
    , "IN"
    , "IA"
    , "KS"
    , "KY"
    , "LA"
    , "ME"
    , "MD"
    , "MA"
    , "MI"
    , "MN"
    , "MS"
    , "MO"
    , "MT"
    , "NE"
    , "NV"
    , "NH"
    , "NJ"
    , "NM"
    , "NY"
    , "NC"
    , "ND"
    , "OH"
    , "OK"
    , "OR"
    , "PA"
    , "RI"
    , "SC"
    , "SD"
    , "TN"
    , "TX"
    , "UT"
    , "VT"
    , "VA"
    , "WA"
    , "WV"
    , "WI"
    , "WY"
    , "DC"
    ]


allCarriers : List String
allCarriers =
    [ "Aetna"
    , "Humana"
    , "UnitedHealthcare"
    , "Cigna"
    , "Aflac"
    , "Allstate"
    , "Mutual of Omaha"
    , "Ace Chubb"
    ]


type Carrier
    = Aetna
    | Humana
    | UnitedHealthcare
    | Cigna
    | Aflac
    | Allstate
    | MutualOfOmaha
    | AceChubb



-- Add new type for GI selection mode


type GISelectionMode
    = GIAll
    | GINone
    | GIRecommended


type alias InitFlags =
    { isSetup : Bool
    , key : Nav.Key
    , currentUser : Maybe CurrentUser
    , planType : String
    }


type alias CurrentUser =
    { id : String
    , email : String
    , isAdmin : Bool
    , isAgent : Bool
    , organizationSlug : String
    , organizationId : String
    }



-- Add new type for deactivated carrier-state pairs


type alias DeactivatedPair =
    { carrier : String
    , state : String
    }


type alias Model =
    { orgSettings : Maybe Settings
    , status : Status
    , expandedSections : List String
    , recommendedGICombos : List StateCarrierSetting
    , isSetup : Bool
    , key : Nav.Key
    , currentUser : Maybe CurrentUser
    , isLoading : Bool
    , isSaving : Bool
    , planType : String
    , error : Maybe String
    , selectedCarrier : Maybe String
    , selectedState : Maybe String
    , deactivatedPairs : List DeactivatedPair
    , loadedCarriers : List String
    }


type alias StateCarrierSetting =
    { state : String
    , carrier : String
    , active : Bool
    , targetGI : Bool
    }


type alias Settings =
    { stateLicenses : List String
    , carrierContracts : List String
    , stateCarrierSettings : List StateCarrierSetting
    , allowAgentSettings : Bool
    , emailSendBirthday : Bool
    , emailSendPolicyAnniversary : Bool
    , emailSendAep : Bool
    , smartSendEnabled : Bool
    , brandName : String
    , primaryColor : String
    , secondaryColor : String
    , logo : Maybe String
    }


type Status
    = Loading
    | Loaded
    | Saving
    | Error String


type Msg
    = GotSettings (Result Http.Error SettingsResponse)
    | SaveSettings
    | SettingsSaved (Result Http.Error Settings)
    | ToggleEmailBirthday Bool
    | ToggleEmailAnniversary Bool
    | ToggleEmailAep Bool
    | ToggleSmartSend Bool
    | AddStateLicense String
    | RemoveStateLicense String
    | AddCarrierContract String
    | RemoveCarrierContract String
    | UpdateStateCarrierSetting String String Bool Bool
    | ToggleSection String
    | ToggleAllStates Bool
    | ToggleAllCarriers Bool
    | ApplyGISelection GISelectionMode
    | GotRecommendedGICombos (Result Http.Error (List StateCarrierSetting))
    | ToggleAllowAgentSettings Bool
    | FinishSetup
    | SelectCommonStates Region
    | UpdateBrandName String
    | UpdatePrimaryColor String
    | UpdateSecondaryColor String
    | UploadLogo
    | GotLogo File
    | GotLogoUrl String
    | LogoUploaded (Result Http.Error String)
    | NoOp
    | OrgFinalized (Result Http.Error ())
    | SelectCarrier String
    | SelectState String
    | AddDeactivatedPair
    | RemoveDeactivatedPair String String
    | GotCarriers (Result Http.Error (List String))


type alias SettingsResponse =
    { orgSettings : Settings
    , canEditOrgSettings : Bool
    }


init : InitFlags -> ( Model, Cmd Msg )
init flags =
    ( { orgSettings = Nothing
      , status = Loading
      , expandedSections = []
      , recommendedGICombos = []
      , isSetup = flags.isSetup
      , key = flags.key
      , currentUser = flags.currentUser
      , isLoading = True
      , isSaving = False
      , planType = flags.planType
      , error = Nothing
      , selectedCarrier = Nothing
      , selectedState = Nothing
      , deactivatedPairs = []
      , loadedCarriers = []
      }
    , Cmd.batch
        [ fetchSettings
        , fetchRecommendedGICombos
        , fetchCarriers
        ]
    )


fetchSettings : Cmd Msg
fetchSettings =
    Http.get
        { url = "/api/settings"
        , expect = Http.expectJson GotSettings settingsDecoder
        }


fetchRecommendedGICombos : Cmd Msg
fetchRecommendedGICombos =
    Http.get
        { url = "/api/settings/gi-recommendations"
        , expect = Http.expectJson GotRecommendedGICombos recommendationsDecoder
        }


fetchCarriers : Cmd Msg
fetchCarriers =
    Http.get
        { url = "/api/settings/carriers"
        , expect = Http.expectJson GotCarriers (Decode.list (Decode.field "name" Decode.string))
        }


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )

        GotSettings result ->
            case result of
                Ok response ->
                    ( { model | orgSettings = Just response.orgSettings, status = Loaded, isLoading = False }
                    , Cmd.none
                    )

                Err error ->
                    let
                        errorMsg =
                            case error of
                                Http.BadUrl url ->
                                    "Bad URL: " ++ url

                                Http.Timeout ->
                                    "Request timed out"

                                Http.NetworkError ->
                                    "Network error"

                                Http.BadStatus status ->
                                    "Bad status: " ++ String.fromInt status

                                Http.BadBody message ->
                                    "Bad body: " ++ message
                    in
                    ( { model | status = Error errorMsg, isLoading = False }
                    , Cmd.none
                    )

        GotCarriers result ->
            case result of
                Ok carriers ->
                    ( { model | loadedCarriers = carriers }
                    , Cmd.none
                    )

                Err _ ->
                    ( model, Cmd.none )

        SaveSettings ->
            ( { model | status = Saving }
            , Cmd.none
            )

        SettingsSaved result ->
            case result of
                Ok settings ->
                    ( { model | orgSettings = Just settings, status = Loaded }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model | status = Error "Failed to save settings" }
                    , Cmd.none
                    )

        ToggleEmailBirthday value ->
            updateSettings model (\s -> { s | emailSendBirthday = value })

        ToggleEmailAnniversary value ->
            updateSettings model (\s -> { s | emailSendPolicyAnniversary = value })

        ToggleEmailAep value ->
            updateSettings model (\s -> { s | emailSendAep = value })

        ToggleSmartSend value ->
            updateSettings model (\s -> { s | smartSendEnabled = value })

        AddStateLicense state ->
            updateSettings model
                (\s ->
                    if List.member state s.stateLicenses then
                        s

                    else
                        let
                            newStateCarrierSettings =
                                List.concat
                                    [ s.stateCarrierSettings
                                    , List.map
                                        (\carrier ->
                                            { state = state
                                            , carrier = carrier
                                            , active = True
                                            , targetGI = False
                                            }
                                        )
                                        s.carrierContracts
                                    ]
                        in
                        { s
                            | stateLicenses = state :: s.stateLicenses
                            , stateCarrierSettings = newStateCarrierSettings
                        }
                )

        RemoveStateLicense state ->
            updateSettings model
                (\s ->
                    { s
                        | stateLicenses = List.filter (\x -> x /= state) s.stateLicenses
                        , stateCarrierSettings = List.filter (\setting -> setting.state /= state) s.stateCarrierSettings
                    }
                )

        AddCarrierContract carrier ->
            updateSettings model
                (\s ->
                    if List.member carrier s.carrierContracts then
                        s

                    else
                        let
                            newStateCarrierSettings =
                                List.concat
                                    [ s.stateCarrierSettings
                                    , List.map
                                        (\state ->
                                            { state = state
                                            , carrier = carrier
                                            , active = True
                                            , targetGI = False
                                            }
                                        )
                                        s.stateLicenses
                                    ]
                        in
                        { s
                            | carrierContracts = carrier :: s.carrierContracts
                            , stateCarrierSettings = newStateCarrierSettings
                        }
                )

        RemoveCarrierContract carrier ->
            updateSettings model
                (\s ->
                    { s
                        | carrierContracts = List.filter (\x -> x /= carrier) s.carrierContracts
                        , stateCarrierSettings = List.filter (\setting -> setting.carrier /= carrier) s.stateCarrierSettings
                    }
                )

        UpdateStateCarrierSetting state carrier active targetGI ->
            updateSettings model
                (\s ->
                    let
                        existingSetting =
                            List.filter
                                (\setting ->
                                    setting.state == state && setting.carrier == carrier
                                )
                                s.stateCarrierSettings
                                |> List.head

                        newSettings =
                            case existingSetting of
                                Just _ ->
                                    List.map
                                        (\setting ->
                                            if setting.state == state && setting.carrier == carrier then
                                                { setting | active = active, targetGI = targetGI }

                                            else
                                                setting
                                        )
                                        s.stateCarrierSettings

                                Nothing ->
                                    { state = state
                                    , carrier = carrier
                                    , active = active
                                    , targetGI = targetGI
                                    }
                                        :: s.stateCarrierSettings
                    in
                    { s | stateCarrierSettings = newSettings }
                )

        ToggleSection title ->
            ( { model
                | expandedSections =
                    if List.member title model.expandedSections then
                        List.filter ((/=) title) model.expandedSections

                    else
                        title :: model.expandedSections
              }
            , Cmd.none
            )

        ToggleAllStates checked ->
            case model.orgSettings of
                Just settings ->
                    let
                        newSettings =
                            { settings
                                | stateLicenses =
                                    if checked then
                                        allStates

                                    else
                                        []
                                , stateCarrierSettings =
                                    if checked then
                                        -- Create settings for all state/carrier combinations
                                        List.concatMap
                                            (\state ->
                                                List.map
                                                    (\carrier ->
                                                        { state = state
                                                        , carrier = carrier
                                                        , active = True
                                                        , targetGI = False
                                                        }
                                                    )
                                                    settings.carrierContracts
                                            )
                                            allStates

                                    else
                                        []
                            }
                    in
                    ( { model | orgSettings = Just newSettings }
                    , saveSettings newSettings
                    )

                Nothing ->
                    ( model, Cmd.none )

        ToggleAllCarriers checked ->
            case model.orgSettings of
                Just settings ->
                    let
                        carriersToUse =
                            if List.isEmpty model.loadedCarriers then
                                allCarriers

                            else
                                model.loadedCarriers

                        newSettings =
                            { settings
                                | carrierContracts =
                                    if checked then
                                        carriersToUse

                                    else
                                        []
                                , stateCarrierSettings =
                                    if checked then
                                        -- Create settings for all state/carrier combinations
                                        List.concatMap
                                            (\state ->
                                                List.map
                                                    (\carrier ->
                                                        { state = state
                                                        , carrier = carrier
                                                        , active = True
                                                        , targetGI = False
                                                        }
                                                    )
                                                    carriersToUse
                                            )
                                            settings.stateLicenses

                                    else
                                        []
                            }
                    in
                    ( { model | orgSettings = Just newSettings }
                    , saveSettings newSettings
                    )

                Nothing ->
                    ( model, Cmd.none )

        ApplyGISelection mode ->
            case model.orgSettings of
                Just settings ->
                    let
                        newSettings =
                            case mode of
                                GIAll ->
                                    { settings
                                        | stateCarrierSettings =
                                            List.concatMap
                                                (\state ->
                                                    List.map
                                                        (\carrier ->
                                                            { state = state
                                                            , carrier = carrier
                                                            , active = True
                                                            , targetGI = True
                                                            }
                                                        )
                                                        settings.carrierContracts
                                                )
                                                settings.stateLicenses
                                    }

                                GINone ->
                                    { settings
                                        | stateCarrierSettings =
                                            List.concatMap
                                                (\state ->
                                                    List.map
                                                        (\carrier ->
                                                            { state = state
                                                            , carrier = carrier
                                                            , active = True
                                                            , targetGI = False
                                                            }
                                                        )
                                                        settings.carrierContracts
                                                )
                                                settings.stateLicenses
                                    }

                                GIRecommended ->
                                    { settings
                                        | stateCarrierSettings =
                                            List.concatMap
                                                (\state ->
                                                    List.map
                                                        (\carrier ->
                                                            { state = state
                                                            , carrier = carrier
                                                            , active = True
                                                            , targetGI =
                                                                List.any
                                                                    (\rec ->
                                                                        rec.state == state && rec.carrier == carrier
                                                                    )
                                                                    model.recommendedGICombos
                                                            }
                                                        )
                                                        settings.carrierContracts
                                                )
                                                settings.stateLicenses
                                    }
                    in
                    ( { model | orgSettings = Just newSettings }
                    , saveSettings newSettings
                    )

                Nothing ->
                    ( model, Cmd.none )

        GotRecommendedGICombos result ->
            case result of
                Ok combos ->
                    ( { model | recommendedGICombos = combos }
                    , Cmd.none
                    )

                Err error ->
                    ( { model | status = Error "Failed to load GI recommendations" }
                    , Cmd.none
                    )

        ToggleAllowAgentSettings value ->
            updateSettings model (\s -> { s | allowAgentSettings = value })

        FinishSetup ->
            case model.currentUser of
                Just user ->
                    if model.planType == "basic" then
                        ( { model | isLoading = True }
                        , finalizeOrganization user.organizationSlug
                        )

                    else
                        ( model
                        , Nav.pushUrl model.key "/dashboard"
                        )

                Nothing ->
                    ( model
                    , Nav.pushUrl model.key "/dashboard"
                    )

        OrgFinalized result ->
            case result of
                Ok _ ->
                    ( { model | isLoading = False }
                    , Nav.pushUrl model.key "/dashboard"
                    )

                Err error ->
                    let
                        errorMessage =
                            case error of
                                Http.BadStatus 500 ->
                                    "Failed to set up your organization's database. Please contact support at help@medicaremax.com and we'll help you get started."

                                Http.BadBody message ->
                                    message ++ "\nPlease contact support at help@medicaremax.com and we'll help you get started."

                                _ ->
                                    "An unexpected error occurred. Please contact support at help@medicaremax.com and we'll help you get started."
                    in
                    ( { model
                        | isLoading = False
                        , error = Just errorMessage
                      }
                    , Cmd.none
                    )

        SelectCommonStates region ->
            updateSettings model
                (\s ->
                    { s | stateLicenses = s.stateLicenses ++ getRegionStates region }
                )

        UpdateBrandName name ->
            updateSettings model (\s -> { s | brandName = name })

        UpdatePrimaryColor color ->
            updateSettings model (\s -> { s | primaryColor = color })

        UpdateSecondaryColor color ->
            updateSettings model (\s -> { s | secondaryColor = color })

        UploadLogo ->
            ( model
            , Select.file [ "image/png", "image/jpeg" ] GotLogo
            )

        GotLogo file ->
            ( model
            , Task.perform GotLogoUrl (File.toUrl file)
            )

        GotLogoUrl url ->
            updateSettings model (\s -> { s | logo = Just url })

        LogoUploaded result ->
            case result of
                Ok url ->
                    updateSettings model (\s -> { s | logo = Just url })

                Err error ->
                    ( { model | status = Error "Failed to upload logo" }, Cmd.none )

        SelectCarrier carrier ->
            ( { model | selectedCarrier = Just carrier }, Cmd.none )

        SelectState state ->
            ( { model | selectedState = Just state }, Cmd.none )

        AddDeactivatedPair ->
            case ( model.selectedCarrier, model.selectedState ) of
                ( Just carrier, Just state ) ->
                    case model.orgSettings of
                        Just settings ->
                            let
                                existingSetting =
                                    List.filter
                                        (\s -> s.state == state && s.carrier == carrier)
                                        settings.stateCarrierSettings
                                        |> List.head

                                -- Update stateCarrierSettings to set active=false for this pair
                                updatedSettings =
                                    { settings
                                        | stateCarrierSettings =
                                            case existingSetting of
                                                Just _ ->
                                                    -- Update existing setting
                                                    List.map
                                                        (\s ->
                                                            if s.state == state && s.carrier == carrier then
                                                                { s | active = False }

                                                            else
                                                                s
                                                        )
                                                        settings.stateCarrierSettings

                                                Nothing ->
                                                    -- Create new setting
                                                    { state = state
                                                    , carrier = carrier
                                                    , active = False
                                                    , targetGI = False
                                                    }
                                                        :: settings.stateCarrierSettings
                                    }
                            in
                            ( { model
                                | orgSettings = Just updatedSettings
                                , selectedCarrier = Nothing
                                , selectedState = Nothing
                              }
                            , saveSettings updatedSettings
                            )

                        Nothing ->
                            ( model, Cmd.none )

                _ ->
                    ( model, Cmd.none )

        RemoveDeactivatedPair carrier state ->
            let
                -- Remove the pair from our local tracking
                newDeactivatedPairs =
                    List.filter (\p -> not (p.carrier == carrier && p.state == state)) model.deactivatedPairs

                -- Update orgSettings to reflect the change
                updatedModel =
                    case model.orgSettings of
                        Just settings ->
                            let
                                -- Update stateCarrierSettings to set active=true for this pair
                                updatedSettings =
                                    { settings
                                        | stateCarrierSettings =
                                            List.map
                                                (\s ->
                                                    if s.state == state && s.carrier == carrier then
                                                        { s | active = True }

                                                    else
                                                        s
                                                )
                                                settings.stateCarrierSettings
                                    }
                            in
                            { model
                                | deactivatedPairs = newDeactivatedPairs
                                , orgSettings = Just updatedSettings
                            }

                        Nothing ->
                            { model | deactivatedPairs = newDeactivatedPairs }
            in
            ( updatedModel
            , case model.orgSettings of
                Just settings ->
                    let
                        updatedSettings =
                            { settings
                                | stateCarrierSettings =
                                    List.map
                                        (\s ->
                                            if s.state == state && s.carrier == carrier then
                                                { s | active = True }

                                            else
                                                s
                                        )
                                        settings.stateCarrierSettings
                            }
                    in
                    saveSettings updatedSettings

                Nothing ->
                    Cmd.none
            )


updateSettings : Model -> (Settings -> Settings) -> ( Model, Cmd Msg )
updateSettings model updateFn =
    case model.orgSettings of
        Just settings ->
            let
                newSettings =
                    updateFn settings
            in
            ( { model | orgSettings = Just newSettings }
            , saveSettings newSettings
            )

        Nothing ->
            ( model, Cmd.none )


saveSettings : Settings -> Cmd Msg
saveSettings settings =
    Http.request
        { method = "PUT"
        , headers = []
        , url = "/api/settings/org"
        , body = jsonBody (encodeSettings settings)
        , expect = expectJson SettingsSaved settingsObjectDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


encodeSettings : Settings -> Encode.Value
encodeSettings settings =
    Encode.object
        [ ( "stateLicenses", Encode.list Encode.string settings.stateLicenses )
        , ( "carrierContracts", Encode.list Encode.string settings.carrierContracts )
        , ( "stateCarrierSettings", Encode.list stateCarrierSettingEncoder settings.stateCarrierSettings )
        , ( "allowAgentSettings", Encode.bool settings.allowAgentSettings )
        , ( "emailSendBirthday", Encode.bool settings.emailSendBirthday )
        , ( "emailSendPolicyAnniversary", Encode.bool settings.emailSendPolicyAnniversary )
        , ( "emailSendAep", Encode.bool settings.emailSendAep )
        , ( "smartSendEnabled", Encode.bool settings.smartSendEnabled )
        , ( "brandName", Encode.string settings.brandName )
        , ( "primaryColor", Encode.string settings.primaryColor )
        , ( "secondaryColor", Encode.string settings.secondaryColor )
        , ( "logo", Maybe.withDefault Encode.null (Maybe.map Encode.string settings.logo) )
        ]


stateCarrierSettingEncoder : StateCarrierSetting -> Encode.Value
stateCarrierSettingEncoder setting =
    Encode.object
        [ ( "state", Encode.string setting.state )
        , ( "carrier", Encode.string setting.carrier )
        , ( "active", Encode.bool setting.active )
        , ( "targetGI", Encode.bool setting.targetGI )
        ]


view : Model -> Browser.Document Msg
view model =
    { title =
        if model.isSetup then
            "Organization Setup - Settings"

        else
            "Settings"
    , body =
        [ if model.isSetup then
            SetupLayout.view SetupLayout.OrganizationSetup
                (model.planType == "basic")
                5
                [ if model.isLoading then
                    viewLoading

                  else
                    viewSettings model
                ]

          else
            div [ class "min-h-screen bg-gray-50" ]
                [ viewHeader
                , div [ class "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8" ]
                    [ if model.isLoading then
                        viewLoading

                      else
                        viewSettings model
                    ]
                ]
        ]
    }


viewSetupHeader : Html Msg
viewSetupHeader =
    div [ class "mb-8" ]
        [ h1 [ class "text-3xl font-bold text-gray-900" ]
            [ text "Set Up Your Organization" ]
        , p [ class "mt-2 text-gray-600" ]
            [ text "Configure your organization's settings to get started" ]
        ]


viewNormalHeader : Html Msg
viewNormalHeader =
    h1 [ class "text-2xl font-semibold text-[#03045E] mb-6" ]
        [ text "Organization Settings" ]


viewBottomBar : Model -> Html Msg
viewBottomBar model =
    div
        [ class """sticky bottom-0 left-0 right-0 bg-white border-t border-gray-200 
                  px-4 py-4 sm:px-6 lg:px-8 flex justify-end items-center
                  mt-8 max-w-4xl mx-auto"""
        ]
        [ case model.error of
            Just errorMsg ->
                div [ class "text-red-600 text-sm max-w-xl" ]
                    [ text errorMsg ]

            Nothing ->
                text ""
        ]


viewSettingsContent : Maybe Settings -> Bool -> List String -> String -> Model -> Html Msg
viewSettingsContent maybeSettings canEdit expandedSections planType model =
    case maybeSettings of
        Just settings ->
            div [ class "space-y-6" ]
                [ viewBrandSettings settings
                , viewEmailSettings settings
                , viewExpandableSection "State Licenses"
                    (viewLicensesGrid settings)
                    expandedSections
                , viewExpandableSection "Carrier Contracts"
                    (viewCarriersGrid settings model)
                    expandedSections
                , viewExpandableSection "State & Carrier Settings"
                    (viewStateCarrierGrid settings model)
                    expandedSections
                ]

        Nothing ->
            div [ class "text-gray-500 italic" ]
                [ text "Using organization settings" ]


viewBrandSettings : Settings -> Html Msg
viewBrandSettings settings =
    div [ class "bg-white shadow rounded-lg p-6" ]
        [ h2 [ class "text-lg font-medium mb-4" ] [ text "Agency Settings" ]
        , div [ class "space-y-6" ]
            [ div [ class "space-y-4" ]
                [ viewFormGroup "Agency Name"
                    (input
                        [ type_ "text"
                        , class "w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500"
                        , value settings.brandName
                        , onInput UpdateBrandName
                        ]
                        []
                    )
                , viewFormGroup "Primary Color"
                    (div [ class "flex items-center space-x-4" ]
                        [ input
                            [ type_ "color"
                            , class "w-16 h-10 p-1 border border-gray-300 rounded"
                            , value settings.primaryColor
                            , onInput UpdatePrimaryColor
                            ]
                            []
                        , input
                            [ type_ "text"
                            , class "flex-1 px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500"
                            , value settings.primaryColor
                            , onInput UpdatePrimaryColor
                            ]
                            []
                        ]
                    )
                , viewFormGroup "Secondary Color"
                    (div [ class "flex items-center space-x-4" ]
                        [ input
                            [ type_ "color"
                            , class "w-16 h-10 p-1 border border-gray-300 rounded"
                            , value settings.secondaryColor
                            , onInput UpdateSecondaryColor
                            ]
                            []
                        , input
                            [ type_ "text"
                            , class "flex-1 px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500"
                            , value settings.secondaryColor
                            , onInput UpdateSecondaryColor
                            ]
                            []
                        ]
                    )
                , viewFormGroup "Logo"
                    (div [ class "flex items-center space-x-4" ]
                        [ case settings.logo of
                            Just logoUrl ->
                                div [ class "flex items-center space-x-4" ]
                                    [ img
                                        [ src logoUrl
                                        , class "h-16 w-16 object-contain border border-gray-200 rounded"
                                        ]
                                        []
                                    , button
                                        [ class "px-4 py-2 text-sm text-purple-600 hover:text-purple-800"
                                        , onClick UploadLogo
                                        ]
                                        [ text "Change Logo" ]
                                    ]

                            Nothing ->
                                button
                                    [ class "px-4 py-2 text-sm text-purple-600 hover:text-purple-800 border border-purple-200 rounded"
                                    , onClick UploadLogo
                                    ]
                                    [ text "Upload Logo" ]
                        ]
                    )
                ]
            ]
        ]


viewFormGroup : String -> Html Msg -> Html Msg
viewFormGroup labelText content =
    div [ class "mb-4" ]
        [ label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text labelText ]
        , content
        ]


viewEmailSettings : Settings -> Html Msg
viewEmailSettings settings =
    div [ class "bg-white shadow rounded-lg p-6" ]
        [ h2 [ class "text-lg font-medium mb-4" ] [ text "Email Settings" ]
        , div [ class "space-y-4" ]
            [ checkbox "Enable smart send" settings.smartSendEnabled ToggleSmartSend
            ]
        ]


checkbox : String -> Bool -> (Bool -> msg) -> Html msg
checkbox labelText isChecked onToggle =
    Html.label [ class "flex items-center space-x-3" ]
        [ input
            [ type_ "checkbox"
            , checked isChecked
            , onCheck onToggle
            , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
            ]
            []
        , span [ class "text-gray-700" ] [ text labelText ]
        ]


viewExpandableSection : String -> Html Msg -> List String -> Html Msg
viewExpandableSection title content expandedSections =
    let
        isExpanded =
            List.member title expandedSections
    in
    div [ class "bg-white shadow rounded-lg overflow-hidden" ]
        [ button
            [ class "w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50"
            , onClick (ToggleSection title)
            ]
            [ h2 [ class "text-lg font-medium" ] [ text title ]
            , div
                [ class "transform transition-transform"
                , classList [ ( "rotate-180", isExpanded ) ]
                ]
                [ text "▼" ]
            ]
        , div
            [ class "px-6 pb-6"
            , classList [ ( "hidden", not isExpanded ) ]
            ]
            [ content ]
        ]


viewLicensesGrid : Settings -> Html Msg
viewLicensesGrid settings =
    div []
        [ div [ class "mb-4 space-y-2" ]
            [ div [ class "flex gap-4" ]
                -- Container for both label groups
                [ div []
                    -- Batch Select group
                    [ div [ class "text-sm font-medium text-gray-700 mb-2" ]
                        [ text "Batch Select" ]
                    , div [ class "flex gap-2" ]
                        [ button
                            [ class "px-3 py-1 text-sm border rounded-md hover:bg-gray-50 min-w-[70px]"
                            , onClick (ToggleAllStates True)
                            ]
                            [ text "Select All" ]
                        , button
                            [ class "px-3 py-1 text-sm border rounded-md hover:bg-gray-50 min-w-[70px]"
                            , onClick (ToggleAllStates False)
                            ]
                            [ text "Clear All" ]
                        ]
                    ]
                , div []
                    -- By Region: group
                    [ div [ class "text-sm font-medium text-gray-700 mb-2" ]
                        [ text "By Region:" ]
                    , div [ class "flex gap-2" ]
                        (List.map
                            (\region ->
                                button
                                    [ class "px-3 py-1 text-sm border rounded-md hover:bg-gray-50"
                                    , onClick (SelectCommonStates region)
                                    ]
                                    [ text (regionToString region) ]
                            )
                            StateRegions.allRegions
                        )
                    ]
                ]
            ]
        , div [ class "grid grid-cols-5 gap-4" ]
            (List.map
                (\state ->
                    checkbox state
                        (List.member state settings.stateLicenses)
                        (\checked ->
                            if checked then
                                AddStateLicense state

                            else
                                RemoveStateLicense state
                        )
                )
                allStates
            )
        ]


viewCarriersGrid : Settings -> Model -> Html Msg
viewCarriersGrid settings model =
    let
        carriersToUse =
            if List.isEmpty model.loadedCarriers then
                allCarriers

            else
                model.loadedCarriers
    in
    div []
        [ div [ class "mb-4 flex items-center" ]
            [ checkbox "Select All Carriers"
                (List.length settings.carrierContracts == List.length carriersToUse)
                ToggleAllCarriers
            ]
        , div [ class "grid grid-cols-3 gap-4" ]
            (List.map
                (\carrier ->
                    checkbox carrier
                        (List.member carrier settings.carrierContracts)
                        (\checked ->
                            if checked then
                                AddCarrierContract carrier

                            else
                                RemoveCarrierContract carrier
                        )
                )
                carriersToUse
            )
        ]


viewStateCarrierGrid : Settings -> Model -> Html Msg
viewStateCarrierGrid settings model =
    let
        carriersToUse =
            if List.isEmpty model.loadedCarriers then
                allCarriers

            else
                model.loadedCarriers
    in
    div []
        [ div [ class "mb-6" ]
            [ h3 [ class "text-sm font-medium text-gray-700 mb-2" ]
                [ text "SmartSend for Guaranteed Issue" ]
            , div [ class "flex items-start p-4 bg-blue-50 rounded-md mb-6" ]
                [ div [ class "flex items-center h-5" ]
                    [ input
                        [ type_ "checkbox"
                        , checked settings.smartSendEnabled
                        , onCheck ToggleSmartSend
                        , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                        ]
                        []
                    ]
                , div [ class "ml-3 text-sm" ]
                    [ label [ class "font-medium text-gray-700" ]
                        [ text "Use SmartSend for Guaranteed Issue" ]
                    , p [ class "text-gray-500 mt-1" ]
                        [ text "When enabled, SmartSend will automatically identify which carrier-state combinations offer full compensation for Guaranteed Issue (GI) policies." ]
                    ]
                ]
            , div [ class "mt-4 p-4 bg-gray-50 rounded-md mb-8" ]
                [ h3 [ class "text-md font-medium text-gray-900 mb-2" ]
                    [ text "How SmartSend Works" ]
                , p [ class "text-gray-600" ]
                    [ text "SmartSend analyzes each state and carrier combination to determine which ones offer full carrier compensation for Guaranteed Issue policies. This helps maximize your commissions while ensuring your quotes are always compliant with the latest state and carrier regulations." ]
                ]
            , h3 [ class "text-sm font-medium text-gray-700 mt-8 mb-2" ]
                [ text "Deactivate Carrier-State Pairs" ]
            , p [ class "text-gray-500 mb-4" ]
                [ text "If you want to deactivate specific carrier-state combinations, select a carrier and state below and add them to the list." ]
            , div [ class "flex items-end space-x-4 mb-4" ]
                [ div [ class "flex-1" ]
                    [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                        [ text "Carrier" ]
                    , select
                        [ class "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                        , onInput SelectCarrier
                        ]
                        (option [ value "" ] [ text "Select carrier" ]
                            :: List.map
                                (\carrier ->
                                    option [ value carrier ] [ text carrier ]
                                )
                                carriersToUse
                        )
                    ]
                , div [ class "flex-1" ]
                    [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                        [ text "State" ]
                    , select
                        [ class "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                        , onInput SelectState
                        ]
                        (option [ value "" ] [ text "Select state" ]
                            :: List.map
                                (\state ->
                                    option [ value state ] [ text state ]
                                )
                                allStates
                        )
                    ]
                , button
                    [ class "px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    , onClick AddDeactivatedPair
                    , disabled (model.selectedCarrier == Nothing || model.selectedState == Nothing)
                    ]
                    [ text "Add" ]
                ]
            , viewDeactivatedList settings
            ]
        ]


viewDeactivatedList : Settings -> Html Msg
viewDeactivatedList settings =
    let
        -- Get the deactivated pairs from the settings
        deactivatedPairs =
            List.filter (\s -> not s.active) settings.stateCarrierSettings
    in
    if List.isEmpty deactivatedPairs then
        div [ class "text-gray-500 italic mt-4 p-4 bg-gray-50 rounded-md" ]
            [ text "No carrier-state pairs have been deactivated." ]

    else
        div [ class "mt-4" ]
            [ h4 [ class "text-sm font-medium text-gray-700 mb-2" ]
                [ text "Deactivated Pairs" ]
            , div [ class "bg-white border border-gray-200 rounded-md" ]
                [ ul [ class "divide-y divide-gray-200" ]
                    (List.map
                        (\pair ->
                            li [ class "px-4 py-3 flex justify-between items-center" ]
                                [ div []
                                    [ span [ class "font-medium" ] [ text pair.carrier ]
                                    , span [ class "text-gray-500 mx-2" ] [ text "in" ]
                                    , span [ class "font-medium" ] [ text pair.state ]
                                    ]
                                , button
                                    [ class "text-red-600 hover:text-red-800"
                                    , onClick (RemoveDeactivatedPair pair.carrier pair.state)
                                    ]
                                    [ text "Reactivate" ]
                                ]
                        )
                        deactivatedPairs
                    )
                ]
            ]


option : List (Attribute msg) -> List (Html msg) -> Html msg
option attributes children =
    Html.option attributes children



-- Helper functions for state/carrier grid


isStateCarrierActive : Settings -> String -> String -> Bool
isStateCarrierActive settings state carrier =
    settings.stateCarrierSettings
        |> List.filter (\s -> s.state == state && s.carrier == carrier)
        |> List.head
        |> Maybe.map .active
        |> Maybe.withDefault True


isStateCarrierTargetGI : Settings -> String -> String -> Bool
isStateCarrierTargetGI settings state carrier =
    settings.stateCarrierSettings
        |> List.filter (\s -> s.state == state && s.carrier == carrier)
        |> List.head
        |> Maybe.map .targetGI
        |> Maybe.withDefault False


hasDefaultSettings : Settings -> Bool
hasDefaultSettings settings =
    List.all
        (\setting -> setting.active && not setting.targetGI)
        settings.stateCarrierSettings


findStateCarrierSetting : Settings -> String -> String -> StateCarrierSetting
findStateCarrierSetting settings state carrier =
    settings.stateCarrierSettings
        |> List.filter (\s -> s.state == state && s.carrier == carrier)
        |> List.head
        |> Maybe.withDefault
            { state = state
            , carrier = carrier
            , active = True
            , targetGI = False
            }


viewStateCarrierCell : StateCarrierSetting -> Html Msg
viewStateCarrierCell setting =
    div [ class "flex flex-col items-center gap-1" ]
        [ label [ class "flex items-center gap-2 cursor-pointer" ]
            [ input
                [ type_ "checkbox"
                , checked setting.active
                , onCheck (\active -> UpdateStateCarrierSetting setting.state setting.carrier active setting.targetGI)
                , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                ]
                []
            , span [ class "text-sm text-gray-600" ] [ text "Active" ]
            ]
        , label [ class "flex items-center gap-2 cursor-pointer" ]
            [ input
                [ type_ "checkbox"
                , checked setting.targetGI
                , onCheck (\targetGI -> UpdateStateCarrierSetting setting.state setting.carrier setting.active targetGI)
                , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                ]
                []
            , span [ class "text-xs ml-1" ] [ text "GI" ]
            ]
        ]



-- Encoders and Decoders


settingsDecoder : Decoder SettingsResponse
settingsDecoder =
    let
        boolDecoder =
            Decode.oneOf
                [ Decode.bool
                , Decode.map (\n -> n == 1) Decode.int
                ]
    in
    Decode.field "success" Decode.bool
        |> Decode.andThen
            (\success ->
                if success then
                    Decode.map2 SettingsResponse
                        (Decode.field "orgSettings" settingsObjectDecoder)
                        (Decode.field "canEditOrgSettings" boolDecoder)

                else
                    Decode.fail "Settings request was not successful"
            )


settingsObjectDecoder : Decoder Settings
settingsObjectDecoder =
    let
        stateCarrierSettingsDecoder =
            Decode.field "stateCarrierSettings" <|
                Decode.oneOf
                    [ Decode.list stateCarrierSettingDecoder
                    , Decode.null []
                    ]
    in
    Decode.succeed Settings
        |> Pipeline.required "stateLicenses" (Decode.list Decode.string)
        |> Pipeline.required "carrierContracts" (Decode.list Decode.string)
        |> Pipeline.custom stateCarrierSettingsDecoder
        |> Pipeline.required "allowAgentSettings" Decode.bool
        |> Pipeline.required "emailSendBirthday" Decode.bool
        |> Pipeline.required "emailSendPolicyAnniversary" Decode.bool
        |> Pipeline.required "emailSendAep" Decode.bool
        |> Pipeline.required "smartSendEnabled" Decode.bool
        |> Pipeline.optional "brandName" Decode.string ""
        |> Pipeline.optional "primaryColor" Decode.string "#6B46C1"
        |> Pipeline.optional "secondaryColor" Decode.string "#9F7AEA"
        |> Pipeline.optional "logo" (Decode.nullable Decode.string) Nothing


stateCarrierSettingDecoder : Decoder StateCarrierSetting
stateCarrierSettingDecoder =
    Decode.map4 StateCarrierSetting
        (Decode.field "state" Decode.string)
        (Decode.field "carrier" Decode.string)
        (Decode.field "active" Decode.bool)
        (Decode.field "targetGI" Decode.bool)


recommendationsDecoder : Decoder (List StateCarrierSetting)
recommendationsDecoder =
    Decode.list
        (Decode.map4 StateCarrierSetting
            (Decode.field "state" Decode.string)
            (Decode.field "carrier" Decode.string)
            (Decode.field "active" Decode.bool)
            (Decode.field "targetGI" Decode.bool)
        )


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none


tab : String -> Bool -> Bool -> msg -> Html msg
tab label isActive isDisabled msg =
    button
        [ class "px-3 py-2 font-medium text-sm rounded-md -mb-px"
        , classList
            [ ( "text-indigo-600 border-indigo-500 border-b-2", isActive )
            , ( "text-gray-500 hover:text-gray-700 hover:border-gray-300 border-transparent border-b-2"
              , not isActive && not isDisabled
              )
            , ( "text-gray-400 cursor-not-allowed", isDisabled )
            ]
        , onClick msg
        , disabled isDisabled
        ]
        [ text label ]


viewNavLink : String -> String -> Html Msg
viewNavLink label path =
    a
        [ class "text-gray-700 hover:text-gray-900 hover:bg-gray-50 group flex items-center px-3 py-2 text-sm font-medium rounded-md"
        , href path
        ]
        [ text label ]


viewNavigation : Model -> Html Msg
viewNavigation model =
    nav []
        [ case model.currentUser of
            Just user ->
                if user.isAdmin then
                    viewNavLink "Manage Agents" "/agents"

                else
                    text ""

            Nothing ->
                text ""
        ]


viewLoading : Html msg
viewLoading =
    div [ class "flex justify-center items-center h-64" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-4 border-purple-500 border-t-transparent" ] []
        ]


viewHeader : Html msg
viewHeader =
    nav [ class "bg-white border-b border-gray-200" ]
        [ div [ class "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8" ]
            [ div [ class "flex justify-between h-16" ]
                [ div [ class "flex" ]
                    [ div [ class "flex-shrink-0 flex items-center" ]
                        [ h1 [ class "text-xl font-semibold text-purple-600" ]
                            [ text "Organization Settings" ]
                        ]
                    ]
                ]
            ]
        ]


viewSettings : Model -> Html Msg
viewSettings model =
    div [ class "space-y-8" ]
        [ viewSettingsContent model.orgSettings True model.expandedSections model.planType model
        , viewBottomBar model
        ]


finalizeOrganization : String -> Cmd Msg
finalizeOrganization orgSlug =
    Http.post
        { url = "/api/organizations/" ++ orgSlug ++ "/setup-database"
        , body = Http.emptyBody
        , expect = Http.expectWhatever OrgFinalized
        }

================
File: src/Signup.elm
================
module Signup exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Components.ProgressIndicator as ProgressIndicator exposing (Step)
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onBlur, onInput, onSubmit)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import Svg exposing (path, svg)
import Svg.Attributes exposing (d, fill, stroke, strokeLinecap, strokeLinejoin, strokeWidth, viewBox)
import Url



-- MODEL


type alias Model =
    { organizationName : String
    , adminFirstName : String
    , adminLastName : String
    , adminEmail : String
    , error : Maybe String
    , isSubmitting : Bool
    , submitted : Bool
    , orgNameStatus : OrgNameStatus
    , emailStatus : EmailStatus
    , currentStep : SignupStep
    , key : Nav.Key
    }


type OrgNameStatus
    = NotChecked
    | Checking
    | Valid
    | Invalid String


type EmailStatus
    = EmailNotChecked
    | EmailChecking
    | EmailValid
    | EmailInvalid String


type Msg
    = UpdateOrganizationName String
    | CheckOrganizationName
    | GotOrgNameResponse (Result Http.Error OrgNameResponse)
    | UpdateAdminFirstName String
    | UpdateAdminLastName String
    | UpdateAdminEmail String
    | CheckAdminEmail
    | GotEmailResponse (Result Http.Error EmailResponse)
    | SubmitForm
    | GotSignupResponse (Result Http.Error SignupResponse)


type alias SignupResponse =
    { success : Bool
    , message : String
    }


type alias OrgNameResponse =
    { available : Bool
    , message : String
    }


type alias EmailResponse =
    { available : Bool
    , message : String
    }


type SignupStep
    = AccountSetup
    | CompanyDetails
    | CompanyStyle
    | SetupPayment


init : Nav.Key -> ( Model, Cmd Msg )
init key =
    ( { organizationName = ""
      , adminFirstName = ""
      , adminLastName = ""
      , adminEmail = ""
      , error = Nothing
      , isSubmitting = False
      , submitted = False
      , orgNameStatus = NotChecked
      , emailStatus = EmailNotChecked
      , currentStep = AccountSetup
      , key = key
      }
    , Cmd.none
    )



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateOrganizationName value ->
            ( { model
                | organizationName = value
                , orgNameStatus = NotChecked -- Clear status when typing
              }
            , Cmd.none
            )

        CheckOrganizationName ->
            if String.length model.organizationName >= 1 then
                ( { model | orgNameStatus = Checking }
                  -- Show loading state
                , checkOrgName model.organizationName
                )

            else
                ( { model | orgNameStatus = NotChecked }
                , Cmd.none
                )

        GotOrgNameResponse (Ok response) ->
            ( { model
                | orgNameStatus =
                    if response.available then
                        Valid

                    else
                        Invalid response.message
              }
            , Cmd.none
            )

        GotOrgNameResponse (Err _) ->
            ( { model
                | orgNameStatus = Invalid "Failed to check organization name"
              }
            , Cmd.none
            )

        UpdateAdminFirstName value ->
            ( { model | adminFirstName = value }, Cmd.none )

        UpdateAdminLastName value ->
            ( { model | adminLastName = value }, Cmd.none )

        UpdateAdminEmail value ->
            ( { model
                | adminEmail = value
                , emailStatus = EmailNotChecked
              }
            , Cmd.none
            )

        CheckAdminEmail ->
            if String.isEmpty (String.trim model.adminEmail) then
                ( { model | emailStatus = EmailNotChecked }
                , Cmd.none
                )

            else if model.emailStatus == EmailChecking then
                ( model, Cmd.none )

            else
                ( { model | emailStatus = EmailChecking }
                , checkEmail model.adminEmail
                )

        GotEmailResponse result ->
            case result of
                Ok response ->
                    ( { model
                        | emailStatus =
                            if response.available then
                                EmailValid

                            else
                                EmailInvalid response.message
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model
                        | emailStatus = EmailInvalid "Failed to check email availability"
                      }
                    , Cmd.none
                    )

        SubmitForm ->
            if isFormValid model then
                ( { model | isSubmitting = True }
                , Nav.pushUrl model.key "/onboarding"
                )

            else
                ( { model | error = Just "Please fill out all fields and ensure email and organization name are valid" }
                , Cmd.none
                )

        GotSignupResponse (Ok response) ->
            if response.success then
                ( { model
                    | isSubmitting = False
                    , submitted = True
                    , error = Nothing
                  }
                , Cmd.none
                )

            else
                ( { model
                    | error = Just response.message
                    , isSubmitting = False
                  }
                , Cmd.none
                )

        GotSignupResponse (Err _) ->
            ( { model
                | error = Just "Failed to create organization. Please try again."
                , isSubmitting = False
              }
            , Cmd.none
            )


validateForm : Model -> Bool
validateForm model =
    not (String.isEmpty model.organizationName)
        && not (String.isEmpty model.adminFirstName)
        && not (String.isEmpty model.adminLastName)
        && not (String.isEmpty model.adminEmail)


submitForm : Model -> Cmd Msg
submitForm model =
    Http.post
        { url = "/api/organizations/signup"
        , body =
            Http.jsonBody
                (Encode.object
                    [ ( "organizationName", Encode.string model.organizationName )
                    , ( "adminFirstName", Encode.string model.adminFirstName )
                    , ( "adminLastName", Encode.string model.adminLastName )
                    , ( "adminEmail", Encode.string model.adminEmail )
                    ]
                )
        , expect =
            Http.expectJson GotSignupResponse
                (Decode.map2 SignupResponse
                    (Decode.field "success" Decode.bool)
                    (Decode.field "message" Decode.string)
                )
        }



-- Add this function to check organization name


checkOrgName : String -> Cmd Msg
checkOrgName name =
    if String.isEmpty (String.trim name) then
        Cmd.none

    else
        Http.get
            { url = "/api/organizations/check-name/" ++ Url.percentEncode (String.trim name)
            , expect =
                Http.expectJson GotOrgNameResponse
                    (Decode.map2 OrgNameResponse
                        (Decode.field "available" Decode.bool)
                        (Decode.field "message" Decode.string)
                    )
            }



-- Add this function to check email


checkEmail : String -> Cmd Msg
checkEmail email =
    Http.get
        { url = "/api/organizations/check-email/" ++ Url.percentEncode email
        , expect = Http.expectJson GotEmailResponse emailResponseDecoder
        }


emailResponseDecoder : Decode.Decoder EmailResponse
emailResponseDecoder =
    Decode.map2 EmailResponse
        (Decode.field "available" Decode.bool)
        (Decode.field "message" Decode.string)



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Create Organization"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex" ]
            [ viewProgress model
            , div [ class "flex-1 ml-80" ]
                [ div [ class "max-w-2xl mx-auto py-12 px-8" ]
                    [ if model.submitted then
                        viewSuccess

                      else
                        viewForm model
                    ]
                ]
            ]
        ]
    }


viewSuccess : Html Msg
viewSuccess =
    div [ class "text-center" ]
        [ div [ class "mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100" ]
            [ -- Checkmark icon
              svg
                [ Svg.Attributes.class "h-6 w-6 text-green-600"
                , Svg.Attributes.fill "none"
                , Svg.Attributes.viewBox "0 0 24 24"
                , Svg.Attributes.stroke "currentColor"
                ]
                [ path
                    [ Svg.Attributes.strokeLinecap "round"
                    , Svg.Attributes.strokeLinejoin "round"
                    , Svg.Attributes.strokeWidth "2"
                    , Svg.Attributes.d "M5 13l4 4L19 7"
                    ]
                    []
                ]
            ]
        , h3 [ class "mt-3 text-lg font-medium text-gray-900" ]
            [ text "Check your email" ]
        , p [ class "mt-2 text-sm text-gray-500" ]
            [ text "We've sent you a magic link to verify your account and complete the setup." ]
        ]


viewForm : Model -> Html Msg
viewForm model =
    Html.form [ onSubmit SubmitForm, class "space-y-6 max-w-md" ]
        [ h1 [ class "text-2xl font-semibold text-[#101828] mb-2" ]
            [ text "Agent Details" ]
        , p [ class "text-[#667085] text-base mb-8" ]
            [ text "Let's get to know you" ]
        , -- Form fields
          div [ class "space-y-6" ]
            [ -- Email field first
              div []
                [ label [ for "admin-email", class "block text-sm font-medium text-[#344054] mb-1.5" ]
                    [ text "Email" ]
                , div [ class "mt-1" ]
                    [ input
                        [ type_ "email"
                        , id "admin-email"
                        , value model.adminEmail
                        , onInput UpdateAdminEmail
                        , onBlur CheckAdminEmail
                        , class "block w-full px-3.5 py-2.5 bg-white border border-[#d0d5dd] rounded-lg shadow-sm text-[#101828] focus:outline-none focus:ring-2 focus:ring-[#03045e] focus:border-[#03045e] sm:text-sm"
                        , placeholder "Enter your email"
                        ]
                        []
                    , viewEmailStatus model.emailStatus
                    ]
                ]

            -- Organization name field second
            , div []
                [ label [ for "organization-name", class "block text-sm font-medium text-[#344054] mb-1.5" ]
                    [ text "Organization name" ]
                , div [ class "mt-1" ]
                    [ input
                        [ type_ "text"
                        , id "organization-name"
                        , value model.organizationName
                        , onInput UpdateOrganizationName
                        , onBlur CheckOrganizationName
                        , class "block w-full px-3.5 py-2.5 bg-white border border-[#d0d5dd] rounded-lg shadow-sm text-[#101828] focus:outline-none focus:ring-2 focus:ring-[#03045e] focus:border-[#03045e] sm:text-sm"
                        , placeholder "Enter organization name"
                        ]
                        []
                    , viewOrgNameStatus model.orgNameStatus
                    ]
                ]

            -- First Name field third
            , div []
                [ label [ for "admin-first-name", class "block text-sm font-medium text-[#344054] mb-1.5" ]
                    [ text "First Name" ]
                , div [ class "mt-1" ]
                    [ input
                        [ type_ "text"
                        , id "admin-first-name"
                        , value model.adminFirstName
                        , onInput UpdateAdminFirstName
                        , class "block w-full px-3.5 py-2.5 bg-white border border-[#d0d5dd] rounded-lg shadow-sm text-[#101828] focus:outline-none focus:ring-2 focus:ring-[#03045e] focus:border-[#03045e] sm:text-sm"
                        , placeholder "Enter your first name"
                        ]
                        []
                    ]
                ]

            -- Last Name field fourth
            , div []
                [ label [ for "admin-last-name", class "block text-sm font-medium text-[#344054] mb-1.5" ]
                    [ text "Last Name" ]
                , div [ class "mt-1" ]
                    [ input
                        [ type_ "text"
                        , id "admin-last-name"
                        , value model.adminLastName
                        , onInput UpdateAdminLastName
                        , class "block w-full px-3.5 py-2.5 bg-white border border-[#d0d5dd] rounded-lg shadow-sm text-[#101828] focus:outline-none focus:ring-2 focus:ring-[#03045e] focus:border-[#03045e] sm:text-sm"
                        , placeholder "Enter your last name"
                        ]
                        []
                    ]
                ]
            ]
        , -- Submit button
          button
            [ type_ "submit"
            , class (submitButtonClass model)
            , disabled (not (isFormValid model) || model.isSubmitting)
            ]
            [ if model.isSubmitting then
                text "Creating Organization..."

              else
                text "Continue"
            ]
        ]


viewOrgNameStatus : OrgNameStatus -> Html Msg
viewOrgNameStatus status =
    div [ class "mt-1 transition-all duration-200" ]
        [ case status of
            NotChecked ->
                text ""

            Checking ->
                div [ class "text-blue-600 text-sm flex items-center" ]
                    [ -- Loading spinner
                      div [ class "animate-spin h-4 w-4 mr-2 border-2 border-blue-600 border-t-transparent rounded-full" ] []
                    , text "Checking availability..."
                    ]

            Valid ->
                div [ class "text-green-600 text-sm flex items-center" ]
                    [ -- Checkmark icon
                      svg
                        [ Svg.Attributes.class "h-4 w-4 mr-1"
                        , Svg.Attributes.fill "none"
                        , Svg.Attributes.viewBox "0 0 24 24"
                        , Svg.Attributes.stroke "currentColor"
                        ]
                        [ path
                            [ Svg.Attributes.strokeLinecap "round"
                            , Svg.Attributes.strokeLinejoin "round"
                            , Svg.Attributes.strokeWidth "2"
                            , Svg.Attributes.d "M5 13l4 4L19 7"
                            ]
                            []
                        ]
                    , text "Organization name is available"
                    ]

            Invalid message ->
                div [ class "text-red-600 text-sm flex items-center" ]
                    [ -- X icon
                      svg
                        [ Svg.Attributes.class "h-4 w-4 mr-1"
                        , Svg.Attributes.fill "none"
                        , Svg.Attributes.viewBox "0 0 24 24"
                        , Svg.Attributes.stroke "currentColor"
                        ]
                        [ path
                            [ Svg.Attributes.strokeLinecap "round"
                            , Svg.Attributes.strokeLinejoin "round"
                            , Svg.Attributes.strokeWidth "2"
                            , Svg.Attributes.d "M6 18L18 6M6 6l12 12"
                            ]
                            []
                        ]
                    , text message
                    ]
        ]


viewEmailStatus : EmailStatus -> Html Msg
viewEmailStatus status =
    div [ class "mt-1 transition-all duration-200" ]
        [ case status of
            EmailNotChecked ->
                text ""

            EmailChecking ->
                div [ class "text-blue-600 text-sm flex items-center" ]
                    [ div [ class "animate-spin h-4 w-4 mr-2 border-2 border-blue-600 border-t-transparent rounded-full" ] []
                    , text "Checking availability..."
                    ]

            EmailValid ->
                div [ class "text-green-600 text-sm flex items-center" ]
                    [ -- Checkmark icon
                      svg
                        [ Svg.Attributes.class "h-4 w-4 mr-1"
                        , Svg.Attributes.fill "none"
                        , Svg.Attributes.viewBox "0 0 24 24"
                        , Svg.Attributes.stroke "currentColor"
                        ]
                        [ path
                            [ Svg.Attributes.strokeLinecap "round"
                            , Svg.Attributes.strokeLinejoin "round"
                            , Svg.Attributes.strokeWidth "2"
                            , Svg.Attributes.d "M5 13l4 4L19 7"
                            ]
                            []
                        ]
                    , text "Email is available"
                    ]

            EmailInvalid message ->
                div [ class "text-red-600 text-sm flex items-center" ]
                    [ -- X icon
                      svg
                        [ Svg.Attributes.class "h-4 w-4 mr-1"
                        , Svg.Attributes.fill "none"
                        , Svg.Attributes.viewBox "0 0 24 24"
                        , Svg.Attributes.stroke "currentColor"
                        ]
                        [ path
                            [ Svg.Attributes.strokeLinecap "round"
                            , Svg.Attributes.strokeLinejoin "round"
                            , Svg.Attributes.strokeWidth "2"
                            , Svg.Attributes.d "M6 18L18 6M6 6l12 12"
                            ]
                            []
                        ]
                    , text message
                    ]
        ]


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none



-- Add this helper function


isFormValid : Model -> Bool
isFormValid model =
    let
        isEmailValid =
            not (String.isEmpty (String.trim model.adminEmail))
                && String.contains "@" model.adminEmail
                && String.contains "." model.adminEmail
                && model.emailStatus
                == EmailValid

        isOrgValid =
            not (String.isEmpty (String.trim model.organizationName))
                && model.orgNameStatus
                == Valid

        areNamesValid =
            not (String.isEmpty (String.trim model.adminFirstName))
                && not (String.isEmpty (String.trim model.adminLastName))
    in
    isEmailValid && isOrgValid && areNamesValid



-- Add helper function for submit button classes


submitButtonClass : Model -> String
submitButtonClass model =
    "w-full flex justify-center py-2.5 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium transition-colors "
        ++ (if isFormValid model then
                "text-white bg-[#03045e] hover:bg-[#03045e]/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#03045e]"

            else
                "text-white bg-[#03045e]/60 cursor-not-allowed"
           )


viewProgress : Model -> Html Msg
viewProgress model =
    let
        currentStep =
            case model.currentStep of
                AccountSetup ->
                    1

                CompanyDetails ->
                    2

                CompanyStyle ->
                    3

                SetupPayment ->
                    4

        makeStep : Int -> String -> String -> String -> Step
        makeStep stepNum icon title description =
            { icon = icon
            , title = title
            , description = description
            , isCompleted = stepNum < currentStep
            , isActive = stepNum == currentStep
            }
    in
    ProgressIndicator.view
        [ makeStep 1 "👤" "Your Details" "Please provide your name and email"
        , makeStep 2 "🏢" "Company Details" "General info for your Company"
        , makeStep 3 "⚙️" "Company Style" "Style your platform"
        , makeStep 4 "💳" "Setup Payment" "The final step to get started"
        ]

================
File: src/StateRegions.elm
================
module StateRegions exposing (Region(..), allRegions, getRegionStates, regionToString, stringToRegion)


type Region
    = WestCoast
    | EastCoast
    | South
    | Midwest


allRegions : List Region
allRegions =
    [ WestCoast, EastCoast, South, Midwest ]


regionToString : Region -> String
regionToString region =
    case region of
        WestCoast ->
            "West Coast"

        EastCoast ->
            "East Coast"

        South ->
            "South"

        Midwest ->
            "Midwest"


stringToRegion : String -> Maybe Region
stringToRegion str =
    case str of
        "west" ->
            Just WestCoast

        "east" ->
            Just EastCoast

        "south" ->
            Just South

        "midwest" ->
            Just Midwest

        _ ->
            Nothing


getRegionStates : Region -> List String
getRegionStates region =
    case region of
        WestCoast ->
            [ "CA", "OR", "WA", "AK", "HI" ]

        EastCoast ->
            [ "ME", "NH", "VT", "MA", "RI", "CT", "NY", "NJ", "PA", "DE", "MD", "DC" ]

        South ->
            [ "VA", "NC", "SC", "GA", "FL", "AL", "MS", "LA", "AR", "TN", "KY", "WV", "TX", "OK" ]

        Midwest ->
            [ "OH", "MI", "IN", "IL", "WI", "MN", "IA", "MO", "ND", "SD", "NE", "KS", "MT", "WY", "CO", "ID", "NV", "NM", "AZ", "UT" ]

================
File: src/Subscription.elm
================
module Subscription exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, viewBox)
import Time



-- MODEL


type alias Model =
    { subscriptionData : Maybe SubscriptionData
    , paymentMethods : List PaymentMethod
    , billingHistory : List BillingRecord
    , isLoading : Bool
    , error : Maybe String
    , activeTab : Tab
    }


type Tab
    = PlanTab
    | PaymentTab
    | BillingTab


type alias SubscriptionData =
    { plan : String
    , status : String
    , nextBillingDate : String
    , price : Float
    , features : List String
    }


type alias PaymentMethod =
    { id : String
    , brand : String
    , last4 : String
    , expiryMonth : Int
    , expiryYear : Int
    , isDefault : Bool
    }


type alias BillingRecord =
    { id : String
    , date : String
    , amount : Float
    , status : String
    , description : String
    , invoiceUrl : Maybe String
    }


init : () -> ( Model, Cmd Msg )
init _ =
    ( { subscriptionData = Nothing
      , paymentMethods = []
      , billingHistory = []
      , isLoading = True
      , error = Nothing
      , activeTab = PlanTab
      }
    , Cmd.batch
        [ fetchSubscriptionData
        , fetchPaymentMethods
        , fetchBillingHistory
        ]
    )



-- UPDATE


type Msg
    = GotSubscriptionData (Result Http.Error SubscriptionData)
    | GotPaymentMethods (Result Http.Error (List PaymentMethod))
    | GotBillingHistory (Result Http.Error (List BillingRecord))
    | ChangePlan String
    | ChangePlanResult (Result Http.Error SubscriptionData)
    | AddPaymentMethod
    | RemovePaymentMethod String
    | SetDefaultPaymentMethod String
    | PaymentMethodUpdated (Result Http.Error (List PaymentMethod))
    | DownloadInvoice String
    | ChangeTab Tab
    | NoOp


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotSubscriptionData (Ok data) ->
            ( { model | subscriptionData = Just data, isLoading = False }, Cmd.none )

        GotSubscriptionData (Err _) ->
            ( { model | error = Just "Failed to load subscription data", isLoading = False }, Cmd.none )

        GotPaymentMethods (Ok methods) ->
            ( { model | paymentMethods = methods, isLoading = False }, Cmd.none )

        GotPaymentMethods (Err _) ->
            ( { model | error = Just "Failed to load payment methods", isLoading = False }, Cmd.none )

        GotBillingHistory (Ok history) ->
            ( { model | billingHistory = history, isLoading = False }, Cmd.none )

        GotBillingHistory (Err _) ->
            ( { model | error = Just "Failed to load billing history", isLoading = False }, Cmd.none )

        ChangePlan plan ->
            ( { model | isLoading = True }, changeSubscriptionPlan plan )

        ChangePlanResult (Ok data) ->
            ( { model | subscriptionData = Just data, isLoading = False }, Cmd.none )

        ChangePlanResult (Err _) ->
            ( { model | error = Just "Failed to change subscription plan", isLoading = False }, Cmd.none )

        AddPaymentMethod ->
            -- In a real implementation, this would open a Stripe form or similar
            ( model, Cmd.none )

        RemovePaymentMethod id ->
            ( { model | isLoading = True }, removePaymentMethod id )

        SetDefaultPaymentMethod id ->
            ( { model | isLoading = True }, setDefaultPaymentMethod id )

        PaymentMethodUpdated (Ok methods) ->
            ( { model | paymentMethods = methods, isLoading = False }, Cmd.none )

        PaymentMethodUpdated (Err _) ->
            ( { model | error = Just "Failed to update payment method", isLoading = False }, Cmd.none )

        DownloadInvoice url ->
            -- This would trigger a download in a real implementation
            ( model, Cmd.none )

        ChangeTab tab ->
            ( { model | activeTab = tab }, Cmd.none )

        NoOp ->
            ( model, Cmd.none )



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Subscription & Payments"
    , body =
        [ div [ class "min-h-screen bg-gray-50" ]
            [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" ]
                [ h1 [ class "text-2xl font-semibold text-[#03045E] mb-6" ]
                    [ text "Subscription & Payments" ]
                , if model.isLoading then
                    viewLoading

                  else
                    div []
                        [ viewTabs model
                        , viewTabContent model
                        ]
                ]
            ]
        ]
    }


viewTabs : Model -> Html Msg
viewTabs model =
    div [ class "border-b border-gray-200 mb-6" ]
        [ div [ class "flex -mb-px" ]
            [ viewTab "Subscription Plan" (model.activeTab == PlanTab) (ChangeTab PlanTab)
            , viewTab "Payment Methods" (model.activeTab == PaymentTab) (ChangeTab PaymentTab)
            , viewTab "Billing History" (model.activeTab == BillingTab) (ChangeTab BillingTab)
            ]
        ]


viewTab : String -> Bool -> Msg -> Html Msg
viewTab label isActive msg =
    button
        [ class
            ("px-4 py-2 font-medium text-sm "
                ++ (if isActive then
                        "border-b-2 border-[#03045E] text-[#03045E]"

                    else
                        "text-gray-500 hover:text-gray-700 hover:border-gray-300"
                   )
            )
        , onClick msg
        ]
        [ text label ]


viewTabContent : Model -> Html Msg
viewTabContent model =
    case model.activeTab of
        PlanTab ->
            viewSubscriptionPlan model

        PaymentTab ->
            viewPaymentMethods model

        BillingTab ->
            viewBillingHistory model


viewLoading : Html Msg
viewLoading =
    div [ class "flex justify-center items-center h-64" ]
        [ div [ class "animate-spin rounded-full h-8 w-8 border-4 border-[#03045E] border-t-transparent" ] [] ]


viewSubscriptionPlan : Model -> Html Msg
viewSubscriptionPlan model =
    div [ class "bg-white shadow rounded-lg p-6" ]
        [ case model.subscriptionData of
            Just subscription ->
                div [ class "space-y-6" ]
                    [ div [ class "flex justify-between items-center" ]
                        [ div []
                            [ h2 [ class "text-lg font-medium text-gray-900" ]
                                [ text "Current Plan" ]
                            , div [ class "mt-1 text-sm text-gray-500" ]
                                [ text "You can change your subscription plan at any time" ]
                            ]
                        , div [ class "px-3 py-1 bg-blue-50 text-blue-700 rounded-full text-sm font-medium" ]
                            [ text subscription.status ]
                        ]
                    , div [ class "border-t border-gray-200 pt-4" ]
                        [ div [ class "flex items-baseline" ]
                            [ span [ class "text-3xl font-bold text-gray-900" ]
                                [ text ("$" ++ String.fromFloat subscription.price) ]
                            , span [ class "ml-1 text-gray-500" ]
                                [ text "/month" ]
                            ]
                        , div [ class "mt-1 text-sm text-gray-500" ]
                            [ text ("Next billing date: " ++ subscription.nextBillingDate) ]
                        ]
                    , div [ class "border-t border-gray-200 pt-4" ]
                        [ h3 [ class "text-md font-medium text-gray-900 mb-2" ]
                            [ text "Features" ]
                        , ul [ class "space-y-2" ]
                            (List.map
                                (\feature ->
                                    li [ class "flex items-center text-gray-600" ]
                                        [ div [ class "mr-2 text-green-500" ]
                                            [ viewCheckIcon ]
                                        , text feature
                                        ]
                                )
                                subscription.features
                            )
                        ]
                    , div [ class "border-t border-gray-200 pt-4" ]
                        [ h3 [ class "text-md font-medium text-gray-900 mb-3" ]
                            [ text "Available Plans" ]
                        , div [ class "grid grid-cols-3 gap-4" ]
                            [ viewPlanCard "Basic" 29.99 [ "Up to 5 agents", "Email notifications", "Basic reporting" ] subscription.plan
                            , viewPlanCard "Professional" 49.99 [ "Up to 15 agents", "All Basic features", "Advanced reporting", "API access" ] subscription.plan
                            , viewPlanCard "Enterprise" 99.99 [ "Unlimited agents", "All Professional features", "Dedicated support", "Custom integrations" ] subscription.plan
                            ]
                        ]
                    ]

            Nothing ->
                div [ class "text-center text-gray-500 py-8" ]
                    [ text "No subscription data available" ]
        ]


viewPlanCard : String -> Float -> List String -> String -> Html Msg
viewPlanCard plan price features currentPlan =
    let
        isCurrentPlan =
            plan == currentPlan
    in
    div
        [ class
            ("border rounded-lg p-4 "
                ++ (if isCurrentPlan then
                        "border-[#03045E] bg-blue-50"

                    else
                        "border-gray-200"
                   )
            )
        ]
        [ div [ class "flex justify-between items-center mb-2" ]
            [ h4 [ class "font-medium text-gray-900" ]
                [ text plan ]
            , if isCurrentPlan then
                span [ class "px-2 py-1 bg-[#03045E] text-white text-xs rounded-full" ]
                    [ text "Current" ]

              else
                text ""
            ]
        , div [ class "flex items-baseline mb-4" ]
            [ span [ class "text-xl font-bold text-gray-900" ]
                [ text ("$" ++ String.fromFloat price) ]
            , span [ class "ml-1 text-gray-500 text-sm" ]
                [ text "/month" ]
            ]
        , ul [ class "text-sm space-y-1 mb-4" ]
            (List.map
                (\feature ->
                    li [ class "flex items-start" ]
                        [ div [ class "mr-1 text-green-500 mt-0.5 flex-shrink-0" ]
                            [ viewSmallCheckIcon ]
                        , text feature
                        ]
                )
                features
            )
        , if isCurrentPlan then
            button
                [ class "w-full px-3 py-2 text-sm font-medium text-gray-500 bg-gray-100 rounded-md cursor-not-allowed"
                , disabled True
                ]
                [ text "Current Plan" ]

          else
            button
                [ class "w-full px-3 py-2 text-sm font-medium text-white bg-[#03045E] rounded-md hover:bg-opacity-90"
                , onClick (ChangePlan plan)
                ]
                [ text "Switch to Plan" ]
        ]


viewPaymentMethods : Model -> Html Msg
viewPaymentMethods model =
    div [ class "bg-white shadow rounded-lg p-6" ]
        [ div [ class "flex justify-between items-center mb-4" ]
            [ h2 [ class "text-lg font-medium text-gray-900" ]
                [ text "Payment Methods" ]
            , button
                [ class "px-4 py-2 text-sm font-medium text-white bg-[#03045E] rounded-md hover:bg-opacity-90"
                , onClick AddPaymentMethod
                ]
                [ text "Add Payment Method" ]
            ]
        , if List.isEmpty model.paymentMethods then
            div [ class "text-center text-gray-500 py-8" ]
                [ text "No payment methods added yet" ]

          else
            div [ class "space-y-4" ]
                (List.map viewPaymentMethod model.paymentMethods)
        ]


viewPaymentMethod : PaymentMethod -> Html Msg
viewPaymentMethod method =
    div [ class "border rounded-lg p-4 flex justify-between items-center" ]
        [ div [ class "flex items-center" ]
            [ div [ class "flex-shrink-0 w-10 h-6 bg-gray-100 rounded flex items-center justify-center mr-3" ]
                [ text (String.left 1 method.brand) ]
            , div []
                [ div [ class "text-gray-900" ]
                    [ text (method.brand ++ " •••• " ++ method.last4) ]
                , div [ class "text-sm text-gray-500" ]
                    [ text ("Expires " ++ String.fromInt method.expiryMonth ++ "/" ++ String.fromInt method.expiryYear) ]
                ]
            ]
        , div [ class "flex items-center space-x-2" ]
            [ if method.isDefault then
                span [ class "px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full" ]
                    [ text "Default" ]

              else
                button
                    [ class "text-sm text-blue-600 hover:text-blue-800"
                    , onClick (SetDefaultPaymentMethod method.id)
                    ]
                    [ text "Set Default" ]
            , button
                [ class "text-sm text-red-600 hover:text-red-800"
                , onClick (RemovePaymentMethod method.id)
                ]
                [ text "Remove" ]
            ]
        ]


viewBillingHistory : Model -> Html Msg
viewBillingHistory model =
    div [ class "bg-white shadow rounded-lg p-6" ]
        [ h2 [ class "text-lg font-medium text-gray-900 mb-4" ]
            [ text "Billing History" ]
        , if List.isEmpty model.billingHistory then
            div [ class "text-center text-gray-500 py-8" ]
                [ text "No billing history available" ]

          else
            div [ class "overflow-x-auto" ]
                [ table [ class "min-w-full divide-y divide-gray-200" ]
                    [ thead [ class "bg-gray-50" ]
                        [ tr []
                            [ th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ]
                                [ text "Date" ]
                            , th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ]
                                [ text "Description" ]
                            , th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ]
                                [ text "Amount" ]
                            , th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ]
                                [ text "Status" ]
                            , th [ class "px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider" ]
                                [ text "Actions" ]
                            ]
                        ]
                    , tbody [ class "bg-white divide-y divide-gray-200" ]
                        (List.map viewBillingRecord model.billingHistory)
                    ]
                ]
        ]


viewBillingRecord : BillingRecord -> Html Msg
viewBillingRecord record =
    tr []
        [ td [ class "px-6 py-4 whitespace-nowrap text-sm text-gray-900" ]
            [ text record.date ]
        , td [ class "px-6 py-4 whitespace-nowrap text-sm text-gray-900" ]
            [ text record.description ]
        , td [ class "px-6 py-4 whitespace-nowrap text-sm text-gray-900" ]
            [ text ("$" ++ String.fromFloat record.amount) ]
        , td [ class "px-6 py-4 whitespace-nowrap" ]
            [ span
                [ class
                    ("px-2 py-1 text-xs rounded-full "
                        ++ (if record.status == "Paid" then
                                "bg-green-100 text-green-800"

                            else if record.status == "Failed" then
                                "bg-red-100 text-red-800"

                            else
                                "bg-yellow-100 text-yellow-800"
                           )
                    )
                ]
                [ text record.status ]
            ]
        , td [ class "px-6 py-4 whitespace-nowrap text-right text-sm font-medium" ]
            [ case record.invoiceUrl of
                Just url ->
                    button
                        [ class "text-blue-600 hover:text-blue-900"
                        , onClick (DownloadInvoice url)
                        ]
                        [ text "Download" ]

                Nothing ->
                    text ""
            ]
        ]



-- Helper Functions and Icons


viewCheckIcon : Html msg
viewCheckIcon =
    svg [ viewBox "0 0 20 20", fill "currentColor", class "h-5 w-5" ]
        [ path [ fillRule "evenodd", d "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z", clipRule "evenodd" ] []
        ]


viewSmallCheckIcon : Html msg
viewSmallCheckIcon =
    svg [ viewBox "0 0 20 20", fill "currentColor", class "h-4 w-4" ]
        [ path [ fillRule "evenodd", d "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z", clipRule "evenodd" ] []
        ]



-- HTTP


fetchSubscriptionData : Cmd Msg
fetchSubscriptionData =
    -- In a real implementation, this would call an API
    -- For now, return mock data
    Cmd.none


fetchPaymentMethods : Cmd Msg
fetchPaymentMethods =
    -- In a real implementation, this would call an API
    -- For now, return mock data
    Cmd.none


fetchBillingHistory : Cmd Msg
fetchBillingHistory =
    -- In a real implementation, this would call an API
    -- For now, return mock data
    Cmd.none


changeSubscriptionPlan : String -> Cmd Msg
changeSubscriptionPlan plan =
    -- In a real implementation, this would call an API
    -- For now, just return a success
    Cmd.none


removePaymentMethod : String -> Cmd Msg
removePaymentMethod id =
    -- In a real implementation, this would call an API
    Cmd.none


setDefaultPaymentMethod : String -> Cmd Msg
setDefaultPaymentMethod id =
    -- In a real implementation, this would call an API
    Cmd.none



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/TempLanding.elm
================
module TempLanding exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick)


type alias Model =
    {}


type Msg
    = NavigateTo String


init : () -> ( Model, Cmd Msg )
init _ =
    ( {}, Cmd.none )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NavigateTo _ ->
            ( model, Cmd.none )


view : Model -> Browser.Document Msg
view model =
    { title = "Welcome"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex flex-col justify-center" ]
            [ div [ class "text-center space-y-8" ]
                [ h1 [ class "text-4xl font-bold text-gray-900" ]
                    [ text "Welcome! You're logged in!" ]
                , div [ class "flex justify-center space-x-4" ]
                    [ button
                        [ class "inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        , onClick (NavigateTo "/dashboard")
                        ]
                        [ text "Go to Dashboard" ]
                    , button
                        [ class "inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        , onClick (NavigateTo "/settings")
                        ]
                        [ text "Go to Settings" ]
                    ]
                ]
            ]
        ]
    }


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

declare module "*.elm" {
  export const Elm: any;
}

================
File: src/Walkthrough.elm
================
module Walkthrough exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Json.Decode as Decode



-- MODEL


type alias Model =
    { key : Nav.Key
    , currentUser : Maybe CurrentUser
    }


type alias CurrentUser =
    { id : String
    , name : String
    , email : String
    , isAdmin : Bool
    , isAgent : Bool
    }


init : Nav.Key -> Maybe CurrentUser -> ( Model, Cmd Msg )
init key currentUser =
    ( { key = key
      , currentUser = currentUser
      }
    , Cmd.none
    )



-- UPDATE


type Msg
    = NoOp


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Welcome to Medicare Max"
    , body =
        [ div [ class "min-h-screen bg-gray-50" ]
            [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10" ]
                [ div [ class "bg-white shadow-md rounded-lg overflow-hidden" ]
                    [ div [ class "px-6 py-4 border-b border-gray-200 bg-[#03045E] text-white" ]
                        [ h1 [ class "text-2xl font-semibold" ]
                            [ text "Welcome to Medicare Max" ]
                        ]
                    , div [ class "p-6" ]
                        [ div [ class "mb-8 text-center" ]
                            [ h2 [ class "text-xl font-medium text-gray-800 mb-2" ]
                                [ text "Get Started with Our Platform" ]
                            , p [ class "text-gray-600 max-w-2xl mx-auto" ]
                                [ text "Watch this video walkthrough to learn how to use Medicare Max and make the most of its features." ]
                            ]
                        , div [ class "mx-auto max-w-4xl bg-gray-100 rounded-lg p-6 aspect-video flex items-center justify-center" ]
                            [ div [ class "text-center" ]
                                [ div [ class "text-6xl text-gray-400 mb-4" ]
                                    [ text "▶️" ]
                                , p [ class "text-gray-500 font-medium" ]
                                    [ text "Video Walkthrough Coming Soon" ]
                                , p [ class "text-gray-400 text-sm mt-2" ]
                                    [ text "This video will demonstrate how to use the Medicare Max platform" ]
                                ]
                            ]
                        , div [ class "mt-10 max-w-3xl mx-auto" ]
                            [ h3 [ class "text-lg font-medium text-gray-800 mb-4" ]
                                [ text "Quick Start Guide" ]
                            , div [ class "bg-blue-50 rounded-lg p-5 border border-blue-100" ]
                                [ ul [ class "space-y-4" ]
                                    [ li [ class "flex" ]
                                        [ div [ class "shrink-0 flex items-center justify-center w-8 h-8 bg-blue-600 text-white rounded-full mr-3" ]
                                            [ text "1" ]
                                        , div []
                                            [ h4 [ class "font-medium text-blue-800" ]
                                                [ text "Set Up Your Profile" ]
                                            , p [ class "text-blue-700 mt-1 text-sm" ]
                                                [ text "Complete your profile information to personalize your experience." ]
                                            ]
                                        ]
                                    , li [ class "flex" ]
                                        [ div [ class "shrink-0 flex items-center justify-center w-8 h-8 bg-blue-600 text-white rounded-full mr-3" ]
                                            [ text "2" ]
                                        , div []
                                            [ h4 [ class "font-medium text-blue-800" ]
                                                [ text "Add Clients" ]
                                            , p [ class "text-blue-700 mt-1 text-sm" ]
                                                [ text "Start adding your clients to manage their information and policies." ]
                                            ]
                                        ]
                                    , li [ class "flex" ]
                                        [ div [ class "shrink-0 flex items-center justify-center w-8 h-8 bg-blue-600 text-white rounded-full mr-3" ]
                                            [ text "3" ]
                                        , div []
                                            [ h4 [ class "font-medium text-blue-800" ]
                                                [ text "Generate Quotes" ]
                                            , p [ class "text-blue-700 mt-1 text-sm" ]
                                                [ text "Use our quoting tools to find the best options for your clients." ]
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            ]
        ]
    }



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import elmPlugin from 'vite-plugin-elm'
import { resolve } from 'path'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
  plugins: [
    elmPlugin({
      // Set a custom temp directory inside your project
      cwd: resolve(__dirname, 'elm-temp')
    }),
    tailwindcss(),
  ],
  resolve: {
    extensions: ['.ts', '.js', '.elm']
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        secure: false,
        configure: (proxy, _options) => {
          proxy.on('error', (err) => {
            console.log('proxy error', err);
          });
          proxy.on('proxyReq', (proxyReq) => {
            console.log('Sending Request:', proxyReq.method, proxyReq.path);
          });
          proxy.on('proxyRes', (proxyRes) => {
            console.log('Received Response:', proxyRes.statusCode);
          });
        }
      }
    }
  },
  build: {
    outDir: '../dist',
    emptyOutDir: true,
    assetsDir: 'assets',
    rollupOptions: {
      input: {
        main: resolve(__dirname, 'index.html')
      }
    }
  }
})



================================================================
End of Codebase
================================================================
