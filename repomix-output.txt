This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*.ts, **/*.elm
- Files matching these patterns are excluded: **/*/node_modules/*
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
backend/
  scripts/
    add-agent.ts
    apply-contact-migration.ts
    generate-test-data.ts
    generateQuoteId.ts
    generateQuoteUrl.ts
    manage-recommendations.ts
    manage-turso.ts
    test-bulk-import.ts
  src/
    config/
      index.ts
      turso.ts
    middleware/
      account-status.ts
      auth.copy.ts
      auth.ts
      error.ts
    routes/
      admin-portal.ts
      admin.ts
      auth.ts
      brand.ts
      contacts.ts
      contactTracking.ts
      dashboard.ts
      eligibility.ts
      onboarding.ts
      organizations.ts
      quotes.ts
      schedule.ts
      self-service.ts
      settings.ts
      signup.ts
      stripe.ts
      waitlist.ts
    scripts/
      apply_nullable_fields_migration.ts
      apply_org_migrations.ts
      migrate-add-aep-columns.ts
    services/
      agentSettings.ts
      auth.ts
      contactCount.ts
      contactTracking.ts
      email.ts
      stripe.ts
      subscription.ts
      turso.ts
    utils/
      quoteId.ts
      tracking.ts
    config.ts
    database.ts
    errors.ts
    index.ts
    logger.ts
    types.ts
frontend/
  backup/
    Steps/
      AddAgents.elm
      CompanyDetails.elm
      EnterpriseForm.elm
      LicensingSettings.elm
      Payment.elm
      PlanSelection.elm
      UserDetails.elm
    Onboarding.elm
    OnboardingNew.elm
  src/
    Components/
      AccountStatusBanner.elm
      LimitBanner.elm
      ProgressIndicator.elm
      SetupLayout.elm
    Utils/
      DiscountDescription.elm
      Formatters.elm
      MyDate.elm
      QuoteHeader.elm
      RandomOrgName.elm
      UrlStuff.elm
    Accept.elm
    AddAgent.elm
    AgeCalc.elm
    BirthdayRules.elm
    Calculator.elm
    CarrierNaic.elm
    ChangePlan.elm
    chart-animations.ts
    ChoosePlan.elm
    Compare.elm
    Contact.elm
    Contacts.elm
    CsvProcessor.elm
    Dashboard.elm
    Decline.elm
    Earnings.elm
    Eligibility.elm
    EmailScheduler.elm
    Home.elm
    Landing.elm
    Login.elm
    Logout.elm
    Main.elm
    main.ts
    MyIcon.elm
    Onboarding.elm
    Ports.elm
    PriceModel.elm
    Pricing.elm
    Pricing2.elm
    Profile.elm
    Quote.elm
    QuoteBirthdayRules.elm
    Schedule.elm
    ScheduleMain.elm
    SelfServiceOnboarding.elm
    Settings.elm
    Signup.elm
    StateRegions.elm
    stripe-integration.d.ts
    stripe-integration.ts
    Stripe.elm
    Subscription.elm
    TempLanding.elm
    vite-env.d.ts
    Waitlist.elm
    Walkthrough.elm
  vite.config.ts
scripts/
  migrate-to-sqlite.ts

================================================================
Files
================================================================

================
File: backend/scripts/add-agent.ts
================
import * as p from '@clack/prompts';
import { z } from 'zod';
import { exit } from 'process';
import chalk from 'chalk';
import { Database } from '../src/database';

// Schema validation for agent data
const AgentSchema = z.object({
  first_name: z.string().min(1),
  last_name: z.string().min(1),
  email: z.string().email(),
  phone: z.string().min(1),
  organization_id: z.number(),
});

async function main() {
  p.intro(chalk.green('✨ Interactive Agent Creation Tool ✨'));

  const db = new Database();

  // Get all organizations
  const orgs = await db.fetchAll<{ id: number; name: string }>('SELECT id, name FROM organizations');
  
  if (orgs.length === 0) {
    p.outro(chalk.red('No organizations found. Please create an organization first.'));
    exit(1);
  }

  // Gather information
  const firstName = await p.text({
    message: 'Enter agent first name:',
    validate: (value) => {
      if (value.length === 0) return 'First name cannot be empty';
    },
  });

  const lastName = await p.text({
    message: 'Enter agent last name:',
    validate: (value) => {
      if (value.length === 0) return 'Last name cannot be empty';
    },
  });

  const email = await p.text({
    message: 'Enter agent email:',
    validate: (value) => {
      if (!value.includes('@')) return 'Invalid email address';
    },
  });

  const phone = await p.text({
    message: 'Enter agent phone:',
    validate: (value) => {
      if (value.length === 0) return 'Phone cannot be empty';
    },
  });

  const organization = await p.select({
    message: 'Select organization:',
    options: orgs.map(org => ({
      value: org.id,
      label: org.name,
    })),
  });

  if (p.isCancel(firstName) || p.isCancel(lastName) || p.isCancel(email) || p.isCancel(phone) || p.isCancel(organization)) {
    p.outro(chalk.yellow('Operation cancelled'));
    exit(0);
  }

  try {
    // Validate data
    const agentData = AgentSchema.parse({
      first_name: firstName,
      last_name: lastName,
      email,
      phone,
      organization_id: organization,
    });

    // Start a transaction
    await db.execute('BEGIN TRANSACTION');

    try {
      // Insert into agents table
      await db.execute(
        `INSERT INTO agents (first_name, last_name, email, phone, organization_id)
         VALUES (?, ?, ?, ?, ?)`,
        [
          agentData.first_name,
          agentData.last_name,
          agentData.email,
          agentData.phone,
          agentData.organization_id
        ]
      );

      // Insert into users table
      await db.execute(
        `INSERT INTO users (email, organization_id, is_admin, is_agent, is_active)
         VALUES (?, ?, ?, ?, true)`,
        [agentData.email, agentData.organization_id, false, true]
      );

      // Commit the transaction
      await db.execute('COMMIT');

      p.outro(chalk.green('Agent created successfully! 🎉'));

    } catch (error) {
      // Rollback on error
      await db.execute('ROLLBACK');
      throw error;
    }

  } catch (error) {
    if (error instanceof z.ZodError) {
      p.outro(chalk.red(`Validation error: ${error.errors.map(e => e.message).join(', ')}`));
    } else {
      p.outro(chalk.red(`Error creating agent: ${error}`));
    }
    exit(1);
  }
}

main().catch((error) => {
  p.outro(chalk.red(`Fatal error: ${error}`));
  exit(1);
});

================
File: backend/scripts/apply-contact-migration.ts
================
#!/usr/bin/env bun
/**
 * Script to apply contact deduplication and index creation to all organization databases
 * Usage: bun run apply-contact-migration.ts
 */

import { Database } from '../src/database'
import { logger } from '../src/logger'
import fs from 'fs/promises'
import path from 'path'

async function main() {
  try {
    logger.info('Starting contact migration script')
    
    // Connect to main database
    const mainDb = new Database()
    
    // Get all organizations
    const organizations = await mainDb.fetchAll('SELECT id, name, turso_db_url, turso_auth_token FROM organizations WHERE turso_db_url IS NOT NULL')
    logger.info(`Found ${organizations.length} organizations to process`)
    
    // Read the migration SQL file
    const migrationPath = path.join(process.cwd(), 'migrations', '20240326_deduplicate_contacts.sql')
    
    try {
      await fs.access(migrationPath)
    } catch (error) {
      logger.error(`Migration file not found: ${migrationPath}`)
      process.exit(1)
    }
    
    const migrationSql = await fs.readFile(migrationPath, 'utf-8')
    logger.info(`Loaded migration from: ${migrationPath}`)
    
    // Process each organization
    for (let i = 0; i < organizations.length; i++) {
      const org = organizations[i]
      const orgId = org.id
      const orgName = org.name
      const dbUrl = org.turso_db_url
      const authToken = org.turso_auth_token
      
      logger.info(`Processing organization ${i+1}/${organizations.length}: ${orgName} (ID: ${orgId})`)
      
      try {
        // Connect to the organization's database
        const orgDb = new Database(dbUrl, authToken)
        
        // Check if the contacts table exists
        const tableExists = await orgDb.fetchOne('SELECT name FROM sqlite_master WHERE type="table" AND name="contacts"')
        
        if (!tableExists) {
          logger.info(`Organization ${orgId} does not have a contacts table, skipping`)
          continue
        }
        
        // Get contact count before migration
        const beforeCount = await orgDb.fetchOne<{ count: number }>('SELECT COUNT(*) as count FROM contacts')
        logger.info(`Organization ${orgId} has ${beforeCount?.count || 0} contacts before migration`)
        
        // Check for duplicates
        const dupeCheck = await orgDb.fetchOne<{ dupes: number }>('SELECT COUNT(*) - COUNT(DISTINCT LOWER(TRIM(email))) as dupes FROM contacts')
        logger.info(`Organization ${orgId} has ${dupeCheck?.dupes || 0} duplicate email addresses`)
        
        // Check if unique index exists
        const indexExists = await orgDb.fetchOne('SELECT name FROM sqlite_master WHERE type="index" AND name="idx_contacts_email_unique"')
        
        if ((dupeCheck?.dupes || 0) === 0 && indexExists) {
          logger.info(`No duplicates found and unique index exists for organization ${orgId}, skipping`)
          continue
        }
        
        if ((dupeCheck?.dupes || 0) === 0) {
          // No duplicates, just create the index
          logger.info(`No duplicates found, creating unique email index for organization ${orgId}`)
          await orgDb.execute('CREATE UNIQUE INDEX IF NOT EXISTS idx_contacts_email_unique ON contacts(LOWER(TRIM(email)))')
          logger.info(`Created unique email index for organization ${orgId}`)
          continue
        }
        
        // Execute the migration SQL for this organization
        logger.info(`Found ${dupeCheck?.dupes || 0} duplicates, applying full migration to organization ${orgId}`)
        
        // Split the SQL into statements
        const statements = migrationSql
          .split(';')
          .map(stmt => stmt.trim())
          .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'))
        
        for (const statement of statements) {
          try {
            await orgDb.execute(statement)
          } catch (error) {
            // Log the error but continue with next statement
            logger.error(`Error executing statement for org ${orgId}: ${error}`)
            logger.error(`Statement: ${statement}`)
          }
        }
        
        // Get contact count after migration
        const afterCount = await orgDb.fetchOne<{ count: number }>('SELECT COUNT(*) as count FROM contacts')
        logger.info(`Organization ${orgId} has ${afterCount?.count || 0} contacts after migration`)
        
        // Calculate removed duplicates
        const removedCount = (beforeCount?.count || 0) - (afterCount?.count || 0)
        logger.info(`Removed ${removedCount} duplicate contacts from organization ${orgId}`)
        
      } catch (error) {
        // Log the error but continue with next organization
        logger.error(`Error processing organization ${orgId}: ${error}`)
      }
    }
    
    logger.info(`Migration completed for all organizations`)
    
  } catch (error) {
    logger.error(`Error in migration script: ${error}`)
    process.exit(1)
  }
}

main()

================
File: backend/scripts/generate-test-data.ts
================
import fs from 'fs/promises';
import { stringify } from 'csv-stringify/sync';
import path from 'path';

/**
 * Script to generate a large dataset of test contacts for performance testing
 * 
 * Usage:
 *   bun run scripts/generate-test-data.ts <count> [output-file]
 * 
 * Where:
 *   <count> is the number of contacts to generate
 *   [output-file] is the optional output file path (defaults to ./scripts/test-contacts-{count}.csv)
 */

// Sample data for random generation
const firstNames = ['John', 'Jane', 'Robert', 'Mary', 'Michael', 'Jennifer', 'William', 'Patricia', 'Richard', 'Linda', 
  'David', 'Elizabeth', 'Joseph', 'Barbara', 'Thomas', 'Susan', 'Charles', 'Jessica', 'Daniel', 'Sarah', 'Matthew', 'Karen', 
  'Anthony', 'Nancy', 'Mark', 'Lisa', 'Donald', 'Betty', 'Steven', 'Dorothy'];

const lastNames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 
  'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 
  'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall', 'Allen', 'Young', 'Hernandez', 'King'];

const carriers = ['Aetna', 'Humana', 'UnitedHealthcare', 'Cigna', 'Blue Cross Blue Shield', 'Kaiser Permanente', 
  'Anthem', 'Wellcare', 'Centene', 'Molina Healthcare'];

const planTypes = ['A', 'B', 'C', 'D', 'F', 'G', 'K', 'L', 'M', 'N'];

const states = ['AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 
  'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 
  'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'];

// Helper functions for random data generation
function getRandomItem<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

function getRandomDate(start: Date, end: Date): string {
  const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
  return date.toISOString().split('T')[0];
}

function getRandomPhone(): string {
  return `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`;
}

function getRandomZip(): string {
  return `${Math.floor(Math.random() * 90000) + 10000}`;
}

// Main function
async function main() {
  try {
    const args = process.argv.slice(2);
    
    if (args.length < 1) {
      console.error('Usage: bun run scripts/generate-test-data.ts <count> [output-file]');
      process.exit(1);
    }
    
    const count = parseInt(args[0], 10);
    
    if (isNaN(count) || count <= 0) {
      console.error('Count must be a positive number');
      process.exit(1);
    }
    
    const outputFile = args[1] || path.join(process.cwd(), 'scripts', `test-contacts-${count}.csv`);
    
    console.log(`Generating ${count} test contacts...`);
    
    // Generate the contacts
    const contacts = [];
    
    for (let i = 0; i < count; i++) {
      const firstName = getRandomItem(firstNames);
      const lastName = getRandomItem(lastNames);
      const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}${Math.floor(Math.random() * 10000)}@example.com`;
      
      contacts.push({
        first_name: firstName,
        last_name: lastName,
        email: email,
        current_carrier: getRandomItem(carriers),
        plan_type: getRandomItem(planTypes),
        effective_date: getRandomDate(new Date('2022-01-01'), new Date('2023-12-31')),
        birth_date: getRandomDate(new Date('1940-01-01'), new Date('1965-12-31')),
        tobacco_user: Math.random() > 0.8 ? 1 : 0, // 20% are tobacco users
        gender: Math.random() > 0.5 ? 'Male' : 'Female',
        state: getRandomItem(states),
        zip_code: getRandomZip(),
        phone_number: getRandomPhone()
      });
      
      // Log progress for large datasets
      if (i > 0 && i % 10000 === 0) {
        console.log(`Generated ${i} contacts...`);
      }
    }
    
    // Convert to CSV
    console.log('Converting to CSV...');
    const csv = stringify(contacts, { header: true });
    
    // Write to file
    console.log(`Writing to ${outputFile}...`);
    await fs.writeFile(outputFile, csv);
    
    console.log(`Successfully generated ${count} contacts in ${outputFile}`);
    
  } catch (error) {
    console.error(`Error generating test data: ${error}`);
    process.exit(1);
  }
}

main();

================
File: backend/scripts/generateQuoteId.ts
================
import { generateQuoteId } from '../src/utils/quoteId';

// Get command line arguments
const orgId = parseInt(process.argv[2]);
const contactId = parseInt(process.argv[3]);

if (isNaN(orgId) || isNaN(contactId)) {
  console.error('Usage: ts-node generateQuoteId.ts <orgId> <contactId>');
  process.exit(1);
}

// Generate quote ID
const quoteId = generateQuoteId(orgId, contactId);

// Output results
console.log('Generated Quote ID:', quoteId);
console.log('Quote URL:', `http://localhost:5173/quote?id=${quoteId}`);

================
File: backend/scripts/generateQuoteUrl.ts
================
import axios, { AxiosError } from 'axios';

// Get command line arguments
const orgId = parseInt(process.argv[2]);
const contactId = parseInt(process.argv[3]);

if (isNaN(orgId) || isNaN(contactId)) {
  console.error('Usage: ts-node generateQuoteUrl.ts <orgId> <contactId>');
  process.exit(1);
}

// Call the API to generate a quote ID
const generateQuoteUrl = async () => {
  try {
    // Use the debug endpoint to generate a quote ID without authentication
    const response = await axios.get(`http://localhost:8000/api/quotes/debug-generate/${orgId}/${contactId}`);

    if (response.data.success) {
      console.log('Quote ID:', response.data.quoteId);
      console.log('Quote URL:', response.data.redirectUrl);
    } else {
      console.error('Failed to generate quote ID:', response.data.error);
      
      if (response.data.availableContacts) {
        console.log('\nAvailable contacts for organization', orgId, ':');
        response.data.availableContacts.forEach((contact: any) => {
          console.log(`- ID: ${contact.id}, Name: ${contact.first_name} ${contact.last_name || ''}, Email: ${contact.email || 'N/A'}`);
        });
      }
    }
  } catch (error) {
    if (error instanceof AxiosError) {
      console.error('Error:', error.response?.data || error.message);
    } else {
      console.error('Error:', error);
    }
  }
};

generateQuoteUrl();

================
File: backend/scripts/manage-recommendations.ts
================
import * as p from '@clack/prompts';
import { z } from 'zod';
import { exit } from 'process';
import chalk from 'chalk';
import { Database } from '../src/database';

// Schema validation for GI recommendation data
const RecommendationSchema = z.object({
  state: z.string().length(2),
  carrier: z.string().min(1),
});

async function main() {
  p.intro(chalk.green('✨ Guaranteed Issue Recommendations Manager ✨'));

  const db = new Database();

  while (true) {
    const action = await p.select({
      message: 'What would you like to do?',
      options: [
        { value: 'list', label: 'List all GI recommendations' },
        { value: 'add', label: 'Add new GI recommendation' },
        { value: 'remove', label: 'Remove GI recommendation' },
        { value: 'exit', label: 'Exit' },
      ],
    });

    if (p.isCancel(action) || action === 'exit') {
      p.outro(chalk.yellow('Goodbye!'));
      exit(0);
    }

    try {
      switch (action) {
        case 'list':
          await listRecommendations(db);
          break;
        case 'add':
          await addRecommendation(db);
          break;
        case 'remove':
          await removeRecommendation(db);
          break;
      }
    } catch (error) {
      p.outro(chalk.red(`Error: ${error}`));
      exit(1);
    }
  }
}

async function listRecommendations(db: Database) {
  const results = await db.fetchAll<{ state: string; carrier: string; created_at: string }>(
    `SELECT state, carrier, created_at 
     FROM guaranteed_issue_recommendations 
     ORDER BY carrier, state`
  );

  if (results.length === 0) {
    p.note('No GI recommendations found', 'Empty');
    return;
  }

  const groupedByCarrier = results.reduce((acc, curr) => {
    if (!acc[curr.carrier]) {
      acc[curr.carrier] = [];
    }
    acc[curr.carrier].push(curr.state);
    return acc;
  }, {} as Record<string, string[]>);

  p.note(
    Object.entries(groupedByCarrier)
      .map(([carrier, states]) => `${carrier}:\n  ${states.sort().join(', ')}`)
      .join('\n\n'),
    'Current GI Recommendations'
  );
}

async function addRecommendation(db: Database) {
  // Get available carriers first
  const carriers = await db.fetchAll<{ name: string }>(
    'SELECT name FROM carriers ORDER BY name'
  );

  if (carriers.length === 0) {
    p.note(chalk.red('No carriers found in database'));
    return;
  }

  const carrier = await p.select({
    message: 'Select carrier:',
    options: carriers.map(c => ({
      value: c.name,
      label: c.name,
    })),
  });

  if (p.isCancel(carrier)) {
    p.note(chalk.yellow('Operation cancelled'));
    return;
  }

  const states = await p.text({
    message: 'Enter state codes (comma/space separated, e.g., TX CA FL):',
    validate: (value) => {
      const stateList = value.toUpperCase().split(/[\s,]+/).filter(Boolean);
      if (stateList.length === 0) return 'At least one state code is required';
      const invalidStates = stateList.filter(s => s.length !== 2);
      if (invalidStates.length > 0) {
        return `Invalid state codes: ${invalidStates.join(', ')}`;
      }
    },
  });

  if (p.isCancel(states)) {
    p.note(chalk.yellow('Operation cancelled'));
    return;
  }

  const stateList = states.toUpperCase().split(/[\s,]+/).filter(Boolean);
  const results: { state: string; success: boolean; message: string }[] = [];

  for (const state of stateList) {
    try {
      const data = RecommendationSchema.parse({
        state,
        carrier,
      });

      // Check if recommendation already exists
      const existing = await db.fetchOne(
        'SELECT 1 FROM guaranteed_issue_recommendations WHERE state = ? AND carrier = ?',
        [data.state, data.carrier]
      );

      if (existing) {
        results.push({
          state: data.state,
          success: false,
          message: 'Already exists'
        });
        continue;
      }

      await db.execute(
        'INSERT INTO guaranteed_issue_recommendations (state, carrier) VALUES (?, ?)',
        [data.state, data.carrier]
      );

      results.push({
        state: data.state,
        success: true,
        message: 'Added successfully'
      });

    } catch (error) {
      results.push({
        state,
        success: false,
        message: error instanceof z.ZodError 
          ? error.errors.map(e => e.message).join(', ')
          : 'Unknown error'
      });
    }
  }

  // Display results summary
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);

  if (successful.length > 0) {
    p.note(
      chalk.green(
        `Successfully added GI recommendations for ${carrier}:\n` +
        successful.map(r => `  ${r.state}`).join('\n')
      ),
      'Success'
    );
  }

  if (failed.length > 0) {
    p.note(
      chalk.yellow(
        `Failed to add some recommendations for ${carrier}:\n` +
        failed.map(r => `  ${r.state}: ${r.message}`).join('\n')
      ),
      'Warnings'
    );
  }
}

async function removeRecommendation(db: Database) {
  const recommendations = await db.fetchAll<{ id: number; state: string; carrier: string }>(
    'SELECT id, state, carrier FROM guaranteed_issue_recommendations ORDER BY carrier, state'
  );

  if (recommendations.length === 0) {
    p.note(chalk.yellow('No recommendations to remove'));
    return;
  }

  const selections = await p.multiselect({
    message: 'Select recommendations to remove (space to select/deselect):',
    options: recommendations
      .sort((a, b) => a.carrier.localeCompare(b.carrier) || a.state.localeCompare(b.state))
      .map(rec => ({
        value: rec.id.toString(),
        label: `${rec.carrier} - ${rec.state}`,
      })),
    required: true,
  });

  if (p.isCancel(selections)) {
    p.note(chalk.yellow('Operation cancelled'));
    return;
  }

  const idsToRemove = (selections as string[]).map(Number);

  if (idsToRemove.length === 0) {
    p.note(chalk.yellow('No recommendations selected for removal'));
    return;
  }

  await db.execute(
    `DELETE FROM guaranteed_issue_recommendations WHERE id IN (${idsToRemove.join(',')})`,
  );

  const removedItems = recommendations
    .filter(r => idsToRemove.includes(r.id))
    .reduce((acc, curr) => {
      if (!acc[curr.carrier]) {
        acc[curr.carrier] = [];
      }
      acc[curr.carrier].push(curr.state);
      return acc;
    }, {} as Record<string, string[]>);

  p.note(
    chalk.green(
      'Successfully removed recommendations:\n\n' +
      Object.entries(removedItems)
        .map(([carrier, states]) => `${carrier}:\n  ${states.sort().join(', ')}`)
        .join('\n\n')
    ),
    'Success'
  );
}

main().catch((error) => {
  p.outro(chalk.red(`Fatal error: ${error}`));
  exit(1);
});

================
File: backend/scripts/manage-turso.ts
================
import * as p from '@clack/prompts';
import { z } from 'zod';
import { exit } from 'process';
import chalk from 'chalk';
import { Database } from '../src/database';
import { TURSO_CONFIG } from '../src/config/turso';
import fetch from 'node-fetch';

interface Organization {
  id: number;
  name: string;
  turso_db_url: string | null;
}

class TursoManager {
  private headers = {
    'Authorization': `Bearer ${TURSO_CONFIG.API_TOKEN}`,
    'Content-Type': 'application/json'
  };

  async listLocations(): Promise<string[]> {
    const response = await fetch(`${TURSO_CONFIG.API_URL}/locations`, {
      headers: this.headers
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch locations: ${await response.text()}`);
    }

    const data = await response.json() as { locations: Array<{ name: string }> };
    return data.locations.map(l => l.name);
  }

  async listDatabases(): Promise<Array<{name: string, hostname: string}>> {
    const response = await fetch(
      `${TURSO_CONFIG.API_URL}/organizations/${TURSO_CONFIG.ORG_SLUG}/databases`,
      { headers: this.headers }
    );

    if (!response.ok) {
      throw new Error(`Failed to fetch databases: ${await response.text()}`);
    }

    const data = await response.json() as { databases: Array<{Name: string, Hostname: string}> };
    return data.databases.map(db => ({
      name: db.Name,
      hostname: db.Hostname
    }));
  }

  async updateGroup(name: string, location: string): Promise<void> {
    const response = await fetch(
      `${TURSO_CONFIG.API_URL}/organizations/${TURSO_CONFIG.ORG_SLUG}/groups/${TURSO_CONFIG.GROUP_NAME}`,
      {
        method: 'PATCH',
        headers: this.headers,
        body: JSON.stringify({ name, location })
      }
    );

    if (!response.ok) {
      throw new Error(`Failed to update group: ${await response.text()}`);
    }
  }

  async deleteDatabase(name: string): Promise<void> {
    const response = await fetch(
      `${TURSO_CONFIG.API_URL}/organizations/${TURSO_CONFIG.ORG_SLUG}/databases/${name}`,
      {
        method: 'DELETE',
        headers: this.headers
      }
    );

    if (!response.ok) {
      throw new Error(`Failed to delete database: ${await response.text()}`);
    }
  }
}

async function main() {
  p.intro(chalk.green('✨ Turso Database Manager ✨'));

  const db = new Database();
  const turso = new TursoManager();

  while (true) {
    const action = await p.select({
      message: 'What would you like to do?',
      options: [
        { value: 'list', label: 'List all databases and organizations' },
        { value: 'update-group', label: 'Update group configuration' },
        { value: 'delete-db', label: 'Delete a customer database' },
        { value: 'exit', label: 'Exit' },
      ],
    });

    if (p.isCancel(action) || action === 'exit') {
      p.outro(chalk.yellow('Goodbye!'));
      exit(0);
    }

    try {
      switch (action) {
        case 'list':
          await listDatabasesAndOrgs(db, turso);
          break;
        case 'update-group':
          await updateGroupConfig(turso);
          break;
        case 'delete-db':
          await deleteCustomerDatabase(db, turso);
          break;
      }
    } catch (error) {
      p.outro(chalk.red(`Error: ${error}`));
      exit(1);
    }
  }
}

async function listDatabasesAndOrgs(db: Database, turso: TursoManager) {
  const databases = await turso.listDatabases();
  const result = await db.execute(
    'SELECT id, name, turso_db_url FROM organizations WHERE turso_db_url IS NOT NULL'
  );
  const orgs = result.rows || [];

  const mappedDatabases = databases.map(database => {
    const org = orgs.find((o: any) => o[2] && o[2].toString().includes(database.hostname));
    return {
      name: database.name,
      hostname: database.hostname,
      organization: org ? org[1] : 'Not associated with any organization'
    };
  });

  if (mappedDatabases.length === 0) {
    p.note('No databases found', 'Empty');
    return;
  }

  p.note(
    mappedDatabases
      .map(db => `${db.name}:\n  URL: ${db.hostname}\n  Organization: ${db.organization}`)
      .join('\n\n'),
    'Current Databases'
  );
}

async function updateGroupConfig(turso: TursoManager) {
  // Get available locations
  const locations = await turso.listLocations();

  p.note(
    `Current Configuration:\n` +
    `  Group Name: ${TURSO_CONFIG.GROUP_NAME}\n` +
    `  Location: ${TURSO_CONFIG.LOCATION}`,
    'Current Settings'
  );

  const newGroupName = await p.text({
    message: 'Enter new group name (or press enter to keep current):',
    initial: TURSO_CONFIG.GROUP_NAME,
  });

  if (p.isCancel(newGroupName)) {
    p.note(chalk.yellow('Operation cancelled'));
    return;
  }

  const newLocation = await p.select({
    message: 'Select new location:',
    options: locations.map(loc => ({
      value: loc,
      label: loc,
    })),
    initialValue: TURSO_CONFIG.LOCATION,
  });

  if (p.isCancel(newLocation)) {
    p.note(chalk.yellow('Operation cancelled'));
    return;
  }

  const confirm = await p.confirm({
    message: `Update group "${TURSO_CONFIG.GROUP_NAME}" to:\n` +
             `  Name: ${newGroupName}\n` +
             `  Location: ${newLocation}\n` +
             `Are you sure?`,
  });

  if (p.isCancel(confirm) || !confirm) {
    p.note(chalk.yellow('Operation cancelled'));
    return;
  }

  await turso.updateGroup(newGroupName, newLocation as string);
  
  p.note(
    chalk.green(
      `Successfully updated group configuration.\n` +
      `Remember to update TURSO_CONFIG in your code!`
    ),
    'Success'
  );
}

async function deleteCustomerDatabase(db: Database, turso: TursoManager) {
  const databases = await turso.listDatabases();
  const result = await db.execute(
    'SELECT id, name, turso_db_url FROM organizations WHERE turso_db_url IS NOT NULL'
  );
  const orgs = result.rows || [];

  if (databases.length === 0) {
    p.note('No databases found to delete', 'Empty');
    return;
  }

  const options = databases.map(database => {
    const org = orgs.find((o: any) => o[2] && o[2].toString().includes(database.hostname));
    return {
      value: database.name,
      label: `${database.name} (${org ? org[1] : 'Unassociated'})`,
    };
  });

  const selections = await p.multiselect({
    message: 'Select databases to delete (space to select, enter to confirm):',
    options,
    required: true
  });

  if (p.isCancel(selections)) {
    p.note(chalk.yellow('Operation cancelled'));
    return;
  }

  const selectedDbs = selections as string[];
  if (selectedDbs.length === 0) {
    p.note(chalk.yellow('No databases selected'));
    return;
  }

  const confirm = await p.confirm({
    message: chalk.red(
      `Are you sure you want to delete the following databases?\n` +
      selectedDbs.map(db => `  - ${db}`).join('\n') +
      `\nThis action cannot be undone!`
    ),
  });

  if (p.isCancel(confirm) || !confirm) {
    p.note(chalk.yellow('Operation cancelled'));
    return;
  }

  for (const dbName of selectedDbs) {
    try {
      await turso.deleteDatabase(dbName);

      // Update organization record
      const org = orgs.find((o: any) => 
        o[2] && 
        o[2].toString().includes(
          databases.find(d => d.name === dbName)?.hostname || ''
        )
      );

      if (org) {
        await db.execute(
          'UPDATE organizations SET turso_db_url = NULL, turso_auth_token = NULL WHERE id = ?',
          [org[0]]
        );
      }

      p.note(
        chalk.green(`Successfully deleted database "${dbName}"`),
        'Success'
      );
    } catch (error) {
      p.note(
        chalk.red(`Failed to delete database "${dbName}": ${error}`),
        'Error'
      );
    }
  }
}

main().catch((error) => {
  p.outro(chalk.red(`Fatal error: ${error}`));
  exit(1);
});

================
File: backend/scripts/test-bulk-import.ts
================
import { Database } from '../src/database';
import { ContactCreate } from '../src/types';
import { logger } from '../src/logger';
import fs from 'fs/promises';
import { parse } from 'csv-parse/sync';

/**
 * Test utility for the bulk contact import feature
 * 
 * Usage:
 *   bun run scripts/test-bulk-import.ts <org_id> <csv_file> [--overwrite]
 * 
 * Where:
 *   <org_id> is the organization ID to import contacts for
 *   <csv_file> is the path to a CSV file containing contacts
 *   --overwrite is an optional flag to overwrite existing contacts
 * 
 * The CSV file should have headers that match the ContactCreate interface properties
 * Columns can be in either camelCase (firstName) or snake_case (first_name) format
 */

async function main() {
  try {
    // Parse command line arguments
    const args = process.argv.slice(2);
    
    if (args.length < 2) {
      console.error('Usage: bun run scripts/test-bulk-import.ts <org_id> <csv_file> [--overwrite]');
      process.exit(1);
    }
    
    const orgId = args[0];
    const csvPath = args[1];
    const overwriteExisting = args.includes('--overwrite');
    
    // Read and parse the CSV file
    logger.info(`Reading contacts from ${csvPath}`);
    const csvContent = await fs.readFile(csvPath, 'utf-8');
    
    // Parse CSV with header row
    const records = parse(csvContent, {
      columns: true,
      skip_empty_lines: true,
      trim: true
    });
    
    logger.info(`Parsed ${records.length} records from CSV`);
    
    // Convert records to ContactCreate objects
    const contacts: ContactCreate[] = records.map((record: any) => {
      return {
        first_name: record.first_name || record.firstName || '',
        last_name: record.last_name || record.lastName || '',
        email: record.email || '',
        current_carrier: record.current_carrier || record.currentCarrier || '',
        plan_type: record.plan_type || record.planType || '',
        effective_date: record.effective_date || record.effectiveDate || '',
        birth_date: record.birth_date || record.birthDate || '',
        tobacco_user: record.tobacco_user === '1' || record.tobacco_user === 'true' || record.tobaccoUser === true || record.tobaccoUser === '1' || record.tobaccoUser === 'true',
        gender: record.gender || '',
        state: record.state || '',
        zip_code: record.zip_code || record.zipCode || '',
        phone_number: record.phone_number || record.phoneNumber || '',
        agent_id: record.agent_id || record.agentId || null
      };
    });
    
    // Log a sample contact
    logger.info(`Sample contact: ${JSON.stringify(contacts[0])}`);
    
    // Validate contacts
    const validContacts = contacts.filter(contact => {
      return contact.first_name && contact.last_name && contact.email;
    });
    
    logger.info(`Found ${validContacts.length} valid contacts out of ${contacts.length}`);
    
    // Confirm with user
    console.log(`Ready to import ${validContacts.length} contacts for organization ${orgId}.`);
    console.log(`Overwrite existing: ${overwriteExisting}`);
    
    // Add a delay to allow cancellation
    console.log('Starting import in 5 seconds... Press Ctrl+C to cancel');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // Execute bulk import
    const startTime = Date.now();
    logger.info('Starting bulk import...');
    
    await Database.bulkImportContacts(orgId, validContacts, overwriteExisting);
    
    const totalTime = (Date.now() - startTime) / 1000;
    logger.info(`Bulk import completed in ${totalTime.toFixed(2)} seconds`);
    
  } catch (error) {
    logger.error(`Error in test-bulk-import: ${error}`);
    process.exit(1);
  }
}

main();

================
File: backend/src/config/index.ts
================
interface Config {
  TURSO_DATABASE_URL?: string;
  TURSO_AUTH_TOKEN?: string;
  TURSO_DATABASE_PATH?: string;
  TURSO_API_TOKEN?: string;
  TURSO_ORG_GROUP: string;
  TURSO_ORG_SLUG: string;
  STRIPE_SECRET_KEY?: string;
  STRIPE_WEBHOOK_SECRET?: string;
  SENDGRID_API_KEY?: string;
  SENDGRID_FROM_EMAIL?: string;
  SENDGRID_TEMPLATES: Record<string, string>;
  USE_LOCAL_SQLITE: boolean;
  LOCAL_DB_PATH: string;
  clientUrl: string;
}

export const config: Config = {
  TURSO_DATABASE_URL: process.env.TURSO_DATABASE_URL,
  TURSO_AUTH_TOKEN: process.env.TURSO_AUTH_TOKEN,
  TURSO_DATABASE_PATH: process.env.TURSO_DATABASE_PATH,
  TURSO_API_TOKEN: process.env.TURSO_API_TOKEN,
  TURSO_ORG_GROUP: process.env.TURSO_ORG_GROUP || 'default',
  TURSO_ORG_SLUG: process.env.TURSO_ORG_SLUG || 'default',
  STRIPE_SECRET_KEY: process.env.STRIPE_SECRET_KEY,
  STRIPE_WEBHOOK_SECRET: process.env.STRIPE_WEBHOOK_SECRET,
  SENDGRID_API_KEY: process.env.SENDGRID_API_KEY,
  SENDGRID_FROM_EMAIL: process.env.SENDGRID_FROM_EMAIL,
  SENDGRID_TEMPLATES: {
    QUOTE_EMAIL: 'd-f43dasd8f9a8sd7f98asd7f',
    WELCOME_EMAIL: 'd-a9s8d7f98as7df89as7df9'
  },
  USE_LOCAL_SQLITE: process.env.USE_LOCAL_SQLITE !== 'false',
  LOCAL_DB_PATH: process.env.LOCAL_DB_PATH || 'data/organizations',
  clientUrl: process.env.NODE_ENV === 'production' 
    ? 'https://app.example.com'
    : 'http://localhost:5173'
}

================
File: backend/src/config/turso.ts
================
export const TURSO_CONFIG = {
  API_URL: 'https://api.turso.tech/v1',
  API_TOKEN: process.env.TURSO_API_TOKEN, // Add this to your .env
  ORG_SLUG: 'pyrex41',
  GROUP_NAME: 'medicare-portal',
  LOCATION: 'aws-us-east-1' // We can update this to your preferred location
}

================
File: backend/src/middleware/account-status.ts
================
import { Elysia } from 'elysia';
import { getUserFromSession } from '../services/auth';
import { logger } from '../logger';
import { Database } from '../database';

/**
 * Middleware to check if an organization's account is in good standing
 * This can be used on routes that should be blocked if the account has issues
 */
export const accountStatusMiddleware = new Elysia()
  .derive(async ({ request, set }) => {
    try {
      // Get current user from session
      const currentUser = await getUserFromSession(request);
      if (!currentUser) {
        // If no user, let the auth middleware handle it
        return { accountStatus: null };
      }
      
      const db = new Database();
      
      // Query organization status from the view
      const statusResult = await db.query<{
        account_status: string;
        subscription_status: string;
      }>('SELECT account_status, subscription_status FROM organization_status WHERE id = ?', 
         [currentUser.organization_id]);
      
      if (!statusResult || statusResult.length === 0) {
        logger.error(`Could not find organization status for org ID: ${currentUser.organization_id}`);
        return { accountStatus: null };
      }
      
      const status = statusResult[0];
      
      // If account is not in good standing, block access to certain operations
      if (status.account_status !== 'good_standing') {
        logger.warn(`Blocked access due to account status: ${status.account_status} for org ${currentUser.organization_id}`);
        return { accountStatus: status.account_status, subscription_status: status.subscription_status };
      }
      
      // Account is in good standing
      return { accountStatus: 'good_standing' };
      
    } catch (error) {
      logger.error(`Error in account status middleware:`, error);
      return { accountStatus: null };
    }
  });

================
File: backend/src/middleware/auth.copy.ts
================
import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { Database } from '../database';

interface AuthenticatedRequest extends Request {
  user?: {
    id: number;
    email: string;
    organization_id: number;
    role: string;
    turso_db_url?: string;
    turso_auth_token?: string;
  };
}

export async function authMiddleware(
  req: AuthenticatedRequest, 
  res: Response, 
  next: NextFunction
) {
  try {
    // Verify JWT token
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
      res.status(401).json({ error: 'No token provided' });
      return;
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as {
      userId: number;
    };

    const db = new Database();

    // Get user with organization info from central DB
    const user = await db.execute(
      `SELECT u.*, o.turso_db_url, o.turso_auth_token
       FROM users u
       JOIN organizations o ON u.organization_id = o.id
       WHERE u.id = ?`,
      [decoded.userId]
    );

    if (!user) {
      res.status(401).json({ error: 'User not found' });
      return;
    }

    req.user = user;
    next();
  } catch (error) {
    res.status(401).json({ error: 'Unauthorized' });
  }
}

================
File: backend/src/middleware/auth.ts
================
import { Elysia } from 'elysia'
import { logger } from '../logger'
import { getUserFromSession } from '../services/auth'

// Auth middleware for protected routes
export const requireAuth = new Elysia()
  .derive(async ({ request, set }) => {
    try {
      // Check for auth bypass header - bypass if present
      const bypassAuth = request.headers.get('X-Bypass-Auth')
      if (bypassAuth) {
        logger.info(`Auth middleware: bypassing auth due to X-Bypass-Auth header`)
        return
      }

      // Check if this is a public endpoint that should bypass auth
      const url = new URL(request.url)
      const pathname = url.pathname
      
      // Bypass auth for SPA routes - belt and suspenders approach
      if ((!pathname.startsWith('/api/') && !pathname.includes('.')) || 
          pathname.startsWith('/compare/') ||
          pathname.startsWith('/quote/') ||
          pathname.startsWith('/eligibility') ||
          pathname.startsWith('/schedule')) {
        logger.info(`Auth middleware: bypassing auth for SPA route: ${pathname}`)
        return
      }
      
      // Get user from session
      const user = await getUserFromSession(request)
      logger.info(`Auth middleware: user: ${JSON.stringify(user)}`)
      
      // If no user or skip_auth not set, return 401
      if (!user ) {
        logger.warn(`not user: ${JSON.stringify(!user)}`)
        logger.warn(`Auth middleware: unauthorized access to ${pathname}`)
        set.status = 401
        return { success: false, error: 'Authentication required' }
      }
      
      // Return user object for routes to use
      return { user }
    } catch (error) {
      logger.error(`Auth middleware error: ${error}`)
      set.status = 500
      return { success: false, error: 'Internal server error' }
    }
  })

// Admin middleware - requires auth first
export const requireAdmin = new Elysia()
  .derive(async ({ request, set }) => {
    try {
      // Check for auth bypass header - bypass if present
      const bypassAuth = request.headers.get('X-Bypass-Auth')
      if (bypassAuth) {
        logger.info(`Admin middleware: bypassing auth due to X-Bypass-Auth header`)
        return
      }
      
      // Get user from session
      const user = await getUserFromSession(request)
      
      // If no user or not admin, return 403
      if (!user || !user.is_admin) {
        logger.warn(`Admin middleware: forbidden access to ${new URL(request.url).pathname}`)
        set.status = 403
        return { success: false, error: 'Admin access required' }
      }
      
      // Return user object for routes to use
      return { user }
    } catch (error) {
      logger.error(`Admin middleware error: ${error}`)
      set.status = 500
      return { success: false, error: 'Internal server error' }
    }
  })

================
File: backend/src/middleware/error.ts
================
import { Elysia } from 'elysia'
import { logger } from '../logger'

export const errorHandler = new Elysia()
  .onError(({ code, error, set }) => {
    logger.error(`❌ Error: ${code} - ${error.message}`);
    
    switch (code) {
      case 'NOT_FOUND':
        set.status = 404;
        return {
          success: false,
          message: 'Resource not found'
        };
      
      case 'VALIDATION':
        set.status = 400;
        return {
          success: false,
          message: error.message
        };
      
      default:
        set.status = 500;
        return {
          success: false,
          message: 'Internal server error'
        };
    }
  });

================
File: backend/src/routes/admin-portal.ts
================
import { Elysia } from 'elysia'
import { spawn } from 'child_process'
import path from 'path'
import { logger } from '../logger'
import { requireAuth, requireAdmin } from '../middleware/auth'

// Create admin portal routes
export const createAdminPortalRoutes = () => {
  const adminPortal = new Elysia({ prefix: '/api/admin' })
    .use(requireAuth)
    .use(requireAdmin)

    // Get available admin scripts
    .get('/scripts', () => {
      const availableScripts = [
        {
          id: 'add-agent',
          name: 'Add Agent',
          description: 'Interactive tool to add new agents',
          script: 'add-agent.ts'
        },
        {
          id: 'manage-recommendations',
          name: 'Manage GI Recommendations', 
          description: 'Manage guaranteed issue recommendations',
          script: 'manage-recommendations.ts'
        }
      ]
      
      return { scripts: availableScripts }
    })

    // Execute script endpoint
    .post('/execute/:scriptId', ({ params, set, server }) => {
      const { scriptId } = params
      const scriptPath = path.join(__dirname, '../../scripts', `${scriptId}.ts`)

      logger.info(`Executing admin script: ${scriptId}`)

      // Spawn script process
      const process = spawn('bun', ['run', scriptPath], {
        stdio: ['pipe', 'pipe', 'pipe']
      })

      // Get WebSocket server instance
      const wss = server.webSocket

      // Handle new WebSocket connections
      wss.on('connection', (ws) => {
        logger.info('Admin terminal WebSocket connected')

        // Handle input from client
        ws.on('message', (data: string) => {
          const parsed = JSON.parse(data)
          if (parsed.type === 'input') {
            process.stdin.write(parsed.data)
          }
        })

        // Send output to client
        process.stdout.on('data', (data) => {
          ws.send(JSON.stringify({ 
            type: 'output', 
            data: data.toString() 
          }))
        })

        process.stderr.on('data', (data) => {
          ws.send(JSON.stringify({ 
            type: 'error', 
            data: data.toString() 
          }))
        })

        // Handle process exit
        process.on('exit', (code) => {
          ws.send(JSON.stringify({ type: 'exit', code }))
          logger.info(`Admin script ${scriptId} exited with code ${code}`)
        })

        // Handle WebSocket close
        ws.on('close', () => {
          logger.info('Admin terminal WebSocket disconnected')
          process.kill()
        })
      })

      set.status = 200
      return { 
        success: true, 
        message: 'Script execution started' 
      }
    })

  return adminPortal
}

================
File: backend/src/routes/admin.ts
================
import { Elysia } from 'elysia'
import { staticPlugin } from '@elysiajs/static'
import { spawn } from 'child_process'
import path from 'path'
import { TursoService } from '../services/turso'

const tursoService = new TursoService()

export const adminRoutes = new Elysia()
  // Protect admin routes
  .guard({
    beforeHandle: ({ request, set }) => {
      // Add your admin authentication logic here
      const isAdmin = true // Replace with actual admin check
      if (!isAdmin) {
        set.status = 401
        return 'Unauthorized'
      }
    }
  })
  // Serve admin portal static files
  .use(staticPlugin({
    assets: '../admin-portal/dist',
    prefix: '/admin'
  }))
  // Terminal WebSocket endpoint
  .ws('/admin/terminal', {
    open(ws) {
      ws.send('Connected to admin terminal')
    },
    message(ws, message) {
      const { command, args } = JSON.parse(message as string)
      
      const scripts = {
        'add-agent': '../scripts/add-agent.ts',
        'manage-recommendations': '../scripts/manage-recommendations.ts'
      }

      if (!scripts[command]) {
        ws.send(JSON.stringify({ error: 'Invalid command' }))
        return
      }

      const script = spawn('bun', [path.resolve(__dirname, scripts[command]), ...args], {
        stdio: ['pipe', 'pipe', 'pipe']
      })

      script.stdout.on('data', (data) => {
        ws.send(JSON.stringify({ type: 'output', data: data.toString() }))
      })

      script.stderr.on('data', (data) => {
        ws.send(JSON.stringify({ type: 'error', data: data.toString() }))
      })

      script.on('close', (code) => {
        ws.send(JSON.stringify({ type: 'exit', code }))
      })
    }
  })

// In your create organization endpoint:
app.post('/api/organizations', async (req, res) => {
  const { name, /* other org fields */ } = req.body
  
  try {
    // Create org in central DB
    const org = await db.one(`
      INSERT INTO organizations (name) 
      VALUES ($1) 
      RETURNING id`, 
      [name]
    )

    // Create Turso DB for org
    const { url, token } = await tursoService.createOrganizationDatabase(org.id)

    // Update org with Turso credentials
    await db.none(`
      UPDATE organizations 
      SET turso_db_url = $1, turso_auth_token = $2
      WHERE id = $3`,
      [url, token, org.id]
    )

    res.json({ success: true, organization: org })
  } catch (err) {
    res.status(500).json({ success: false, error: err.message })
  }
})

================
File: backend/src/routes/auth.ts
================
import { Elysia } from 'elysia';
import { cookie } from '@elysiajs/cookie';
import { AuthService } from '../services/auth';
import { EmailService } from '../services/email';
import { logger } from '../logger';
import { randomBytes } from 'crypto';
import { config } from '../config';
import crypto from 'crypto';
import { db } from '../database';
import { Database } from '../database';
import { getUserFromSession } from '../services/auth';
import type { User } from '../types';

const dbInstance = new Database();

export function createAuthRoutes() {
  const auth = new AuthService();
  const emailService = new EmailService();

  return new Elysia()
    .use(cookie())
    .post('/api/auth/set-session', async ({ body, set, setCookie }) => {
      const { email } = body as { email: string };
        logger.info(`Login request for email: ${email}`);

        // Check if user exists
        const client = dbInstance.getClient();
        const userResult = await client.execute({
          sql: 'SELECT id, email FROM users WHERE email = ? AND is_active = 1',
          args: [email]
        });

        if (userResult.rows.length === 0) {
          // Don't reveal if user exists or not
          logger.info(`No active user found for email: ${email}`);
          set.status = 404;
          return { success: false, error: 'User not found' };
        }
      const sessionId = crypto.randomBytes(32).toString('hex');
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + 7); // 7 days from now

      await db.execute(
        'INSERT INTO sessions (id, user_id, expires_at) VALUES (?, ?, ?)',
        [sessionId, userResult.rows[0].id, expiresAt.toISOString()]
      );

      setCookie('session', sessionId, {
        path: '/',
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        maxAge: 60 * 60 * 24 * 1 // 1 day -- shorter to force them to login again soon after onboarding
      });

      set.status = 200;

      set.status = 200;
      return { success: true };
    })
    .post('/api/auth/login', async ({ body, set }) => {
      try {
        const { email } = body as { email: string };
        logger.info(`Login request for email: ${email}`);

        // Check if user exists
        const client = dbInstance.getClient();
        const userResult = await client.execute({
          sql: 'SELECT id, email FROM users WHERE email = ? AND is_active = 1',
          args: [email]
        });

        if (userResult.rows.length === 0) {
          // Don't reveal if user exists or not
          logger.info(`No active user found for email: ${email}`);
          return { success: true };
        }

        // Generate and send magic link
        const magicLink = await auth.createMagicLink(
          email,
          'default', // Default organization for now
          { redirectUrl: '/dashboard' }
        );

        // Always send the email, but also log in development
        if (process.env.NODE_ENV === 'development') {
          logger.info(`Development mode - Magic link: ${magicLink}`);
        }
        
        // Send the email
        await emailService.sendMagicLink(email, magicLink, 'default');

        set.status = 200;
        return { success: true };

      } catch (e) {
        logger.error(`Login error: ${e}`);
        set.status = 500;
        return { 
          success: false,
          error: 'Internal server error'
        };
      }
    })

    .get('/api/signup/verify/:token', async ({ params, cookie, setCookie }) => {
      const { token } = params;
      logger.info(`Starting verification for token: ${token}`);

      try {
        const result = await auth.verifySignupLink(token);
        logger.info(`Signup verification result: ${JSON.stringify(result)}`);

        if (!result.valid) {
          logger.error('Signup verification failed');
          return {
            success: false, 
            redirectUrl: "/signup",
            session: "",
            email: ""
          };
        }

        logger.info(`Signup verification successful`);

        return {
          success: true,
          redirectUrl: result.redirectUrl || '/onboarding',
          session: "",
          email: result.email
        };
      } catch (error) {
        logger.error(`Signup verification error: ${error}`);
        return {
          success: false,
          redirectUrl: "/signup",
          session: "",  
          email: ""
        };
      }
    })

    .post('/api/auth/onboarding-login', async ({ body, set, setCookie }) => {
      const { emailRaw } = body as { emailRaw: string };
      logger.info(`Onboarding login request for email: ${emailRaw}`);

      // Decode the email if it's URL encoded and trim whitespace
      const email = decodeURIComponent(emailRaw).trim();
      
      const user = await db.fetchOne<User>(
        `SELECT u.*, o.slug as organization_slug 
        FROM users u 
        JOIN organizations o ON u.organization_id = o.id 
        WHERE LOWER(u.email) = LOWER(?) AND u.is_active = 1`,
        [email]
      );
      
      if (!user) {
        logger.error(`No active user found for email: ${email}`);
        return {
          success: false,
          redirectUrl: "/signup",
          email: ""
        };
      }
      
      logger.info(`Found user: ${JSON.stringify(user)}`);
      
      const sessionId = crypto.randomBytes(32).toString('hex');
      logger.info(`Created session ID: ${sessionId}`);
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + 1); // 1 day from now

      await db.execute(
        'INSERT INTO sessions (id, user_id, expires_at) VALUES (?, ?, ?)',
        [sessionId, user.id, expiresAt.toISOString()]
      );

      logger.info(`Created session in database for user ${user.id}`);

      setCookie('session', sessionId, {
        path: '/',
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        maxAge: 60 * 60 * 24 * 1 // 1 day -- shorter to force them to login again soon after onboarding
      });

      set.status = 200;
      return {
        success: true,  
        redirectUrl: "/contacts",
        email: user.email
      };
    })

    .get('/api/auth/verify/:organizationSlug/:token', async ({ params, cookie, setCookie }) => {
      const { token, organizationSlug } = params;
      
      logger.info(`Starting verification for org ${organizationSlug}`);

      try {
        logger.info('Verifying magic link');
        const result = await auth.verifyMagicLink(token, organizationSlug);
        logger.info(`Magic link verification result: ${JSON.stringify(result)}`);
        
        if (!result.valid) {
          logger.error('Magic link validation failed');
          return {
            success: false,
            redirectUrl: "/login",
            session: "",
            email: ""
          };
        }

        // Create session ID
        const sessionId = crypto.randomBytes(32).toString('hex');
        logger.info(`Created session ID: ${sessionId}`);

        // First find user by email
        const user = await db.fetchOne<User>(
          `SELECT u.*, o.slug as organization_slug 
           FROM users u 
           JOIN organizations o ON u.organization_id = o.id 
           WHERE LOWER(u.email) = LOWER(?) AND u.is_active = 1`,
          [result.email]
        );

        if (!user) {
          logger.error(`No active user found for email: ${result.email}`);
          return {
            success: false,
            redirectUrl: "/login",
            session: "",
            email: ""
          };
        }

        logger.info(`Found user: ${JSON.stringify(user)}`);

        // Create session in database
        const expiresAt = new Date();
        expiresAt.setDate(expiresAt.getDate() + 7); // 7 days from now

        await db.execute(
          'INSERT INTO sessions (id, user_id, expires_at) VALUES (?, ?, ?)',
          [sessionId, user.id, expiresAt.toISOString()]
        );

        logger.info(`Created session in database for user ${user.id}`);

        // Set session cookie
        setCookie('session', sessionId, {
          path: '/',
          httpOnly: true,
          secure: process.env.NODE_ENV === 'production',
          sameSite: 'lax',
          maxAge: 60 * 60 * 24 * 7 // 7 days
        });

        const verificationResult = {
          success: true,
          redirectUrl: result.redirectUrl || '/walkthrough',  // Use the redirectUrl from magic link payload
          session: sessionId,
          email: result.email,
          orgSlug: user.organization_id.toString()  // Use organization_id since organization_slug may not exist
        };
        logger.info(`Sending verification response: ${JSON.stringify(verificationResult)}`);
        return verificationResult;

      } catch (error) {
        logger.error(`Verification error: ${error}`);
        if (error instanceof Error) {
          logger.error(`Error details: ${error.message}`);
          logger.error(`Stack trace: ${error.stack}`);
        }
        return {
          success: false,
          redirectUrl: "/login",
          session: "",
          email: ""
        };
      }
    })

    .get('/api/auth/session', async ({ cookie, set }) => {
      const sessionId = cookie.session;
      logger.info(`Session check - Cookie session ID: ${sessionId}`);
      
      if (!sessionId) {
        logger.info('No session cookie found');
        return { 
          valid: false,
          session: "",
          email: "",
          organizationSlug: "",
          first_name: "",
          last_name: "",
          id: ""
        };
      }

      try {
        // Get user and organization info from session
        logger.info(`Looking up session in database: ${sessionId}`);
        const sessionUser = await db.fetchOne<{
          id: number;
          email: string;
          first_name: string;
          last_name: string;
          is_admin: boolean;
          organization_slug: string;
        }>(
          `SELECT u.id, u.email, u.first_name, u.last_name, u.is_admin, o.slug as organization_slug
           FROM sessions s
           JOIN users u ON s.user_id = u.id
           JOIN organizations o ON u.organization_id = o.id
           WHERE s.id = ?`,
          [sessionId]
        );

        if (!sessionUser) {
          logger.info(`No session found in database for ID: ${sessionId}`);
          return { 
            valid: false,
            session: "",
            email: "",
            organizationSlug: "",
            first_name: "",
            last_name: "",
            is_admin: false,
            id: ""
          };
        }

        logger.info(`Found valid session for user: ${sessionUser.email}`);
        logger.info(`Session details: ${JSON.stringify(sessionUser, null, 2)}`);

        set.status = 200;
        return { 
          valid: true,
          session: sessionId,
          email: sessionUser.email,
          organizationSlug: sessionUser.organization_slug,
          first_name: sessionUser.first_name,
          last_name: sessionUser.last_name,
          is_admin: sessionUser.is_admin,
          id: sessionUser.id
        };
      } catch (error) {
        logger.error(`Error getting session info: ${error}`);
        if (error instanceof Error) {
          logger.error(`Error details: ${error.message}`);
          logger.error(`Stack trace: ${error.stack}`);
        }
        return { 
          valid: false,
          session: "",
          email: "",
          organizationSlug: "",
          first_name: "",
          last_name: "",
          is_admin: false,
          id: ""
        };
      }
    })

    .post('/api/auth/logout', async ({ set }) => {
      set.headers['Set-Cookie'] = 'session=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT';
      return { success: true };
    });
}

================
File: backend/src/routes/brand.ts
================
import { Elysia } from 'elysia';
import { Database } from '../database';
import { logger } from '../logger';

const db = new Database();

interface Organization {
  id: number;
}

interface BrandSettings {
  brand_name: string;
  primary_color: string;
  secondary_color: string;
  logo_data: string | null;
}

export function createBrandRoutes() {
  return new Elysia()
    .get('/api/organizations/:orgSlug/brand', async ({ params }) => {
      try {
        const { orgSlug } = params;

        // Get organization ID
        const org = await db.fetchOne<Organization>(
          'SELECT id FROM organizations WHERE slug = ?',
          [orgSlug]
        );

        if (!org) {
          return {
            success: false,
            error: 'Organization not found'
          };
        }

        // Get brand settings
        const settings = await db.fetchOne<BrandSettings>(
          'SELECT brand_name, primary_color, secondary_color, logo_data FROM brand_settings WHERE organization_id = ?',
          [org.id]
        );

        if (!settings) {
          // Return defaults if no settings exist
          return {
            brand_name: '',
            primary_color: '#6B46C1',
            secondary_color: '#9F7AEA',
            logo: null
          };
        }

        return {
          brand_name: settings.brand_name,
          primary_color: settings.primary_color,
          secondary_color: settings.secondary_color,
          logo: settings.logo_data
        };
      } catch (error) {
        logger.error('Error fetching brand settings', error);
        return {
          success: false,
          error: 'Failed to fetch brand settings'
        };
      }
    })
    .put('/api/organizations/:orgSlug/brand', async ({ params, body }) => {
      try {
        const { orgSlug } = params;
        const { brand_name, primary_color, secondary_color, logo } = body as any;

        // Get organization ID
        const org = await db.fetchOne<Organization>(
          'SELECT id FROM organizations WHERE slug = ?',
          [orgSlug]
        );

        if (!org) {
          return {
            success: false,
            error: 'Organization not found'
          };
        }

        // Upsert brand settings
        await db.execute(`
          INSERT INTO brand_settings 
            (organization_id, brand_name, primary_color, secondary_color, logo_data)
          VALUES (?, ?, ?, ?, ?)
          ON CONFLICT(organization_id) DO UPDATE SET
            brand_name = excluded.brand_name,
            primary_color = excluded.primary_color,
            secondary_color = excluded.secondary_color,
            logo_data = excluded.logo_data
        `, [org.id, brand_name, primary_color, secondary_color, logo]);

        return {
          success: true
        };
      } catch (error) {
        logger.error('Error saving brand settings', error);
        return {
          success: false,
          error: 'Failed to save brand settings'
        };
      }
    });
}

================
File: backend/src/routes/contacts.ts
================
import { Elysia, t } from 'elysia';
import { Database } from '../database';
import { logger } from '../logger';
import { validateSession, getUserFromSession } from '../services/auth';
import fs from 'fs';
import path from 'path';
import { stringify } from 'csv-stringify/sync';
import { nanoid } from 'nanoid';
import { ZIP_DATA } from '../index';
import { TursoService } from '../services/turso';
import { TURSO_CONFIG } from '../config/turso';
import fetch from 'node-fetch';
import { 
  trackContact, 
  trackContactBatch, 
  getContactUsageStats, 
  getUniqueContactCount,
  resetContactCount
} from '../services/contactTracking';

type User = {
  id: number;
  organization_id: number;
  is_admin: boolean;
};

interface ContactImport {
  first_name: string;
  last_name: string;
  email: string;
  phone_number: string;
  state?: string;
  current_carrier: string;
  effective_date: string;
  birth_date: string;
  tobacco_user: boolean;
  gender: string;
  zip_code: string;
  plan_type: string;
}

type BulkImportRequest = {
  contacts: ContactImport[];
  overwriteExisting: boolean;
  agentId?: number | null;
};

interface Contact {
  id: number;
  first_name: string;
  last_name: string;
  email: string;
  phone_number?: string;
  state: string;
  current_carrier?: string;
  effective_date: string;
  birth_date: string;
  tobacco_user: number;
  gender: string;
  zip_code: string;
  plan_type?: string;
  agent_id?: number;
  last_emailed?: string;
  created_at: string;
  updated_at: string;
  status?: string;
}

type Context = {
  request: Request;
  user: User;
  set: { status: number };
};

/**
 * Contacts API endpoints
 */
export const contactsRoutes = new Elysia({ prefix: '/api/contacts' })
  .use(app => app
    .derive(async ({ request, set }) => {
      const sessionCookie = request.headers.get('cookie')?.split(';')
        .find(c => c.trim().startsWith('session='))
        ?.split('=')[1];

      if (!sessionCookie) {
        set.status = 401;
        return { error: 'Not authorized' };
      }

      const user = await validateSession(sessionCookie);
      if (!user) {
        set.status = 401;
        return { error: 'Not authorized' };
      }

      return { user };
    })
  )
  .get('/', async ({ request, user, set }: Context) => {
    if (!user || !user.organization_id) {
      set.status = 401;
      return { error: 'Not authorized' };
    }

    try {
      // Parse query parameters
      const url = new URL(request.url);
      const page = parseInt(url.searchParams.get('page') || '1');
      const limit = parseInt(url.searchParams.get('limit') || '100');
      const search = url.searchParams.get('search') || '';
      const states = url.searchParams.get('states')?.split(',').filter(Boolean) || [];
      const carriers = url.searchParams.get('carriers')?.split(',').filter(Boolean) || [];
      const agents = url.searchParams.get('agents')?.split(',').map(Number).filter(Boolean) || [];

      logger.info(`Fetching contacts for org ${user.organization_id} - page: ${page}, limit: ${limit}, search: ${search || 'none'}, states: ${states.length ? states.join(',') : 'none'}, carriers: ${carriers.length ? carriers.join(',') : 'none'}, agents: ${agents.length ? agents.join(',') : 'none'}`);

      // Build base query parts
      let whereConditions = ['1=1'];
      let params: any[] = [];

      // Add search condition if present
      if (search) {
        const searchTerms = search.trim().split(/\s+/);
        
        if (searchTerms.length === 1) {
          // Single word search - check each column individually
          whereConditions.push('(first_name LIKE ? OR last_name LIKE ? OR email LIKE ? OR phone_number LIKE ?)');
          params.push(`%${search}%`, `%${search}%`, `%${search}%`, `%${search}%`);
        } else {
          // Multi-word search - treat first word as first name and remaining words as last name
          const firstName = searchTerms[0];
          const lastName = searchTerms.slice(1).join(' ');
          
          whereConditions.push('((first_name LIKE ? AND last_name LIKE ?) OR first_name LIKE ? OR last_name LIKE ? OR email LIKE ? OR phone_number LIKE ?)');
          params.push(
            `%${firstName}%`, `%${lastName}%`, // Combined name search
            `%${search}%`, `%${search}%`, // Full search term in either name field
            `%${search}%`, `%${search}%` // Email and phone
          );
        }
      }

      // Add state filter
      if (states.length > 0) {
        const zipCodesForStates = Object.entries(ZIP_DATA)
          .filter(([_, info]) => states.includes(info.state))
          .map(([zipCode]) => zipCode);
        whereConditions.push(`zip_code IN (${zipCodesForStates.map(() => '?').join(',')})`);
        params.push(...zipCodesForStates);
      }

      // Add carrier filter
      if (carriers.length > 0) {
        whereConditions.push(`(${carriers.map(() => 'current_carrier LIKE ?').join(' OR ')})`);
        params.push(...carriers.map(c => `%${c}%`));
      }

      // Add agent filter
      if (agents.length > 0) {
        whereConditions.push(`agent_id IN (${agents.map(() => '?').join(',')})`);
        params.push(...agents);
      }

      // Combine conditions
      const whereClause = whereConditions.join(' AND ');

      // Get organization database with retry logic
      let orgDb;
      try {
        orgDb = await Database.getOrInitOrgDb(user.organization_id.toString());
      } catch (error) {
        // If database not found, check if it exists in the list
        if (error instanceof Error && error.message.includes('database not configured')) {
          logger.info(`Database not found for org ${user.organization_id}, checking database list...`);
          
          const tursoService = new TursoService();
          const mainDb = new Database();
          
          // Get the org's database URL
          const orgData = await mainDb.fetchOne<{ turso_db_url: string }>(
            'SELECT turso_db_url FROM organizations WHERE id = ?',
            [user.organization_id]
          );

          if (!orgData?.turso_db_url) {
            logger.error(`No database URL found for org ${user.organization_id}`);
            set.status = 500;
            return { error: 'Organization database not configured' };
          }

          // Extract database name from URL
          const dbName = orgData.turso_db_url.split('/').pop()?.split('.')[0]?.replace(/-[^-]*$/, '');
          if (!dbName) {
            logger.error(`Could not extract database name from URL: ${orgData.turso_db_url}`);
            set.status = 500;
            return { error: 'Invalid database configuration' };
          }

          // Check if database exists in Turso
          const response = await fetch(`https://api.turso.tech/v1/organizations/${TURSO_CONFIG.ORG_SLUG}/databases`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${TURSO_CONFIG.API_TOKEN}`,
            }
          });

          if (!response.ok) {
            logger.error(`Failed to list databases, status: ${response.status}`);
            set.status = 500;
            return { error: 'Failed to verify database status' };
          }

          const data = await response.json();
          const dbExists = data.databases.some((db: any) => db.Name === dbName);

          if (dbExists) {
            logger.info(`Database ${dbName} found in list, retrying connection...`);
            // Retry getting the database
            try {
              orgDb = await Database.getOrgDb(user.organization_id.toString());
            } catch (retryError) {
              logger.error(`Failed to connect to database after verification: ${retryError}`);
              set.status = 500;
              return { error: 'Database exists but connection failed' };
            }
          } else {
            logger.error(`Database ${dbName} not found in Turso organization`);
            set.status = 500;
            return { error: 'Database not found in organization' };
          }
        } else {
          // For other errors, throw them
          throw error;
        }
      }

      logger.info(`Connected to org database for ${user.organization_id}`);

      // First get total count with a simpler query
      const countQuery = `SELECT COUNT(*) as total FROM contacts WHERE ${whereClause}`;
      logger.info(`Executing count query: ${countQuery} with params: ${JSON.stringify(params)}`);
      
      const countResult = await orgDb.fetchOne<{ total: number }>(countQuery, params);
      let total = countResult?.total || 0;
      logger.info(`Found total of ${total} contacts matching criteria`);

      // If no contacts found, verify database is properly synced
      if (total === 0) {
        logger.info(`No contacts found for org ${user.organization_id}, verifying database sync status...`);
        
        const mainDb = new Database();
        
        // Get the org's database URL
        const orgData = await mainDb.fetchOne<{ turso_db_url: string }>(
          'SELECT turso_db_url FROM organizations WHERE id = ?',
          [user.organization_id]
        );

        if (!orgData?.turso_db_url) {
          logger.error(`No database URL found for org ${user.organization_id}`);
          set.status = 500;
          return { error: 'Organization database not configured' };
        }

        // Extract database name from URL
        const dbName = orgData.turso_db_url.split('/').pop()?.split('.')[0]?.replace(/-[^-]*$/, '');
        if (!dbName) {
          logger.error(`Could not extract database name from URL: ${orgData.turso_db_url}`);
          set.status = 500;
          return { error: 'Invalid database configuration' };
        }

        // Check if database exists in Turso
        const response = await fetch(`https://api.turso.tech/v1/organizations/${TURSO_CONFIG.ORG_SLUG}/databases`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${TURSO_CONFIG.API_TOKEN}`,
          }
        });

        if (!response.ok) {
          logger.error(`Failed to list databases, status: ${response.status}`);
          set.status = 500;
          return { error: 'Failed to verify database status' };
        }

        const data = await response.json();
        const dbExists = data.databases.some((db: any) => db.Name === dbName);

        if (dbExists) {
          logger.info(`Database ${dbName} found in list, retrying connection and count...`);
          // Retry getting the database and count
          try {
            orgDb = await Database.getOrgDb(user.organization_id.toString());
            const retryCountResult = await orgDb.fetchOne<{ total: number }>(countQuery, params);
            const retryTotal = retryCountResult?.total || 0;
            logger.info(`Retry count found ${retryTotal} contacts`);
            if (retryTotal > 0) {
              total = retryTotal; // Update total if we found contacts on retry
            }
          } catch (retryError) {
            logger.error(`Failed to reconnect to database after verification: ${retryError}`);
            set.status = 500;
            return { error: 'Database exists but connection failed' };
          }
        } else {
          logger.error(`Database ${dbName} not found in Turso organization`);
          set.status = 500;
          return { error: 'Database not found in organization' };
        }
      }

      // Then get paginated results
      const offset = (page - 1) * limit;
      const selectQuery = `
        SELECT 
          COALESCE(id, rowid) as id,
          first_name, last_name, email, phone_number, state,
          current_carrier, effective_date, birth_date, tobacco_user,
          gender, zip_code, plan_type, agent_id, last_emailed,
          created_at, updated_at, status
        FROM contacts 
        WHERE ${whereClause}
        ORDER BY created_at DESC 
        LIMIT ? OFFSET ?`;
      
      logger.info(`Executing select query: ${selectQuery} with params: ${JSON.stringify([...params, limit, offset])}`);
      
      const contacts = await orgDb.query<Contact>(selectQuery, [...params, limit, offset]);
      logger.info(`Retrieved ${contacts.length} contacts for current page`);

      // Log first contact for debugging
      if (contacts.length > 0) {
        logger.info(`First contact: ${JSON.stringify(contacts[0])}`);
      }

      // Get filter options using separate queries for unique values
      const carrierQuery = `SELECT DISTINCT current_carrier FROM contacts WHERE ${whereClause} AND current_carrier IS NOT NULL ORDER BY current_carrier`;
      const zipQuery = `SELECT DISTINCT zip_code FROM contacts WHERE ${whereClause} AND zip_code IS NOT NULL ORDER BY zip_code`;
      
      const [carrierRows, zipRows] = await Promise.all([
        orgDb.query<{current_carrier: string}>(carrierQuery, params),
        orgDb.query<{zip_code: string}>(zipQuery, params)
      ]);

      // Get unique states from zip codes using ZIP_DATA
      const uniqueStates = zipRows
        .map(row => {
          const zipInfo = ZIP_DATA[row.zip_code];
          return zipInfo?.state;
        })
        .filter((state): state is string => state !== undefined)
        .filter((value, index, self) => self.indexOf(value) === index)
        .sort();
      
      const filterOptions = {
        carriers: carrierRows.map(row => row.current_carrier).filter(Boolean),
        states: uniqueStates
      };
      
      logger.info(`Filter options - carriers: ${filterOptions.carriers.join(',')}, states: ${filterOptions.states.join(',')}`);

      // Map contacts to expected format using snake_case
      const mappedContacts = contacts.map(contact => {
        // Get state from ZIP code
        const zipInfo = ZIP_DATA[contact.zip_code];
        const state = zipInfo?.state || contact.state; // Fallback to stored state if ZIP lookup fails

        // Ensure we have a valid ID
        if (!contact.id) {
          logger.error(`Contact missing ID: ${JSON.stringify(contact)}`);
        }

        return {
          id: contact.id || 0, // Fallback to 0 if null (shouldn't happen with COALESCE)
          first_name: contact.first_name,
          last_name: contact.last_name,
          email: contact.email,
          phone_number: contact.phone_number || '',
          state: state,
          current_carrier: contact.current_carrier,
          effective_date: contact.effective_date,
          birth_date: contact.birth_date,
          tobacco_user: Boolean(contact.tobacco_user),
          gender: contact.gender,
          zip_code: contact.zip_code,
          plan_type: contact.plan_type,
          agent_id: contact.agent_id,
          last_emailed: contact.last_emailed,
          status: contact.status || 'New'
        };
      });

      const response = {
        contacts: mappedContacts,
        filterOptions,
        total,
        page,
        limit
      };

      logger.info(`Returning response with ${mappedContacts.length} contacts, total: ${total}`);
      return response;

    } catch (error) {
      logger.error(`Error fetching contacts: ${error}`);
      set.status = 500;
      return { error: 'Failed to fetch contacts' };
    }
  })
  .post('/bulk-import', async ({ body, user, set }: { body: BulkImportRequest; user: User; set: { status: number } }) => {
    if (!user || !user.organization_id || !user.is_admin) {
      set.status = 401;
      return { success: false, message: 'Not authorized for bulk import', totalRows: 0 };
    }

    try {
      // For non-admin agents, force overwriteExisting to false
      const overwriteExisting = user.is_admin ? body.overwriteExisting : false;

      // Validate contacts array
      if (!Array.isArray(body.contacts) || body.contacts.length === 0) {
        set.status = 400;
        return { success: false, message: 'No contacts provided', totalRows: 0 };
      }

      // Create temp directory if it doesn't exist
      const tempDir = path.join(process.cwd(), 'tmp');
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
      }

      // Generate temp file name with random ID to avoid conflicts
      const tempFile = path.join(tempDir, `contacts-${nanoid()}.csv`);
      
      try {
        // Convert contacts array to CSV string
        const csvData = stringify(body.contacts, {
          header: true,
          
          columns: [
            'first_name', 'last_name', 'email', 'phone_number',
            'current_carrier', 'effective_date', 'birth_date', 'tobacco_user',
            'gender', 'zip_code', 'plan_type'
          ]
        });
        
        // Write CSV data to temp file
        fs.writeFileSync(tempFile, csvData);
        logger.info(`Created temporary CSV file: ${tempFile} with ${body.contacts.length} contacts`);
        
        // Use the bulk import function with the temp CSV file
        const result = await Database.bulkImportContacts(
          user.organization_id.toString(),
          tempFile,
          overwriteExisting,
          undefined, // columnMapping
          undefined, // carrierMapping
          body.agentId // Pass the agentId
        );
        
        logger.info(`Bulk import completed: ${result}`);
        
        return {
          success: true,
          message: 'Contacts imported successfully',
          totalRows: body.contacts.length
        };
      } finally {
        // Clean up temp file
        if (fs.existsSync(tempFile)) {
          fs.unlinkSync(tempFile);
          logger.info(`Removed temporary CSV file: ${tempFile}`);
        }
      }
    } catch (error) {
      logger.error(`Error in bulk import: ${error}`);
      set.status = 500;
      return { 
        success: false,
        message: error instanceof Error ? error.message : 'Failed to process import',
        totalRows: 0
      };
    }
  })
  .post('/track', 
    async ({ request, body, set }) => {
      try {
        const user = await getUserFromSession(request);
        
        // Check if request includes required fields
        if (!user || !body || 'skip_auth' in user) {
          set.status = 400;
          return { 
            success: false, 
            error: 'Invalid request' 
          };
        }
        
        const { email, firstName, lastName } = body as {
          email: string;
          firstName?: string;
          lastName?: string;
        };
        
        if (!email) {
          set.status = 400;
          return { 
            success: false, 
            error: 'Email is required' 
          };
        }
        
        // Track the contact
        const result = await trackContact(
          user.organization_id.toString(),
          user.id.toString(),
          email,
          firstName,
          lastName
        );
        
        // Get updated usage stats
        const stats = await getContactUsageStats(user.organization_id.toString());
        
        return {
          success: true,
          isNew: result.isNew,
          contactId: result.contactId,
          stats
        };
      } catch (error) {
        logger.error(`Error tracking contact: ${error}`);
        set.status = 500;
        return { 
          success: false, 
          error: 'Failed to track contact' 
        };
      }
    },
    {
      body: t.Object({
        email: t.String(),
        firstName: t.Optional(t.String()),
        lastName: t.Optional(t.String())
      })
    }
  )
  
  // Track a batch of contacts
  .post('/batch', 
    async ({ request, body, set }) => {
      try {
        const user = await getUserFromSession(request);
        
        // Check if request includes required fields
        if (!user || !body || !body.contacts || !Array.isArray(body.contacts) || 'skip_auth' in user) {
          set.status = 400;
          return { 
            success: false, 
            error: 'Invalid request' 
          };
        }
        
        const { contacts } = body as {
          contacts: Array<{
            email: string;
            firstName?: string;
            lastName?: string;
          }>
        };
        
        // Track the contacts in batch
        const result = await trackContactBatch(
          user.organization_id.toString(),
          user.id.toString(),
          contacts
        );
        
        // Get updated usage stats
        const stats = await getContactUsageStats(user.organization_id.toString());
        
        return {
          success: true,
          newCount: result.newCount,
          totalProcessed: result.totalProcessed,
          stats
        };
      } catch (error) {
        logger.error(`Error tracking contact batch: ${error}`);
        set.status = 500;
        return { 
          success: false, 
          error: 'Failed to track contacts' 
        };
      }
    },
    {
      body: t.Object({
        contacts: t.Array(
          t.Object({
            email: t.String(),
            firstName: t.Optional(t.String()),
            lastName: t.Optional(t.String())
          })
        )
      })
    }
  )
  
  // Get contact usage stats
  .get('/usage-stats', async ({ request, set }) => {
    try {
      const user = await getUserFromSession(request);
      
      if (!user || 'skip_auth' in user) {
        set.status = 401;
        return { 
          success: false, 
          error: 'Unauthorized' 
        };
      }
      
      const stats = await getContactUsageStats(user.organization_id.toString());
      
      return {
        success: true,
        stats
      };
    } catch (error) {
      logger.error(`Error getting contact usage stats: ${error}`);
      set.status = 500;
      return { 
        success: false, 
        error: 'Failed to get contact usage stats' 
      };
    }
  })
  
  // Reset contact count (admin/support only)
  .post('/reset', 
    async ({ request, body, set }) => {
      try {
        const user = await getUserFromSession(request);
        
        // Check if user is admin
        if (!user || 'skip_auth' in user || !user.is_admin) {
          set.status = 403;
          return { 
            success: false, 
            error: 'You do not have permission to perform this action' 
          };
        }
        
        const { email, reason } = body as {
          email: string;
          reason: string;
        };
        
        if (!email || !reason) {
          set.status = 400;
          return { 
            success: false, 
            error: 'Email and reason are required' 
          };
        }
        
        // Reset the contact
        const success = await resetContactCount(
          user.organization_id.toString(),
          email,
          reason
        );
        
        if (!success) {
          set.status = 404;
          return { 
            success: false, 
            error: 'Contact not found' 
          };
        }
        
        // Get updated stats
        const stats = await getContactUsageStats(user.organization_id.toString());
        
        return {
          success: true,
          stats
        };
      } catch (error) {
        logger.error(`Error resetting contact: ${error}`);
        set.status = 500;
        return { 
          success: false, 
          error: 'Failed to reset contact' 
        };
      }
    },
    {
      body: t.Object({
        email: t.String(),
        reason: t.String()
      })
    }
  )
  
  // Check if an email exists
  .get('/check-email/:email', async ({ params, request, set }) => {
    try {
      const user = await getUserFromSession(request);
      
      if (!user || 'skip_auth' in user) {
        set.status = 401;
        return { 
          success: false, 
          error: 'Unauthorized' 
        };
      }
      
      const { email } = params;
      
      if (!email) {
        set.status = 400;
        return { 
          success: false, 
          error: 'Email is required' 
        };
      }
      
      try {
        // Get the organization database
        const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString());
        
        // Check if the email exists
        const contact = await orgDb.fetchOne(
          'SELECT id FROM contacts WHERE email = ?',
          [email]
        );
        
        logger.info(`Email check for "${email}" - exists: ${!!contact}`);
        
        return {
          exists: !!contact
        };
      } catch (dbError) {
        logger.error(`Database error checking email ${email}: ${dbError}`);
        set.status = 500;
        return { 
          success: false, 
          error: 'Database error checking email',
          message: dbError instanceof Error ? dbError.message : 'Unknown database error'
        };
      }
    } catch (error) {
      logger.error(`Error checking email: ${error}`);
      set.status = 500;
      return { 
        success: false, 
        error: 'Failed to check email',
        message: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  })
  
  // Add DELETE endpoint for contacts
  .delete('/', 
    async ({ body, set, request }) => {
      try {
        const user = await getUserFromSession(request);
        if (!user || 'skip_auth' in user || !user.organization_id) {
          set.status = 401;
          return { error: 'Not authorized' };
        }

        const contactIds = body;
        if (!Array.isArray(contactIds) || contactIds.length === 0) {
          throw new Error('No contact IDs provided');
        }
        
        logger.info(`DELETE /api/contacts - Attempting to delete ${contactIds.length} contacts for org ${user.organization_id}`);
        
        // Get org-specific database
        const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString());

        // Create placeholders for SQL IN clause
        const placeholders = contactIds.map(() => '?').join(',');
        
        // First delete related records from email_send_tracking
        const deleteEmailTrackingQuery = `
          DELETE FROM email_send_tracking 
          WHERE contact_id IN (${placeholders})
        `;
        await orgDb.execute(deleteEmailTrackingQuery, contactIds);

        // Then delete the contacts
        const deleteContactsQuery = `
          DELETE FROM contacts 
          WHERE id IN (${placeholders})
          RETURNING id
        `;

        const result = await orgDb.execute(deleteContactsQuery, contactIds);
        const deletedIds = result.rows?.map((row: { id: number }) => row.id) || [];

        logger.info(`DELETE /api/contacts - Successfully deleted ${deletedIds.length} contacts from org ${user.organization_id}`);

        return {
          success: true,
          deleted_ids: deletedIds,
          message: `Successfully deleted ${deletedIds.length} contacts`
        };
      } catch (e) {
        logger.error(`Error deleting contacts: ${e}`);
        throw new Error(String(e));
      }
    },
    {
      body: t.Array(t.Number())
    }
  );

================
File: backend/src/routes/contactTracking.ts
================
import { Elysia, t } from 'elysia';
import { Database } from '../database';
import { logger } from '../logger';
import { getUserFromSession } from '../services/auth';
import { 
  trackContact, 
  trackContactBatch, 
  getContactUsageStats, 
  getUniqueContactCount,
  resetContactCount
} from '../services/contactTracking';

export const createContactTrackingRoutes = () => {
  return new Elysia({ prefix: '/api/contact-tracking' })

    // Track a single contact
    .post('/track', 
      async ({ request, body, set }) => {
        try {
          const user = await getUserFromSession(request);
          
          // Check if request includes required fields
          if (!user || !body) {
            set.status = 400;
            return { 
              success: false, 
              error: 'Invalid request' 
            };
          }
          
          const { email, firstName, lastName } = body as {
            email: string;
            firstName?: string;
            lastName?: string;
          };
          
          if (!email) {
            set.status = 400;
            return { 
              success: false, 
              error: 'Email is required' 
            };
          }
          
          // Track the contact
          const result = await trackContact(
            user.organization_id.toString(),
            user.id.toString(),
            email,
            firstName,
            lastName
          );
          
          // Get updated usage stats
          const stats = await getContactUsageStats(user.organization_id.toString());
          
          return {
            success: true,
            isNew: result.isNew,
            contactId: result.contactId,
            stats
          };
        } catch (error) {
          logger.error(`Error tracking contact: ${error}`);
          set.status = 500;
          return { 
            success: false, 
            error: 'Failed to track contact' 
          };
        }
      },
      {
        body: t.Object({
          email: t.String(),
          firstName: t.Optional(t.String()),
          lastName: t.Optional(t.String())
        })
      }
    )
    
    // Track a batch of contacts
    .post('/batch', 
      async ({ request, body, set }) => {
        try {
          const user = await getUserFromSession(request);
          
          // Check if request includes required fields
          if (!user || !body || !body.contacts || !Array.isArray(body.contacts)) {
            set.status = 400;
            return { 
              success: false, 
              error: 'Invalid request' 
            };
          }
          
          const { contacts } = body as {
            contacts: Array<{
              email: string;
              firstName?: string;
              lastName?: string;
            }>
          };
          
          // Track the contacts in batch
          const result = await trackContactBatch(
            user.organization_id.toString(),
            user.id.toString(),
            contacts
          );
          
          // Get updated usage stats
          const stats = await getContactUsageStats(user.organization_id.toString());
          
          return {
            success: true,
            newCount: result.newCount,
            totalProcessed: result.totalProcessed,
            stats
          };
        } catch (error) {
          logger.error(`Error tracking contact batch: ${error}`);
          set.status = 500;
          return { 
            success: false, 
            error: 'Failed to track contacts' 
          };
        }
      },
      {
        body: t.Object({
          contacts: t.Array(
            t.Object({
              email: t.String(),
              firstName: t.Optional(t.String()),
              lastName: t.Optional(t.String())
            })
          )
        })
      }
    )
    
    // Get contact usage stats
    .get('/usage-stats', async ({ request, set }) => {
      try {
        const user = await getUserFromSession(request);
        
        if (!user) {
          set.status = 401;
          return { 
            success: false, 
            error: 'Unauthorized' 
          };
        }
        
        const stats = await getContactUsageStats(user.organization_id.toString());
        
        return {
          success: true,
          stats
        };
      } catch (error) {
        logger.error(`Error getting contact usage stats: ${error}`);
        set.status = 500;
        return { 
          success: false, 
          error: 'Failed to get contact usage stats' 
        };
      }
    })
    
    // Reset contact count (admin/support only)
    .post('/reset', 
      async ({ request, body, set }) => {
        try {
          const user = await getUserFromSession(request);
          
          // Check if user is admin
          if (!user || !user.is_admin) {
            set.status = 403;
            return { 
              success: false, 
              error: 'You do not have permission to perform this action' 
            };
          }
          
          const { email, reason } = body as {
            email: string;
            reason: string;
          };
          
          if (!email || !reason) {
            set.status = 400;
            return { 
              success: false, 
              error: 'Email and reason are required' 
            };
          }
          
          // Reset the contact
          const success = await resetContactCount(
            user.organization_id.toString(),
            email,
            reason
          );
          
          if (!success) {
            set.status = 404;
            return { 
              success: false, 
              error: 'Contact not found' 
            };
          }
          
          // Get updated stats
          const stats = await getContactUsageStats(user.organization_id.toString());
          
          return {
            success: true,
            stats
          };
        } catch (error) {
          logger.error(`Error resetting contact: ${error}`);
          set.status = 500;
          return { 
            success: false, 
            error: 'Failed to reset contact' 
          };
        }
      },
      {
        body: t.Object({
          email: t.String(),
          reason: t.String()
        })
      }
    );
};

================
File: backend/src/routes/dashboard.ts
================
import { Elysia } from 'elysia'
import { Database } from '../database'
import { logger } from '../logger'
import { getUserFromSession } from '../services/auth'

/**
 * Creates and configures dashboard-related routes
 */
export function createDashboardRoutes() {
  return new Elysia({ prefix: '/api/dashboard' })
    // Dashboard statistics endpoint
    .get('/stats', async ({ request, set }) => {
      try {
        // Get current user from session
        const currentUser = await getUserFromSession(request)
        if (!currentUser || !currentUser.organization_id) {
          set.status = 401
          return {
            success: false,
            error: 'Authentication required'
          }
        }

        // Get organization-specific database
        const orgDb = await Database.getOrInitOrgDb(currentUser.organization_id.toString())

        // For accurate counts, we need to be precise about what we're counting
        // Log all tables to help diagnose
        logger.info(`Checking available tables in org DB for ${currentUser.organization_id}`)
        const tablesResult = await orgDb.fetchAll(
          "SELECT name FROM sqlite_master WHERE type='table'"
        )
        logger.info(`Available tables: ${JSON.stringify(tablesResult.map((r: any) => r.name || r[0]))}`)
        
        // Better debug query to understand tracking_clicks structure
        const sampleClicks = await orgDb.fetchAll(
          "SELECT * FROM tracking_clicks LIMIT 5"
        )
        logger.info(`Sample tracking_clicks: ${JSON.stringify(sampleClicks)}`)
        
        // 1. "Quotes Sent" - count emails that have been sent (status = 'scheduled')
        const quotesSentSql = `
          SELECT COUNT(*) as count 
          FROM email_schedules 
          WHERE status = 'scheduled'
        `
        const quotesSentResult = await orgDb.fetchOne<{ count: number }>(quotesSentSql)
        const quotesSent = quotesSentResult?.count || 0
        logger.info(`Quotes Sent count: ${quotesSent}`)

        // 1b. "Manual Quotes Sent" - count manual quote emails from email_send_tracking
        const manualQuotesSql = `
          SELECT COUNT(*) as count
          FROM email_send_tracking
          WHERE email_type = 'quote_email' AND send_status = 'sent'
        `;
        const manualQuotesResult = await orgDb.fetchOne<{ count: number }>(manualQuotesSql);
        const manualQuotesSent = manualQuotesResult?.count || 0;
        logger.info(`Manual Quotes Sent count: ${manualQuotesSent}`);

        // 2. "Quotes Viewed" - count unique contacts who have viewed quotes
        const quotesViewedSql = `
          SELECT COUNT(DISTINCT contact_id) as count 
          FROM tracking_clicks
          WHERE contact_id IS NOT NULL
        `
        const quotesViewedResult = await orgDb.fetchOne<{ count: number }>(quotesViewedSql)
        const quotesViewed = quotesViewedResult?.count || 0
        logger.info(`Quotes Viewed count: ${quotesViewed}`)

        // 3. Get "Upcoming Renewals" count from email_schedules
        const followUpsSql = `
          SELECT COUNT(*) as count
          FROM email_schedules
          WHERE status = 'pre-scheduled'
        `
        const followUpsResult = await orgDb.fetchOne<{ count: number }>(followUpsSql)
        const followUpsRequested = followUpsResult?.count || 0

        // 4. Get "Health Questions Completed" count - unique contacts who have completed health questions
        const healthQuestionsCompletedSql = `
          SELECT COUNT(DISTINCT contact_id) as count
          FROM eligibility_answers
        `
        const healthQuestionsResult = await orgDb.fetchOne<{ count: number }>(healthQuestionsCompletedSql)
        const healthQuestionsCompleted = healthQuestionsResult?.count || 0
        logger.info(`Health Questions Completed count: ${healthQuestionsCompleted}`)

        // Show data for all 12 months, with real data for current month and zeros for others
        const currentMonth = new Date().getMonth(); // 0-11

        // Create array of chart data for all months
        const chartData = [];
        const monthsToShow = 12;

        // Create entries for all 12 months, but only put real data in current month
        for (let i = 0; i < monthsToShow; i++) {
          // Only the current month has actual data, rest are zeros
          const isCurrentMonth = i === currentMonth;

          let sentValue = 0;
          let viewedValue = 0;
          let followUpValue = 0;

          if (isCurrentMonth) {
            // Use real data for current month
            sentValue = quotesSent;
            viewedValue = quotesViewed;
            followUpValue = followUpsRequested;
          }

          chartData.push({
            x: i, // 0-11 for months (Jan-Dec)
            sends: sentValue,
            views: viewedValue,
            followUps: followUpValue
          });
        }

        // No need to transform the chart data anymore

        logger.info(`Dashboard stats for org ${currentUser.organization_id}: Quotes Sent: ${quotesSent}, Manual Quotes Sent: ${manualQuotesSent}, Quotes Viewed: ${quotesViewed}, Renewals: ${followUpsRequested}`)

        return {
          success: true,
          stats: {
            quotesSent,
            manualQuotesSent,
            quotesViewed,
            followUpsRequested,
            healthQuestionsCompleted,
            chartData
          }
        }
      } catch (error) {
        logger.error(`Error fetching dashboard stats: ${error}`)
        set.status = 500
        return {
          success: false,
          error: 'Failed to load dashboard stats'
        }
      }
    })
}

================
File: backend/src/routes/eligibility.ts
================
import { Elysia } from 'elysia';
import { Database } from '../database';
import { logger } from '../logger';
import { decodeQuoteId } from '../utils/quoteId';
import { getUserFromSession } from '../services/auth';

interface EligibilityAnswers {
    quote_id?: string;
    contact_id?: string;
    answers: Record<string, {
        question_text: string;
        question_type: string;
        answer: boolean | string | null;
    }>;
}

export const eligibilityRoutes = (app: Elysia) => {
    app
        // Get organization details
        .get('/api/org/:orgId/details', async ({ params }) => {
            try {
                const orgId = params.orgId;
                if (!orgId) {
                    return {
                        success: false,
                        error: 'Missing organization ID'
                    };
                }

                // Get organization details from main database
                const mainDb = new Database();
                const orgDetails = await mainDb.fetchOne<{ name: string, logo_data: string | null }>(
                    'SELECT name, logo_data FROM organizations WHERE id = ?',
                    [orgId]
                );

                if (!orgDetails) {
                    return {
                        success: false,
                        error: 'Organization not found'
                    };
                }

                return {
                    name: orgDetails.name,
                    logo_data: orgDetails.logo_data
                };
            } catch (error) {
                logger.error(`Error getting organization details: ${error}`);
                throw new Error('Failed to get organization details');
            }
        })

        // Get existing eligibility answers for a contact
        .get('/api/org/:orgId/eligibility-answers/:contactId', async ({ params }) => {
            try {
                const { orgId, contactId } = params;
                if (!orgId || !contactId) {
                    return {
                        success: false,
                        error: 'Missing required parameters'
                    };
                }

                // Get org-specific database
                const orgDb = await Database.getOrInitOrgDb(orgId);

                // Get the most recent answers for this contact
                const result = await orgDb.fetchOne<{ answers: string }>(
                    'SELECT answers FROM eligibility_answers WHERE contact_id = ? ORDER BY created_at DESC LIMIT 1',
                    [contactId]
                );

                if (!result) {
                    return {
                        success: false,
                        error: 'No answers found'
                    };
                }

                // Get organization details from main database
                const mainDb = new Database();
                const orgDetails = await mainDb.fetchOne<{ name: string, logo_data: string | null }>(
                    'SELECT name, logo_data FROM organizations WHERE id = ?',
                    [orgId]
                );

                return {
                    answers: JSON.parse(result.answers),
                    orgName: orgDetails?.name || 'Medicare Max',
                    orgLogo: orgDetails?.logo_data || null
                };
            } catch (error) {
                logger.error(`Error getting eligibility answers: ${error}`);
                throw new Error('Failed to get eligibility answers');
            }
        })

        // Create a temporary contact for collecting eligibility answers
        .post('/api/org/:orgId/temp-contact', async ({ params }) => {
            try {
                const orgId = params.orgId;
                if (!orgId) {
                    return {
                        success: false,
                        error: 'Missing organization ID'
                    };
                }

                // Get org-specific database
                const orgDb = await Database.getOrInitOrgDb(orgId);
                
                // Create a minimal contact record for just eligibility assessment
                const result = await orgDb.execute(
                    `INSERT INTO contacts 
                    (first_name, last_name, email, current_carrier, plan_type, effective_date, birth_date, tobacco_user, gender, state, zip_code, phone_number, status) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                    [
                        'Temporary', 
                        'Contact', 
                        `temp-${Date.now()}@example.com`, 
                        '', 
                        'G', 
                        '', 
                        '1950-01-01', 
                        0, 
                        'M', 
                        '', 
                        '00000', 
                        '', 
                        'temp'
                    ]
                );

                // Get the inserted ID from the result
                const contactId = result.lastInsertRowid?.toString();
                
                if (!contactId) {
                    throw new Error('Failed to create temporary contact');
                }

                // Add a record to contact_events to track this
                await orgDb.execute(
                    `INSERT INTO contact_events 
                    (contact_id, event_type, metadata) 
                    VALUES (?, ?, ?)`,
                    [
                        contactId,
                        'temp_contact_created',
                        JSON.stringify({ source: 'eligibility_assessment' })
                    ]
                );

                return contactId;
            } catch (error) {
                logger.error(`Error creating temporary contact: ${error}`);
                throw new Error('Failed to create temporary contact');
            }
        })

        // Save eligibility answers
        .post('/api/org/:orgId/eligibility-answers', async ({ params, body }) => {
            try {
                const orgId = params.orgId;
                if (!orgId) {
                    return {
                        success: false,
                        error: 'Missing organization ID'
                    };
                }

                const data = body as EligibilityAnswers;
                
                // Get org-specific database
                const orgDb = await Database.getOrInitOrgDb(orgId);
                
                let contactId: string | null = null;
                
                // If quote_id is provided, get the contact_id from it
                if (data.quote_id) {
                    try {
                        const decodedQuoteId = decodeQuoteId(data.quote_id);
                        if (decodedQuoteId) {
                            contactId = decodedQuoteId.contactId.toString();
                            
                            // Verify the org ID matches
                            if (decodedQuoteId.orgId.toString() !== orgId) {
                                return {
                                    success: false,
                                    error: 'Invalid quote ID - organization mismatch'
                                };
                            }
                        }
                    } catch (error) {
                        logger.error(`Error decoding quote ID: ${error}`);
                        return {
                            success: false,
                            error: 'Invalid quote ID'
                        };
                    }
                } else if (data.contact_id) {
                    // If contact_id is provided directly, use it
                    contactId = data.contact_id;
                }
                
                if (!contactId) {
                    return {
                        success: false,
                        error: 'Missing contact ID'
                    };
                }
                
                // Ensure contactId is a number for database operations
                const contactIdNum = parseInt(contactId, 10);
                if (isNaN(contactIdNum)) {
                    return {
                        success: false,
                        error: 'Invalid contact ID format'
                    };
                }

                // Verify contact exists in this org using the number
                const contact = await orgDb.fetchOne(
                    'SELECT id FROM contacts WHERE id = ?',
                    [contactIdNum]
                );
                
                if (!contact) {
                    return {
                        success: false,
                        error: 'Contact not found'
                    };
                }

                // Get organization details from main database
                const mainDb = new Database();
                const orgDetails = await mainDb.fetchOne<{ name: string, logo_data: string | null }>(
                    'SELECT name, logo_data FROM organizations WHERE id = ?',
                    [orgId]
                );
                
                // Store the eligibility answers
                const verifiedQuoteId = data.quote_id || "";
                const answersJson = JSON.stringify(data.answers);
                
                // Determine the quote ID to save, defaulting to empty string if null
                const finalQuoteId = verifiedQuoteId ?? "";
                
                logger.info(`Saving eligibility answers for contact_id: ${contactIdNum}, quote_id: ${finalQuoteId}`);
                
                // Check if we already have answers for this contact using the number
                const existingAnswers = await orgDb.fetchOne(
                    'SELECT id FROM eligibility_answers WHERE contact_id = ?',
                    [contactIdNum]
                );
                
                if (existingAnswers) {
                    // Update existing answers using the number
                    logger.info(`Updating existing answers for contact_id: ${contactIdNum}`);
                    await orgDb.execute(
                        'UPDATE eligibility_answers SET answers = ?, quote_id = ?, created_at = CURRENT_TIMESTAMP WHERE contact_id = ?',
                        [answersJson, finalQuoteId, contactIdNum]
                    );
                } else {
                    // Insert new answers using the number
                    logger.info(`Inserting new answers for contact_id: ${contactIdNum}`);
                    await orgDb.execute(
                        'INSERT INTO eligibility_answers (contact_id, quote_id, answers) VALUES (?, ?, ?)', 
                        [contactIdNum, finalQuoteId, answersJson]
                    );
                }
                
                // Extract analytics data from enhanced answers
                const analyticsData = {
                    answers_count: Object.keys(data.answers).length,
                    source: data.quote_id ? 'quote' : 'direct',
                    main_questions_yes_count: Object.values(data.answers).filter(a => 
                        a.question_type === 'main' && a.answer === true
                    ).length,
                    has_medical_conditions: Object.values(data.answers).some(a => 
                        a.question_type === 'main' && a.answer === true
                    )
                };
                
                // Add a record to contact_events using the number
                await orgDb.execute(
                    `INSERT INTO contact_events 
                    (contact_id, event_type, metadata) 
                    VALUES (?, ?, ?)`, 
                    [
                        contactIdNum,
                        'eligibility_answered',
                        JSON.stringify(analyticsData)
                    ]
                );
                
                return {
                    contactId: contactIdNum.toString(), // Return as string if needed by frontend
                    orgName: orgDetails?.name || 'Medicare Max',
                    orgLogo: orgDetails?.logo_data || null
                };
            } catch (error) {
                logger.error(`Error saving eligibility answers: ${error}`);
                throw new Error('Failed to save eligibility answers');
            }
        });

    return app;
};

================
File: backend/src/routes/onboarding.ts
================
import { Elysia } from 'elysia'
import { logger } from '../logger'
import { Database } from '../database'
import { config } from '../config'
import { cookie } from '@elysiajs/cookie'
import Stripe from 'stripe'

// Initialize Stripe with secret key from environment variables
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || 'sk_test_51Qyh7RCBUPXAZKNGFySALjap1pDAtEwPtuY5TAzEuKKDq7cfAmHhmQIn8W1UMf2CuOvQ1umjiUrlpPauOc159fpM00nfohCZH3')
const YOUR_DOMAIN = config.clientUrl || 'http://localhost:3000'

// Helper function for generating unique slugs from names
async function generateUniqueSlug(db: Database, name: string): Promise<string> {
  let slug = name
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9]+/g, '-') // Replace non-alphanumeric chars with hyphens
    .replace(/^-+|-+$/g, '') // Remove leading/trailing hyphens
    .substring(0, 50); // Limit length

  // Check if slug exists
  let counter = 0;
  let uniqueSlug = slug;
  
  while (true) {
    const existing = await db.query<{ count: number }>(
      'SELECT COUNT(*) as count FROM organizations WHERE slug = ?',
      [uniqueSlug]
    );

    if (existing[0]?.count === 0) {
      break;
    }

    counter++;
    uniqueSlug = `${slug}-${counter}`;
  }

  return uniqueSlug;
}

// Helper function to ensure emails are properly decoded before storing in the database
function ensureEmailDecoded(email: string): string {
  try {
    // Check if email appears to be encoded
    if (email.includes('%')) {
      let decoded = email;
      let previous = '';
      
      // Apply decoding until the string no longer changes
      // This handles scenarios where the email might be double-encoded
      while (decoded !== previous) {
        previous = decoded;
        decoded = decodeURIComponent(decoded);
      }
      
      // Log if we actually changed something
      if (decoded !== email) {
        logger.info(`Decoded email from ${email} to ${decoded}`);
        return decoded;
      }
    }
    return email;
  } catch (error) {
    logger.warn(`Error decoding email ${email}: ${error}`);
    return email; // Return original if decoding fails
  }
}

export function createOnboardingRoutes() {
  const dbInstance = new Database()
  
  // Log that we're creating the routes, for debugging
  logger.info('Initializing onboarding routes including resume endpoint');

  // Define the resume endpoint separately to ensure it's properly registered
  const resumeHandler = async ({ query, set, request }: { query: any, set: any, request: any }) => {
    // Log request headers for debugging authentication issues
    logger.info(`Request headers: ${JSON.stringify(request.headers)}`);
    logger.info(`Resume endpoint called with query: ${JSON.stringify(query)}`);
    
    try {
      const { email } = query as { email: string };
      
      if (!email) {
        set.status = 400;
        return {
          success: false,
          message: 'Email is required'
        };
      }
      
      // Properly decode the email parameter
      const decodedEmail = ensureEmailDecoded(email);
      logger.info(`Processing resume request for email: ${decodedEmail}`);
      
      // Find the user and their organization
      logger.info(`Searching for user with email: ${decodedEmail}`);
      let userInfo = await dbInstance.fetchOne<{ 
        id: number, 
        organization_id: number, 
        first_name: string,
        last_name: string,
        email: string,
        phone: string
      }>(
        'SELECT id, organization_id, first_name, last_name, email, phone FROM users WHERE email = ?',
        [decodedEmail]
      );
      
      if (!userInfo) {
        logger.warn(`User not found with email: ${decodedEmail}`);
        // Try a case-insensitive search as a fallback
        const userByLowercase = await dbInstance.fetchOne<{ 
          id: number, 
          organization_id: number, 
          first_name: string,
          last_name: string,
          email: string,
          phone: string
        }>(
          'SELECT id, organization_id, first_name, last_name, email, phone FROM users WHERE LOWER(email) = LOWER(?)',
          [decodedEmail]
        );
        
        if (userByLowercase) {
          logger.info(`Found user with case-insensitive email match: ${userByLowercase.email}`);
          // Continue with the found user
          userInfo = userByLowercase;
        } else {
          logger.error(`User not found with email (case insensitive): ${decodedEmail}`);
          set.status = 401;
          return {
            success: false,
            message: 'User not found'
          };
        }
      }
      
      const organizationId = userInfo.organization_id;
      logger.info(`Found user with organization ID: ${organizationId}`);
      
      // Get organization details
      let orgInfo;
      try {
        orgInfo = await dbInstance.fetchOne<{
          id: number,
          name: string,
          onboarding_completed: number,
          website: string,
          phone: string,
          primary_color: string,
          secondary_color: string,
          logo_data: string | null,
          org_settings: string | null,
          payment_completed: number,
          stripe_customer_id: string | null,
          stripe_subscription_id: string | null
        }>(
          `SELECT id, name, onboarding_completed, website, phone, 
           primary_color, secondary_color, logo_data, org_settings,
           payment_completed, stripe_customer_id, stripe_subscription_id
           FROM organizations WHERE id = ?`,
          [organizationId]
        );
        
        logger.info(`Organization query result: ${orgInfo ? 'Found' : 'Not found'}`);
        
        if (!orgInfo) {
          logger.warn(`Organization with ID ${organizationId} not found`);
          set.status = 404;
          return {
            success: false,
            message: 'Organization not found'
          };
        }
      } catch (error) {
        logger.error(`Error retrieving organization with ID ${organizationId}: ${error}`);
        set.status = 500;
        return {
          success: false,
          message: 'Error retrieving organization'
        };
      }
      
      // Check if onboarding is already completed
      if (orgInfo.onboarding_completed === 1) {
        set.status = 200;
        return {
          success: true,
          onboardingComplete: true,
          redirectToLogin: true
        };
      }
      
      // Get all agents/users for this organization
      const agents = await dbInstance.query<{
        id: number,
        first_name: string,
        last_name: string,
        email: string,
        phone: string,
        is_admin: number
      }>(
        `SELECT id, first_name, last_name, email, phone, is_admin 
         FROM users WHERE organization_id = ?`,
        [organizationId]
      );
      
      // Parse org settings if exists
      let orgSettings = {};
      if (orgInfo.org_settings) {
        try {
          orgSettings = JSON.parse(orgInfo.org_settings);
        } catch (e) {
          logger.warn(`Could not parse org_settings for org ${organizationId}: ${e}`);
        }
      }
      
      // Check if payment fields exist in orgInfo to prevent errors
      logger.info(`Payment data: completed=${orgInfo.payment_completed !== undefined}, customerID=${orgInfo.stripe_customer_id !== undefined}, subscriptionID=${orgInfo.stripe_subscription_id !== undefined}`);
      
      // Construct response data
      set.status = 200;
      return {
        success: true,
        onboardingComplete: false,
        organization: {
          id: orgInfo.id,
          name: orgInfo.name,
          website: orgInfo.website || '',
          phone: orgInfo.phone || '',
          primaryColor: orgInfo.primary_color || '#6B46C1',
          secondaryColor: orgInfo.secondary_color || '#9F7AEA',
          logo: orgInfo.logo_data || null
        },
        user: {
          id: userInfo.id,
          firstName: userInfo.first_name,
          lastName: userInfo.last_name,
          email: userInfo.email,
          phone: userInfo.phone || ''
        },
        agents: agents.map(agent => ({
          firstName: agent.first_name,
          lastName: agent.last_name,
          email: agent.email,
          phone: agent.phone || '',
          isAdmin: agent.is_admin === 1
        })),
        carrierSettings: {
          selectedCarriers: (orgSettings as any)?.carrierContracts || [],
          useSmartSend: (orgSettings as any)?.smartSendEnabled || true
        },
        paymentStatus: {
          paymentCompleted: orgInfo.payment_completed === 1,
          stripeCustomerId: orgInfo.stripe_customer_id || null,
          stripeSubscriptionId: orgInfo.stripe_subscription_id || null
        }
      };
      
    } catch (error) {
      logger.error(`Error resuming onboarding: ${error}`);
      set.status = 500;
      return {
        success: false,
        message: 'Failed to resume onboarding'
      };
    }
  };

  const app = new Elysia()
    // Register the resume endpoint with the correct path - bypass auth
    .get('/api/onboarding/resume', (context) => {
      // Explicitly set the status to 200
      context.set.status = 200;
      return resumeHandler(context);
    })
    
    // Create a Stripe checkout session
    .post('/api/create-checkout-session', async ({ body, set }) => {
      try {
        const { priceId, meteredPriceId, customerEmail, customerName } = body as { 
          priceId: string, 
          meteredPriceId?: string,
          customerEmail?: string,
          customerName?: string
        }
        
        if (!priceId) {
          set.status = 400
          return {
            success: false,
            message: 'Price ID is required'
          }
        }
        
        // Decode the email address if it exists and contains encoded characters
        let decodedEmail: string | undefined;
        if (customerEmail) {
          try {
            // Check if the email contains encoded characters
            if (customerEmail.includes('%')) {
              decodedEmail = decodeURIComponent(customerEmail);
            } else {
              decodedEmail = customerEmail;
            }
            logger.info(`Decoded email from ${customerEmail} to ${decodedEmail}`);
          } catch (error) {
            logger.warn(`Failed to decode email: ${customerEmail}. Using as-is.`);
            decodedEmail = customerEmail;
          }
        }
        
        logger.info(`Creating checkout session for base price: ${priceId}, metered price: ${meteredPriceId || 'none'}, customer: ${decodedEmail || 'anonymous'}`);
        
        // Build line items array for the checkout session
        const lineItems: any[] = [
          {
            price: priceId,
            //quantity: 1, // Required for regular subscription
          }
        ];
        
        // Add metered price if provided, WITHOUT a quantity (Stripe doesn't want quantity for metered prices)
        if (meteredPriceId) {
          lineItems.push({
            price: meteredPriceId,
            // No quantity for metered prices
          });
        }
        
        logger.info(`Creating checkout session with line items: ${JSON.stringify(lineItems)}`);
        
        // Create the session
        const session = await stripe.checkout.sessions.create({
          ui_mode: 'embedded',
          line_items: lineItems,
          mode: 'subscription',
          redirect_on_completion: 'never',
          automatic_tax: { enabled: true },
          ...(decodedEmail ? { customer_email: decodedEmail } : {})
        })
        
        set.status = 200;
        return {
          success: true,
          clientSecret: session.client_secret
        }
      } catch (error) {
        logger.error(`Error creating checkout session: ${error}`)
        set.status = 500
        return {
          success: false,
          message: 'Failed to create checkout session'
        }
      }
    })
    
    // Get session status
    .get('/api/session-status', async ({ query, set }) => {
      try {
        const { session_id } = query as { session_id: string }
        
        if (!session_id) {
          logger.error('No session ID provided in status request');
          set.status = 400
          return {
            success: false,
            message: 'Session ID is required'
          }
        }
        
        logger.info(`Checking status for session ID: ${session_id}`);
        const session = await stripe.checkout.sessions.retrieve(session_id)
        
        logger.info(`Retrieved session with status: ${session.status}, payment status: ${session.payment_status || 'unknown'}`);
        
        // If payment is complete, store the customer and subscription info in the database
        if (session.status === 'complete' && session.customer_details?.email) {
          const customerEmail = session.customer_details.email;
          // Ensure the email is decoded
          const decodedEmail = ensureEmailDecoded(customerEmail);
          const stripeCustomerId = session.customer as string;
          const stripeSubscriptionId = session.subscription as string;
          
          logger.info(`Payment completed for ${decodedEmail}, updating database records`);
          logger.info(`Customer ID: ${stripeCustomerId}, Subscription ID: ${stripeSubscriptionId}`);
          
          // Find the user by email
          const userInfo = await dbInstance.fetchOne<{ organization_id: number }>(
            'SELECT organization_id FROM users WHERE email = ?',
            [decodedEmail]
          );
          
          if (userInfo) {
            // Update the organization with payment info
            await dbInstance.execute(
              `UPDATE organizations SET 
                payment_completed = 1,
                stripe_customer_id = ?,
                stripe_subscription_id = ?
               WHERE id = ?`,
              [stripeCustomerId, stripeSubscriptionId, userInfo.organization_id]
            );
            
            logger.info(`Updated payment status for organization ID: ${userInfo.organization_id}`);
          } else {
            logger.warn(`Could not find user with email ${decodedEmail} to update payment status`);
          }
        } else if (session.status === 'open') {
          logger.info(`Session ${session_id} is still open, payment not completed yet`);
        } else {
          logger.info(`Session ${session_id} has status ${session.status}, no database update needed`);
        }
        
        return {
          success: true,
          status: session.status,
          payment_status: session.payment_status || null,
          customer_email: session.customer_details?.email || null,
          amount_total: session.amount_total,
          customer: session.customer,
          subscription: session.subscription
        }
      } catch (error) {
        logger.error(`Error checking session status: ${error}`)
        set.status = 500
        return {
          success: false,
          message: 'Failed to check session status'
        }
      }
    })
    
    // Get checkout session from client secret
    .get('/api/checkout-session', async ({ query, set }) => {
      try {
        const { clientSecret } = query as { clientSecret: string }
        
        if (!clientSecret) {
          logger.error('No client secret provided in checkout session request');
          set.status = 400
          return {
            success: false,
            message: 'Client secret is required'
          }
        }
        
        // Extract the session ID from the client secret (format: cs_<id>_secret_<secret>)
        const sessionId = clientSecret.split('_secret_')[0];
        if (!sessionId) {
          logger.error(`Could not extract session ID from client secret: ${clientSecret.substring(0, 10)}...`);
          set.status = 400;
          return {
            success: false,
            message: 'Invalid client secret format'
          };
        }
        
        logger.info(`Retrieving checkout session with ID: ${sessionId}`);
        
        // Retrieve the session from Stripe
        logger.info(`Calling Stripe API to retrieve session ${sessionId} with expanded subscription data`);
        const session = await stripe.checkout.sessions.retrieve(sessionId, {
          expand: ['subscription', 'subscription.items']
        });
        
        if (!session) {
          logger.error(`Could not find session with ID: ${sessionId}`);
          set.status = 404;
          return {
            success: false,
            message: 'Session not found'
          };
        }
        
        logger.info(`Session retrieved successfully. Status: ${session.status}, Customer: ${session.customer ? (session.customer as string).substring(0, 10) + '...' : 'none'}`);
        logger.info(`Session subscription data: ${session.subscription ? 'present' : 'missing'}`);
        
        // Get subscription item ID if it exists
        let subscriptionItemId = null;
        if (session.subscription && typeof session.subscription !== 'string') {
          const subscription = session.subscription;
          const items = subscription.items?.data || [];
          
          logger.info(`Found ${items.length} subscription items`);
          
          // Log item details for debugging
          items.forEach((item, index) => {
            logger.info(`Subscription item ${index + 1}:`);
            logger.info(`  ID: ${item.id}`);
            logger.info(`  Price: ${item.price ? item.price.id : 'unknown'}`);
            if (item.price && typeof item.price === 'object') {
              logger.info(`  Price Type: ${(item.price as any).type || 'unknown'}`);
              logger.info(`  Price Nickname: ${(item.price as any).nickname || 'unknown'}`);
            }
          });
          
          // Use a type-safe approach to identify the metered price item
          const meteredItem = items.find(item => {
            if (item.price && typeof item.price === 'object' && 'type' in item.price) {
              const priceType = (item.price as any).type;
              logger.info(`Checking item with price type: ${priceType}`);
              return priceType === 'metered';
            }
            return false;
          });
          
          if (meteredItem) {
            subscriptionItemId = meteredItem.id;
            logger.info(`Found metered subscription item: ${subscriptionItemId}`);
          } else {
            logger.info('No metered subscription item found');
            // Fallback: just use the last item if there are multiple items (often the metered item is second)
            if (items.length > 1) {
              subscriptionItemId = items[items.length - 1].id;
              logger.info(`Using last subscription item as fallback: ${subscriptionItemId}`);
            }
          }
        } else {
          logger.info(`Subscription data is not expanded or missing: ${typeof session.subscription}`);
        }
        
        const result = {
          success: true,
          customer: session.customer as string,
          subscription: session.subscription as string || null,
          subscription_item: subscriptionItemId
        };
        
        logger.info(`Returning checkout session data: ${JSON.stringify(result)}`);
        return result;
      } catch (error) {
        logger.error(`Error retrieving checkout session: ${error}`);
        set.status = 500;
        return {
          success: false,
          message: `Failed to retrieve checkout session: ${error instanceof Error ? error.message : 'Unknown error'}`
        }
      }
    })
    
    // Save company details during onboarding
    .post('/api/onboarding/company', async ({ body, set }) => {
      try {
        const { 
          email,
          companyName, 
          companyPhone, 
          companyWebsite, 
          primaryColor, 
          secondaryColor, 
          logo,
          firstName,
          lastName,
          phone
        } = body as { 
          email: string,
          companyName?: string,
          companyPhone?: string,
          companyWebsite?: string,
          primaryColor?: string,
          secondaryColor?: string,
          logo?: string,
          firstName?: string,
          lastName?: string,
          phone?: string
        };
        
        if (!email) {
          set.status = 400;
          return {
            success: false,
            message: 'Email is required'
          };
        }
        
        // Ensure email is decoded
        const decodedEmail = ensureEmailDecoded(email);
        logger.info(`Processing onboarding company update for email: ${decodedEmail}`);
        
        // Find the organization by user email
        let userInfo = await dbInstance.fetchOne<{ id: number, organization_id: number }>(
          'SELECT id, organization_id FROM users WHERE email = ?',
          [decodedEmail]
        );
        
        let organizationId;
        
        if (!userInfo) {
          // Create new organization first
          const slug = await generateUniqueSlug(dbInstance, companyName || 'New Organization');
          
          // Insert the organization
          const orgResult = await dbInstance.query<{ id: number }>(
            `INSERT INTO organizations (
              name, 
              slug,
              phone,
              website,
              primary_color,
              secondary_color,
              logo_data,
              onboarding_completed
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            RETURNING id`,
            [
              companyName || 'New Organization',
              slug,
              companyPhone || '',
              companyWebsite || '',
              primaryColor || '#6B46C1',
              secondaryColor || '#9F7AEA',
              logo || null,
              0 // Not completed yet
            ]
          );
          
          if (!orgResult || orgResult.length === 0) {
            throw new Error('Failed to create organization');
          }
          
          organizationId = orgResult[0].id;
          logger.info(`Created new organization with ID: ${organizationId}`);
          
          // Create the user with all available fields
          const userResult = await dbInstance.query<{ id: number }>(
            `INSERT INTO users (
              email,
              first_name,
              last_name,
              phone,
              organization_id,
              is_admin,
              is_agent
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
            RETURNING id`,
            [
              decodedEmail,
              firstName || '',
              lastName || '',
              phone || '',
              organizationId,
              1, // Set as admin
              1  // Set as agent
            ]
          );
          
          if (!userResult || userResult.length === 0) {
            throw new Error('Failed to create user');
          }
          
          userInfo = {
            id: userResult[0].id,
            organization_id: organizationId
          };
          
          logger.info(`Created new user (${userInfo.id}) for organization (${organizationId})`);
          
          // Set success status
          set.status = 200;
          return {
            success: true,
            message: 'Organization and user created successfully',
            organizationId,
            userId: userInfo.id
          };
        } else {
          organizationId = userInfo.organization_id;
          
          // Update existing organization
          await dbInstance.execute(
            `UPDATE organizations SET 
              name = COALESCE(?, name),
              phone = COALESCE(?, phone),
              website = COALESCE(?, website),
              primary_color = COALESCE(?, primary_color),
              secondary_color = COALESCE(?, secondary_color),
              logo_data = COALESCE(?, logo_data)
            WHERE id = ?`,
            [
              companyName,
              companyPhone,
              companyWebsite,
              primaryColor,
              secondaryColor,
              logo,
              organizationId
            ]
          );
          
          // Update existing user if we have new information
          if (firstName || lastName || phone) {
            await dbInstance.execute(
              `UPDATE users SET 
                first_name = COALESCE(?, first_name),
                last_name = COALESCE(?, last_name),
                phone = COALESCE(?, phone)
              WHERE id = ?`,
              [firstName, lastName, phone, userInfo.id]
            );
          }
          
          logger.info(`Updated existing organization: ${organizationId} and user: ${userInfo.id}`);
          
          // Set success status
          set.status = 200;
          return {
            success: true,
            message: 'Organization and user updated successfully',
            organizationId,
            userId: userInfo.id
          };
        }
        
      } catch (error) {
        logger.error(`Error in company details endpoint: ${error}`);
        set.status = 500;
        return {
          success: false,
          message: 'Failed to process company details'
        };
      }
    })
    
    // Save licensing settings during onboarding
    .post('/api/onboarding/licensing', async ({ body, set }) => {
      try {
        const { 
          email,
          selectedCarriers,
          useSmartSend
        } = body as { 
          email: string,
          selectedCarriers: string[],
          useSmartSend?: boolean
        };
        
        if (!email) {
          set.status = 400;
          return {
            success: false,
            message: 'Email is required'
          };
        }
        
        // Ensure email is decoded
        const decodedEmail = ensureEmailDecoded(email);
        logger.info(`Processing onboarding licensing for email: ${decodedEmail}`);
        
        // Find the organization by user email
        const userInfo = await dbInstance.fetchOne<{ organization_id: number }>(
          'SELECT organization_id FROM users WHERE email = ?',
          [decodedEmail]
        );
        
        if (!userInfo) {
          logger.warn(`User not found for email: ${decodedEmail}`);
          set.status = 404;
          return {
            success: false,
            message: 'User not found - please start from signup'
          };
        }
        
        const organizationId = userInfo.organization_id;
        
        // Verify organization exists
        const orgExists = await dbInstance.fetchOne<{ id: number }>(
          'SELECT id FROM organizations WHERE id = ?',
          [organizationId]
        );
        
        if (!orgExists) {
          logger.warn(`Organization ${organizationId} not found for user ${decodedEmail}`);
          set.status = 404;
          return {
            success: false,
            message: 'Organization not found - please start from signup'
          };
        }
        
        // Get current org settings if any
        const currentSettings = await dbInstance.fetchOne<{ org_settings: string | null }>(
          'SELECT org_settings FROM organizations WHERE id = ?',
          [organizationId]
        );
        
        // Parse existing settings or create empty object
        let settings = {};
        if (currentSettings?.org_settings) {
          try {
            settings = JSON.parse(currentSettings.org_settings);
          } catch (e) {
            logger.warn(`Could not parse existing org_settings for org ${organizationId}: ${e}`);
          }
        }
        
        // Update with new carrier contracts
        settings = {
          ...settings,
          carrierContracts: selectedCarriers || [],
          smartSendEnabled: useSmartSend !== undefined ? useSmartSend : ((settings as any)['smartSendEnabled'] || false)
        };
        
        // Convert back to JSON string
        const updatedSettingsJson = JSON.stringify(settings);
        
        // Update the organization
        await dbInstance.execute(
          'UPDATE organizations SET org_settings = ? WHERE id = ?',
          [updatedSettingsJson, organizationId]
        );
        
        logger.info(`Updated licensing settings for organization ID: ${organizationId}`);
        
        set.status = 200
        return {
          success: true,
          message: 'Licensing settings updated successfully'
        };
        
      } catch (error) {
        logger.error(`Error updating licensing settings: ${error}`);
        set.status = 500;
        return {
          success: false,
          message: 'Failed to update licensing settings'
        };
      }
    })
    
    // Save agents during onboarding
    .post('/api/onboarding/agents', async ({ body, set }) => {
      try {
        const { 
          email,
          agents
        } = body as { 
          email: string,
          agents: Array<{
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            isAdmin: boolean;
          }>;
        };
        
        if (!email) {
          set.status = 400;
          return {
            success: false,
            message: 'Email is required'
          };
        }
        
        // Ensure owner email is decoded
        const decodedOwnerEmail = ensureEmailDecoded(email);
        logger.info(`Processing onboarding agents for owner email: ${decodedOwnerEmail}`);
        
        // Find the organization by user email
        const userInfo = await dbInstance.fetchOne<{ organization_id: number }>(
          'SELECT organization_id FROM users WHERE email = ?',
          [decodedOwnerEmail]
        );
        
        if (!userInfo) {
          logger.warn(`User not found for email: ${decodedOwnerEmail}`);
          set.status = 404;
          return {
            success: false,
            message: 'User not found - please start from signup'
          };
        }
        
        const organizationId = userInfo.organization_id;
        
        // Verify organization exists
        const orgExists = await dbInstance.fetchOne<{ id: number }>(
          'SELECT id FROM organizations WHERE id = ?',
          [organizationId]
        );
        
        if (!orgExists) {
          logger.warn(`Organization ${organizationId} not found for user ${decodedOwnerEmail}`);
          set.status = 404;
          return {
            success: false,
            message: 'Organization not found - please start from signup'
          };
        }
        
        // Process each agent
        let createdCount = 0;
        let skippedCount = 0;
        
        for (const agent of agents) {
          // Ensure agent email is decoded
          const decodedAgentEmail = ensureEmailDecoded(agent.email);
          
          // Skip if this is the owner (already in the database)
          if (decodedAgentEmail.toLowerCase() === decodedOwnerEmail.toLowerCase()) {
            skippedCount++;
            continue;
          }
          
          // Check if this email already exists
          const existingAgent = await dbInstance.fetchOne<{ count: number }>(
            'SELECT COUNT(*) as count FROM users WHERE LOWER(email) = LOWER(?)',
            [decodedAgentEmail]
          );
          
          if (existingAgent && existingAgent.count > 0) {
            skippedCount++;
            continue;
          }
          
          // Create the new user with decoded email
          await dbInstance.execute(
            `INSERT INTO users (
              first_name, 
              last_name, 
              email, 
              phone, 
              is_admin, 
              is_agent, 
              organization_id
            ) VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              agent.firstName,
              agent.lastName,
              decodedAgentEmail,
              agent.phone || '',
              agent.isAdmin ? 1 : 0,
              1, // All users in this context are agents
              organizationId
            ]
          );
          
          createdCount++;
        }
        
        // Mark onboarding as complete since this is the final step
        await dbInstance.execute(
          'UPDATE organizations SET onboarding_completed = 1 WHERE id = ?',
          [organizationId]
        );
        
        logger.info(`Created ${createdCount} agents, skipped ${skippedCount}, and marked onboarding as complete for organization ID: ${organizationId}`);
        
        return {
          success: true,
          message: `Successfully added ${createdCount} agents and completed onboarding`,
          created: createdCount,
          skipped: skippedCount
        };
        
      } catch (error) {
        logger.error(`Error adding agents: ${error}`);
        set.status = 500;
        return {
          success: false,
          message: 'Failed to add agents'
        };
      }
    })
    
    // Simplified checkout endpoint that creates the account
    .post('/api/subscription/checkout', async ({ body, set }) => {
      try {
        logger.info(`Processing account creation request: ${JSON.stringify(body)}`);
        const { firstName, lastName, email, tierId = 'basic', 
                companyName, companyPhone, companyWebsite, 
                primaryColor, secondaryColor, logo } = body as { 
          firstName: string, 
          lastName: string, 
          email: string,
          tierId?: string,
          companyName?: string,
          companyPhone?: string,
          companyWebsite?: string,
          primaryColor?: string,
          secondaryColor?: string,
          logo?: string
        };
        
        logger.info(`User info: ${firstName} ${lastName} (${email})`);
        
        if (!firstName || !lastName || !email) {
          logger.warn(`Missing required user information. Received: firstName=${!!firstName}, lastName=${!!lastName}, email=${!!email}`);
          set.status = 400;
          return { 
            success: false,
            message: 'Missing required user information'
          };
        }
        
        // Check if email already exists
        const existingUser = await dbInstance.query<{ id: number, organization_id: number, count: number }>(
          'SELECT id, organization_id, COUNT(*) as count FROM users WHERE LOWER(email) = LOWER(?)',
          [email]
        );
        
        let organizationId;
        
        if (existingUser[0]?.count > 0) {
          // User exists, check if their organization has completed onboarding
          const orgInfo = await dbInstance.query<{ onboarding_completed: number }>(
            'SELECT onboarding_completed FROM organizations WHERE id = ?',
            [existingUser[0].organization_id]
          );
          
          if (orgInfo[0]?.onboarding_completed === 1) {
            logger.warn(`Email ${email} is already registered with completed onboarding`);
            set.status = 400;
            return { 
              success: false, 
              message: 'This email address is already registered with completed onboarding'
            };
          }
          
          // Use the existing organization if onboarding is not complete
          logger.info(`Found existing organization ${existingUser[0].organization_id} with incomplete onboarding`);
          organizationId = existingUser[0].organization_id;
          
          // Update organization details if provided
          if (companyName || companyPhone || companyWebsite || primaryColor || secondaryColor || logo) {
            const updates = [];
            const params = [];
            
            if (companyName) {
              updates.push('name = ?');
              params.push(companyName);
            }
            
            if (companyPhone) {
              updates.push('phone = ?');
              params.push(companyPhone);
            }
            
            if (companyWebsite) {
              updates.push('website = ?');
              params.push(companyWebsite);
            }
            
            if (primaryColor) {
              updates.push('primary_color = ?');
              params.push(primaryColor);
            }
            
            if (secondaryColor) {
              updates.push('secondary_color = ?');
              params.push(secondaryColor);
            }
            
            if (logo) {
              updates.push('logo_data = ?');
              params.push(logo);
            }
            
            if (updates.length > 0) {
              params.push(organizationId);
              await dbInstance.execute(
                `UPDATE organizations SET ${updates.join(', ')} WHERE id = ?`,
                params
              );
              logger.info(`Updated organization details for ID: ${organizationId}`);
            }
          }
        } else {
          // Create new organization for new user
          // Generate a unique slug from the name
          const organizationName = companyName || `${firstName}'s Organization`;
          const slug = await generateUniqueSlug(dbInstance, organizationName);
          
          logger.info(`Generated organization name: "${organizationName}" and slug: "${slug}"`);
          
          // Create new organization with optional fields if provided
          const orgFields = ['name', 'slug'];
          const orgValues = [organizationName, slug];
          const orgPlaceholders = ['?', '?'];
          
          if (companyPhone) {
            orgFields.push('phone');
            orgValues.push(companyPhone);
            orgPlaceholders.push('?');
          }
          
          if (companyWebsite) {
            orgFields.push('website');
            orgValues.push(companyWebsite);
            orgPlaceholders.push('?');
          }
          
          if (primaryColor) {
            orgFields.push('primary_color');
            orgValues.push(primaryColor);
            orgPlaceholders.push('?');
          }
          
          if (secondaryColor) {
            orgFields.push('secondary_color');
            orgValues.push(secondaryColor);
            orgPlaceholders.push('?');
          }
          
          if (logo) {
            orgFields.push('logo_data');
            orgValues.push(logo);
            orgPlaceholders.push('?');
          }
          
          const result = await dbInstance.query<{ id: number }>(
            `INSERT INTO organizations (${orgFields.join(', ')}) VALUES (${orgPlaceholders.join(', ')})`,
            orgValues
          );
          
          if (result.length > 0) {
            organizationId = result[0].id;
          } else {
            throw new Error('Failed to create organization');
          }
        }
        
        // Create new user
        const resultUser = await dbInstance.query<{ id: number }>(
          'INSERT INTO users (firstName, lastName, email, organization_id) VALUES (?, ?, ?, ?)',
          [firstName, lastName, email, organizationId]
        );
        
        if (resultUser.length > 0) {
          logger.info(`User ${firstName} ${lastName} (${email}) successfully created`);
          set.status = 200;
          return {
            success: true,
            message: 'Account created successfully'
          };
        } else {
          throw new Error('Failed to create user');
        }
      } catch (error) {
        logger.error(`Error processing account creation: ${error}`)
        set.status = 500
        return {
          success: false,
          message: 'Failed to process account creation'
        }
      }
    })

    // Debug endpoint to list users (development only)
    .get('/api/debug/users', async ({ set }) => {
      // Only allow in development environment
      if (process.env.NODE_ENV === 'production') {
        set.status = 404;
        return { error: 'Not found' };
      }
      
      try {
        logger.info('Debug endpoint called to list users');
        
        // Get all users with email addresses
        const users = await dbInstance.query<{ id: number, email: string }>(
          'SELECT id, email FROM users LIMIT 50'
        );
        
        logger.info(`Found ${users.length} users in the database`);
        
        // Map the results to include both the raw and decoded email
        const mappedUsers = users.map(user => {
          let decodedEmail;
          try {
            decodedEmail = user.email.includes('%') 
              ? decodeURIComponent(user.email) 
              : user.email;
          } catch (e: unknown) {
            decodedEmail = `[Decode error: ${e instanceof Error ? e.message : String(e)}]`;
          }
          
          return {
            id: user.id,
            email: user.email,
            decodedEmail: decodedEmail
          };
        });
        
        return mappedUsers;
      } catch (error) {
        logger.error(`Error in debug endpoint: ${error}`);
        set.status = 500;
        return { error: String(error) };
      }
    })

    // Debug endpoint to list and fix encoded emails (development only)
    .get('/api/debug/fix-emails', async ({ set }) => {
      // Only allow in development environment
      if (process.env.NODE_ENV === 'production') {
        set.status = 404;
        return { error: 'Not found' };
      }
      
      try {
        logger.info('Debug endpoint called to list and fix encoded emails');
        
        // Get all users with potentially encoded emails
        const users = await dbInstance.query<{ id: number, email: string }>(
          "SELECT id, email FROM users WHERE email LIKE '%\%%'"
        );
        
        logger.info(`Found ${users.length} users with potentially encoded emails`);
        
        // Process each user email
        const results = [];
        for (const user of users) {
          try {
            const originalEmail = user.email;
            const decodedEmail = ensureEmailDecoded(originalEmail);
            
            // Only update if there's a change
            if (decodedEmail !== originalEmail) {
              // Update the email in the database
              await dbInstance.execute(
                'UPDATE users SET email = ? WHERE id = ?',
                [decodedEmail, user.id]
              );
              
              results.push({
                id: user.id,
                originalEmail,
                fixedEmail: decodedEmail,
                status: 'fixed'
              });
              
              logger.info(`Fixed encoded email: ${originalEmail} -> ${decodedEmail} for user ID ${user.id}`);
            } else {
              results.push({
                id: user.id,
                email: originalEmail,
                status: 'no change needed'
              });
            }
          } catch (error) {
            results.push({
              id: user.id,
              email: user.email,
              status: 'error',
              message: String(error)
            });
            logger.error(`Error fixing email for user ${user.id}: ${error}`);
          }
        }
        
        return {
          success: true,
          processed: users.length,
          results
        };
      } catch (error) {
        logger.error(`Error in debug endpoint: ${error}`);
        set.status = 500;
        return { 
          success: false, 
          error: String(error)
        };
      }
    })

    // Debug endpoint to check a specific email (development only)
    .get('/api/debug/check-email', async ({ query, set }) => {
      // Only allow in development environment
      if (process.env.NODE_ENV === 'production') {
        set.status = 404;
        return { error: 'Not found' };
      }
      
      try {
        const { email } = query as { email: string };
        if (!email) {
          set.status = 400;
          return { error: 'Email parameter is required' };
        }
        
        const decodedEmail = ensureEmailDecoded(email);
        logger.info(`Debug endpoint checking email: ${email} -> ${decodedEmail}`);
        
        // Try various methods to find the user
        const exactMatch = await dbInstance.query<{ id: number, email: string }>(
          'SELECT id, email FROM users WHERE email = ?',
          [decodedEmail]
        );
        
        const lowercaseMatch = await dbInstance.query<{ id: number, email: string }>(
          'SELECT id, email FROM users WHERE LOWER(email) = LOWER(?)',
          [decodedEmail]
        );
        
        const likeMatch = await dbInstance.query<{ id: number, email: string }>(
          'SELECT id, email FROM users WHERE email LIKE ?',
          [`%${decodedEmail.split('@')[0]}%`]
        );
        
        // List all users for reference (limited to first 10)
        const allUsers = await dbInstance.query<{ id: number, email: string }>(
          'SELECT id, email FROM users LIMIT 10'
        );
        
        return {
          searchEmail: email,
          decodedEmail: decodedEmail,
          exactMatch: exactMatch.length > 0 ? exactMatch : null,
          lowercaseMatch: lowercaseMatch.length > 0 ? lowercaseMatch : null,
          likeMatch: likeMatch.length > 0 ? likeMatch : null,
          allUsers: allUsers
        };
      } catch (error) {
        logger.error(`Error in email debug endpoint: ${error}`);
        set.status = 500;
        return { error: String(error) };
      }
    })

    // Debug endpoint to test the resume data for a specific organization ID
    .get('/api/debug/test-resume', async ({ query, set }) => {
      // Only allow in development environment
      if (process.env.NODE_ENV === 'production') {
        set.status = 404;
        return { error: 'Not found' };
      }
      
      try {
        const { orgId } = query as { orgId: string };
        if (!orgId) {
          set.status = 400;
          return { error: 'orgId parameter is required' };
        }
        
        const organizationId = parseInt(orgId, 10);
        logger.info(`Debug endpoint testing resume data for organization ID: ${organizationId}`);
        
        // Get organization details directly by ID
        const orgInfo = await dbInstance.fetchOne<{
          id: number,
          name: string,
          onboarding_completed: number,
          website: string,
          phone: string,
          primary_color: string,
          secondary_color: string,
          logo_data: string | null,
          org_settings: string | null,
          payment_completed: number,
          stripe_customer_id: string | null,
          stripe_subscription_id: string | null
        }>(
          `SELECT id, name, onboarding_completed, website, phone, 
           primary_color, secondary_color, logo_data, org_settings,
           payment_completed, stripe_customer_id, stripe_subscription_id
           FROM organizations WHERE id = ?`,
          [organizationId]
        );
        
        if (!orgInfo) {
          set.status = 404;
          return { error: `Organization ID ${organizationId} not found` };
        }
        
        // Get a user from this organization (first one found)
        const userInfo = await dbInstance.fetchOne<{ 
          id: number, 
          first_name: string,
          last_name: string,
          email: string,
          phone: string
        }>(
          'SELECT id, first_name, last_name, email, phone FROM users WHERE organization_id = ? LIMIT 1',
          [organizationId]
        );
        
        if (!userInfo) {
          return {
            organization: orgInfo,
            error: 'No users found for this organization'
          };
        }
        
        // Get all agents/users for this organization
        const agents = await dbInstance.query<{
          id: number,
          first_name: string,
          last_name: string,
          email: string,
          phone: string,
          is_admin: number
        }>(
          `SELECT id, first_name, last_name, email, phone, is_admin 
           FROM users WHERE organization_id = ?`,
          [organizationId]
        );
        
        // Parse org settings if exists
        let orgSettings = {};
        if (orgInfo.org_settings) {
          try {
            orgSettings = JSON.parse(orgInfo.org_settings);
          } catch (e) {
            logger.warn(`Could not parse org_settings for org ${organizationId}: ${e}`);
          }
        }
        
        // Format the response in the same way as the resume endpoint
        return {
          success: true,
          onboardingComplete: orgInfo.onboarding_completed === 1,
          organization: {
            id: orgInfo.id,
            name: orgInfo.name,
            website: orgInfo.website || '',
            phone: orgInfo.phone || '',
            primaryColor: orgInfo.primary_color || '#6B46C1',
            secondaryColor: orgInfo.secondary_color || '#9F7AEA',
            logo: orgInfo.logo_data || null
          },
          user: {
            id: userInfo.id,
            firstName: userInfo.first_name,
            lastName: userInfo.last_name,
            email: userInfo.email,
            phone: userInfo.phone || ''
          },
          agents: agents.map(agent => ({
            firstName: agent.first_name,
            lastName: agent.last_name,
            email: agent.email,
            phone: agent.phone || '',
            isAdmin: agent.is_admin === 1
          })),
          carrierSettings: {
            selectedCarriers: (orgSettings as any)?.carrierContracts || [],
            useSmartSend: (orgSettings as any)?.smartSendEnabled || true
          },
          paymentStatus: {
            paymentCompleted: orgInfo.payment_completed === 1,
            stripeCustomerId: orgInfo.stripe_customer_id || null,
            stripeSubscriptionId: orgInfo.stripe_subscription_id || null
          },
          // Include the raw data for debugging
          raw: {
            orgInfo,
            userInfo,
            orgSettings
          }
        };
      } catch (error) {
        logger.error(`Error in resume test endpoint: ${error}`);
        set.status = 500;
        return { error: String(error) };
      }
    })

  // Ensure we're properly registering all routes with explicit paths
  logger.info(`Registered routes: ${app.routes.map(r => r.path).join(', ')}`);
  
  return app;
}

================
File: backend/src/routes/organizations.ts
================
import { Elysia } from 'elysia';
import { Database } from '../database';
import { TursoService } from '../services/turso';
import { z } from 'zod';
import { sendMagicLink } from '../services/email';
import { generateToken, getUserFromSession } from '../services/auth';
import { logger } from '../logger';
import { AuthService } from '../services/auth';
import { config } from '../config';
import sgMail from '@sendgrid/mail';
import { cookie } from '@elysiajs/cookie';

// Update the validation schema to include slug rules
const signupSchema = z.object({
  organizationName: z.string()
    .min(1, "Organization name is required")
    .max(100, "Organization name must be less than 100 characters")
    .regex(/^[a-zA-Z0-9\s\-_.]+$/, "Organization name can only contain letters, numbers, spaces, hyphens, dots, and underscores"),
  adminFirstName: z.string().min(1, "First name is required"),
  adminLastName: z.string().min(1, "Last name is required"),
  adminEmail: z.string().email("Invalid email address"),
  phone: z.string().optional(),
  planType: z.string().optional(),
});

// Helper function to ensure emails are properly decoded before storing in the database
function ensureEmailDecoded(email: string): string {
  try {
    // First check if email contains encoded characters
    if (email.includes('%')) {
      const decoded = decodeURIComponent(email);
      // Check if decoding made a difference
      if (decoded !== email) {
        logger.info(`Decoded email from ${email} to ${decoded}`);
        return decoded;
      }
    }
    return email;
  } catch (error) {
    logger.warn(`Error decoding email ${email}: ${error}`);
    return email; // Return original if decoding fails
  }
}

// Enhanced slug generation with uniqueness check
async function generateUniqueSlug(db: Database, name: string): Promise<string> {
  let slug = name
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9]+/g, '-') // Replace non-alphanumeric chars with hyphens
    .replace(/^-+|-+$/g, '') // Remove leading/trailing hyphens
    .substring(0, 50); // Limit length

  // Check if slug exists
  let counter = 0;
  let uniqueSlug = slug;
  
  while (true) {
    const existing = await db.query<{ count: number }>(
      'SELECT COUNT(*) as count FROM organizations WHERE slug = ?',
      [uniqueSlug]
    );

    if (existing[0]?.count === 0) {
      break;
    }

    counter++;
    uniqueSlug = `${slug}-${counter}`;
  }

  return uniqueSlug;
}

// Add this function to handle the mapping from old tier to new contact-based tier
function mapLegacyTierToContactTier(tierId: string): number {
  // Extract tier number from ID if format is "tier-X"
  if (tierId.startsWith('tier-')) {
    const tierNumber = parseInt(tierId.substring(5), 10);
    if (!isNaN(tierNumber)) {
      return tierNumber;
    }
  }
  
  // Handle legacy tiers
  switch (tierId) {
    case 'basic':
      return 1; // 500 contacts
    case 'pro':
      return 2; // 1000 contacts
    case 'enterprise':
      return 5; // 2500 contacts
    default:
      return 1; // Default to Tier 1
  }
}

// Add this function to calculate the agent limit based on contact tier
function getAgentLimitForContactTier(contactTier: number): number {
  switch (contactTier) {
    case 1: return 5;    // 500 contacts
    case 2: return 10;   // 1,000 contacts
    case 5: return 25;   // 2,500 contacts
    case 10: return 50;  // 5,000 contacts
    case 20: return 100; // 10,000 contacts
    case 50: return 200; // 25,000 contacts
    case 100: return 300; // 50,000 contacts
    case 200: return 500; // 100,000 contacts
    default:
      // Formula for tiers not explicitly defined
      if (contactTier <= 0) return 5;
      if (contactTier <= 10) return contactTier * 5;
      if (contactTier <= 50) return contactTier * 4;
      if (contactTier <= 100) return contactTier * 3;
      return contactTier * 2.5; // For very high tiers
  }
}

export const organizationRoutes = new Elysia({ prefix: '/api' })
  .post('/organizations/signup', async ({ body, set }) => {
    const db = new Database();
    const turso = new TursoService();
    const auth = new AuthService();

    try {
      logger.info(`Attempting to create organization with data: ${JSON.stringify(body)}`);
      const data = signupSchema.parse(body);
      
      // Decode email to ensure it's stored properly
      const decodedEmail = ensureEmailDecoded(data.adminEmail);
      
      // Generate unique slug
      const slug = await generateUniqueSlug(db, data.organizationName);
      logger.info(`Generated unique slug: ${slug}`);
      
      // Check if email is already registered in any organization
      const existingUser = await db.query<{ count: number }>(
        'SELECT COUNT(*) as count FROM users WHERE LOWER(email) = LOWER(?)',
        [decodedEmail]
      );

      logger.info(`Existing user check result: ${JSON.stringify(existingUser)}`);

      if (existingUser[0]?.count > 0) {
        logger.warn(`Email ${decodedEmail} is already registered`);
        set.status = 400;
        return {
          success: false,
          message: 'This email address is already registered. Please use a different email or contact support.'
        };
      }

      // Check if organization name or slug is taken
      const existingOrg = await db.query<{ count: number }>(
        'SELECT COUNT(*) as count FROM organizations WHERE name = ? OR slug = ?',
        [data.organizationName, slug]
      );

      logger.info(`Existing org check result: ${JSON.stringify(existingOrg)}`);

      if (existingOrg[0]?.count > 0) {
        logger.warn(`Organization name ${data.organizationName} or slug ${slug} is already taken`);
        set.status = 400;
        return {
          success: false,
          message: 'Organization name is already taken'
        };
      }

      // Wrap all database operations in a transaction
      const orgId = await db.transaction('write', async (transactionDb) => {
        // Create organization
        logger.info('Creating organization');
        const org = await transactionDb.execute(
          `INSERT INTO organizations (
            name,
            slug,
            subscription_tier,
            agent_limit,
            contact_limit
          ) VALUES (?, ?, 'basic', 5, 100) RETURNING id`,
          [data.organizationName, slug]
        );

        const orgId = org.rows?.[0]?.id;
        if (!orgId) {
          throw new Error('Failed to create organization');
        }

        logger.info(`Organization created with ID: ${orgId}`);

        // Create inactive admin user
        logger.info('Creating admin user');
        await transactionDb.execute(
          `INSERT INTO users (
            email,
            organization_id,
            is_admin,
            is_agent,
            is_active,
            first_name,
            last_name,
            created_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            decodedEmail,
            orgId,
            1, // is_admin
            1, // is_agent - Set to 1 for basic tier since admin is also an agent
            1, // is_active
            data.adminFirstName,
            data.adminLastName,
            new Date().toISOString()
          ]
        );

        return orgId;
      });

      // Return success response without sending magic link
      set.status = 201;
      return { 
        success: true,
        message: 'Organization created successfully',
        slug: slug
      };

    } catch (error) {
      logger.error(`Organization creation error: ${error}`);
      set.status = 400;
      return {
        success: false,
        message: error instanceof z.ZodError 
          ? error.errors.map(e => e.message).join(', ')
          : 'Failed to create organization. Please try again.'
      };
    }
  })
  .get('/organizations/check-name/:name', async ({ params, set }) => {
    const db = new Database();

    try {
      const decodedName = decodeURIComponent(params.name);
      const potentialSlug = decodedName
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/^-+|-+$/g, '');

      const existingOrg = await db.query<{ count: number }>(
        'SELECT COUNT(*) as count FROM organizations WHERE name = ? OR slug = ?',
        [decodedName, potentialSlug]
      );

      const count = existingOrg[0]?.count || 0;

      if (count > 0) {
        return {
          available: false,
          message: 'Organization name is already taken'
        };
      }

      // Validate name format
      if (!/^[a-zA-Z0-9\s\-_.]+$/.test(decodedName)) {
        return {
          available: false,
          message: 'Organization name can only contain letters, numbers, spaces, hyphens, dots, and underscores'
        };
      }

      return {
        available: true,
        message: 'Organization name is available'
      };

    } catch (error) {
      logger.error(`Error checking organization name: ${error}`);
      set.status = 500;
      return {
        available: false,
        message: 'Failed to check organization name'
      };
    }
  })
  .get('/organizations/check-email/:email', async ({ params, set }) => {
    const db = new Database();

    try {
      const decodedEmailParam = decodeURIComponent(params.email);
      // Ensure the email is fully decoded
      const decodedEmail = ensureEmailDecoded(decodedEmailParam);
      
      logger.info(`Checking email availability for: "${decodedEmail}"`);
      
      // Basic email format validation
      if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(decodedEmail)) {
        logger.info(`Email validation failed for: "${decodedEmail}"`);
        return {
          available: false,
          message: 'Invalid email format'
        };
      }

      // Use LOWER() for case-insensitive comparison to match unique constraint behavior
      logger.info(`Running SQL query: SELECT COUNT(*) as count FROM users WHERE LOWER(email) = LOWER('${decodedEmail}')`);
      const existingUser = await db.query<{ count: number }>(
        'SELECT COUNT(*) as count FROM users WHERE LOWER(email) = LOWER(?)',
        [decodedEmail]
      );

      const count = existingUser[0]?.count || 0;
      logger.info(`Email check query result count: ${count} for email: "${decodedEmail}"`);

      if (count > 0) {
        logger.info(`Email "${decodedEmail}" is already registered`);
        return {
          available: false,
          message: 'This email address is already registered'
        };
      }

      logger.info(`Email "${decodedEmail}" is available`);
      return {
        available: true,
        message: 'Email is available'
      };

    } catch (error) {
      logger.error(`Error checking email: ${error}`);
      set.status = 500;
      return {
        available: false,
        message: 'Failed to check email availability'
      };
    }
  })
  .get('/organizations/subscription-tiers', async ({ set }) => {
    try {
      // Define a broader range of contact-based pricing tiers
      const tiers = [
        {
          id: "tier-1",
          name: "Tier 1",
          price: "$60/mo",
          agentLimit: 5,
          contactLimit: 500,
          features: ["Up to 500 contacts", "Email scheduling", "CRM features", "Analytics dashboard", "5 agent accounts"]
        },
        {
          id: "tier-2",
          name: "Tier 2",
          price: "$100/mo", 
          agentLimit: 10,
          contactLimit: 1000,
          features: ["Up to 1,000 contacts", "Email scheduling", "CRM features", "Analytics dashboard", "10 agent accounts"]
        },
        {
          id: "tier-5",
          name: "Tier 5",
          price: "$220/mo",
          agentLimit: 25,
          contactLimit: 2500, 
          features: ["Up to 2,500 contacts", "Email scheduling", "CRM features", "Premium support", "25 agent accounts"]
        },
        {
          id: "tier-10",
          name: "Tier 10",
          price: "$420/mo",
          agentLimit: 50,
          contactLimit: 5000,
          features: ["Up to 5,000 contacts", "Email scheduling", "CRM features", "Premium support", "Priority service", "50 agent accounts"]
        },
        {
          id: "tier-20",
          name: "Tier 20",
          price: "$820/mo",
          agentLimit: 100,
          contactLimit: 10000,
          features: ["Up to 10,000 contacts", "Email scheduling", "CRM features", "Premium support", "Priority service", "100 agent accounts"]
        },
        {
          id: "tier-50",
          name: "Tier 50",
          price: "$2020/mo",
          agentLimit: 200,
          contactLimit: 25000,
          features: ["Up to 25,000 contacts", "Email scheduling", "CRM features", "Premium support", "Priority service", "Dedicated account manager", "200 agent accounts"]
        },
        {
          id: "tier-100",
          name: "Tier 100",
          price: "$3820/mo",
          agentLimit: 300,
          contactLimit: 50000,
          features: ["Up to 50,000 contacts", "Email scheduling", "CRM features", "Premium support", "Priority service", "Dedicated account manager", "300 agent accounts"]
        },
        {
          id: "tier-200",
          name: "Tier 200",
          price: "$7620/mo",
          agentLimit: 500,
          contactLimit: 100000,
          features: ["Up to 100,000 contacts", "Email scheduling", "CRM features", "Premium support", "Priority service", "Dedicated account manager", "Custom integrations", "500 agent accounts"]
        }
      ];

      // Add an endpoint for calculating custom tier pricing
      return { success: true, tiers };
    } catch (error) {
      logger.error(`Error fetching subscription tiers: ${error}`);
      set.status = 500;
      return { success: false, error: 'Failed to fetch subscription tiers' };
    }
  })
  .get('/organizations/:orgSlug/subscription', async ({ params, request, set }) => {
    try {
      const db = new Database();
      const orgSlug = params.orgSlug;
      
      logger.info(`GET /organizations/${orgSlug}/subscription - Request received`);
      
      // Get session cookie for debugging
      const sessionCookie = request.headers.get('cookie');
      logger.info(`Session cookie: ${sessionCookie ? 'Present' : 'Missing'}`);
      
      // Get current user from session to determine their org
      const currentUser = await getUserFromSession(request);
      logger.info(`User authentication result: ${currentUser ? `Authenticated as ${currentUser.email}` : 'Not authenticated'}`);
      
      if (!currentUser) {
        set.status = 401;
        logger.error('Subscription fetch failed: User not authenticated');
        return {
          success: false,
          error: 'You must be logged in to perform this action'
        };
      }

      // Log request information for debugging
      logger.info(`Fetching subscription - orgSlug: ${orgSlug}, userId: ${currentUser.id}, orgId: ${currentUser.organization_id}`);
      
      // Get organization details
      const orgResult = await db.query<{ 
        id: number,
        subscription_tier: string,
        agent_limit: number,
        contact_limit: number
      }>(
        'SELECT id, subscription_tier, agent_limit, contact_limit FROM organizations WHERE slug = ?',
        [orgSlug]
      );

      if (!orgResult || orgResult.length === 0) {
        set.status = 404;
        logger.error(`Subscription fetch failed: Organization not found - ${orgSlug}`);
        return {
          success: false,
          error: 'Organization not found'
        };
      }

      const organization = orgResult[0];
      
      // Verify user has permission for this org
      if (organization.id !== currentUser.organization_id) {
        logger.error(`Subscription fetch failed: Permission denied - User from org ${currentUser.organization_id} attempted to access org ${organization.id}`);
        set.status = 403;
        return {
          success: false,
          error: 'You do not have permission to view this organization'
        };
      }
      
      // Set up the response with subscription details
      const response = {
        success: true,
        tierId: organization.subscription_tier,
        agentLimit: organization.agent_limit,
        contactLimit: organization.contact_limit
      };

      logger.info(`Successfully fetched subscription for org ${organization.id}: tier=${organization.subscription_tier}, agents=${organization.agent_limit}, contacts=${organization.contact_limit}`);
      
      return response;
      
    } catch (error) {
      logger.error(`Error fetching organization subscription: ${error}`);
      set.status = 500;
      return {
        success: false,
        error: 'Failed to fetch subscription details'
      };
    }
  })
  .get('/organizations/my-subscription', async ({ request, set }) => {
    try {
      const db = new Database();
      
      logger.info('GET /organizations/my-subscription - Request received');
      
      // Get current user from session
      const currentUser = await getUserFromSession(request);
      logger.info(`User authentication result: ${currentUser ? `Authenticated as ${currentUser.email}` : 'Not authenticated'}`);
      
      if (!currentUser) {
        set.status = 401;
        logger.error('My subscription fetch failed: User not authenticated');
        return {
          success: false,
          error: 'You must be logged in to perform this action'
        };
      }

      // Get organization details using user's organization_id
      const orgResult = await db.query<{ 
        id: number,
        name: string,
        slug: string,
        subscription_tier: string,
        agent_limit: number,
        contact_limit: number,
        stripe_subscription_id: string | null
      }>(
        'SELECT id, name, slug, subscription_tier, agent_limit, contact_limit, stripe_subscription_id FROM organizations WHERE id = ?',
        [currentUser.organization_id]
      );

      if (!orgResult || orgResult.length === 0) {
        set.status = 404;
        logger.error(`My subscription fetch failed: Organization not found for user ${currentUser.id}`);
        return {
          success: false,
          error: 'Organization not found'
        };
      }

      const organization = orgResult[0];
      
      // Get subscription tier details from subscription_tiers table
      const tierResult = await db.query<{
        name: string,
        agent_limit: number,
        contact_limit: number,
        features: string
      }>(
        'SELECT name, agent_limit, contact_limit, features FROM subscription_tiers WHERE id = ?',
        [organization.subscription_tier]
      );
      
      const tier = tierResult[0] || null;
      
      // Determine subscription status based on Stripe subscription
      const subscriptionStatus = organization.stripe_subscription_id ? 'active' : 'inactive';
      
      // Set up the response with complete subscription details
      const response = {
        success: true,
        organization: {
          id: organization.id,
          name: organization.name,
          slug: organization.slug
        },
        subscription: {
          tierId: organization.subscription_tier,
          tierName: tier?.name || organization.subscription_tier,
          status: subscriptionStatus,
          agentLimit: organization.agent_limit,
          contactLimit: organization.contact_limit,
          features: tier ? JSON.parse(tier.features) : []
        }
      };

      logger.info(`Successfully fetched my subscription for org ${organization.id}: tier=${organization.subscription_tier}, agents=${organization.agent_limit}, contacts=${organization.contact_limit}`);
      
      return response;
      
    } catch (error) {
      logger.error(`Error fetching my organization subscription: ${error}`);
      set.status = 500;
      return {
        success: false,
        error: 'Failed to fetch subscription details'
      };
    }
  })
  .post('/organizations/:orgSlug/subscription', async ({ params, body, request, set }) => {
    try {
      const db = new Database();
      const orgSlug = params.orgSlug;
      
      logger.info(`POST /organizations/${orgSlug}/subscription - Request received`);
      
      // Get current user from session to determine their org
      const currentUser = await getUserFromSession(request);
      logger.info(`User authentication result: ${currentUser ? `Authenticated as ${currentUser.email}` : 'Not authenticated'}`);
      
      if (!currentUser) {
        set.status = 401;
        logger.error('Subscription update failed: User not authenticated');
        return {
          success: false,
          error: 'You must be logged in to perform this action'
        };
      }

      // Get organization details
      const orgResult = await db.query<{ 
        id: number, 
        subscription_tier: string,
        stripe_customer_id: string | null
      }>(
        'SELECT id, subscription_tier, stripe_customer_id FROM organizations WHERE slug = ?',
        [orgSlug]
      );

      if (!orgResult || orgResult.length === 0) {
        set.status = 404;
        logger.error(`Subscription update failed: Organization not found - ${orgSlug}`);
        return {
          success: false,
          error: 'Organization not found'
        };
      }

      const organization = orgResult[0];
      
      // Verify user has permission for this org
      if (organization.id !== currentUser.organization_id) {
        logger.error(`Subscription update failed: Permission denied - User from org ${currentUser.organization_id} attempted to access org ${organization.id}`);
        set.status = 403;
        return {
          success: false,
          error: 'You do not have permission to update this organization'
        };
      }

      // Extract the tier ID and additional resources from the request body
      const { tierId, extraAgents, extraContacts } = body as { 
        tierId: 'basic' | 'pro' | 'enterprise' | string,
        extraAgents: number,
        extraContacts: number
      };
      
      // Map the legacy tier to a contact-based tier
      const contactTier = mapLegacyTierToContactTier(tierId);
      const agentLimit = getAgentLimitForContactTier(contactTier);
      
      logger.info(`Updating subscription - orgId: ${organization.id}, tier: ${tierId}, contactTier: ${contactTier}, agentLimit: ${agentLimit}`);

      // Check if we need to update the Stripe subscription
      if (organization.subscription_tier !== tierId) {
        logger.info(`Organization tier is changing from ${organization.subscription_tier} to ${tierId}`);
        
        // Update Stripe subscription
        const stripe = await import('../services/stripe');
        
        try {
          // Create or update the subscription with Stripe
          await stripe.createOrUpdateSubscription({
            tierId: tierId as any, // Type cast to avoid type error with new tier IDs
            organizationId: organization.id,
            email: currentUser.email,
            extraAgents,
            extraContacts,
            stripeCustomerId: organization.stripe_customer_id || undefined,
            userId: currentUser.id.toString() // Add the userId to fix the linter error
          });
          
          logger.info(`Successfully updated Stripe subscription for organization ${organization.id}`);
        } catch (stripeError) {
          logger.error(`Error updating Stripe subscription: ${stripeError}`);
        }
      } else {
        logger.info(`Organization tier is not changing, skipping Stripe update`);
      }

      // Update the organization's subscription tier in the database
      await db.execute(
        `UPDATE organizations 
         SET subscription_tier = ?,
             agent_limit = ?,
             contact_limit = ?
         WHERE id = ?`,
        [
          tierId,
          agentLimit,
          contactTier * 500, // Contact limit is based on tier
          organization.id
        ]
      );
      
      logger.info(`Successfully updated subscription in database for organization ${organization.id}`);
      
      // Return success
      return {
        success: true,
        message: 'Subscription updated successfully'
      };
      
    } catch (error) {
      logger.error(`Error updating organization subscription: ${error}`);
      set.status = 500;
      return {
        success: false,
        error: 'Failed to update subscription'
      };
    }
  })
  // Add new endpoint to create Turso database after plan selection
  .post('/organizations/:orgSlug/setup-database', async ({ params, set }) => {
    const db = new Database();
    const turso = new TursoService();

    try {
      const orgSlug = params.orgSlug;

      // Get organization ID from slug
      const orgResult = await db.query<{ id: number, has_db: number }>(
        'SELECT id, CASE WHEN turso_db_url IS NOT NULL THEN 1 ELSE 0 END as has_db FROM organizations WHERE slug = ?',
        [orgSlug]
      );

      if (!orgResult || orgResult.length === 0) {
        set.status = 404;
        return {
          success: false,
          message: 'Organization not found'
        };
      }

      const orgId = orgResult[0].id;

      if (orgResult[0].has_db === 1) {
        set.status = 400;
        return {
          success: false,
          message: 'Organization already has a database'
        };
      }

      // Create Turso database for the organization
      const { url, token } = await turso.createOrganizationDatabase(orgId.toString());

      // Update organization with Turso database credentials and default org_signature to false
      await db.execute(
        'UPDATE organizations SET turso_db_url = ?, turso_auth_token = ?, org_signature = 0 WHERE id = ?',
        [url, token, orgId]
      );

      logger.info(`Successfully created Turso database for organization ${orgId}`);

      return {
        success: true,
        message: 'Database created successfully'
      };

    } catch (error) {
      logger.error(`Error creating database for organization ${params.orgSlug}: ${error}`);
      set.status = 500;
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      return {
        success: false,
        message: `Failed to create database: ${errorMessage}`
      };
    }
  })
  // Get organization account status
  .get('/organizations/:orgSlug/account-status', async ({ params, set, request }) => {
    try {
      const db = new Database();
      
      // Authenticate the request
      const currentUser = await getUserFromSession(request);
      if (!currentUser) {
        set.status = 401;
        return {
          success: false,
          error: 'You must be logged in to perform this action'
        };
      }
      
      // Get organization ID from slug
      const orgResult = await db.query<{ id: number }>(
        'SELECT id FROM organizations WHERE slug = ?',
        [params.orgSlug]
      );
      
      if (!orgResult || orgResult.length === 0) {
        set.status = 404;
        return {
          success: false,
          error: 'Organization not found'
        };
      }
      
      const organizationId = orgResult[0].id;
      
      // Verify user has permission to access this organization
      if (organizationId !== currentUser.organization_id) {
        set.status = 403;
        return {
          success: false,
          error: 'You do not have permission to access this organization'
        };
      }
      
      // Import the subscription service
      const { checkAccountStatus } = await import('../services/subscription');
      
      // Check account status
      const statusDetails = await checkAccountStatus(organizationId);
      
      return {
        success: true,
        status: statusDetails
      };
      
    } catch (error) {
      logger.error(`Error checking account status: ${error}`);
      set.status = 500;
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  })
  
  // Stripe webhook handler
  .post('/stripe-webhook', async ({ body, set, request }) => {
    try {
      const signature = request.headers.get('stripe-signature');
      
      if (!signature) {
        set.status = 400;
        return { success: false, error: 'Stripe signature missing' };
      }
      
      // Import Stripe to verify the webhook
      const Stripe = await import('stripe');
      const stripe = new Stripe.default(config.stripe.secretKey, {
        apiVersion: '2025-02-24.acacia',
      });
      
      const event = stripe.webhooks.constructEvent(
        JSON.stringify(body),
        signature,
        config.stripe.webhookSecret
      );
      
      // Import the Stripe service to handle the webhook
      const { handleStripeWebhook } = await import('../services/stripe');
      await handleStripeWebhook(event);
      
      logger.info(`Processed Stripe webhook: ${event.type}`);
      return { success: true };
      
    } catch (error) {
      logger.error(`Error processing Stripe webhook: ${error}`);
      set.status = 400;
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  })
  // Add interface for enterprise contact form data
  .post('/enterprise-contact', async ({ body, set, request }: { 
    body: { name: string; email: string; phone: string; company: string; companySize?: string; message?: string }, 
    set: { status: number },
    request: Request 
  }) => {
    try {
      const { name, email, phone, company, companySize, message } = body;
      
      // Validate required fields
      if (!name || !email || !phone || !company) {
        set.status = 400;
        return { success: false, error: 'Missing required fields' };
      }
      
      // Try to get user/organization info from session if available
      let orgInfo = "";
      try {
        const user = await getUserFromSession(request);
        if (user) {
          orgInfo = `
          <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #eee;">
            <p><strong>User is logged in with the following details:</strong></p>
            <p>Organization: ${user.organization_name} (ID: ${user.organization_id})</p>
            <p>User: ${user.first_name} ${user.last_name} (${user.email})</p>
          </div>`;
        }
      } catch (sessionError) {
        // Just log the error but continue - the session info is optional
        logger.warn(`Unable to get session info: ${sessionError}`);
      }
      
      // Format the email content
      const emailContent = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">New Enterprise Plan Inquiry</h2>
          
          <div style="margin: 20px 0; background-color: #f7f7f7; padding: 20px; border-radius: 5px;">
            <p><strong>Name:</strong> ${name}</p>
            <p><strong>Email:</strong> ${email}</p>
            <p><strong>Phone:</strong> ${phone}</p>
            <p><strong>Company:</strong> ${company}</p>
            <p><strong>Company Size:</strong> ${companySize || 'Not specified'}</p>
            <p><strong>Message:</strong></p>
            <p style="white-space: pre-line;">${message || 'No message provided'}</p>
          </div>
          ${orgInfo}
          <p style="color: #666; font-size: 14px;">
            This inquiry was submitted through the Enterprise Contact form on the MedicareMax portal.
          </p>
        </div>
      `;
      
      // Configure email
      const msg = {
        to: ['information@medicaremax.ai', 'reuben.brooks@medicaremax.ai'],
        from: process.env.SENDGRID_FROM_EMAIL || 'information@medicaremax.ai',
        subject: `Enterprise Plan Inquiry from ${name} at ${company}`,
        text: `New Enterprise Plan Inquiry:\n\nName: ${name}\nEmail: ${email}\nPhone: ${phone}\nCompany: ${company}\nCompany Size: ${companySize || 'Not specified'}\n\nMessage: ${message || 'No message provided'}\n\n${orgInfo ? `User is logged in from organization: ${orgInfo}` : ''}\n\nThis inquiry was submitted through the Enterprise Contact form on the MedicareMax portal.`,
        html: emailContent
      };
      
      // Send the email
      await sgMail.send(msg);
      
      // Log successful submission
      logger.info(`Enterprise plan inquiry submitted by ${name} from ${company}`);
      
      // Return success response
      return { success: true };
    } catch (error) {
      logger.error(`Error processing enterprise contact submission: ${error}`);
      set.status = 500;
      return { 
        success: false, 
        error: 'Failed to process your request. Please try again later.' 
      };
    }
  })
  // Add endpoint for enterprise inquiry during onboarding
  .post('/enterprise-inquiry', async ({ body, set, request }: { 
    body: { companyName: string; contactName: string; email: string; phone: string; message?: string }, 
    set: { status: number },
    request: Request 
  }) => {
    try {
      const { companyName, contactName, email, phone, message } = body;
      
      // Validate required fields
      if (!companyName || !contactName || !email || !phone) {
        set.status = 400;
        return { success: false, error: 'Missing required fields' };
      }
      
      // Try to get user/organization info from session if available
      let orgInfo = "";
      try {
        const user = await getUserFromSession(request);
        if (user) {
          orgInfo = `
          <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #eee;">
            <p><strong>User is logged in with the following details:</strong></p>
            <p>Organization: ${user.organization_name} (ID: ${user.organization_id})</p>
            <p>User: ${user.first_name} ${user.last_name} (${user.email})</p>
          </div>`;
        }
      } catch (sessionError) {
        // Just log the error but continue - the session info is optional
        logger.warn(`Unable to get session info: ${sessionError}`);
      }
      
      // Format the email content
      const emailContent = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">New Enterprise Plan Inquiry (Onboarding)</h2>
          
          <div style="margin: 20px 0; background-color: #f7f7f7; padding: 20px; border-radius: 5px;">
            <p><strong>Company:</strong> ${companyName}</p>
            <p><strong>Contact Name:</strong> ${contactName}</p>
            <p><strong>Email:</strong> ${email}</p>
            <p><strong>Phone:</strong> ${phone}</p>
            <p><strong>Message:</strong></p>
            <p style="white-space: pre-line;">${message || 'No message provided'}</p>
          </div>
          ${orgInfo}
          <p style="color: #666; font-size: 14px;">
            This inquiry was submitted through the Enterprise Form during the onboarding process on MedicareMax.
          </p>
        </div>
      `;
      
      // Configure email
      const msg = {
        to: ['information@medicaremax.ai', 'reuben.brooks@medicaremax.ai'],
        from: process.env.SENDGRID_FROM_EMAIL || 'information@medicaremax.ai',
        subject: `Enterprise Plan Inquiry from ${contactName} at ${companyName} (Onboarding)`,
        text: `New Enterprise Plan Inquiry (Onboarding):\n\nCompany: ${companyName}\nContact Name: ${contactName}\nEmail: ${email}\nPhone: ${phone}\n\nMessage: ${message || 'No message provided'}\n\n${orgInfo ? `User is logged in from organization: ${orgInfo}` : ''}\n\nThis inquiry was submitted through the Enterprise Form during onboarding on MedicareMax.`,
        html: emailContent
      };
      
      // Send the email
      await sgMail.send(msg);
      
      // Log successful submission
      logger.info(`Enterprise plan inquiry (onboarding) submitted by ${contactName} from ${companyName}`);
      
      // Return success response
      return { success: true };
    } catch (error) {
      logger.error(`Error processing enterprise inquiry submission: ${error}`);
      set.status = 500;
      return { success: false, error: 'Failed to process inquiry' };
    }
  })
  .post('/api/agents', async ({ body, request, set }) => {
    try {
      // Get current user from session to determine their org
      const currentUser = await getUserFromSession(request)
      if (!currentUser) {
        set.status = 401
        return {
          success: false,
          error: 'You must be logged in to perform this action'
        }
      }

      // Check if user is an admin
      if (!currentUser.is_admin) {
        set.status = 403
        return {
          success: false,
          error: 'Only administrators can create new agents'
        }
      }

      const newAgent = body as NewAgentRequest
      
      // Decode the email to ensure it's stored properly
      newAgent.email = ensureEmailDecoded(newAgent.email);
      
      logger.info(`Creating new agent: ${newAgent.email} (org: ${currentUser.organization_id})`)

      // Ensure that the new user has at least one role
      if (!newAgent.is_admin && !newAgent.is_agent) {
        logger.warn(`Agent created without any roles. Defaulting to is_agent=true for: ${newAgent.email}`)
        newAgent.is_agent = true
      }

      // ... rest of the function ...
    } catch (error) {
      logger.error(`Error creating new agent: ${error}`);
      set.status = 500;
      return {
        success: false,
        error: 'Failed to create new agent'
      };
    }
  });

export function createOrganizationRoutes() {
  const dbInstance = new Database();
  const authService = new AuthService();

  return new Elysia()
    .use(cookie())
    // Add a new endpoint for direct signup from UserDetails page
    .post('/api/organizations/signup', async ({ body, set, setCookie }) => {
      try {
        const { adminFirstName, adminLastName, adminEmail, phone, organizationName, planType } = body as {
          adminFirstName: string;
          adminLastName: string;
          adminEmail: string;
          phone?: string;
          organizationName: string;
          planType?: string;
        };

        // Decode email to ensure it's stored properly
        const decodedEmail = ensureEmailDecoded(adminEmail);

        // Validate input
        const validation = signupSchema.safeParse({
          ...body,
          adminEmail: decodedEmail // Use decoded email for validation
        });
        if (!validation.success) {
          set.status = 400;
          return {
            success: false,
            message: validation.error.errors[0].message
          };
        }

        // Check if email already exists
        const existingUser = await dbInstance.query<{ count: number }>(
          'SELECT COUNT(*) as count FROM users WHERE LOWER(email) = LOWER(?)',
          [decodedEmail]
        );

        if (existingUser[0]?.count > 0) {
          set.status = 400;
          return {
            success: false,
            message: 'This email address is already registered'
          };
        }

        // Generate a unique slug from the organization name
        const slug = await generateUniqueSlug(dbInstance, organizationName);

        // Create temporary session token
        const tempSessionId = generateToken();

        // Set session cookie for 24 hours
        setCookie('onboardingSession', tempSessionId, {
          httpOnly: true,
          maxAge: 60 * 60 * 24, // 24 hours
          path: '/'
        });

        // Set org slug cookie (not HTTP only so frontend can access it)
        setCookie('orgSlug', slug, {
          httpOnly: false,
          maxAge: 60 * 60 * 24 * 30, // 30 days
          path: '/'
        });

        // Create organization
        const orgResult = await dbInstance.execute(`
          INSERT INTO organizations (
            name, 
            subscription_tier, 
            created_at, 
            onboarding_completed, 
            slug, 
            onboarding_step,
            temp_session_id
          ) VALUES (?, ?, datetime('now'), FALSE, ?, ?, ?)`,
          [organizationName, planType || 'basic', slug, 2, tempSessionId]
        );

        const orgId = Number(orgResult.lastInsertRowid);
        logger.info(`Created organization: ${orgId} with slug: ${slug}`);

        // Create admin user with decoded email
        await dbInstance.execute(
          `INSERT INTO users (
            email, 
            first_name, 
            last_name, 
            phone, 
            is_admin, 
            is_agent, 
            organization_id, 
            created_at,
            is_active
          ) VALUES (?, ?, ?, ?, 1, 1, ?, datetime('now'), 0)`,
          [decodedEmail, adminFirstName, adminLastName, phone || '', orgId]
        );

        logger.info(`Created admin user for org ${slug} - Name: ${adminFirstName} ${adminLastName}, Email: ${decodedEmail}`);

        // Generate a magic link for verification
        const magicLink = `${config.clientUrl}/auth/verify/${slug}/${tempSessionId}`;

        // Send welcome email
        try {
          await sendMagicLink({
            email: decodedEmail,
            magicLink: magicLink,
            name: adminFirstName
          });
          logger.info(`Sent welcome email to ${decodedEmail}`);
        } catch (emailError) {
          logger.error(`Failed to send welcome email: ${emailError}`);
          // Continue even if email fails
        }

        return {
          success: true,
          message: 'Organization and admin user created successfully',
          slug: slug
        };

      } catch (error) {
        logger.error(`Error creating organization: ${error}`);
        set.status = 500;
        return {
          success: false,
          message: 'Failed to create organization'
        };
      }
    })
    
    // Add a new endpoint to check email availability
    .get('/api/organizations/check-email/:email', async ({ params, set }) => {
      try {
        const { email } = params;
        
        if (!email || !email.trim()) {
          set.status = 400;
          return {
            available: false,
            message: 'Email is required'
          };
        }
        
        // Ensure email is fully decoded
        const decodedEmail = ensureEmailDecoded(email);
        
        // Basic email format validation
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(decodedEmail)) {
          return {
            available: false,
            message: 'Invalid email format'
          };
        }
        
        // Check if email already exists
        const existingUser = await dbInstance.query<{ count: number }>(
          'SELECT COUNT(*) as count FROM users WHERE LOWER(email) = LOWER(?)',
          [decodedEmail]
        );
        
        const count = existingUser[0]?.count || 0;
        
        if (count > 0) {
          return {
            available: false,
            message: 'This email address is already registered'
          };
        }
        
        // If we get here, the email is available
        return {
          available: true,
          message: 'Email is available'
        };
        
      } catch (error) {
        logger.error(`Error checking email availability: ${error}`);
        set.status = 500;
        return {
          available: false,
          message: 'Error checking email availability'
        };
      }
    });
}

================
File: backend/src/routes/quotes.ts
================
import { Elysia } from 'elysia';
import axios from 'axios';
import { config } from '../config';
import { logger } from '../logger';
import { Database } from '../database';
import { generateQuoteId, decodeQuoteId } from '../utils/quoteId';
import { getUserFromSession } from '../services/auth';
import { readFile } from 'fs/promises';
import { join } from 'path';
import { readFileSync } from 'fs';


interface ZipInfo {
  state: string;
  counties: string[];
  // Add other ZIP info properties as needed
}


// Update ZIP_DATA declaration
let ZIP_DATA: Record<string, ZipInfo> = {}
try {
  ZIP_DATA = JSON.parse(readFileSync('../zipData.json', 'utf-8'))
} catch (e) {
  logger.error(`Error loading ZIP data: ${e}`)
}


interface Quote {
    age: number;
    gender: string;
    plan: string;
    tobacco: number;
    rate: number;
    discount_rate: number;
    discount_category: string;
}

interface QuoteResponse {
    naic: string;
    group: number;
    company_name: string;
    quotes: Quote[];
}

interface QuoteRequestBody {
    zip_code: string;
    state: string;
    age: string | number;
    tobacco: string | boolean;
    gender: string;
    county?: string;
    effective_date?: string;
}

interface QuoteRequest {
    zip_code: string;
    state: string;
    age: number;
    tobacco: boolean;
    gender: string;
    plans: string[];
    carriers: string;
    county?: string;
    effective_date?: string;
}

interface ContactQuoteInfo {
    zip_code: string;
    birth_date: string;
    age: number;
    tobacco_user: number;
    gender: string;
    email: string;
    first_name: string;
    last_name: string;
    current_carrier: string;
    phone_number: string;
    plan_type: string;
}

// Add new interface for org info response
interface OrgRedirectInfo {
    redirect_url: string | null;
    agent_name: string;
}

function calculateAgeOnFirstOfNextMonth(birthDate: string, currentDate: string): number {
    const birth = new Date(birthDate);
    const current = new Date(currentDate);
    
    // Get first day of next month
    const nextMonth = new Date(current.getFullYear(), current.getMonth() + 1, 1);
    
    // Calculate age based on year difference
    let age = nextMonth.getFullYear() - birth.getFullYear();
    
    // Adjust age if birthday hasn't occurred yet in the target month
    if (
        nextMonth.getMonth() < birth.getMonth() || 
        (nextMonth.getMonth() === birth.getMonth() && 1 < birth.getDate())
    ) {
        age--;
    }
    
    return age;
}


export const quotesRoutes = (app: Elysia) => {
    app
    .get('/api/quotes/generate/:contactId', async ({ params, request }) => {
        try {
            const user = await getUserFromSession(request);
            if (!user?.organization_id) {
                throw new Error('No organization ID found in session');
            }

            const contactId = parseInt(params.contactId);
            if (isNaN(contactId)) {
                throw new Error('Invalid contact ID');
            }

            // Get org-specific database
            const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString());
            
            // Verify contact exists and belongs to this org
            const contact = await orgDb.fetchOne(
                'SELECT id FROM contacts WHERE id = ?',
                [contactId]
            );

            if (!contact) {
                throw new Error('Contact not found');
            }

            // Generate quote ID
            const quoteId = generateQuoteId(user.organization_id, contactId);

            return {
                success: true,
                quoteId,
                redirectUrl: `${process.env.PUBLIC_URL || 'http://localhost:5173'}/quote?id=${quoteId}`
            };
        } catch (e) {
            logger.error(`Error generating quote ID: ${e}`);
            throw new Error(String(e));
        }
    })
    .get('/api/quotes/decode/:quoteId', async ({ params, set }) => {
        try {
            logger.info(`Decoding quote ID: ${params.quoteId}`);
            
            const decoded = decodeQuoteId(params.quoteId);
            if (!decoded) {
                logger.error(`Invalid quote ID format: ${params.quoteId}`);
                set.status = 400;
                return {
                    success: false,
                    error: 'Invalid quote ID format'
                };
            }
            
            logger.info(`Decoded quote ID: orgId=${decoded.orgId}, contactId=${decoded.contactId}`);

            // Get org-specific database
            logger.info(`Getting database for org: ${decoded.orgId}`);
            const orgDb = await Database.getOrInitOrgDb(decoded.orgId.toString());
            
            const mainDb = new Database();
            logger.info(`Fetching organization details for orgId: ${decoded.orgId}`);
            const result = await mainDb.fetchOne<{ slug: string, org_settings: string, name: string, logo_data: string, phone: string, redirect_url: string, org_signature: boolean, signature: string | null }>(
                'SELECT slug, org_settings, name, logo_data, phone, redirect_url, org_signature, signature FROM organizations WHERE id = ?',
                [decoded.orgId]
            );

            if (!result) {
                logger.error(`Organization not found: ${decoded.orgId}`);
                set.status = 404;
                return {
                    success: false,
                    error: 'Organization not found'
                };
            }

            const orgSlug = result.slug;
            logger.info(`Found organization: ${orgSlug} (ID: ${decoded.orgId})`);
            
            let orgSettings;
            try {
                orgSettings = JSON.parse(result.org_settings || '{}');
            } catch (e) {
                logger.warn(`Error parsing org settings for ${decoded.orgId}: ${e}`);
                orgSettings = {};
            }
            
            const carrierContracts = orgSettings?.carrierContracts || [];

            // Get signature from either orgSettings, database column, or fall back to org name
            let signature = orgSettings?.signature || result.signature || result.name;

            // First try to get the assigned agent from the contact
            const contactQuery = 'SELECT zip_code, birth_date, tobacco_user, gender, email, first_name, last_name, current_carrier, phone_number, plan_type, agent_id FROM contacts WHERE id = ?';
            const contactParams = [decoded.contactId];
            
            logger.info(`Executing contact query: ${contactQuery} with params: [${contactParams}]`);
            
            const contact = await orgDb.fetchOne<ContactQuoteInfo & { agent_id: number | null }>(contactQuery, contactParams);

            if (!contact) {
                logger.error(`Contact not found: contactId=${decoded.contactId} in orgId=${decoded.orgId}`);
                
                // Additional debugging: List all contacts in this org
                try {
                    const allContacts = await orgDb.query('SELECT id, email, first_name, last_name FROM contacts LIMIT 5');
                    logger.info(`First 5 contacts in org ${decoded.orgId}: ${JSON.stringify(allContacts)}`);
                } catch (e) {
                    logger.error(`Error listing contacts: ${e}`);
                }
                
                set.status = 404;
                return {
                    success: false,
                    error: `Contact not found: ID=${decoded.contactId}`
                };
            }

            // Get agent info - first try assigned agent, then default agent, then fall back to first user
            let agent = null;
            
            // Try assigned agent first
            if (contact.agent_id) {
                agent = await mainDb.fetchOne<{ first_name: string, last_name: string, email: string, phone: string }>(
                    'SELECT first_name, last_name, email, phone FROM users WHERE id = ?',
                    [contact.agent_id]
                );
            }
            
            // If no assigned agent, try default agent from org settings
            if (!agent) {
                const defaultAgentResult = await mainDb.fetchOne<{ default_agent_id: number }>(
                    'SELECT default_agent_id FROM organizations WHERE id = ?',
                    [decoded.orgId]
                );
                
                if (defaultAgentResult?.default_agent_id) {
                    agent = await mainDb.fetchOne<{ first_name: string, last_name: string, email: string, phone: string }>(
                        'SELECT first_name, last_name, email, phone FROM users WHERE id = ?',
                        [defaultAgentResult.default_agent_id]
                    );
                    
                    // If we found the default agent, update the contact's agent_id
                    if (agent) {
                        try {
                            await orgDb.execute(
                                'UPDATE contacts SET agent_id = ? WHERE id = ?',
                                [defaultAgentResult.default_agent_id, decoded.contactId]
                            );
                            logger.info(`Updated contact ${decoded.contactId} with default agent ${defaultAgentResult.default_agent_id}`);
                        } catch (e) {
                            logger.error(`Error updating contact's agent_id: ${e}`);
                        }
                    }
                }
            }
            
            // If still no agent, fall back to first active user
            if (!agent) {
                agent = await mainDb.fetchOne<{ first_name: string, last_name: string, email: string, phone: string }>(
                    'SELECT first_name, last_name, email, phone FROM users WHERE organization_id = ? AND is_active = 1 ORDER BY id ASC LIMIT 1',
                    [decoded.orgId]
                );
            }

            if (!agent) {
                logger.error(`No users found for organization: ${decoded.orgId}`);
                set.status = 404;
                return {
                    success: false,
                    error: 'No users found for organization'
                };
            }

            logger.info(`Found contact: ${contact.first_name} ${contact.last_name} (ID: ${decoded.contactId})`);
            
            const zipInfo = ZIP_DATA[contact.zip_code];
            const contactState = zipInfo?.state;
            
            if (!contactState) {
                logger.warn(`No state found for zip code: ${contact.zip_code}`);
            }

            const output = {
                success: true,
                orgId: decoded.orgId.toString(),
                orgSlug: orgSlug || null,
                orgName: result.name,
                orgLogo: result.logo_data || null,
                orgPhone: result.phone || null,
                orgRedirectUrl: result.redirect_url || null,
                orgSignature: Boolean(result.org_signature) || false,
                orgSignatureText: signature,
                carrierContracts: carrierContracts || null,
                agent: {
                    firstName: agent.first_name,
                    lastName: agent.last_name,
                    email: agent.email,
                    phone: agent.phone
                },
                contact: {
                    id: decoded.contactId,
                    zipCode: contact.zip_code,
                    state: contactState,
                    dateOfBirth: contact.birth_date,
                    age: calculateAgeOnFirstOfNextMonth(contact.birth_date, new Date().toISOString()),
                    tobacco: Boolean(contact.tobacco_user),
                    gender: contact.gender,
                    email: contact.email,
                    firstName: contact.first_name,
                    lastName: contact.last_name,
                    currentCarrier: contact.current_carrier,
                    planType: contact.plan_type,
                    phoneNumber: contact.phone_number
                }
            };

            logger.info(`Returning success response for quote ID: ${params.quoteId}`);
            logger.info(`Output: ${JSON.stringify(output, null, 2)}`);
            return output;
        } catch (e) {
            logger.error(`Error decoding quote ID: ${e}`);
            set.status = 500;
            return {
                success: false,
                error: String(e)
            };
        }
    })
    .post('/api/quotes', async ({ body, set }: { body: QuoteRequestBody, set: any }) => {
        try {
            // Format request body
            const requestBody: QuoteRequest = {
                zip_code: body.zip_code,
                state: body.state,
                age: Math.max(65, Math.min(110, Number(body.age))),
                tobacco: body.tobacco === 'true' || body.tobacco === true,
                gender: body.gender,
                plans: ['G', 'N'],
                carriers: 'supported',
                county: body.county
            };

            if (body.effective_date) {
                requestBody.effective_date = body.effective_date;
            }

            // Log incoming request details
            logger.info(`Incoming quote request body: ${JSON.stringify(requestBody, null, 2)}`);
            
            // Construct request config
            const quoteEngineUrl = 'https://quote-engine.replit.app/quotes/';
            const requestConfig = {
                url: quoteEngineUrl,
                method: 'POST' as const,
                headers: {
                    'X-API-Key': config.quoteApiKey,
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                data: requestBody
            };

            logger.info(`Making request to quote engine with config: ${JSON.stringify({
                url: requestConfig.url,
                method: requestConfig.method,
                headers: {
                    ...requestConfig.headers,
                    'X-API-Key': '[REDACTED]'
                }
            }, null, 2)}`);

            // Make request to quote engine API
            const response = await axios(requestConfig);
            
            logger.info(`Quote engine response status: ${response.status}`);
            logger.info(`Quote engine response headers: ${JSON.stringify(response.headers, null, 2)}`);
            logger.info(`Quote engine response data length: ${JSON.stringify(response.data).length} characters`);
            logger.info(`Quote engine response data preview: ${JSON.stringify(response.data).substring(0, 200)}...`);
            
            if (!response.data) {
                logger.error('Quote engine returned empty response data');
                set.status = 500;
                return { error: 'No quote data received from engine' };
            }

            // Return quotes from response data
            set.status = 200; // Explicitly set 200 status
            return response.data;
        } catch (error: any) {
            logger.error(`Error fetching quotes: ${error}`);
            if (axios.isAxiosError(error)) {
                logger.error(`Axios error details: ${JSON.stringify({
                    status: error.response?.status,
                    statusText: error.response?.statusText,
                    headers: error.response?.headers,
                    data: error.response?.data
                }, null, 2)}`);
            }
            set.status = error.response?.status || 500;
            throw new Error(String(error));
        }
    })
    .get('/api/contact-request/org-info/:orgId', async ({ params }) => {
        try {
            const db = new Database();
            
            // Get organization info including redirect URL and signature
            const orgResult = await db.fetchOne<{ redirect_url: string | null, name: string, signature: string | null, org_settings: string | null }>(
                'SELECT redirect_url, name, signature, org_settings FROM organizations WHERE id = ?',
                [params.orgId]
            );

            if (!orgResult) {
                throw new Error('Organization not found');
            }

            // Get org-specific database
            const orgDb = await Database.getOrInitOrgDb(params.orgId);

            // Try to get default agent (first admin or agent)
            const defaultAgent = await orgDb.fetchOne<{ first_name: string, last_name: string }>(
                `SELECT first_name, last_name 
                FROM users 
                WHERE (is_admin = 1 OR is_agent = 1) 
                AND is_active = 1 
                ORDER BY is_admin DESC, id ASC 
                LIMIT 1`
            );

            if (!defaultAgent) {
                throw new Error('No active agents or admins found');
            }

            // Parse org settings to try to get signature from there first
            let orgSettings = {};
            try {
                if (orgResult.org_settings) {
                    orgSettings = JSON.parse(orgResult.org_settings);
                }
            } catch (e) {
                logger.warn(`Error parsing org settings: ${e}`);
            }

            // Prioritize signature in this order: orgSettings, signature column, org name
            const signature = (orgSettings as any)?.signature || orgResult.signature || orgResult.name;

            return {
                success: true,
                redirect_url: orgResult.redirect_url,
                agent_name: `${defaultAgent.first_name} ${defaultAgent.last_name}`,
                org_name: orgResult.name,
                signature: signature
            };
        } catch (e) {
            logger.error(`Error getting org redirect info: ${e}`);
            throw new Error(String(e));
        }
    })
    .post('/api/contact-request', async ({ body }) => {
        try {
            const { name, email, type, quoteId } = body as { 
                name: string;
                email: string;
                type: 'accept' | 'decline' | 'generic';
                quoteId?: string;
            };

            // Get contact info from quoteId if available
            let orgId: number | undefined;
            let contactId: number | undefined;
            let agentName: string | undefined;

            if (!quoteId) {
                throw new Error('Quote ID is required');
            }

            const decoded = decodeQuoteId(quoteId);
            if (!decoded) {
                throw new Error('Invalid quote ID');
            }

            orgId = decoded.orgId;
            contactId = decoded.contactId;

            // Get org-specific database
            const orgDb = await Database.getOrInitOrgDb(orgId.toString());

            // If we have a contact ID, try to get the assigned agent's name
            if (contactId) {
                const contact = await orgDb.fetchOne<{ first_name: string, last_name: string }>(
                    `SELECT u.first_name, u.last_name 
                    FROM contacts c
                    JOIN users u ON c.agent_id = u.id
                    WHERE c.id = ? AND u.is_active = 1`,
                    [contactId]
                );
                if (contact) {
                    agentName = `${contact.first_name} ${contact.last_name}`;
                }
            }

            // If no agent assigned to contact, get default agent
            if (!agentName) {
                const defaultAgent = await orgDb.fetchOne<{ first_name: string, last_name: string }>(
                    `SELECT first_name, last_name 
                    FROM users 
                    WHERE (is_admin = 1 OR is_agent = 1) 
                    AND is_active = 1 
                    ORDER BY is_admin DESC, id ASC 
                    LIMIT 1`
                );
                if (defaultAgent) {
                    agentName = `${defaultAgent.first_name} ${defaultAgent.last_name}`;
                }
            }

            // Store request in org-specific database
            await orgDb.execute(
                `INSERT INTO contact_requests (
                    name, email, request_type, contact_id, status, agent_name, created_at
                ) VALUES (?, ?, ?, ?, 'new', ?, CURRENT_TIMESTAMP)`,
                [name, email, type, contactId || null, agentName || null]
            );

            // Get org redirect URL from central database
            const db = new Database();
            const orgResult = await db.fetchOne<{ redirect_url: string | null }>(
                'SELECT redirect_url FROM organizations WHERE id = ?',
                [orgId]
            );

            return { 
                success: true,
                redirect: orgResult?.redirect_url ? { redirect_url: orgResult.redirect_url } : null
            };
        } catch (e) {
            logger.error(`Error saving contact request: ${e}`);
            throw new Error(String(e));
        }
    })
    // Add new endpoint for zip code information
    .get('/api/zipinfo/:zipCode', async ({ params }) => {
        try {
            const { zipCode } = params;
            
            // Read the zip data file from the ROOT directory, not the backend directory
            const zipDataPath = join(process.cwd(), '..', 'zipData.json');
            logger.info(`Looking for zip data at: ${zipDataPath}`);
            const zipDataContent = await readFile(zipDataPath, 'utf-8');
            const zipData = JSON.parse(zipDataContent);
            
            // Look up the zip code
            if (zipData[zipCode]) {
                return {
                    success: true,
                    data: zipData[zipCode]
                };
            } else {
                return {
                    success: false,
                    error: 'Zip code not found'
                };
            }
        } catch (error) {
            logger.error(`Error fetching zip code info: ${error}`);
            return {
                success: false,
                error: 'Failed to fetch zip code information'
            };
        }
    })
    .get('/api/quotes/debug-generate/:orgId/:contactId', async ({ params }) => {
        try {
            logger.info(`Debug endpoint - generating quote ID for org: ${params.orgId}, contact: ${params.contactId}`);
            
            const orgId = parseInt(params.orgId);
            const contactId = parseInt(params.contactId);
            
            if (isNaN(orgId) || isNaN(contactId)) {
                return {
                    success: false,
                    error: 'Invalid organization or contact ID'
                };
            }
            
            // Get org-specific database to verify the contact exists
            const orgDb = await Database.getOrInitOrgDb(orgId.toString());
            
            // Verify contact exists
            const contact = await orgDb.fetchOne(
                'SELECT id FROM contacts WHERE id = ?',
                [contactId]
            );

            if (!contact) {
                // List first 5 contacts in this org for debugging
                const contacts = await orgDb.query('SELECT id FROM contacts LIMIT 5');
                logger.info(`Available contacts in org ${orgId}: ${JSON.stringify(contacts)}`);
                
                return {
                    success: false,
                    error: 'Contact not found',
                    availableContacts: contacts
                };
            }
            
            // Generate quote ID
            const quoteId = generateQuoteId(orgId, contactId);
            
            logger.info(`Generated debug quote ID: ${quoteId} for orgId: ${orgId}, contactId: ${contactId}`);

            return {
                success: true,
                quoteId,
                redirectUrl: `${process.env.PUBLIC_URL || 'http://localhost:5173'}/quote?id=${quoteId}`
            };
        } catch (e) {
            logger.error(`Error in debug quote generation: ${e}`);
            return {
                success: false,
                error: String(e)
            };
        }
    });

    return app;
};

================
File: backend/src/routes/schedule.ts
================
import { Elysia } from 'elysia';
import { Database } from '../database';
import { logger } from '../logger';
import { decodeQuoteId } from '../utils/quoteId';

export const scheduleRoutes = (app: Elysia) => {
    app.get('/api/schedule/info/:quoteId', async ({ params, set }) => {
        try {
            const { quoteId } = params;
            
            // Decode quote ID to get org ID and contact ID
            const decoded = decodeQuoteId(quoteId);
            if (!decoded) {
                set.status = 400;
                return {
                    success: false,
                    error: 'Invalid quote ID'
                };
            }

            const { orgId, contactId } = decoded;
            
            // Get main database instance
            const mainDb = new Database();
            
            // Get organization info including slug
            const orgResult = await mainDb.fetchOne<{ name: string, logo_data: string | null, slug: string, phone: string | null, redirect_url: string | null, org_signature: boolean }>(
                'SELECT name, logo_data, slug, phone, redirect_url, org_signature FROM organizations WHERE id = ?',
                [orgId]
            );

            if (!orgResult) {
                set.status = 404;
                return {
                    success: false,
                    error: 'Organization not found'
                };
            }

            // Get org-specific database
            const orgDb = await Database.getOrInitOrgDb(orgId.toString());

            // Get contact information and agent_id in a single query
            const contact = await orgDb.fetchOne<{ 
                first_name: string, 
                last_name: string, 
                email: string, 
                phone_number: string, 
                agent_id: number | null 
            }>(
                'SELECT first_name, last_name, email, phone_number, agent_id FROM contacts WHERE id = ?',
                [contactId]
            );

            if (!contact) {
                set.status = 404;
                return {
                    success: false,
                    error: 'Contact not found'
                };
            }

            // Get agent info - first try assigned agent, then fall back to first user
            const agent = contact.agent_id 
                ? await mainDb.fetchOne<{ first_name: string, last_name: string, phone: string }>(
                    'SELECT first_name, last_name, phone FROM users WHERE id = ? AND is_active = 1',
                    [contact.agent_id]
                  )
                : await mainDb.fetchOne<{ first_name: string, last_name: string, phone: string }>(
                    'SELECT first_name, last_name, phone FROM users WHERE organization_id = ? AND is_active = 1 ORDER BY id ASC LIMIT 1',
                    [orgId]
                  );

            if (!agent) {
                set.status = 404;
                return {
                    success: false,
                    error: 'No active agents found for organization'
                };
            }

            // Return all information in a single response
            return {
                success: true,
                contact: {
                    firstName: contact.first_name,
                    lastName: contact.last_name,
                    email: contact.email,
                    phoneNumber: contact.phone_number
                },
                organization: {
                    name: orgResult.name,
                    logo: orgResult.logo_data,
                    slug: orgResult.slug,
                    phone: orgResult.phone,
                    redirectUrl: orgResult.redirect_url
                },
                agent: {
                    name: `${agent.first_name} ${agent.last_name}`,
                    firstName: agent.first_name,
                    phone: agent.phone || ""
                },
                useOrg: Boolean(orgResult.org_signature)
            };

        } catch (error) {
            logger.error(`Error getting schedule info: ${error}`);
            set.status = 500;
            return {
                success: false,
                error: 'Internal server error'
            };
        }
    });

    // Keep the original endpoint for backward compatibility
    app.get('/api/schedule/org-info/:quoteId', async ({ params, set }) => {
        try {
            const { quoteId } = params;
            
            // Decode quote ID to get org ID and contact ID
            const decoded = decodeQuoteId(quoteId);
            if (!decoded) {
                set.status = 400;
                return {
                    success: false,
                    error: 'Invalid quote ID'
                };
            }

            const { orgId, contactId } = decoded;
            
            // Get main database instance
            const mainDb = new Database();
            
            // Get organization info
            const orgResult = await mainDb.fetchOne<{ name: string, logo_data: string | null }>(
                'SELECT name, logo_data FROM organizations WHERE id = ?',
                [orgId]
            );

            if (!orgResult) {
                set.status = 404;
                return {
                    success: false,
                    error: 'Organization not found'
                };
            }

            // Get org-specific database
            const orgDb = await Database.getOrInitOrgDb(orgId.toString());

            // Try to get the assigned agent from the contact
            const contact = await orgDb.fetchOne<{ agent_id: number | null }>(
                'SELECT agent_id FROM contacts WHERE id = ?',
                [contactId]
            );

            // Get agent info - first try assigned agent, then fall back to first user
            const agent = contact?.agent_id 
                ? await mainDb.fetchOne<{ first_name: string, last_name: string, phone: string }>(
                    'SELECT first_name, last_name, phone FROM users WHERE id = ? AND is_active = 1',
                    [contact.agent_id]
                  )
                : await mainDb.fetchOne<{ first_name: string, last_name: string, phone: string }>(
                    'SELECT first_name, last_name, phone FROM users WHERE organization_id = ? AND is_active = 1 ORDER BY id ASC LIMIT 1',
                    [orgId]
                  );

            if (!agent) {
                set.status = 404;
                return {
                    success: false,
                    error: 'No active agents found for organization'
                };
            }

            return {
                success: true,
                orgName: orgResult.name,
                orgLogo: orgResult.logo_data,
                agentName: `${agent.first_name} ${agent.last_name}`,
                agentPhone: agent.phone || ""
            };

        } catch (error) {
            logger.error(`Error getting schedule org info: ${error}`);
            set.status = 500;
            return {
                success: false,
                error: 'Internal server error'
            };
        }
    });

    app.post('/api/schedule/aep-request/:quoteId', async ({ params, set }) => {
        try {
            const { quoteId } = params;
            
            // Decode quote ID to get org ID and contact ID
            const decoded = decodeQuoteId(quoteId);
            if (!decoded) {
                set.status = 400;
                return {
                    success: false,
                    error: 'Invalid quote ID'
                };
            }

            const { orgId, contactId } = decoded;
            
            // Get org-specific database
            const orgDb = await Database.getOrInitOrgDb(orgId.toString());

            // Update the contact with AEP request
            await orgDb.execute(
                'UPDATE contacts SET aep_request = TRUE, aep_request_date = CURRENT_TIMESTAMP WHERE id = ?',
                [contactId]
            );

            return {
                success: true,
                message: 'AEP request recorded successfully'
            };

        } catch (error) {
            logger.error(`Error recording AEP request: ${error}`);
            set.status = 500;
            return {
                success: false,
                error: 'Internal server error'
            };
        }
    });

    app.post('/api/schedule/request-follow-up/:quoteId', async ({ params, set }) => {
        try {
            const { quoteId } = params;
            
            // Decode quote ID to get org ID and contact ID
            const decoded = decodeQuoteId(quoteId);
            if (!decoded) {
                set.status = 400;
                return {
                    success: false,
                    error: 'Invalid quote ID'
                };
            }

            const { orgId, contactId } = decoded;
            
            // Get org-specific database
            const orgDb = await Database.getOrInitOrgDb(orgId.toString());

            // Update the contact status to requested_follow_up
            await orgDb.execute(
                'UPDATE contacts SET status = ? WHERE id = ?',
                ['requested_follow_up', contactId]
            );

            return {
                success: true,
                message: 'Follow-up request recorded successfully'
            };

        } catch (error) {
            logger.error(`Error recording follow-up request: ${error}`);
            set.status = 500;
            return {
                success: false,
                error: 'Internal server error'
            };
        }
    });

    return app;
};

================
File: backend/src/routes/self-service.ts
================
import { Elysia, t } from 'elysia';
import { Database } from '../database';
import { logger } from '../logger';
import crypto from 'crypto';
import { config } from '../config';
import { generateQuoteId, decodeQuoteId } from '../utils/quoteId';
import { getUserFromSession } from '../services/auth';
import { readFileSync } from 'fs';
import { EmailService } from '../services/email';

// Import ZIP_DATA
interface ZipInfo {
  state: string;
  counties: string[];
}

// Import Contact type
type Contact = {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  dateOfBirth: string;
  gender: string;
  tobacco: boolean;
  state: string;
  zipCode: string;
  currentCarrier: string | null;
  planType: string | null;
  optInQuarterlyUpdates: boolean;
};

// Load ZIP data
let ZIP_DATA: Record<string, ZipInfo> = {};
try {
  ZIP_DATA = JSON.parse(readFileSync('../zipData.json', 'utf-8'));
} catch (e) {
  logger.error(`Error loading ZIP data: ${e}`);
}

// Import generateHash function - reimplementing it since it's not exported from email.ts
function generateHash(orgId: string, email: string): string {
  const SECRET = process.env.HASH_SECRET || 'default-hash-secret';
  return crypto.createHash('sha256').update(`${orgId}${email}${SECRET}`).digest('hex').slice(0, 16);
}

export function createSelfServiceRoutes() {
  return new Elysia()
    .get('/api/self-service/init', async ({ query, set }) => {
      // Extract query parameters
      const { orgId, email, hash } = query as { 
        orgId?: string; 
        email?: string; 
        hash?: string;
      };

      // Validate required parameters
      if (!orgId) {
        set.status = 400;
        return { error: 'orgId is required' };
      }

      // Validate hash if email is provided
      if (email && hash) {
        const expectedHash = generateHash(orgId, email);
        if (hash !== expectedHash) {
          logger.warn(`Invalid hash for email ${email} and orgId ${orgId}`);
          set.status = 403;
          return { error: 'Invalid email or hash' };
        }
      }

      try {
        // Get organization database
        const orgDb = await Database.getOrgDb(orgId);
        
        // If email is provided, check for existing contact
        if (email) {
          const client = orgDb.getClient();
          const result = await client.execute({
            sql: `SELECT 
                  email, 
                  first_name AS firstName, 
                  last_name AS lastName
                FROM contacts 
                WHERE email = ?`,
            args: [email]
          });

          // If contact exists, return contact details
          if (result.rows.length > 0) {
            const contact = result.rows[0];
            logger.info(`Contact found for email ${email} in organization ${orgId}`);
            return { 
              contact, 
              email, 
              emailReadOnly: true 
            };
          }

          // If no contact exists but email is provided
          logger.info(`No contact found for email ${email} in organization ${orgId}`);
          return { 
            email, 
            emailReadOnly: true 
          };
        }

        // If no email is provided
        return { emailReadOnly: false };

      } catch (error) {
        logger.error(`Error in self-service init endpoint: ${error}`);
        set.status = 500;
        return { error: 'Internal server error' };
      }
    })
    .post('/api/self-service/signup', async ({ body, set }) => {
      logger.info('Starting signup process with detailed logging...');
      logger.info(`Request body: ${JSON.stringify(body, null, 2)}`);
      
      const { orgId, email, firstName, lastName, optInQuarterlyUpdates, zipCode, dateOfBirth, gender, tobacco, phoneNumber, currentPremium, currentCarrier, planType, state, county, agentId } = body as {
        orgId: string;
        email: string;
        firstName: string;
        lastName: string;
        optInQuarterlyUpdates: boolean;
        zipCode: string;
        dateOfBirth: string;
        gender: string;
        tobacco: boolean;
        phoneNumber: string;
        currentPremium: string;
        currentCarrier: string;
        planType: string;
        state: string;
        county: string;
        agentId?: number;
      };

      logger.info(`[1/6] Validating input parameters...`);
      logger.info(`Input validation data:
        - orgId: ${orgId ? 'present' : 'missing'}
        - email: ${email ? 'present' : 'missing'}
        - firstName: ${firstName ? 'present' : 'missing'}
        - lastName: ${lastName ? 'present' : 'missing'}
        - zipCode: ${zipCode ? 'present' : 'missing'}
        - dateOfBirth: ${dateOfBirth ? 'present' : 'missing'}
        - gender: ${gender ? 'present' : 'missing'}
        - state: ${state ? 'present' : 'missing'}`
      );

      // Validate required parameters
      if (!orgId || !email || !firstName || !lastName || !zipCode || !dateOfBirth || !gender || !state) {
        const missingFields = [];
        if (!orgId) missingFields.push('orgId');
        if (!email) missingFields.push('email');
        if (!firstName) missingFields.push('firstName');
        if (!lastName) missingFields.push('lastName');
        if (!zipCode) missingFields.push('zipCode');
        if (!dateOfBirth) missingFields.push('dateOfBirth');
        if (!gender) missingFields.push('gender');
        if (!state) missingFields.push('state');
        
        logger.error(`[ERROR] Missing required fields: ${missingFields.join(', ')}`);
        set.status = 400;
        return { error: 'Missing required fields', missingFields };
      }
      
      logger.info('[2/6] All required fields present, proceeding with database connection...');

      try {
        logger.info(`[3/6] Attempting to get org database for orgId: ${orgId}`);
        // Get organization database
        const orgDb = await Database.getOrgDb(orgId);
        logger.info('[4/6] Successfully connected to org database');
        
        const client = orgDb.getClient();
        logger.info('[4.5/6] Successfully got database client');
        
        // Get default agent ID from organization if not provided
        const mainDb = new Database();
        const defaultAgentResult = await mainDb.fetchOne<{ default_agent_id: number }>(
          'SELECT default_agent_id FROM organizations WHERE id = ?',
          [parseInt(orgId)]
        );
        const finalAgentId = agentId || defaultAgentResult?.default_agent_id || null;
        logger.info(`Using agent ID: ${finalAgentId}`);
        
        // Check if contact already exists
        logger.info(`[5/6] Checking for existing contact with email: ${email}`);
        const existingContact = await client.execute({
          sql: 'SELECT id FROM contacts WHERE email = ?',
          args: [email]
        });
        logger.info(`[5.5/6] Existing contact check complete. Found: ${existingContact.rows.length > 0}`);

        let contactId: number;
        let isNewContact = false;

        if (existingContact.rows.length > 0) {
          // Update existing contact
          contactId = existingContact.rows[0].id;
          logger.info(`[6/6] Updating existing contact ${contactId}`);
          
          try {
            await client.execute({
              sql: `UPDATE contacts SET 
                    first_name = ?, 
                    last_name = ?,
                    phone_number = ?,
                    zip_code = ?,
                    state = ?,
                    gender = ?,
                    birth_date = ?,
                    tobacco_user = ?,
                    current_carrier = ?,
                    plan_type = ?,
                    agent_id = ?
                    WHERE id = ?`,
              args: [
                firstName, 
                lastName, 
                phoneNumber || '', 
                zipCode, 
                state,
                gender,
                dateOfBirth,
                tobacco ? 1 : 0,
                currentCarrier || '', 
                planType || null,
                finalAgentId,
                contactId
              ]
            });
            
            logger.info(`Successfully updated contact ${contactId}`);
            
          } catch (updateError) {
            logger.error(`Error updating existing contact: ${updateError}`);
            throw updateError;
          }
        } else {
          // Create new contact
          logger.info('[6/6] Creating new contact');
          isNewContact = true;
          try {
            const result = await client.execute({
              sql: `INSERT INTO contacts (
                    email, 
                    first_name, 
                    last_name,
                    phone_number,
                    zip_code,
                    state,
                    gender,
                    birth_date,
                    tobacco_user,
                    current_carrier,
                    plan_type,
                    effective_date,
                    agent_id
                  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              args: [
                email, 
                firstName, 
                lastName, 
                phoneNumber || '', 
                zipCode, 
                state,
                gender,
                dateOfBirth,
                tobacco ? 1 : 0,
                currentCarrier || null,
                planType || null,
                new Date().toISOString().split('T')[0],
                finalAgentId
              ]
            });
            logger.info('Successfully inserted new contact');
            
            // Get the ID of the newly created contact
            logger.info('Getting ID of new contact');
            const newContactResult = await client.execute({
              sql: 'SELECT id FROM contacts WHERE email = ?',
              args: [email]
            });
            
            contactId = newContactResult.rows[0]?.id;
            logger.info(`Got new contact ID: ${contactId}`);
            
          } catch (insertError) {
            logger.error(`Error creating new contact: ${insertError}`);
            throw insertError;
          }
        }
        
        // Send email to the contact
        /*
        try {
          logger.info(`[7/6] Sending welcome email to contact ${contactId}`);

          const mainDb = new Database();  
          const mainClient = mainDb.getClient();
          
          // Get organization name
          const orgResult = await mainClient.execute({
            sql: 'SELECT name, logo_data, primary_color, phone, website FROM organizations WHERE id = ?',
            args: [orgId]
          });
          
          const orgInfo = orgResult.rows.length > 0 ? {
            name: orgResult.rows[0].name,
            logo_data: orgResult.rows[0].logo_data,
            primary_color: orgResult.rows[0].primary_color, 
            phone: orgResult.rows[0].phone,
            website: orgResult.rows[0].website
          } : undefined;
          
          // Initialize email service
          const emailService = new EmailService();

          // Generate quote ID
          const quoteId = generateQuoteId(parseInt(orgId), contactId);
          
          // Create welcome email with quote link
          const baseUrl = process.env.PUBLIC_URL || 'https://medicaremax.ai';
          const quoteUrl = `${baseUrl}/compare?id=${quoteId}`;
          await emailService.sendQuoteEmail({
            email,
            firstName,
            lastName,
            quoteUrl,
            planType: planType || 'G',
            organization: orgInfo,
            phone: phoneNumber
          });
          
          // Record the email in tracking table
          await emailService.recordEmailSend(orgDb, {
            orgId: parseInt(orgId),
            contactId,
            emailType: 'onboarding_welcome',
            sendStatus: 'sent',
            sendMode: 'production',
            batchId: crypto.randomUUID()
          });
          
          logger.info(`Welcome email sent successfully to ${email}`);
        } catch (emailError) {
          // Log but don't fail if email sending fails
          logger.error(`Error sending welcome email: ${emailError}`);
          // We still want to return success for the signup even if email fails
        }
        */
       
        // Return success response
        set.status = 200;
        return { 
          success: true,
          contactId,
          email
        };
      } catch (error) {
        logger.error(`[ERROR] Error in self-service signup endpoint: ${error}`);
        if (error instanceof Error) {
          logger.error(`Error stack trace: ${error.stack}`);
        }
        set.status = 500;
        return { error: 'Internal server error', details: error instanceof Error ? error.message : String(error) };
      }
    })
    .post('/api/self-service/update-location', async ({ body, set }) => {
      const { orgSlug, contactId, zipCode } = body as {
        orgSlug: string;
        contactId: string;
        zipCode: string;
      };

      // Validate required parameters
      if (!orgSlug || !contactId || !zipCode) {
        set.status = 400;
        return { error: 'Missing required fields' };
      }

      try {
        // Get state and county from ZIP_DATA
        const zipInfo = ZIP_DATA[zipCode];
        if (!zipInfo) {
          set.status = 400;
          return { error: 'Invalid zip code' };
        }
        logger.info(`Zip info: ${JSON.stringify(zipInfo)}`);

        // Get organization ID from slug
        const db = new Database();
        const orgResult = await db.fetchOne<{ id: number }>(
          'SELECT id FROM organizations WHERE slug = ?',
          [orgSlug]
        );

        if (!orgResult) {
          set.status = 404;
          return { error: 'Organization not found' };
        }

        // Get organization database
        const orgDb = await Database.getOrgDb(orgResult.id.toString());
        const client = orgDb.getClient();

  

        // Use provided county or first county if only one available

        // Update contact's zip code, state and county
        await client.execute({
          sql: `UPDATE contacts SET 
                zip_code = ?
                WHERE id = ?`,
          args: [
            zipCode,
            contactId
          ]
        });

        logger.info(`Updated location for contact ${contactId} in organization ${orgSlug} to ${zipCode}, ${zipInfo.state}`);

        let output = {
          success: true,
          zipCode,
          state: zipInfo.state,
          counties: zipInfo.counties
        };

        logger.info(`Output: ${JSON.stringify(output)}`);
        set.status = 200;
        return output;

      } catch (error) {
        logger.error(`Error updating location: ${error}`);
        set.status = 500;
        return { error: 'Internal server error' };
      }
    })
    // Add a new endpoint to generate a quote for a contact
    .post('/api/self-service/generate-quote', async ({ body, set }) => {
      const { orgId, contactEmail } = body as {
        orgId: string;
        contactEmail: string;
      };

      logger.info(`Generate quote request received: orgId=${orgId}, contactEmail=${contactEmail}`);

      // Validate required parameters
      if (!orgId || !contactEmail) {
        logger.error(`Missing required fields: orgId=${orgId}, contactEmail=${contactEmail}`);
        set.status = 400;
        return { error: 'Missing required fields (orgId and contactEmail)' };
      }

      try {
        // Get organization database
        const orgDb = await Database.getOrgDb(orgId);
        const client = orgDb.getClient();
        
        // Lookup contact by email
        const contactResult = await client.execute({
          sql: 'SELECT id FROM contacts WHERE email = ?',
          args: [contactEmail]
        });

        if (contactResult.rows.length === 0) {
          logger.error(`Contact not found for email ${contactEmail} in organization ${orgId}`);
          set.status = 404;
          return { error: 'Contact not found' };
        }

        const contactId = contactResult.rows[0].id;
        logger.info(`Found contact ID ${contactId} for email ${contactEmail} in organization ${orgId}`);
        
        // Generate quote ID using the proper utility function (with base36 encoding)
        const quoteId = generateQuoteId(parseInt(orgId), contactId);
        
        // Get plan type from contact
        let planType = 'MedSupp';
        try {
          const planTypeResult = await client.execute({
            sql: 'SELECT plan_type FROM contacts WHERE id = ?',
            args: [contactId]
          });
          
          if (planTypeResult.rows.length > 0 && planTypeResult.rows[0].plan_type) {
            planType = planTypeResult.rows[0].plan_type;
          } else {
            // Default to MedSupp if no plan type is set
            planType = 'MedSupp';
          }
          logger.info(`Found plan type ${planType} for contact ${contactId}`);
        } catch (error) {
          logger.warn(`Could not get plan type for contact ${contactId}: ${error}`);
          // Continue with default plan type
        }
        
        // Build redirect URL with just the quote ID
        const redirectUrl = `${config.PUBLIC_URL || 'http://localhost:5173'}/quote?id=${quoteId}`;
        
        // Log response details
        logger.info(`Generated quote ID: ${quoteId}`);
        logger.info(`Redirect URL: ${redirectUrl}`);

        // Return successful response with quote information
        set.status = 200;
        return {
          success: true,
          contactId,
          quoteId,
          redirectUrl
        };
      } catch (error) {
        logger.error(`Error generating quote ID: ${error}`);
        set.status = 500;
        return { error: 'Internal server error' };
      }
    })
    .get('/api/self-service/:orgSlug', async ({ params, query, set, request }) => {
      const { orgSlug } = params;
      const { email, id } = query as { email?: string; id?: string };
      
      logger.info(`Self-service request for orgSlug=${orgSlug}, email=${email || 'none'}, quoteId=${id || 'none'}`);
      
      try {
        // For the 'latest' slug, get the current user's organization
        if (orgSlug === 'latest') {
          const userFromSession = await getUserFromSession(request);
          
          // Add type guard to check for organization_id
          if (!userFromSession || !('organization_id' in userFromSession) || !userFromSession.organization_id) {
            set.status = 401;
            return { success: false, error: 'Unauthorized' };
          }
          
          // Get organization from central database
          const db = new Database();
          const orgResult = await db.fetchOne<{ id: number, slug: string, logo_data: string | null }>(
            'SELECT id, slug, logo_data FROM organizations WHERE id = ?',
            [userFromSession.organization_id]
          );
          
          if (!orgResult) {
            set.status = 404;
            return { success: false, message: 'Organization not found' };
          }
          
          return {
            success: true,
            orgId: userFromSession.organization_id.toString(),
            orgSlug: orgResult.slug,
            selfOnboardingUrl: `${config.PUBLIC_URL}/self-onboarding/${orgResult.slug}`,
            logo: orgResult.logo_data
          };
        }
        
        // Regular slug lookup
        const db = new Database();
        const result = await db.query(
          'SELECT id, name, logo_data FROM organizations WHERE slug = ?',
          [orgSlug]
        );

        if (!result || result.length === 0) {
          set.status = 404;
          return { success: false, message: 'Organization not found' };
        }

        const orgId = result[0].id;
        const orgIdStr = orgId.toString();
        const logo = result[0].logo_data;
        const orgName = result[0].name;
        // Create response object with organization info
        const response = {
          success: true,
          orgId: orgIdStr,
          orgSlug,
          selfOnboardingUrl: `${config.PUBLIC_URL}/self-onboarding/${orgSlug}`,
          logo,
          orgName
        };
        
        // Try to find contact information if email or quoteId provided
        if (email || id) {
          try {
            const orgDb = await Database.getOrgDb(orgIdStr);
            const client = orgDb.getClient();
            let contactResult;
            
            // First try by email if provided
            if (email) {
              logger.info(`Looking up contact by email: ${email}`);
              contactResult = await client.execute({
                sql: `SELECT 
                  id,
                  email, 
                  first_name AS firstName, 
                  last_name AS lastName,
                  phone_number AS phone,
                  zip_code AS zipCode,
                  state,
                  gender,
                  birth_date AS dateOfBirth,
                  tobacco_user AS tobacco,
                  current_carrier AS currentCarrier,
                  plan_type AS planType
                FROM contacts 
                WHERE email = ?`,
                args: [email]
              });
            }
            
            // If no results and we have a quoteId, try that
            if ((!contactResult || contactResult.rows.length === 0) && id) {
              try {
                logger.info(`Looking up contact by quoteId: ${id}`);
                // Decode the quoteId using our utility function
                const decoded = decodeQuoteId(id);
                if (decoded) {
                  const contactId = decoded.contactId;
                  
                  contactResult = await client.execute({
                    sql: `SELECT 
                      id,
                      email, 
                      first_name AS firstName, 
                      last_name AS lastName,
                      phone_number AS phone,
                      zip_code AS zipCode,
                      state,
                      gender,
                      birth_date AS dateOfBirth,
                      tobacco_user AS tobacco,
                      current_carrier AS currentCarrier,
                      plan_type AS planType
                    FROM contacts 
                    WHERE id = ?`,
                    args: [contactId]
                  });
                }
              } catch (err) {
                logger.warn(`Error decoding quoteId ${id}: ${err}`);
              }
            }
            
            // If we found a contact, add it to the response
            if (contactResult && contactResult.rows.length > 0) {
              const contact = contactResult.rows[0];
              // Convert tobacco_user from number to boolean
              contact.tobacco = contact.tobacco === 1;
              
              logger.info(`Found contact for ${email || id}`);
              let output = {
                ...response,
                contact: {
                  ...contact,
                  id: contactResult.rows[0].id
                }
              };
              logger.info(`Output: ${JSON.stringify(output)}`);
              return output;
            }
          } catch (contactError) {
            logger.error(`Error looking up contact: ${contactError}`);
            // Continue without contact info
          }
        }
        
        // Return basic organization info for the frontend if no contact was found
        return response;
      } catch (error) {
        logger.error(`Error in self-service org slug endpoint: ${error}`);
        set.status = 500;
        return { error: 'Internal server error' };
      }
    });
}

================
File: backend/src/routes/settings.ts
================
import { Elysia } from 'elysia';
import { validateSession } from '../services/auth';
import { Database } from '../database';
import { type User, type BaseSettings } from '../types';
import { logger } from '../logger';
import { cookie } from '@elysiajs/cookie';

interface StateCarrierSetting {
  state: string;
  carrier: string;
  active: boolean;
  targetGI: boolean;
}

interface SettingsBody {
    settings?: BaseSettings;
    inheritOrgSettings?: boolean;
}

interface AgentSettingsResponse {
  orgSettings: BaseSettings;
  agentSettings: {
    inheritOrgSettings: boolean;
    settings: BaseSettings;
  } | null;
  canEditOrgSettings: boolean;
}

const defaultSettings: BaseSettings = {
    stateLicenses: [],
    carrierContracts: [],
    stateCarrierSettings: [],
    allowAgentSettings: false,
    emailSendBirthday: false,
    emailSendPolicyAnniversary: false,
    emailSendAep: false,
    smartSendEnabled: false,
    brandName: "",
    logo: null,
    orgSignature: false,
    signature: ""
};

// Helper function to generate default state/carrier settings
function generateDefaultStateCarrierSettings(states: string[], carriers: string[]): StateCarrierSetting[] {
  return states.flatMap(state => 
    carriers.map(carrier => ({
      state,
      carrier,
      active: true,  // Default to active
      targetGI: false  // Default to no GI
    }))
  );
}

export const settingsRoutes = new Elysia()
  .get('/api/settings', async ({ cookie }) => {
    logger.info('GET /api/settings - Starting');
    
    const user = await validateSession(cookie.session.toString());
    if (!user?.id) {
        return { success: false, error: 'No authenticated user' };
    }

    const db = new Database();

    try {
        // Get organization settings, logo, and name
        const orgRow = await db.fetchOne<{ org_settings: string | null, logo_data: string | null, name: string, org_signature: boolean, phone: string | null, redirect_url: string | null, signature: string | null }>(
            'SELECT org_settings, logo_data, name, org_signature, phone, redirect_url, signature FROM organizations WHERE id = ?',
            [user.organization_id]
        );
        
        logger.info(`Retrieved org settings row`);

        // Parse the JSON string into an object
        let orgSettings: BaseSettings;
        try {
            orgSettings = orgRow?.org_settings 
                ? { ...defaultSettings, ...JSON.parse(orgRow.org_settings) }
                : { ...defaultSettings };

            // Prioritize signature, then fall back to organization name
            if (!orgSettings.signature && orgRow?.signature) {
                orgSettings.signature = orgRow.signature;
            }
            
            // If signature is still not set, use organization name
            if (!orgSettings.signature && orgRow?.name) {
                orgSettings.signature = orgRow.name;
            }

            // If brandName is not set in settings, use the organization name
            if (!orgSettings.brandName && orgRow?.name) {
                orgSettings.brandName = orgRow.name;
            }

            // Add phone and redirectUrl from database columns if available
            if (orgRow?.phone) {
                orgSettings.phone = orgRow.phone;
            }
            
            if (orgRow?.redirect_url) {
                orgSettings.redirectUrl = orgRow.redirect_url;
            }
            
            // If we have states and carriers but no settings array, generate them
            if (orgSettings.stateLicenses.length > 0 && 
                orgSettings.carrierContracts.length > 0 && 
                !Array.isArray(orgSettings.stateCarrierSettings)) {
                
                logger.info('Generating default state/carrier settings');
                orgSettings.stateCarrierSettings = generateDefaultStateCarrierSettings(
                    orgSettings.stateLicenses,
                    orgSettings.carrierContracts
                );
            }
        } catch (parseError) {
            logger.error(`Error parsing org settings: ${parseError}`);
            orgSettings = { ...defaultSettings };
        }

        // Get agent settings if they exist
        const agentSettingsRow = await db.fetchOne<{ inherit_org_settings: boolean, settings: string | null }>(
            'SELECT inherit_org_settings, settings FROM agent_settings WHERE agent_id = ?',
            [user.id]
        );

        // Parse agent settings
        let agentSettings = null;
        if (agentSettingsRow) {
            try {
                const parsedSettings = agentSettingsRow.settings 
                    ? { ...defaultSettings, ...JSON.parse(agentSettingsRow.settings) }
                    : { ...defaultSettings };

                agentSettings = {
                    inheritOrgSettings: agentSettingsRow.inherit_org_settings,
                    settings: parsedSettings
                };
            } catch (parseError) {
                logger.error(`Error parsing agent settings: ${parseError}`);
            }
        }

        const canEditOrgSettings = user.is_admin;

        const response = {
            success: true,
            name: orgRow?.name || null,
            orgSettings,
            logo: orgRow?.logo_data || null,
            orgSignature: orgRow?.org_signature || false,
            agentSettings,
            canEditOrgSettings
        };

        logger.info(`Sending response`);
        return response;

    } catch (error) {
        logger.error(`Error fetching settings: ${error}`);
        return {
            success: false,
            error: 'Failed to load settings'
        };
    }
  })

  .put('/api/settings/:scope', async ({ cookie, body, params }) => {
    const { scope } = params;
    logger.info(`PUT /api/settings/${scope} - Starting`);
    
    const user = await validateSession(cookie?.session?.toString() || '');
    if (!user?.id) {
        return { success: false, error: 'No authenticated user' };
    }

    const db = new Database();

    try {
        // Get organization's subscription tier
        const orgRow = await db.fetchOne<{ subscription_tier: string }>(
            'SELECT subscription_tier FROM organizations WHERE id = ?',
            [user.organization_id]
        );

        const isBasicTier = orgRow?.subscription_tier === 'basic';
        const typedBody = body as SettingsBody;

        if (scope === 'org') {
            logger.info('Updating organization settings');
            logger.info(`Organization settings body: ${JSON.stringify(typedBody, null, 2)}`);
            
            // Extract logo from settings if it exists
            const settingsObj = typedBody.settings || typedBody;
            const name = 'name' in settingsObj ? settingsObj.name : null;
            const logo = 'logo' in settingsObj ? settingsObj.logo : null;
            const orgSignature = 'orgSignature' in settingsObj ? settingsObj.orgSignature : false;
            const phone = 'phone' in settingsObj ? settingsObj.phone : null;
            const redirectUrl = 'redirectUrl' in settingsObj ? settingsObj.redirectUrl : null;
            const signature = 'signature' in settingsObj ? settingsObj.signature : null;
            const settingsWithoutLogo = { ...settingsObj };
            if ('logo' in settingsWithoutLogo) {
                delete (settingsWithoutLogo as any).logo;
            }
            
            // Update organization settings and logo separately
            await db.execute(
                'UPDATE organizations SET org_settings = ?, logo_data = ?, name = ?, org_signature = ?, phone = ?, redirect_url = ?, signature = ? WHERE id = ?',
                [JSON.stringify(settingsWithoutLogo), logo || null, name || null, orgSignature, 
                 orgSignature ? phone : null, orgSignature ? redirectUrl : null, orgSignature ? signature : null, user.organization_id]
            );

            // For basic tier, also update the admin agent's settings
            if (isBasicTier) {
                logger.info('Basic tier detected - syncing settings to admin agent');
                
                // Get the admin agent's ID
                const adminAgentRow = await db.fetchOne<{ id: number }>(
                    'SELECT id FROM users WHERE organization_id = ? AND is_admin = 1 AND is_agent = 1 LIMIT 1',
                    [user.organization_id]
                );

                if (adminAgentRow) {
                    // Update agent settings with organization settings and set inherit_org_settings to true
                    await db.execute(
                        `INSERT INTO agent_settings (agent_id, inherit_org_settings, settings)
                         VALUES (?, true, ?)
                         ON CONFLICT (agent_id) DO UPDATE
                         SET inherit_org_settings = true, settings = ?`,
                        [adminAgentRow.id, JSON.stringify(settingsWithoutLogo), JSON.stringify(settingsWithoutLogo)]
                    );
                }
            }
        } else if (scope === 'agent') {
            // For basic tier, don't allow direct agent settings updates
            if (isBasicTier) {
                return {
                    success: false,
                    error: 'Agent settings cannot be modified directly in basic tier - update organization settings instead'
                };
            }

            logger.info('Updating agent settings');
            logger.info(`Agent settings body: ${JSON.stringify(typedBody, null, 2)}`);

            try {
                await db.execute(
                    `INSERT INTO agent_settings (agent_id, inherit_org_settings, settings)
                     VALUES (?, ?, ?)
                     ON CONFLICT (agent_id) DO UPDATE
                     SET inherit_org_settings = ?, settings = ?`,
                    [
                        user.id,
                        typedBody.inheritOrgSettings,
                        JSON.stringify(typedBody.settings),
                        typedBody.inheritOrgSettings,
                        JSON.stringify(typedBody.settings)
                    ]
                );
                logger.info('Agent settings updated successfully');
            } catch (dbError) {
                logger.error(`Database execute error details: ${JSON.stringify(dbError, null, 2)}`);
                throw dbError;
            }
        }

        return {
            success: true,
            settings: typedBody.settings || typedBody
        };
    } catch (error) {
        logger.error(`Error updating settings: ${error}`);
        logger.error(`Error stack: ${(error as Error).stack}`);
        return {
            success: false,
            error: 'Failed to update settings'
        };
    }
  })

  // Update the GI recommendations endpoint to use Elysia style
  .get('/api/settings/gi-recommendations', async ({ cookie }) => {
    const user = await validateSession(cookie.session.toString());
    if (!user?.id) {
      return { success: false, error: 'No authenticated user' };
    }

    const db = new Database();

    try {
      const recommendations = await db.fetchAll(
        `SELECT state, carrier
         FROM guaranteed_issue_recommendations
         ORDER BY carrier, state`
      );

      // Transform the results to match the expected format
      const formattedRecommendations = recommendations.map((rec: { state: string; carrier: string }) => ({
        state: rec.state,
        carrier: rec.carrier,
        active: true,
        targetGI: true
      }));

      return formattedRecommendations;

    } catch (error) {
      logger.error(`Error fetching GI recommendations: ${error}`);
      return { success: false, error: 'Failed to fetch GI recommendations' };
    }
  })

  // Fetch the logo for the organization
  .get('/api/settings/logo', async ({ cookie }) => {
    const user = await validateSession(cookie.session.toString());
    if (!user?.id) {
      return { success: false, error: 'No authenticated user' };
    }

    const db = new Database();

    try {
      const logo = await db.fetchOne<{ logo_data: string | null }>(
        'SELECT logo_data FROM organizations WHERE id = ?',
        [user.organization_id]
      );

      if (!logo) {
        return { success: false, error: 'Organization not found' };
      }

      return {
        success: true,
        logo: logo.logo_data
      };

    } catch (error) {
      logger.error(`Error fetching organization logo: ${error}`);
      return { success: false, error: 'Failed to fetch organization logo' };
    }
  })
  .get('/api/settings/:orgId/logo', async ({ params }) => {
    const { orgId } = params;
    const db = new Database();

    try {
      const logo = await db.fetchOne<{ logo_data: string | null }>(
        'SELECT logo_data FROM organizations WHERE id = ?',
        [orgId]
      );

      if (!logo) {
        return { success: false, error: 'Organization logo not found' }; 
      }

      return {
        success: true,
        logo: logo.logo_data
      };
    } catch (error) {
      logger.error(`Error fetching organization logo: ${error}`);
      return { success: false, error: 'Failed to fetch organization logo' };
    }
  })
  

  // Update carriers endpoint to use Elysia style
  .get('/api/settings/carriers', async ({ cookie }) => {
    const user = await validateSession(cookie.session.toString());
    if (!user?.id) {
      return { success: false, error: 'No authenticated user' };
    }

    const db = new Database();

    try {
      const carriers = await db.fetchAll(
        `SELECT name
         FROM carriers
         ORDER BY name`
      );

      return carriers;

    } catch (error) {
      logger.error(`Error fetching carriers: ${error}`);
      return { success: false, error: 'Failed to fetch carriers' };
    }
  })

  .get('/api/settings/carriers-with-aliases', async ({ cookie }) => {
    const user = await validateSession(cookie.session.toString());
    if (!user?.id) {
      return { success: false, error: 'No authenticated user' };
    }

    const db = new Database();

    try {
      const carriers = await db.fetchAll(
        `SELECT name, aliases
         FROM carriers
         ORDER BY name`
      );

      return carriers.map((carrier: { name: string, aliases: string | null }) => ({
        name: carrier.name,
        aliases: carrier.aliases ? JSON.parse(carrier.aliases) : []
      }));

    } catch (error) {
      logger.error(`Error fetching carriers with aliases: ${error}`);
      return { success: false, error: 'Failed to fetch carriers with aliases' };
    }
  });

================
File: backend/src/routes/signup.ts
================
import { Elysia } from 'elysia';
import { logger } from '../logger';
import { Database } from '../database';
import { EmailService } from '../services/email';
import { AuthService } from '../services/auth';
import { cookie } from '@elysiajs/cookie';

// Enhanced slug generation with uniqueness check
async function generateUniqueSlug(db: Database, name: string): Promise<string> {
  let slug = name
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9]+/g, '-') // Replace non-alphanumeric chars with hyphens
    .replace(/^-+|-+$/g, '') // Remove leading/trailing hyphens
    .substring(0, 50); // Limit length

  // Check if slug exists
  let counter = 0;
  let uniqueSlug = slug;
  
  while (true) {
    const existing = await db.query<{ count: number }>(
      'SELECT COUNT(*) as count FROM organizations WHERE slug = ?',
      [uniqueSlug]
    );

    if (existing[0]?.count === 0) {
      break;
    }

    counter++;
    uniqueSlug = `${slug}-${counter}`;
  }

  return uniqueSlug;
}

// Create a standalone email check handler that doesn't require authentication
// This function can be directly mounted at the root level
export async function checkEmailHandler({ params, set }: { params: { email: string }, set: { status: number } }) {
  try {
    const { email } = params;
    const dbInstance = new Database();
    
    logger.info(`Public email check for: "${email}"`);
    
    if (!email || !email.trim()) {
      set.status = 400;
      return {
        available: false,
        message: 'Email is required'
      };
    }
    
    // Basic email format validation
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      logger.info(`Email validation failed for: "${email}"`);
      return {
        available: false,
        message: 'Invalid email format'
      };
    }
    
    // Check if email already exists
    const existingUser = await dbInstance.query<{ count: number }>(
      'SELECT COUNT(*) as count FROM users WHERE LOWER(email) = LOWER(?)',
      [email]
    );
    
    const count = existingUser[0]?.count || 0;
    logger.info(`Email check query result count: ${count} for email: "${email}"`);
    
    if (count > 0) {
      logger.info(`Email "${email}" is already registered`);
      return {
        available: false,
        message: 'This email address is already registered'
      };
    }
    
    logger.info(`Email "${email}" is available`);
    return {
      available: true,
      message: 'Email is available'
    };
    
  } catch (error) {
    logger.error(`Error checking email availability: ${error}`);
    set.status = 500;
    return {
      available: false,
      message: 'Failed to check email availability'
    };
  }
}

// Simple function to validate the token structure without strict verification
// For signup flow, we're just making sure the token format is valid
const validateSignupToken = (token: string): boolean => {
  try {
    // Token should have the format stored in our magic link
    const parts = token.split(':');
    return parts.length >= 2; // At minimum should have IV and encrypted data parts
  } catch (error) {
    logger.error(`Error validating signup token: ${error}`);
    return false;
  }
};

export function createSignupRoutes() {
  const dbInstance = new Database();
  const emailService = new EmailService();
  const authService = new AuthService();

  return new Elysia()
    .use(cookie())
    
    // New route for handling signup verification that just redirects to onboarding
    .get('/signup/verify', async ({ query, set }) => {
      try {
        // Extract query parameters
        const { token } = query as { 
          token: string, 
        };
        
        logger.info(`Processing signup verification for token: ${token}`);
        
        if (!token) {
          logger.warn('Missing token in signup verification');
          set.status = 400;
          set.redirect = '/signup';
          return { error: 'Invalid verification link' };
        }
        
        // Verify the token format is valid - simpler check for signup flow
        const { valid, email, redirectUrl } = await authService.verifySignupLink(token);
        
        logger.info(`Signup verified successfully, redirecting to: ${redirectUrl}`);
        set.redirect = redirectUrl;
        
        return {
          success: true,
          message: 'Email verified successfully'
        };
        
      } catch (error) {
        logger.error(`Error processing signup verification: ${error}`);
        set.status = 500;
        set.redirect = '/signup';
        return {
          success: false,
          message: 'Failed to verify email'
        };
      }
    })
    
    // Simplified signup process - only validate and send magic link
    .post('/api/signup', async ({ body, set }) => {
      try {
        const { name, email } = body as { name: string, email: string };
        
        logger.info(`Processing signup for name: "${name}", email: "${email}"`);
        
        if (!name || !name.trim() || !email || !email.trim()) {
          set.status = 400;
          return {
            success: false,
            message: 'Name and email are required'
          };
        }
        
        // Basic email format validation
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
          logger.info(`Email validation failed for: "${email}"`);
          set.status = 400;
          return {
            success: false,
            message: 'Invalid email format'
          };
        }
        
        // Check if email already exists
        const existingUser = await dbInstance.query<{ count: number }>(
          'SELECT COUNT(*) as count FROM users WHERE LOWER(email) = LOWER(?)',
          [email]
        );
        
        if (existingUser[0]?.count > 0) {
          logger.info(`Email "${email}" is already registered`);
          set.status = 400;
          return {
            success: false,
            message: 'This email address is already registered'
          };
        }
        
        // Split name into first and last
        const nameParts = name.trim().split(' ');
        const firstName = nameParts[0];
        const lastName = nameParts.length > 1 ? nameParts.slice(1).join(' ') : '';
        
        // Generate magic link with user info in query parameters
        const magicLink = await authService.createSignupLink(
          email,
          { 
            // Use signup-verify instead of auth/verify to use a different flow
            redirectUrl: `/onboarding?firstName=${encodeURIComponent(firstName)}&lastName=${encodeURIComponent(lastName)}&email=${encodeURIComponent(email)}` 
          }
        );
        
        // Send the email with magic link
        await emailService.sendMagicLink(email, magicLink, firstName);
        
        logger.info(`Sent signup magic link to ${email}`);
        
        set.status = 201;
        return {
          success: true,
          message: 'Please check your email to continue with account setup.'
        };
        
      } catch (error) {
        logger.error(`Error processing signup: ${error}`);
        set.status = 500;
        return {
          success: false,
          message: 'Failed to create account'
        };
      }
    });
}

================
File: backend/src/routes/stripe.ts
================
import { Elysia } from 'elysia';
import { Database } from '../database';
import { logger } from '../logger';
import { config } from '../config';
import { getUserFromSession } from '../services/auth';
import { requireAuth } from '../middleware/auth';
import { checkPaymentStatus } from '../services/stripe';
import crypto from 'crypto';
import { cookie } from '@elysiajs/cookie';  

interface SubscriptionStatus {
  isActive: boolean;
  tier: string;
  currentPeriodEnd?: number;
  cancelAtPeriodEnd?: boolean;
  paymentStatus: string;
}

export const createStripeRoutes = (app: Elysia) => {
  app.use(requireAuth)
    .get('/api/stripe/subscription-status', async ({ user, set }) => {
      try {
        if (!user?.organization_id) {
          logger.info('No organization ID in request');
          set.status = 400;
          return { 
            success: false,
            error: 'No organization ID found' 
          };
        }
        
        const db = new Database();
        const status = await checkPaymentStatus(db, user.organization_id);
        logger.info(`Returning subscription status: ${JSON.stringify(status)}`);
        
        return {
          success: true,
          data: status as SubscriptionStatus
        };
      } catch (error) {
        logger.error(`Error in subscription status route: ${error}`);
        set.status = 500;
        return { 
          success: false,
          error: 'Failed to fetch subscription status',
          details: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    });
    
  // Create separate instance without auth middleware for the payment-complete endpoint
  app.use(cookie())
    .post('/api/stripe/payment-complete', async ({ body, set, setCookie }) => {
      try {
        const { 
          email: encodedEmail, 
          firstName, 
          lastName,
          stripeCustomerId,
          stripeSubscriptionId,
          stripeUsageItemId
        } = body as { 
          email: string;
          firstName: string;
          lastName: string;
          stripeCustomerId?: string;
          stripeSubscriptionId?: string;
          stripeUsageItemId?: string;
        };

        // Decode the email in case it contains URL-encoded characters
        const email = decodeURIComponent(encodedEmail);

        logger.info(`Processing payment completion for email: ${email}`);
        logger.info(`Payment data: StripeCustomer=${stripeCustomerId ? (typeof stripeCustomerId === 'string' ? stripeCustomerId.substring(0, 10) + '...' : 'object') : 'missing'}, StripeSubscription=${stripeSubscriptionId ? (stripeSubscriptionId && typeof stripeSubscriptionId === 'string' ? stripeSubscriptionId.substring(0, 10) + '...' : 'object') : 'missing'}, UsageItem=${stripeUsageItemId ? (typeof stripeUsageItemId === 'string' ? stripeUsageItemId.substring(0, 10) + '...' : 'object') : 'missing'}`);

        const db = new Database();
        const client = db.getClient();

        // First get the user and organization
        logger.info(`Looking up user record for email: ${email}`);
        const userResult = await client.execute({
          sql: 'SELECT users.id, users.organization_id FROM users WHERE email = ? AND is_active = 1',
          args: [email]
        });

        logger.info(`User query returned ${userResult.rows.length} rows`);
        
        if (userResult.rows.length === 0) {
          logger.error(`No active user found for email: ${email}`);
          // Let's try a case-insensitive search as a fallback
          logger.info(`Trying case-insensitive search for email: ${email}`);
          const caseInsensitiveResult = await client.execute({
            sql: 'SELECT users.id, users.organization_id FROM users WHERE LOWER(email) = LOWER(?) AND is_active = 1',
            args: [email]
          });
          
          if (caseInsensitiveResult.rows.length === 0) {
            logger.error(`Still no user found with case-insensitive search for email: ${email}`);
            set.status = 404;
            return { success: false, error: 'User not found' };
          } else {
            logger.info(`Found user with case-insensitive match: ${caseInsensitiveResult.rows[0].id}`);
            // Continue with the found user
            userResult.rows = caseInsensitiveResult.rows;
          }
        }

        const userId = userResult.rows[0].id;
        const organizationId = userResult.rows[0].organization_id;
        logger.info(`Found user ID: ${userId}, organization ID: ${organizationId}`);

        // Construct the SQL update based on available Stripe data
        let sql = `UPDATE organizations 
                  SET payment_completed = 1, 
                      subscription_status = 'active',
                      onboarding_completed = TRUE`;
        
        const args = [];
        
        if (stripeCustomerId) {
          sql += ', stripe_customer_id = ?';
          args.push(stripeCustomerId);
        }
        
        if (stripeSubscriptionId) {
          sql += ', stripe_subscription_id = ?';
          args.push(typeof stripeSubscriptionId === 'object' ? JSON.stringify(stripeSubscriptionId) : stripeSubscriptionId);
        }
        
        if (stripeUsageItemId) {
          sql += ', stripe_usage_item_id = ?';
          args.push(typeof stripeUsageItemId === 'object' ? JSON.stringify(stripeUsageItemId) : stripeUsageItemId);
        }
        
        sql += ' WHERE id = ?';
        args.push(organizationId);

        // Update organization with payment and Stripe info
        logger.info(`Updating organization ${organizationId} with payment data`);
        const updateResult = await client.execute({ sql, args });
        logger.info(`Organization update affected ${updateResult.rowsAffected} rows`);

        // Create a new session
        const sessionId = crypto.randomBytes(32).toString('hex');
        const expiresAt = new Date();
        expiresAt.setDate(expiresAt.getDate() + 7); // 7 days from now

        logger.info(`Creating new session for user ${userId}: ${sessionId.substring(0, 16)}...`);
        const sessionResult = await client.execute({
          sql: 'INSERT INTO sessions (id, user_id, expires_at) VALUES (?, ?, ?)',
          args: [sessionId, userId, expiresAt.toISOString()]
        });
        logger.info(`Session creation affected ${sessionResult.rowsAffected} rows`);

        // Set the session cookie
        logger.info(`Setting session cookie with expiry: ${expiresAt.toISOString()}`);
        setCookie('session', sessionId, {
          path: '/',
          httpOnly: true,
          secure: process.env.NODE_ENV === 'production',
          sameSite: 'lax',
          maxAge: 60 * 60 * 24 * 1 // 1 day -- shorter to force them to login again soon after onboarding
        });
        logger.info(`Session cookie set successfully`);

        // Get the subscription status to return to client
        logger.info(`Fetching subscription status for organization ${organizationId}`);
        const status = await checkPaymentStatus(db, organizationId);
        logger.info(`Subscription status: ${JSON.stringify(status)}`);

        logger.info(`Successfully completed payment setup for user ${userId} in organization ${organizationId}`);
        
        set.status = 200;
        return {
          success: true,
          data: status
        };

      } catch (error) {
        logger.error(`Error in payment completion: ${error}`);
        if (error instanceof Error && error.stack) {
          logger.error(`Stack trace: ${error.stack}`);
        }
        set.status = 500;
        return { 
          success: false,
          error: 'Failed to complete payment setup',
          details: error instanceof Error ? error.message : 'Unknown error'
        };
      }
    });

  return app;
};

================
File: backend/src/routes/waitlist.ts
================
import { Elysia, t } from 'elysia';
import { Database } from '../database';
import { logger } from '../logger';
import { cors } from '@elysiajs/cors';
import sgMail from '@sendgrid/mail';

// Types for request body
interface WaitlistEntry {
    name: string;
    email: string;
    phone: string;
    numAgents: string;
    bookSize: string;
}

// Validation functions
function validateEmail(email: string): boolean {
    const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    return emailRegex.test(email.trim());
}

function standardizePhoneNumber(phone: string): { isValid: boolean; standardized: string } {
    const digits = phone.replace(/\D/g, '').slice(0, 10);
    return {
        isValid: digits.length === 10,
        standardized: digits
    };
}

export const createWaitlistRoutes = () => {
    const app = new Elysia({ prefix: '/api/waitlist' })
    .use(cors({
        origin: process.env.NODE_ENV === 'development' 
            ? 'http://localhost:5173' 
            : false,
        methods: ['POST', 'OPTIONS'],
        allowedHeaders: ['Content-Type'],
        credentials: false  // Don't require credentials for waitlist
    }));
    
    const db = new Database(); // Create a new instance of the main database

    // Initialize SendGrid
    if (!process.env.SENDGRID_API_KEY) {
        throw new Error('Missing SENDGRID_API_KEY environment variable');
    }
    sgMail.setApiKey(process.env.SENDGRID_API_KEY);

    app.post('/', async ({ body, set }: { body: WaitlistEntry, set: any }) => {
        try {
            logger.info(`Received waitlist submission: ${JSON.stringify(body)}`);
            const { name, email, phone, numAgents, bookSize } = body;

            // Validate inputs
            if (!name || typeof name !== 'string' || name.trim().length === 0) {
                logger.warn(`Invalid name: ${name}`);
                set.status = 400;
                return { success: false, message: 'Name is required' };
            }

            if (!email || typeof email !== 'string' || !validateEmail(email)) {
                logger.warn(`Invalid email: ${email}`);
                set.status = 400;
                return { success: false, message: 'Invalid email format' };
            }

            const phoneResult = standardizePhoneNumber(phone);
            if (!phoneResult.isValid) {
                logger.warn(`Invalid phone: ${phone}`);
                set.status = 400;
                return { success: false, message: 'Phone number must be 10 digits' };
            }

            if (!numAgents || isNaN(Number(numAgents)) || Number(numAgents) <= 0) {
                logger.warn(`Invalid numAgents: ${numAgents}`);
                set.status = 400;
                return { success: false, message: 'Number of agents must be a positive number' };
            }

            if (!bookSize || isNaN(Number(bookSize)) || Number(bookSize) <= 0) {
                logger.warn(`Invalid bookSize: ${bookSize}`);
                set.status = 400;
                return { success: false, message: 'Book size must be a positive number' };
            }

            // Check if email exists first to determine if this is an update
            const existing = await db.execute(
                'SELECT id FROM waitlist WHERE email = ?',
                [email.trim()]
            );
            const isUpdate = existing.rows && existing.rows.length > 0;

            // Insert or update waitlist entry
            logger.info('Upserting waitlist entry');
            const upsertResult = await db.execute(`
                INSERT INTO waitlist (name, email, phone, num_agents, book_size)
                VALUES (?, ?, ?, ?, ?)
                ON CONFLICT(email) DO UPDATE SET
                    name = EXCLUDED.name,
                    phone = EXCLUDED.phone,
                    num_agents = EXCLUDED.num_agents,
                    book_size = EXCLUDED.book_size,
                    updated_at = CURRENT_TIMESTAMP
            `, [
                name.trim(),
                email.trim(),
                phoneResult.standardized,
                Number(numAgents),
                Number(bookSize)
            ]);

            logger.info(`Upsert result: ${JSON.stringify(upsertResult)}`);

            // Send confirmation email
            try {
                await sgMail.send({
                    to: email.trim(),
                    from: {
                        email: process.env.HELLO_EMAIL || 'information@medicaremax.ai',
                        name: 'Medicare Max'
                    },
                    replyTo: process.env.HELLO_EMAIL || 'information@medicaremax.ai',
                    subject: "You're In. Time to Max What's Yours.",
                    text: `Hey ${name.trim()},

You made it on the Medicare Max waitlist—and not a moment too soon. 

You're doing the work, building the book, and watching revenue slip through the cracks. That stops here.

It's time to keep more, earn smarter, and finally get what's yours.

Early access is on the way. Stay ready.

Have questions? Just reply to this email and we'll get back to you.

Cheers,
THe Medicare Max Team`,
                    html: `
                        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background-color: #ffffff; padding: 40px 20px;">
                            <div style="text-align: center; margin-bottom: 30px;">
                                <a href="https://medicaremax.ai" style="text-decoration: none; display: inline-block;">
                                    <img src="https://medicaremax.ai/images/medicare-max-logo.png" alt="Medicare Max Logo" style="height: 40px; margin: 0 auto;">
                                </a>
                            </div>
                            <div style="background-color: #f0f9ff; border-radius: 12px; padding: 30px; margin: 20px 0;">
                                <h2 style="color: #03045E; font-size: 24px; margin-bottom: 20px;">Hey ${name.trim()},</h2>
                                <p style="color: #1a1f5f; font-size: 16px; line-height: 1.6; margin-bottom: 20px;">
                                    You made it on the Medicare Max waitlist—and not a moment too soon.
                                </p>
                                <p style="color: #1a1f5f; font-size: 16px; line-height: 1.6; margin-bottom: 20px;">
                                    You're doing the work, building the book, and watching revenue slip through the cracks. That stops here.
                                </p>
                                <div style="text-align: center;">
                                    <div style="background-color: #03045E; color: white; padding: 15px 25px; border-radius: 8px; display: inline-block; margin: 20px 0;">
                                        <span style="font-size: 20px; vertical-align: middle; margin-right: 8px;">🎉</span>
                                        <span style="vertical-align: middle;">Time to max what's yours</span>
                                    </div>
                                </div>
                                <p style="color: #1a1f5f; font-size: 16px; line-height: 1.6; margin-bottom: 20px;">
                                    It's time to keep more, earn smarter, and finally get what's yours.
                                </p>
                                <p style="color: #1a1f5f; font-size: 16px; line-height: 1.6; margin-bottom: 20px;">
                                    Early access is on the way. Stay ready.
                                </p>
                                <p style="color: #1a1f5f; font-size: 16px; line-height: 1.6; margin-top: 20px; font-style: italic;">
                                    Have questions? Just reply to this email and we'll get back to you.
                                </p>
                            </div>
                            <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center;">
                                <p style="color: #6b7280; font-size: 14px;">
                                    Cheers,<br>
                                    The Medicare Max Team
                                </p>
                            </div>
                        </div>
                    `
                });
                logger.info(`Confirmation email sent to ${email}`);
            } catch (emailError) {
                // Log the error but don't fail the request
                logger.error(`Failed to send confirmation email: ${emailError instanceof Error ? emailError.message : String(emailError)}`);
            }

            // Explicitly set success status
            set.status = 200;
            
            return { 
                success: true, 
                message: isUpdate ? 'Successfully updated your waitlist entry' : 'Successfully joined waitlist'
            };
        } catch (error) {
            logger.error(`Waitlist error: ${error instanceof Error ? error.message : String(error)}`);
            set.status = 500;
            return { 
                success: false, 
                message: 'Internal server error' 
            };
        }
    });

    return app;
};

================
File: backend/src/scripts/apply_nullable_fields_migration.ts
================
/**
 * Script to apply the make_optional_fields_nullable migration to all organizations
 * 
 * Usage: 
 * bun run backend/src/scripts/apply_nullable_fields_migration.ts
 */

import fs from 'fs';
import path from 'path';
import { Database } from '../database';
import { logger } from '../logger';

const migrationPath = path.resolve(__dirname, '../../../backend/migrations/20250425_make_optional_fields_nullable.sql');

if (!fs.existsSync(migrationPath)) {
  logger.error(`Migration file not found: ${migrationPath}`);
  process.exit(1);
}

const migrationSQL = fs.readFileSync(migrationPath, 'utf-8');

// Function to split SQL dump into individual statements
// This handles SQL statements more precisely than just splitting on semicolons
function splitSqlStatements(sql: string): string[] {
  const statements: string[] = [];
  let currentStatement = "";
  let inString = false;
  let inComment = false;
  let inBlockComment = false;
  let stringQuote: string | null = null;

  for (let i = 0; i < sql.length; i++) {
    const char = sql[i];
    const nextChar = i + 1 < sql.length ? sql[i + 1] : null;

    // Handle comments
    if (!inString) {
      if (char === "-" && nextChar === "-" && !inBlockComment) {
        inComment = true;
        i++; // Skip next char
        currentStatement += char + nextChar;
        continue;
      }
      if (char === "/" && nextChar === "*" && !inComment) {
        inBlockComment = true;
        i++;
        currentStatement += char + nextChar;
        continue;
      }
      if (inComment && char === "\n") {
        inComment = false;
        currentStatement += char;
        continue;
      }
      if (inBlockComment && char === "*" && nextChar === "/") {
        inBlockComment = false;
        i++;
        currentStatement += char + nextChar;
        continue;
      }
      if (inComment || inBlockComment) {
        currentStatement += char;
        continue;
      }
    }

    // Handle string literals
    if ((char === "'" || char === '"') && !inComment && !inBlockComment) {
      if (!inString) {
        inString = true;
        stringQuote = char;
      } else if (char === stringQuote) {
        // Check for escaped quotes
        if (i > 0 && sql[i - 1] !== "\\") {
          inString = false;
          stringQuote = null;
        }
      }
    }

    // Handle statement termination
    if (char === ";" && !inString && !inComment && !inBlockComment) {
      currentStatement += char;
      statements.push(currentStatement.trim());
      currentStatement = "";
      continue;
    }

    currentStatement += char;
  }

  // Add the last statement if it exists
  if (currentStatement.trim()) {
    statements.push(currentStatement.trim());
  }

  return statements.filter(stmt => stmt.length > 0);
}

async function applyMigration() {
  try {
    // Get list of all organizations
    const mainDb = new Database();
    const orgs = await mainDb.fetchAll('SELECT id, name, turso_db_url, turso_auth_token FROM organizations WHERE active = 1');
    
    logger.info(`Found ${orgs.length} active organizations`);
    
    // Split SQL statements properly
    const statements = splitSqlStatements(migrationSQL);
    logger.info(`Parsed ${statements.length} SQL statements from migration file`);
    
    // Apply migration to each organization
    for (const org of orgs) {
      try {
        logger.info(`Applying migration to organization ${org.id} (${org.name})...`);
        
        // Connect to the org's database
        const orgDb = new Database(org.turso_db_url, org.turso_auth_token);
        
        // Execute each statement in a transaction if possible
        try {
          await orgDb.transaction(async (tx) => {
            for (const stmt of statements) {
              if (stmt.trim()) {
                try {
                  logger.info(`Executing statement: ${stmt.substring(0, 50)}...`);
                  await tx.execute(stmt);
                } catch (err) {
                  logger.error(`Error executing statement for org ${org.id}: ${err}`);
                  logger.error(`Statement: ${stmt}`);
                  throw err; // Rethrow to trigger transaction rollback
                }
              }
            }
            logger.info(`All statements executed successfully for organization ${org.id}`);
          });
        } catch (txError) {
          // If transaction fails, try executing statements individually without transaction
          logger.warn(`Transaction failed, trying to execute statements individually: ${txError}`);
          
          for (const stmt of statements) {
            if (stmt.trim()) {
              try {
                // Skip transaction control statements when executing individually
                if (!/^\s*(BEGIN|COMMIT|ROLLBACK|PRAGMA)/i.test(stmt)) {
                  await orgDb.execute(stmt);
                }
              } catch (err) {
                logger.error(`Error executing individual statement for org ${org.id}: ${err}`);
                logger.error(`Statement: ${stmt}`);
                // Continue with next statement
              }
            }
          }
        }
        
        logger.info(`Migration applied successfully to organization ${org.id} (${org.name})`);
      } catch (err) {
        logger.error(`Error applying migration to organization ${org.id} (${org.name}): ${err}`);
        // Continue with next organization even if one fails
      }
    }
    
    logger.info('Migration process completed for all organizations');
  } catch (err) {
    logger.error(`Fatal error in migration process: ${err}`);
    process.exit(1);
  }
}

// Run the migration
applyMigration().then(() => {
  logger.info('Migration process completed successfully');
  process.exit(0);
}).catch((err) => {
  logger.error(`Unhandled error: ${err}`);
  process.exit(1);
});

================
File: backend/src/scripts/apply_org_migrations.ts
================
#!/usr/bin/env bun

/**
 * Script to apply email unique constraint migration to all organization databases
 * 
 * Usage: 
 * - Apply to all orgs: bun run scripts/apply_org_migrations.ts
 * - Apply to specific org: bun run scripts/apply_org_migrations.ts 7
 */
import { Database } from '../database';
import { TursoService } from '../services/turso';
import { logger } from '../logger';
import fs from 'fs';
import path from 'path';

async function main() {
  try {
    // Check if we're targeting a specific org
    const targetOrgId = process.argv[2];
    
    // Initialize main database connection
    const mainDb = new Database();
    
    // Get organizations with their database URLs and tokens
    let orgs;
    if (targetOrgId) {
      // If targeting specific org
      orgs = await mainDb.fetchAll(`
        SELECT id, name, turso_db_url, turso_auth_token 
        FROM organizations 
        WHERE id = ? AND turso_db_url IS NOT NULL AND turso_auth_token IS NOT NULL
      `, [targetOrgId]);
      
      if (orgs.length === 0) {
        logger.error(`Organization with ID ${targetOrgId} not found or has no database configuration`);
        process.exit(1);
      }
      logger.info(`Targeting specific organization: ${targetOrgId}`);
    } else {
      // Get all orgs
      orgs = await mainDb.fetchAll(`
        SELECT id, name, turso_db_url, turso_auth_token 
        FROM organizations 
        WHERE turso_db_url IS NOT NULL AND turso_auth_token IS NOT NULL
      `);
    }
    
    logger.info(`Found ${orgs.length} organizations with databases`);
    
    // Get the migration SQL
    const migrationPath = path.join(process.cwd(), 'migrations', '20250329_fix_email_unique_constraint.sql');
    const migrationSql = fs.readFileSync(migrationPath, 'utf8');
    
    // Process each organization
    for (const org of orgs) {
      const orgId = org.id || org[0];
      const orgName = org.name || org[1];
      const dbUrl = org.turso_db_url || org[2];
      const authToken = org.turso_auth_token || org[3];
      
      try {
        logger.info(`Processing organization: ${orgName} (ID: ${orgId})`);
        
        // Get database connection for this organization
        const orgDb = new Database(dbUrl, authToken);
        
        // Check if contacts table exists and if updated_at column exists
        let tableCheck, hasUpdatedAtColumn;
        try {
          tableCheck = await orgDb.fetchOne(`
            SELECT name FROM sqlite_master WHERE type='table' AND name='contacts'
          `);
          
          if (tableCheck) {
            // Check if updated_at column exists
            const columnCheck = await orgDb.fetchOne(`
              SELECT COUNT(*) as count FROM pragma_table_info('contacts') WHERE name = 'updated_at'
            `);
            hasUpdatedAtColumn = columnCheck && 
              (typeof columnCheck === 'object' ? 
                ((columnCheck as any).count > 0 || (Array.isArray(columnCheck) && columnCheck[0] && Number(columnCheck[0]) > 0)) : 
                false);
            
            logger.info(`Table check: contacts table exists=${!!tableCheck}, has updated_at column=${hasUpdatedAtColumn}`);
          }
        } catch (checkError) {
          logger.warn(`Error checking table schema: ${checkError}`);
        }
        
        // Apply migration in separate chunks to handle potential errors
        
        // Start with dropping views that depend on contacts
        try {
          await orgDb.execute('DROP VIEW IF EXISTS v_contact_stats');
          logger.info('Dropped dependent views');
        } catch (viewError) {
          logger.warn(`Error dropping views: ${viewError}`);
        }
        
        // Check and backup eligibility_answers if it exists
        try {
          const eligibilityCheck = await orgDb.fetchOne(`
            SELECT name FROM sqlite_master WHERE type='table' AND name='eligibility_answers'
          `);
          
          if (eligibilityCheck) {
            // Create backup table and copy data
            await orgDb.execute(`
              CREATE TABLE IF NOT EXISTS eligibility_answers_backup AS 
              SELECT * FROM eligibility_answers
            `);
            
            // Drop the table to avoid foreign key issues
            await orgDb.execute('DROP TABLE IF EXISTS eligibility_answers');
            logger.info('Backed up and dropped eligibility_answers table');
          }
        } catch (backupError) {
          logger.warn(`Error handling eligibility_answers: ${backupError}`);
        }
        
        // Handle updated_at column if contacts table exists
        if (tableCheck) {
          try {
            if (!hasUpdatedAtColumn) {
              logger.info('Adding missing updated_at column');
              await orgDb.execute('ALTER TABLE contacts ADD COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP');
            } else {
              logger.info('updated_at column already exists, skipping addition');
            }
          } catch (columnError) {
            // If error contains "duplicate column" we can ignore it
            if ((columnError as Error).toString().includes('duplicate column')) {
              logger.info('Ignoring duplicate column error for updated_at - column already exists');
            } else {
              logger.warn(`Error handling updated_at column: ${columnError}`);
            }
          }
        }
        
        // Apply the main migration script with error handling for each statement
        try {
          // Split migration SQL into individual statements
          const migrationStatements = migrationSql
            .split(';')
            .map(stmt => stmt.trim())
            .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));
          
          // Skip statements that add updated_at column since we've handled it above
          const filteredStatements = migrationStatements.filter(stmt => {
            // Skip the problematic statements
            return !stmt.includes('ADD COLUMN updated_at') && 
                   !stmt.includes('pragma_table_info') &&
                   !stmt.includes('_vars') &&
                   !stmt.includes('_commands');
          });
          
          logger.info(`Applying ${filteredStatements.length} migration statements`);
          
          // Execute each statement with individual error handling
          for (const statement of filteredStatements) {
            try {
              // Skip empty statements or diagnostic queries
              if (statement.trim().length === 0 || 
                  statement.includes('PRAGMA table_info') ||
                  statement.includes('SELECT name, sql FROM sqlite_master')) {
                continue;
              }
              
              await orgDb.execute(statement);
            } catch (stmtError) {
              const errorString = (stmtError as Error).toString();
              
              // Handle specific errors gracefully
              if (errorString.includes('duplicate column name: updated_at')) {
                logger.info('Ignoring duplicate updated_at column error');
              } else if (errorString.includes('no such table: contacts_temp')) {
                logger.warn('Contacts temporary table not found, may have already been renamed');
              } else {
                logger.error(`Error executing statement: ${stmtError}`);
                logger.error(`Failed statement: ${statement.substring(0, 100)}...`);
              }
              // Continue with next statement, errors shouldn't fail the whole migration
            }
          }
          
          // Verify the migration results
          try {
            // Check if email unique constraint exists
            const uniqueCheck = await orgDb.fetchOne(`
              SELECT COUNT(*) as count FROM sqlite_master 
              WHERE type='index' AND name='contact_email_unique'
            `);
            
            const hasUniqueConstraint = uniqueCheck && 
              (typeof uniqueCheck === 'object' ? 
                ((uniqueCheck as any).count > 0 || (Array.isArray(uniqueCheck) && uniqueCheck[0] && Number(uniqueCheck[0]) > 0)) : 
                false);
                
            if (hasUniqueConstraint) {
              logger.info('Email unique constraint created successfully');
            } else {
              logger.warn('Email unique constraint may not have been created');
              
              // Try to create it if missing
              try {
                await orgDb.execute(`
                  CREATE UNIQUE INDEX IF NOT EXISTS contact_email_unique ON contacts(email)
                `);
                logger.info('Created missing email unique constraint');
              } catch (createError) {
                logger.error(`Error creating missing constraint: ${createError}`);
              }
            }
            
            // Test if ON CONFLICT works
            try {
              await orgDb.execute(`
                INSERT OR IGNORE INTO contacts (
                  first_name, last_name, email, current_carrier, plan_type, 
                  effective_date, birth_date, tobacco_user, gender, state, zip_code, phone_number
                ) 
                VALUES ('Test', 'Migration', 'test.migration@example.com', 'Test', 'Test', 
                  '2025-01-01', '1970-01-01', 0, 'M', 'TX', '12345', '123-456-7890')
                ON CONFLICT(email) DO NOTHING
              `);
              logger.info('ON CONFLICT query test successful');
            } catch (testError) {
              logger.error(`ON CONFLICT test failed: ${testError}`);
            }
            
          } catch (verifyError) {
            logger.warn(`Error verifying migration results: ${verifyError}`);
          }
          
          logger.info(`Successfully migrated organization ${orgName} (ID: ${orgId})`);
        } catch (migrationError) {
          logger.error(`Migration failed for organization ${orgName} (ID: ${orgId}): ${migrationError}`);
        }
      } catch (orgError) {
        logger.error(`Error processing organization ${orgName} (ID: ${orgId}): ${orgError}`);
      }
    }
    
    logger.info('Migration process completed');
  } catch (error) {
    logger.error(`Script error: ${error}`);
    process.exit(1);
  }
}

main().catch(error => {
  logger.error(`Unhandled error: ${error}`);
  process.exit(1);
});

================
File: backend/src/scripts/migrate-add-aep-columns.ts
================
import { Database } from '../database';
import { logger } from '../logger';

async function migrateAddAepColumns() {
  try {
    logger.info('Starting migration to add AEP request columns to all org databases');
    
    // Connect to main database
    const mainDb = new Database();
    
    // Get all organization IDs, database URLs and tokens
    const orgs = await mainDb.fetchAll(
      'SELECT id, turso_db_url, turso_auth_token FROM organizations WHERE turso_db_url IS NOT NULL'
    );
    
    logger.info(`Found ${orgs.length} organizations with databases to migrate`);
    
    for (const org of orgs) {
      const orgId = org.id || org[0];
      const dbUrl = org.turso_db_url || org[1];
      const authToken = org.turso_auth_token || org[2];
      
      if (!dbUrl || !authToken) {
        logger.warn(`Skipping org ${orgId} due to missing database credentials`);
        continue;
      }
      
      logger.info(`Migrating org ${orgId} with database URL ${dbUrl}`);
      
      try {
        // Connect to org database
        const orgDb = new Database(dbUrl, authToken);
        
        // Check if columns already exist
        const tableInfo = await orgDb.fetchAll("PRAGMA table_info(contacts)");
        const columns = tableInfo.map((col: any) => col.name || col[1]);
        
        if (!columns.includes('aep_request')) {
          logger.info(`Adding aep_request column to contacts table for org ${orgId}`);
          await orgDb.execute('ALTER TABLE contacts ADD COLUMN aep_request BOOLEAN DEFAULT FALSE');
        } else {
          logger.info(`aep_request column already exists for org ${orgId}`);
        }
        
        if (!columns.includes('aep_request_date')) {
          logger.info(`Adding aep_request_date column to contacts table for org ${orgId}`);
          await orgDb.execute('ALTER TABLE contacts ADD COLUMN aep_request_date DATETIME');
        } else {
          logger.info(`aep_request_date column already exists for org ${orgId}`);
        }
        
        logger.info(`Successfully migrated org ${orgId}`);
      } catch (error) {
        logger.error(`Error migrating org ${orgId}: ${error}`);
      }
    }
    
    logger.info('Migration completed');
  } catch (error) {
    logger.error(`Migration failed: ${error}`);
    throw error;
  }
}

// Execute migration if this file is run directly
if (import.meta.main) {
  migrateAddAepColumns()
    .then(() => {
      logger.info('Migration script completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      logger.error(`Migration script failed: ${error}`);
      process.exit(1);
    });
}

export { migrateAddAepColumns };

================
File: backend/src/services/agentSettings.ts
================
import { db } from '../database';
import { NotFoundError } from '../errors';
import { logger } from '../logger';

export interface StateCarrierSetting {
  active: boolean;
  targetGI: boolean;
}

export interface AgentSettings {
  id: number;
  agentId: number;
  stateLicenses: string[];
  carrierContracts: string[];
  stateCarrierSettings: {
    [state: string]: {
      [carrier: string]: StateCarrierSetting;
    };
  };
  emailSendBirthday: boolean;
  emailSendPolicyAnniversary: boolean;
  emailSendAep: boolean;
  smartSendEnabled: boolean;
}

export async function getAgentSettings(agentId: number): Promise<AgentSettings> {
  try {
    const result = await db.oneOrNone(
      'SELECT * FROM agent_settings WHERE agent_id = $1',
      [agentId]
    )

    if (!result) {
      // Return default settings instead of creating them
      return {
        id: 0,
        agentId: agentId,
        stateLicenses: [],
        carrierContracts: [],
        stateCarrierSettings: {},
        emailSendBirthday: false,
        emailSendPolicyAnniversary: false,
        emailSendAep: false,
        smartSendEnabled: false
      }
    }

    return {
      id: result.id,
      agentId: result.agent_id,
      stateLicenses: result.state_licenses || [],
      carrierContracts: result.carrier_contracts || [],
      stateCarrierSettings: result.state_carrier_settings || {},
      emailSendBirthday: result.email_send_birthday || false,
      emailSendPolicyAnniversary: result.email_send_policy_anniversary || false,
      emailSendAep: result.email_send_aep || false,
      smartSendEnabled: result.smart_send_enabled || false,
    }
  } catch (error) {
    logger.error(`Error fetching agent settings: ${error}`)
    // Return default settings on error
    return {
      id: 0,
      agentId: agentId,
      stateLicenses: [],
      carrierContracts: [],
      stateCarrierSettings: {},
      emailSendBirthday: false,
      emailSendPolicyAnniversary: false,
      emailSendAep: false,
      smartSendEnabled: false
    }
  }
}

async function createDefaultSettings(agentId: number): Promise<AgentSettings> {
  const result = await db.one(
    `INSERT INTO agent_settings 
     (agent_id, state_licenses, carrier_contracts, state_carrier_settings)
     VALUES ($1, $2, $3, $4)
     RETURNING *`,
    [agentId, [], [], {}]
  );

  return {
    id: result.id,
    agentId: result.agent_id,
    stateLicenses: result.state_licenses,
    carrierContracts: result.carrier_contracts,
    stateCarrierSettings: result.state_carrier_settings,
    emailSendBirthday: result.email_send_birthday,
    emailSendPolicyAnniversary: result.email_send_policy_anniversary,
    emailSendAep: result.email_send_aep,
    smartSendEnabled: result.smart_send_enabled,
  };
}

export async function updateAgentSettings(
  agentId: number,
  settings: Partial<AgentSettings>
): Promise<AgentSettings> {
  const result = await db.oneOrNone(
    `UPDATE agent_settings
     SET state_licenses = COALESCE($1, state_licenses),
         carrier_contracts = COALESCE($2, carrier_contracts),
         state_carrier_settings = COALESCE($3, state_carrier_settings),
         email_send_birthday = COALESCE($4, email_send_birthday),
         email_send_policy_anniversary = COALESCE($5, email_send_policy_anniversary),
         email_send_aep = COALESCE($6, email_send_aep),
         smart_send_enabled = COALESCE($7, smart_send_enabled)
     WHERE agent_id = $8
     RETURNING *`,
    [
      settings.stateLicenses,
      settings.carrierContracts,
      settings.stateCarrierSettings,
      settings.emailSendBirthday,
      settings.emailSendPolicyAnniversary,
      settings.emailSendAep,
      settings.smartSendEnabled,
      agentId,
    ]
  );

  if (!result) {
    throw new NotFoundError('Agent settings not found');
  }

  return {
    id: result.id,
    agentId: result.agent_id,
    stateLicenses: result.state_licenses,
    carrierContracts: result.carrier_contracts,
    stateCarrierSettings: result.state_carrier_settings,
    emailSendBirthday: result.email_send_birthday,
    emailSendPolicyAnniversary: result.email_send_policy_anniversary,
    emailSendAep: result.email_send_aep,
    smartSendEnabled: result.smart_send_enabled,
  };
}

================
File: backend/src/services/auth.ts
================
import crypto from 'crypto';
import { logger } from '../logger';
import { db } from '../database';
import { Database } from '../database';
import type { User } from '../types';
import { config } from '../config';

const algorithm = "aes-256-gcm";
const IV_LENGTH = 12;
const UTF8 = "utf8";
const HEX = "hex";

// Initialize encryption key
let secret = process.env.MAGIC_LINK_SECRET;
if (!secret) {
  if (process.env.NODE_ENV === "production") {
    throw new Error("Must set MAGIC_LINK_SECRET in production");
  }
  secret = "dev-secret-key";
}

const ENCRYPTION_KEY = crypto.scryptSync(secret, "salt", 32);

interface MagicLinkPayload {
  email: string;
  organizationSlug: string;
  expiresAt: number;
  redirectUrl: string;
  orgId?: number;
  name?: string;
}

interface SignupLinkPayload {
  email: string;
  firstName: string;
  lastName: string;
  redirectUrl: string;
}

export class AuthService {
  constructor(private baseUrl?: string) {
    // If no baseUrl is provided, get it from config
    if (!baseUrl) {
      this.baseUrl = config.PUBLIC_URL;
    } else {
      // Ensure baseUrl doesn't end with a slash
      this.baseUrl = baseUrl.replace(/\/$/, '');
    }
    
    logger.info(`AuthService initialized with baseUrl: ${this.baseUrl}`);
  }

  async createSignupLink(
    email: string,
    options?: {
      redirectUrl?: string;
      firstName?: string;
      lastName?: string;
    }
  ): Promise<string> {
    const payload: SignupLinkPayload = {
      email,
      firstName: options?.firstName || '',
      lastName: options?.lastName || '',
      redirectUrl: options?.redirectUrl || '/onboarding'
    };

    logger.info(`Creating signup link with payload: ${JSON.stringify(payload)}`);
    logger.info(`redirectUrl: ${payload.redirectUrl}`);
    const token = this.encrypt(JSON.stringify(payload));
    // URL encode the entire token
    const encodedToken = encodeURIComponent(token);
    logger.info(`Generated magic link token: ${token}`);
    
    return `${this.baseUrl}/signup/verify/${encodedToken}`;
  }

  async verifySignupLink(token: string): Promise<{
    valid: boolean;
    email?: string;
    redirectUrl?: string;
  }> {
    try { 
      const decodedToken = decodeURIComponent(token);
      const decrypted = this.decrypt(decodedToken);
      const payload: SignupLinkPayload = JSON.parse(decrypted);

      if (!payload.email) {
        logger.warn('Missing email in signup link payload');
        return { valid: false };
      }

      if (!payload.redirectUrl) {
        logger.warn('Missing redirectUrl in signup link payload');
        return { valid: false };  
      }

      logger.info('Signup link verification successful, returning payload');
      return {
        valid: true,
        email: payload.email,
        redirectUrl: payload.redirectUrl
      };

    } catch (error) {
      logger.error(`Signup link verification failed: ${error}`);
      return { valid: false };  
    }
  }

  async createMagicLink(
    email: string, 
    organizationSlug: string, 
    options?: { 
      redirectUrl?: string;
      orgId?: number;
      name?: string;
    }
  ): Promise<string> {
    const payload: MagicLinkPayload = {
      email,
      organizationSlug,
      expiresAt: Date.now() + (30 * 60 * 1000), // 30 minutes
      redirectUrl: options?.redirectUrl || '/dashboard',
      ...(options?.orgId && { orgId: options.orgId }),
      ...(options?.name && { name: options.name })
    };

    logger.info(`Creating magic link with payload: ${JSON.stringify(payload)}`);
    logger.info(`redirectUrl: ${payload.redirectUrl}`);
    const token = this.encrypt(JSON.stringify(payload));
    // URL encode the entire token
    const encodedToken = encodeURIComponent(token);
    logger.info(`Generated magic link token: ${token}`);
    return `${this.baseUrl}/auth/verify/${organizationSlug}/${encodedToken}`;
  }

  async verifyMagicLink(token: string, organizationSlug: string): Promise<{
    valid: boolean;
    email?: string;
    redirectUrl?: string;
  }> {
    try {
      logger.info('Starting magic link verification');
      logger.info(`Organization slug: ${organizationSlug}`);

      const decodedToken = decodeURIComponent(token);
      const decrypted = this.decrypt(decodedToken);
      const payload: MagicLinkPayload = JSON.parse(decrypted);

      // Verify organization and expiration
      if (payload.organizationSlug !== organizationSlug) {
        logger.error(`Organization slug mismatch: ${payload.organizationSlug} !== ${organizationSlug}`);
        return { valid: false };
      }

      if (payload.expiresAt < Date.now()) {
        logger.error(`Token expired: ${new Date(payload.expiresAt)} < ${new Date()}`);
        return { valid: false };
      }

      // No need to check agent status here since we only send links to valid agents

      logger.info('Verification successful, returning payload');
      return {
        valid: true,
        email: payload.email,
        redirectUrl: payload.redirectUrl
      };

    } catch (error) {
      logger.error(`Magic link verification failed: ${error}`);
      return { valid: false };
    }
  }

  private encrypt(text: string): string {
    try {
      const iv = crypto.randomBytes(IV_LENGTH);
      const cipher = crypto.createCipheriv(algorithm, ENCRYPTION_KEY, iv);
      let encrypted = cipher.update(text, UTF8, HEX);
      encrypted += cipher.final(HEX);
      const authTag = cipher.getAuthTag();
      
      const token = `${iv.toString(HEX)}:${authTag.toString(HEX)}:${encrypted}`;
      return token;
    } catch (error) {
      logger.error(`Encryption failed: ${error}`);
      throw error;
    }
  }

  private decrypt(text: string): string {
    try {
      const [ivPart, authTagPart, encryptedText] = text.split(":");
      if (!ivPart || !authTagPart || !encryptedText) {
        throw new Error("Invalid token format - missing parts");
      }

      logger.info('Decrypting token parts:');
      logger.info(`IV length: ${ivPart.length}`);
      logger.info(`Auth tag length: ${authTagPart.length}`);
      logger.info(`Encrypted text length: ${encryptedText.length}`);

      const iv = Buffer.from(ivPart, HEX);
      const authTag = Buffer.from(authTagPart, HEX);
      const decipher = crypto.createDecipheriv(algorithm, ENCRYPTION_KEY, iv);
      decipher.setAuthTag(authTag);
      let decrypted = decipher.update(encryptedText, HEX, UTF8);
      decrypted += decipher.final(UTF8);
      return decrypted;
    } catch (error) {
      logger.error(`Decryption failed: ${error}`);
      throw error;
    }
  }

  async getUserFromSession(request: Request): Promise<Partial<User> | null> {
    // Check for bypass header for testing
    const bypassHeader = request.headers.get('X-Bypass-Auth');
    if (bypassHeader) {
      const bypassUserId = bypassHeader === 'true' ? 'test-user-id' : bypassHeader;
      logger.info(`Bypassing authentication with header for user ID: ${bypassUserId}`);
      return {
        id: bypassUserId,
        email: 'test@example.com',
        organization_id: 'test-org-id',
        is_admin: true,
        is_agent: true,
        first_name: 'Test',
        last_name: 'User',
        is_active: true,
        organization_name: 'Test Organization'
      };
    }
    
    // Check if this is a public endpoint that should bypass auth
    const url = new URL(request.url);
    const pathname = url.pathname;
    
    // Log all requested pathnames for debugging
    logger.info(`Auth check for pathname: ${pathname}`);
    
    // Skip auth for subscription/checkout endpoint
    if (pathname === '/api/subscription/checkout') {
      logger.info('Skipping auth check for subscription/checkout endpoint');
      return { skip_auth: true }; // Return a dummy user that won't trigger auth failures
    }
    
    // Skip auth for all self-service endpoints
    if (pathname.startsWith('/api/self-service/')) {
      logger.info(`Skipping auth check for self-service endpoint: ${pathname}`);
      
      return { skip_auth: true }; // Return a dummy user that won't trigger auth failures
    }

    // Test both regex patterns for debugging
    const comparePathTest1 = /^\/compare\/[^\/]+$/.test(pathname);
    const comparePathTest2 = pathname.startsWith('/compare/');
    
    logger.info(`Compare path tests: regex=${comparePathTest1}, startsWith=${comparePathTest2} for ${pathname}`);

    // Skip auth for compare pages with path parameters
    if (pathname.startsWith('/compare/')) {
      logger.info(`Skipping auth check for compare path parameter endpoint: ${pathname}`);
      return { skip_auth: true }; // Return a dummy user that won't trigger auth failures
    }
    
    // Skip auth check for static files
    if (
      pathname.endsWith('.js') || 
      pathname.endsWith('.css') || 
      pathname.endsWith('.png') || 
      pathname.endsWith('.jpg') || 
      pathname.endsWith('.svg') || 
      pathname.endsWith('.ico') ||
      pathname.endsWith('.ttf') ||
      pathname.endsWith('.woff') ||
      pathname.endsWith('.woff2')
    ) {
      logger.info(`Skipping auth check for static file: ${pathname}`);
      return { skip_auth: true };
    }

    const cookieHeader = request.headers.get('Cookie') || '';

    // Get session cookie
    const sessionId = cookieHeader.split('session=')[1]?.split(';')[0];
    
    if (!sessionId) {
      logger.warn('No session cookie found');
      return null;
    }

    // Initialize database
    const db = new Database();

    // Get session data
    const sessionResult = await db.fetchAll(
      'SELECT user_id FROM sessions WHERE id = ?',
      [sessionId]
    );

    if (!sessionResult || sessionResult.length === 0) {
      logger.warn(`No session found for ID: ${sessionId}`);
      return null;
    }

    const userId = sessionResult[0][0];

    // Updated query to use is_admin and is_agent
    const userResult = await db.fetchAll(
      `SELECT 
        u.id,
        u.email,
        u.organization_id,
        u.is_admin,
        u.is_agent,
        u.first_name,
        u.last_name,
        u.is_active,
        u.phone,
        o.name as organization_name
       FROM users u
       JOIN organizations o ON u.organization_id = o.id 
       WHERE u.id = ?`,
      [userId]
    );

    if (!userResult || userResult.length === 0) {
      logger.warn('No user found for session');
      return null;
    }

    const user = {
      id: userResult[0][0],
      email: userResult[0][1],
      organization_id: userResult[0][2],
      is_admin: Boolean(userResult[0][3]),
      is_agent: Boolean(userResult[0][4]),
      first_name: userResult[0][5],
      last_name: userResult[0][6],
      is_active: userResult[0][7],
      phone: userResult[0][8],
      organization_name: userResult[0][9]
    };

    return user;
  }
}

export async function validateSession(sessionId: string): Promise<User | null> {
  logger.info(`Validating session: ${sessionId}`);
  
  const db = new Database();

  // Get the session
  const session = await db.fetchOne<{
    id: string;
    user_id: number;
    expires_at: string;
  }>('SELECT * FROM sessions WHERE id = ?', [sessionId]);

  logger.info(`Session lookup result: ${session ? JSON.stringify(session) : 'not found'}`);

  if (!session) {
    logger.warn('No session found in database');
    return null;
  }

  // Check if session is expired
  const expiresAt = new Date(session.expires_at);
  const now = new Date();
  logger.info(`Session expires: ${expiresAt}, current time: ${now}`);

  if (expiresAt < now) {
    logger.warn('Session is expired');
    await db.execute('DELETE FROM sessions WHERE id = ?', [sessionId]);
    return null;
  }

  // Get the user associated with this session with updated columns
  const user = await db.fetchOne<User>(
    `SELECT 
      u.id,
      u.email,
      u.organization_id,
      u.is_admin,
      u.is_agent,
      u.first_name,
      u.last_name,
      u.is_active,
      u.phone,
      o.name as organization_name 
     FROM users u
     JOIN organizations o ON u.organization_id = o.id 
     WHERE u.id = ?`,
    [session.user_id]
  );

  logger.info(`User lookup result: ${user ? JSON.stringify(user) : 'not found'}`);

  return user;
}

export function generateToken(): string {
  return crypto.randomBytes(32).toString('hex');
}

export async function getUserFromSession(request: Request) {
  try {
    // Check for X-Bypass-Auth header
    const bypassAuth = request.headers.get('X-Bypass-Auth');
    if (bypassAuth) {
      logger.info(`Bypassing auth check due to X-Bypass-Auth header`);
      return { 
        skip_auth: true,
        id: 1,
        email: 'bypass@example.com',
        organization_id: 1,
        is_admin: true,
        is_agent: true,
        first_name: 'Auth',
        last_name: 'Bypass',
        is_active: true,
        organization_name: 'Bypass Org'
      };
    }
    
    // Check if this is a public endpoint that should bypass auth
    const url = new URL(request.url);
    const pathname = url.pathname;
    
    // Log all requested pathnames for debugging
    logger.info(`Auth check for pathname: ${pathname}`);
    
    // COMPREHENSIVE SPA ROUTES CHECK - any frontend route should bypass auth
    // Check for non-API paths with no file extension (SPA routes)
    if (!pathname.startsWith('/api/') && 
        !pathname.includes('.')) {
      logger.info(`[AUTH BYPASS] SPA route detected (non-API, no extension): ${pathname}`);
      return { 
        skip_auth: true,
        id: 1,
        email: 'bypass@example.com',
        organization_id: 1,
        is_admin: true,
        is_agent: true,
        first_name: 'Auth',
        last_name: 'Bypass',
        is_active: true,
        organization_name: 'Bypass Org'
      };
    }
    
    // Explicit checks for known SPA routes
    if (pathname.startsWith('/compare/') || 
        pathname.startsWith('/quote/') || 
        pathname.startsWith('/eligibility') ||
        pathname.startsWith('/schedule')) {
      logger.info(`[AUTH BYPASS] Known SPA route detected: ${pathname}`);
      return { 
        skip_auth: true,
        id: 1,
        email: 'bypass@example.com',
        organization_id: 1,
        is_admin: true,
        is_agent: true,
        first_name: 'Auth',
        last_name: 'Bypass',
        is_active: true,
        organization_name: 'Bypass Org'
      };
    }
    
    // Skip auth for subscription/checkout endpoint
    if (pathname === '/api/subscription/checkout') {
      logger.info('Skipping auth check for subscription/checkout endpoint');
      return { 
        skip_auth: true,
        id: 1,
        email: 'bypass@example.com',
        organization_id: 1,
        is_admin: true,
        is_agent: true,
        first_name: 'Auth',
        last_name: 'Bypass',
        is_active: true,
        organization_name: 'Bypass Org'
      };
    }
    
    // Skip auth for all self-service endpoints
    if (pathname.startsWith('/api/self-service/')) {
      logger.info(`Skipping auth check for self-service endpoint: ${pathname}`);
      return { 
        skip_auth: true,
        id: 1,
        email: 'bypass@example.com',
        organization_id: 1,
        is_admin: true,
        is_agent: true,
        first_name: 'Auth',
        last_name: 'Bypass',
        is_active: true,
        organization_name: 'Bypass Org'
      };
    }
    
    // Skip auth check for static files
    if (
      pathname.endsWith('.js') || 
      pathname.endsWith('.css') || 
      pathname.endsWith('.png') || 
      pathname.endsWith('.jpg') || 
      pathname.endsWith('.svg') || 
      pathname.endsWith('.ico') ||
      pathname.endsWith('.ttf') ||
      pathname.endsWith('.woff') ||
      pathname.endsWith('.woff2')
    ) {
      logger.info(`Skipping auth check for static file: ${pathname}`);
      return { 
        skip_auth: true,
        id: 1,
        email: 'bypass@example.com',
        organization_id: 1,
        is_admin: true,
        is_agent: true,
        first_name: 'Auth',
        last_name: 'Bypass',
        is_active: true,
        organization_name: 'Bypass Org'
      };
    }

    const cookieHeader = request.headers.get('Cookie') || '';

    // Get session cookie
    const sessionId = cookieHeader.split('session=')[1]?.split(';')[0];
    
    if (!sessionId) {
      logger.warn('No session cookie found');
      return null;
    }

    // Initialize database
    const db = new Database();

    // Get session data
    const sessionResult = await db.fetchAll(
      'SELECT user_id FROM sessions WHERE id = ?',
      [sessionId]
    );

    if (!sessionResult || sessionResult.length === 0) {
      logger.warn(`No session found for ID: ${sessionId}`);
      return null;
    }

    const userId = sessionResult[0][0];

    // Updated query to use is_admin and is_agent
    const userResult = await db.fetchAll(
      `SELECT 
        u.id,
        u.email,
        u.organization_id,
        u.is_admin,
        u.is_agent,
        u.first_name,
        u.last_name,
        u.is_active,
        u.phone,
        o.name as organization_name
       FROM users u
       JOIN organizations o ON u.organization_id = o.id 
       WHERE u.id = ?`,
      [userId]
    );

    if (!userResult || userResult.length === 0) {
      logger.warn('No user found for session');
      return null;
    }

    const user = {
      id: userResult[0][0],
      email: userResult[0][1],
      organization_id: userResult[0][2],
      is_admin: Boolean(userResult[0][3]),
      is_agent: Boolean(userResult[0][4]),
      first_name: userResult[0][5],
      last_name: userResult[0][6],
      is_active: userResult[0][7],
      phone: userResult[0][8],
      organization_name: userResult[0][9]
    };

    return user;

  } catch (error) {
    logger.error(`Error getting user from session: ${error}`);
    return null;
  }
}

================
File: backend/src/services/contactCount.ts
================
import { Database } from '../database';
import { logger } from '../logger';

/**
 * Updates the contact count for a user and handles subscription tier changes if needed
 */
export async function updateContactCount(userId: string, totalContacts: number): Promise<{
  success: boolean;
  error?: string;
}> {
  const db = new Database();
  
  try {
   
    // Update the contact count in the database
    await upsertContactCount(userId, totalContacts);

    // Check if auto-upgrade is enabled
    const user = await db.fetchOne<{ auto_upgrade_limit: number }>(
      'SELECT user_id FROM users WHERE id = ?',
      [userId]
    );
    
    if (!user) {
      return {
        success: false,
        error: 'User not found',
      };
    }
  } catch (error) {
    logger.error(`Error updating contact count for user ${userId}: ${error}`);
    return {
      success: false,
      error: 'Failed to update contact count',
    };
  }
  
  // Return success if no errors occurred
  return {
    success: true
  };
}

/**
 * Updates or inserts a contact count record for a user
 */
export async function upsertContactCount(userId: string, count: number): Promise<void> {
  const db = new Database();
  
  try {
    // Check if a record already exists
    const existingCount = await db.fetchOne<{ count: number }>(
      'SELECT count FROM contact_counts WHERE user_id = ?',
      [userId]
    );
    
    if (existingCount) {
      // Update existing record
      await db.execute(
        'UPDATE contact_counts SET count = ?, last_updated = CURRENT_TIMESTAMP WHERE user_id = ?',
        [count, userId]
      );
    } else {
      // Insert new record
      await db.execute(
        'INSERT INTO contact_counts (user_id, count, last_updated) VALUES (?, ?, CURRENT_TIMESTAMP)',
        [userId, count]
      );
    }
    
    logger.info(`Updated contact count for user ${userId} to ${count}`);
  } catch (error) {
    logger.error(`Error upserting contact count for user ${userId}:`, error);
    throw error;
  }
}

/**
 * Gets the current contact count for a user
 */
export async function getContactCount(userId: string): Promise<number> {
  const db = new Database();
  
  try {
    const countRecord = await db.fetchOne<{ count: number }>(
      'SELECT count FROM contact_counts WHERE user_id = ?',
      [userId]
    );
    
    return countRecord?.count || 0;
  } catch (error) {
    logger.error(`Error getting contact count for user ${userId}:`, error);
    throw error;
  }
}

/**
 * Gets the current subscription tier limit for a user
 */
export async function getContactLimit(userId: string): Promise<number> {
  const db = new Database();
  
  try {
    const subscription = await db.fetchOne<{ tier: number }>(
      'SELECT tier FROM subscriptions WHERE user_id = ? AND status = "active" ORDER BY created_at DESC LIMIT 1',
      [userId]
    );
    
    // Each tier represents 500 contacts
    return subscription ? subscription.tier * 500 : 0;
  } catch (error) {
    logger.error(`Error getting contact limit for user ${userId}:`, error);
    throw error;
  }
}

/**
 * Updates the auto-upgrade limit for a user
 */
export async function updateAutoUpgradeLimit(userId: string, limit: number): Promise<boolean> {
  const db = new Database();
  
  try {
    await db.execute(
      'UPDATE users SET auto_upgrade_limit = ? WHERE id = ?',
      [limit, userId]
    );
    
    logger.info(`Updated auto-upgrade limit for user ${userId} to ${limit}`);
    return true;
  } catch (error) {
    logger.error(`Error updating auto-upgrade limit for user ${userId}:`, error);
    return false;
  }
}

/**
 * Checks if adding a specified number of contacts would exceed the user's current tier
 */
export async function checkContactAddition(userId: string, additionalContacts: number): Promise<{
  canAdd: boolean;
  currentCount: number;
  limit: number;
  newTotal: number;
  requiredTier: number;
  currentTier: number;
}> {
  const db = new Database();
  
  try {
    // Get the current count
    const currentCount = await getContactCount(userId);
    
    // Get the current tier
    const subscription = await db.fetchOne<{ tier: number }>(
      'SELECT tier FROM subscriptions WHERE user_id = ? AND status = "active" ORDER BY created_at DESC LIMIT 1',
      [userId]
    );
    
    const currentTier = subscription?.tier || 0;
    const limit = currentTier * 500;
    const newTotal = currentCount + additionalContacts;
    const requiredTier = Math.ceil(newTotal / 500);
    
    return {
      canAdd: newTotal <= limit,
      currentCount,
      limit,
      newTotal,
      requiredTier,
      currentTier,
    };
  } catch (error) {
    logger.error(`Error checking contact addition for user ${userId}:`, error);
    throw error;
  }
}

================
File: backend/src/services/contactTracking.ts
================
/**
 * Contact Tracking Service
 * 
 * This service handles tracking unique contacts for usage-based billing.
 * It ensures that:
 * 1. Each unique contact is only counted once per billing cycle
 * 2. Contact counts are properly reported to Stripe
 * 3. Organizations can see their current usage
 */

import { Database } from '../database';
import { logger } from '../logger';
import { reportContactUsage } from './stripe';
import { v4 as uuidv4 } from 'uuid';

/**
 * Generate a unique ID for database records
 */
function generateId(): string {
  return uuidv4();
}

/**
 * Get the current billing cycle key for an organization
 * Format: YYYY-MM for monthly cycles
 */
export async function getCurrentBillingCycle(organizationId: string): Promise<string> {
  const db = new Database();
  
  try {
    // Check if organization has a current billing cycle
    const org = await db.fetchOne<{
      current_billing_cycle_key: string | null;
      contact_count_billing_date: string | null;
    }>('SELECT current_billing_cycle_key, contact_count_billing_date FROM organizations WHERE id = ?', [organizationId]);
    
    if (!org) {
      throw new Error(`Organization not found: ${organizationId}`);
    }
    
    // If organization has a current billing cycle, return it
    if (org.current_billing_cycle_key) {
      return org.current_billing_cycle_key;
    }
    
    // If not, create a new billing cycle
    const now = new Date();
    const cycleKey = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
    
    // Determine billing start date (default to 1st of month if not set)
    const billingDay = org.contact_count_billing_date || '01';
    const month = now.getMonth();
    const year = now.getFullYear();
    
    // Create start and end dates for the cycle
    const startDate = new Date(year, month, parseInt(billingDay, 10));
    const endDate = new Date(year, month + 1, parseInt(billingDay, 10));
    
    // Handle case where current date is before billing day in current month
    if (now.getDate() < parseInt(billingDay, 10)) {
      startDate.setMonth(startDate.getMonth() - 1);
      endDate.setMonth(endDate.getMonth() - 1);
    }
    
    // Create the billing cycle record
    await db.execute(`
      INSERT INTO billing_cycle_history (
        id, organization_id, cycle_key, start_date, end_date
      ) VALUES (?, ?, ?, ?, ?)
    `, [
      generateId(),
      organizationId,
      cycleKey,
      startDate.toISOString(),
      endDate.toISOString()
    ]);
    
    // Update the organization with the new billing cycle
    await db.execute(`
      UPDATE organizations 
      SET current_billing_cycle_key = ? 
      WHERE id = ?
    `, [cycleKey, organizationId]);
    
    logger.info(`Created new billing cycle ${cycleKey} for organization ${organizationId}`);
    
    return cycleKey;
  } catch (error) {
    logger.error(`Error getting current billing cycle: ${error}`);
    throw error;
  }
}

/**
 * Track a contact upload to ensure it's counted properly for billing
 */
export async function trackContact(
  organizationId: string, 
  userId: string, 
  contactEmail: string, 
  firstName?: string, 
  lastName?: string
): Promise<{ isNew: boolean; contactId: string }> {
  const db = new Database();
  
  try {
    // Validate inputs
    if (!organizationId || !userId || !contactEmail) {
      throw new Error('Missing required parameters for contact tracking');
    }
    
    // Normalize email for consistent lookups
    const normalizedEmail = contactEmail.trim().toLowerCase();
    
    // Get current billing cycle
    const billingCycle = await getCurrentBillingCycle(organizationId);
    
    // Check if contact already exists in this organization
    const existingContact = await db.fetchOne<{ id: string; billing_cycle_key: string | null }>(
      'SELECT id, billing_cycle_key FROM contact_history WHERE organization_id = ? AND email = ?',
      [organizationId, normalizedEmail]
    );
    
    let isNew = false;
    let contactId: string;
    
    if (existingContact) {
      // Contact exists - update last_uploaded timestamp
      contactId = existingContact.id;
      await db.execute(`
        UPDATE contact_history 
        SET last_uploaded = CURRENT_TIMESTAMP,
            first_name = COALESCE(?, first_name),
            last_name = COALESCE(?, last_name)
        WHERE id = ?
      `, [
        firstName || null,
        lastName || null,
        contactId
      ]);
      
      // If contact was from a different billing cycle, count it as new for this cycle
      if (existingContact.billing_cycle_key !== billingCycle) {
        isNew = true;
        await db.execute(`
          UPDATE contact_history 
          SET billing_cycle_key = ? 
          WHERE id = ?
        `, [billingCycle, contactId]);
      }
    } else {
      // New contact - insert into history
      isNew = true;
      contactId = generateId();
      
      await db.execute(`
        INSERT INTO contact_history (
          id, organization_id, user_id, email, first_name, last_name, billing_cycle_key
        ) VALUES (?, ?, ?, ?, ?, ?, ?)
      `, [
        contactId,
        organizationId,
        userId,
        normalizedEmail,
        firstName || null,
        lastName || null,
        billingCycle
      ]);
    }
    
    // If this is a new contact for this billing cycle, increment the count
    if (isNew) {
      await incrementUniqueContactCount(organizationId);
    }
    
    return { isNew, contactId };
  } catch (error) {
    logger.error(`Error tracking contact: ${error}`);
    throw error;
  }
}

/**
 * Track a batch of contacts
 */
export async function trackContactBatch(
  organizationId: string,
  userId: string,
  contacts: Array<{ email: string; firstName?: string; lastName?: string }>
): Promise<{ newCount: number; totalProcessed: number }> {
  const db = new Database();
  
  try {
    let newCount = 0;
    const totalProcessed = contacts.length;
    
    // Process contacts in batches to avoid transaction timeouts
    const batchSize = 100;
    for (let i = 0; i < contacts.length; i += batchSize) {
      const batch = contacts.slice(i, i + batchSize);
      
      await db.transaction('write', async (tx) => {
        for (const contact of batch) {
          const result = await trackContact(
            organizationId,
            userId,
            contact.email,
            contact.firstName,
            contact.lastName
          );
          
          if (result.isNew) {
            newCount++;
          }
        }
      });
      
      logger.info(`Processed ${i + batch.length}/${totalProcessed} contacts for organization ${organizationId}`);
    }
    
    // Get total unique contacts in current billing cycle
    const uniqueCount = await getUniqueContactCount(organizationId);
    
    // Report usage to Stripe
    await updateStripeUsage(organizationId, uniqueCount);
    
    return { newCount, totalProcessed };
  } catch (error) {
    logger.error(`Error tracking contact batch: ${error}`);
    throw error;
  }
}

/**
 * Increment the unique contact count for an organization
 */
async function incrementUniqueContactCount(organizationId: string): Promise<number> {
  const db = new Database();
  
  try {
    // Get current unique contact count
    const org = await db.fetchOne<{ current_unique_contacts: number }>(
      'SELECT current_unique_contacts FROM organizations WHERE id = ?',
      [organizationId]
    );
    
    if (!org) {
      throw new Error(`Organization not found: ${organizationId}`);
    }
    
    // Increment the count
    const newCount = (org.current_unique_contacts || 0) + 1;
    
    // Update the organization
    await db.execute(`
      UPDATE organizations 
      SET current_unique_contacts = ? 
      WHERE id = ?
    `, [newCount, organizationId]);
    
    // Update the billing cycle history
    const billingCycle = await getCurrentBillingCycle(organizationId);
    await db.execute(`
      UPDATE billing_cycle_history 
      SET contact_count = ? 
      WHERE organization_id = ? AND cycle_key = ?
    `, [newCount, organizationId, billingCycle]);
    
    return newCount;
  } catch (error) {
    logger.error(`Error incrementing unique contact count: ${error}`);
    throw error;
  }
}

/**
 * Get the count of unique contacts in the current billing cycle
 */
export async function getUniqueContactCount(organizationId: string): Promise<number> {
  const db = new Database();
  
  try {
    // Get current billing cycle
    const billingCycle = await getCurrentBillingCycle(organizationId);
    
    // Get unique contact count for this cycle
    const result = await db.fetchOne<{ count: number }>(
      'SELECT COUNT(*) as count FROM contact_history WHERE organization_id = ? AND billing_cycle_key = ?',
      [organizationId, billingCycle]
    );
    
    return result ? result.count : 0;
  } catch (error) {
    logger.error(`Error getting unique contact count: ${error}`);
    throw error;
  }
}

/**
 * Get the subscription info and update Stripe usage
 */
async function updateStripeUsage(organizationId: string, contactCount: number): Promise<void> {
  const db = new Database();
  
  try {
    // Get the organization's Stripe subscription info
    const org = await db.fetchOne<{ 
      id: number;
      stripe_subscription_id: string;
    }>('SELECT id, stripe_subscription_id FROM organizations WHERE id = ?', [organizationId]);
    
    if (!org || !org.stripe_subscription_id) {
      logger.info(`Organization ${organizationId} has no Stripe subscription, skipping usage update`);
      return;
    }
    
    // Get the subscription item for usage reporting
    const subscriptionItem = await db.fetchOne<{ stripe_usage_item_id: string }>(
      'SELECT stripe_usage_item_id FROM subscriptions WHERE stripe_subscription_id = ? AND status = "active" LIMIT 1',
      [org.stripe_subscription_id]
    );
    
    if (!subscriptionItem || !subscriptionItem.stripe_usage_item_id) {
      logger.warn(`No active subscription item found for organization ${organizationId}`);
      return;
    }
    
    // Calculate the number of 500-contact blocks beyond the initial 500
    const additionalBlocks = Math.max(0, Math.ceil((contactCount - 500) / 500));
    
    // Report usage to Stripe
    await reportContactUsage(subscriptionItem.stripe_usage_item_id, additionalBlocks);
    
    logger.info(`Reported usage of ${additionalBlocks} additional contact blocks for organization ${organizationId}`);
    
    // Mark the billing cycle as reported
    const billingCycle = await getCurrentBillingCycle(organizationId);
    await db.execute(`
      UPDATE billing_cycle_history 
      SET usage_reported = TRUE 
      WHERE organization_id = ? AND cycle_key = ?
    `, [organizationId, billingCycle]);
  } catch (error) {
    logger.error(`Error updating Stripe usage: ${error}`);
    throw error;
  }
}

/**
 * Get contact usage stats for an organization
 */
export async function getContactUsageStats(organizationId: string): Promise<{
  currentCycle: string;
  uniqueContacts: number;
  billingCycleStart: string;
  billingCycleEnd: string;
  contactsRemaining: number;
  isOverLimit: boolean;
}> {
  const db = new Database();
  
  try {
    // Get current billing cycle
    const billingCycle = await getCurrentBillingCycle(organizationId);
    
    // Get billing cycle details
    const cycle = await db.fetchOne<{
      start_date: string;
      end_date: string;
      contact_count: number;
    }>(`
      SELECT start_date, end_date, contact_count 
      FROM billing_cycle_history 
      WHERE organization_id = ? AND cycle_key = ?
    `, [organizationId, billingCycle]);
    
    if (!cycle) {
      throw new Error(`Billing cycle not found for organization ${organizationId}`);
    }
    
    // Calculate remaining contacts in the base tier (500)
    const contactsRemaining = Math.max(0, 500 - cycle.contact_count);
    const isOverLimit = cycle.contact_count > 500;
    
    return {
      currentCycle: billingCycle,
      uniqueContacts: cycle.contact_count,
      billingCycleStart: cycle.start_date,
      billingCycleEnd: cycle.end_date,
      contactsRemaining,
      isOverLimit
    };
  } catch (error) {
    logger.error(`Error getting contact usage stats: ${error}`);
    throw error;
  }
}

/**
 * Reset contact count for a specific email (for admin/support use)
 */
export async function resetContactCount(
  organizationId: string,
  email: string,
  reason: string
): Promise<boolean> {
  const db = new Database();
  
  try {
    // Normalize email
    const normalizedEmail = email.trim().toLowerCase();
    
    // Find the contact
    const contact = await db.fetchOne<{ id: string }>(
      'SELECT id FROM contact_history WHERE organization_id = ? AND email = ?',
      [organizationId, normalizedEmail]
    );
    
    if (!contact) {
      logger.warn(`Contact not found for reset: ${email} in organization ${organizationId}`);
      return false;
    }
    
    // Set the status to deleted
    await db.execute(`
      UPDATE contact_history 
      SET status = 'deleted' 
      WHERE id = ?
    `, [contact.id]);
    
    // Log the operation for audit purposes
    await db.execute(`
      INSERT INTO admin_action_log (
        id, organization_id, action, details, reason
      ) VALUES (?, ?, ?, ?, ?)
    `, [
      generateId(),
      organizationId,
      'reset_contact',
      JSON.stringify({ email: normalizedEmail }),
      reason
    ]);
    
    // Recalculate the contact count
    await recalculateContactCount(organizationId);
    
    return true;
  } catch (error) {
    logger.error(`Error resetting contact count: ${error}`);
    throw error;
  }
}

/**
 * Recalculate contact count for an organization
 */
async function recalculateContactCount(organizationId: string): Promise<number> {
  const db = new Database();
  
  try {
    // Get current billing cycle
    const billingCycle = await getCurrentBillingCycle(organizationId);
    
    // Count active contacts in current billing cycle
    const result = await db.fetchOne<{ count: number }>(
      'SELECT COUNT(*) as count FROM contact_history WHERE organization_id = ? AND billing_cycle_key = ? AND status = "active"',
      [organizationId, billingCycle]
    );
    
    const count = result ? result.count : 0;
    
    // Update the organization
    await db.execute(`
      UPDATE organizations 
      SET current_unique_contacts = ? 
      WHERE id = ?
    `, [count, organizationId]);
    
    // Update the billing cycle history
    await db.execute(`
      UPDATE billing_cycle_history 
      SET contact_count = ? 
      WHERE organization_id = ? AND cycle_key = ?
    `, [count, organizationId, billingCycle]);
    
    // Update Stripe usage
    await updateStripeUsage(organizationId, count);
    
    return count;
  } catch (error) {
    logger.error(`Error recalculating contact count: ${error}`);
    throw error;
  }
}

================
File: backend/src/services/email.ts
================
import sgMail from '@sendgrid/mail';
import { logger } from '../logger';
import crypto from 'crypto';
import { Database } from '../database';
import { generateTrackingId, addTrackingToUrl } from '../utils/tracking';

interface MagicLinkEmailParams {
  email: string;
  token: string;
  orgId: number;
  name: string;
}

interface EmailTrackingRecord {
  orgId: number;
  contactId: string | number;
  emailType: string;
  sendStatus: 'pending' | 'processing' | 'accepted' | 'delivered' | 'sent' | 'deferred' | 'bounced' | 'dropped' | 'failed' | 'skipped';
  sendMode: 'test' | 'production';
  testEmail?: string;
  batchId: string;
  messageId?: string;
}

export class EmailService {
  constructor() {
    if (!process.env.SENDGRID_API_KEY) {
      throw new Error('Missing SENDGRID_API_KEY environment variable');
    }
    sgMail.setApiKey(process.env.SENDGRID_API_KEY);
  }

  /**
   * Generates a tracking ID for an email link
   * Format: tid-[orgId]-[contactId]-[timestamp]
   * @param orgId Organization ID
   * @param contactId Contact ID
   * @returns Tracking ID string
   */
  generateTrackingId(orgId: number | string, contactId: number | string): string {
    return generateTrackingId(orgId, contactId, 'em');
  }

  /**
   * Records an email send in the email_send_tracking table
   * @param orgDb Organization database instance
   * @param tracking Email tracking data
   * @returns Result of the database operation
   */
  async recordEmailSend(orgDb: Database, tracking: EmailTrackingRecord): Promise<any> {
    try {
      const now = new Date().toISOString();
      
      return await orgDb.execute(
        `INSERT INTO email_send_tracking (
          org_id, 
          contact_id, 
          email_type, 
          scheduled_date, 
          send_status,
          send_mode,
          test_email,
          batch_id,
          message_id,
          last_attempt_date
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          tracking.orgId,
          tracking.contactId.toString(),
          tracking.emailType,
          now,
          tracking.sendStatus,
          tracking.sendMode,
          tracking.testEmail || null,
          tracking.batchId,
          tracking.messageId || null,
          now
        ]
      );
    } catch (error) {
      logger.error(`Error recording email send: ${error}`);
      throw new Error(`Failed to record email send: ${error}`);
    }
  }

  async sendMagicLink(email: string, magicLink: string, organizationSlug: string) {
    try {
      const fromEmail = process.env.SENDGRID_FROM_EMAIL || 'information@medicaremax.ai';
      const msg = {
        to: email,
        from: {
          email: fromEmail,
          name: organizationSlug ? organizationSlug.charAt(0).toUpperCase() + organizationSlug.slice(1) : 'MedicareMax'
        },
        subject: 'Your Login Link',
        text: `Click this link to log in: ${magicLink}\n\nThis link will expire in 30 minutes.`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #333;">Welcome to MedicareMax</h2>
            <p>Click the button below to log in to your account. This link will expire in 30 minutes.</p>
            <div style="margin: 30px 0;">
              <a href="${magicLink}" 
                 style="background-color: #4F46E5; color: white; padding: 12px 24px; 
                        text-decoration: none; border-radius: 4px; display: inline-block;">
                Log In
              </a>
            </div>
            <p style="color: #666; font-size: 14px;">
              If the button doesn't work, copy and paste this link into your browser:
              <br>
              <a href="${magicLink}" style="color: #4F46E5;">${magicLink}</a>
            </p>
          </div>
        `
      };

      await sgMail.send(msg);
      logger.info(`Magic link email sent successfully to ${email}`);
    } catch (error) {
      logger.error(`Error sending magic link email: ${error}`);
      throw new Error('Failed to send magic link email');
    }
  }

  async sendQuoteEmail(params: {
    email: string;
    firstName: string;
    lastName: string;
    quoteUrl: string;
    planType: string;
    organization?: {
      id?: number;
      name?: string;
      logo_data?: string;
      primary_color?: string;
      phone?: string;
      website?: string;
    };
    phone?: string;
    contactId?: number | string;
  }) {
    try {
      const { email, firstName, lastName, quoteUrl, planType, organization } = params;
      const fullName = `${firstName} ${lastName}`;
      const orgName = organization?.name || '';
      const primaryColor = organization?.primary_color || '#4F46E5';
      const phone = organization?.phone || '';
      const website = organization?.website || '';
      const websiteUrl = website.startsWith('http') ? website : `https://${website}`;
      
      // Generate tracking ID if organization and contactId are available
      let trackedQuoteUrl = quoteUrl;
      if (organization?.id && params.contactId) {
        const trackingId = this.generateTrackingId(organization.id, params.contactId);
        
        // Add tracking ID to quote URL
        trackedQuoteUrl = addTrackingToUrl(quoteUrl, trackingId);
        
        logger.info(`Added tracking ID ${trackingId} to quote URL for contact ${params.contactId}`);
      }
      
      // Format phone number if present
      const formatPhoneNumber = (phoneStr: string): string => {
        // Remove any non-digit characters
        const digitsOnly = phoneStr.replace(/\D/g, '');
        if (digitsOnly.length === 10) {
          return `(${digitsOnly.substring(0, 3)}) ${digitsOnly.substring(3, 6)}-${digitsOnly.substring(6)}`;
        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {
          return `(${digitsOnly.substring(1, 4)}) ${digitsOnly.substring(4, 7)}-${digitsOnly.substring(7)}`;
        }
        // Return original if not a standard format
        return phoneStr;
      };
      
      // Format phone number to E.164 format for Twilio
      const formatE164 = (phoneStr: string): string => {
        // Remove any non-digit characters
        const digitsOnly = phoneStr.replace(/\D/g, '');
        // Handle US numbers
        if (digitsOnly.length === 10) {
          return `+1${digitsOnly}`;
        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {
          return `+${digitsOnly}`;
        }
        // Return with + prefix if not matching expected formats
        return `+${digitsOnly}`;
      };
      
      const formattedPhone = phone ? formatPhoneNumber(phone) : '';
      const e164Phone = phone ? formatE164(phone) : '';
      
      const fromEmail = process.env.SENDGRID_FROM_EMAIL || 'information@medicaremax.ai';
      
      // Prepare email message
      const msg: any = {
        to: email,
        from: {
          email: fromEmail,
          name: orgName || 'MedicareMax'
        },
        subject: 'Your Personalized Medicare Quote',
        text: `Hello ${fullName},\n\nWe recently reviewed Medigap premiums for your zip code and found some options that might interest you. These plans offer the same comprehensive benefits you currently enjoy, potentially at a better value. We've done the research to find plans that maintain your coverage while possibly reducing your costs.\n\nReview your options here: ${trackedQuoteUrl}\n\nMany Medicare beneficiaries don't realize they can be paying different rates for identical coverage. We'd be happy to show you your options and potential savings. If we don't find a better value now, we'll keep monitoring rates and reach out when we find something promising.\n\nIf you have any questions, please give me a call: ${formattedPhone}\n\nBest,\n${orgName}\nYour Medicare Specialist\n${formattedPhone}`,
        attachments: []
      };
      
      // Handle logo as attachment if present
      let logoHtml = '';
      if (organization?.logo_data) {
        // Extract the base64 content, removing data URL prefix if present
        let logoBase64 = organization.logo_data;
        if (logoBase64.startsWith('data:image/')) {
          const base64Parts = logoBase64.split(',');
          if (base64Parts.length > 1) {
            logoBase64 = base64Parts[1];
          }
        }
        
        // Add as attachment with content ID
        msg.attachments.push({
          content: logoBase64,
          filename: 'organization-logo.png',
          type: 'image/png',
          disposition: 'inline',
          content_id: 'organizationLogo'
        });
        
        // Reference the content ID in HTML
        logoHtml = `<div class="logo">
          <img src="cid:organizationLogo" alt="${orgName} Logo" width="160" 
               style="max-width: 250px; height: auto; margin-bottom: 25px; display: block; object-fit: contain; border: 0; outline: none;" />
        </div>`;
      } else {
        // Fallback if no logo
        logoHtml = `<div class="logo" style="margin-bottom: 25px;">
          <h1 style="font-size: 24px; font-weight: bold; color: ${primaryColor}; margin: 0;">${orgName}</h1>
        </div>`;
      }
      
      // Set HTML content
      msg.html = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
          <title>Your Medicare Coverage Update</title>
          <style type="text/css">
            /* GLOBAL RESETS */
            body {
              margin: 0;
              padding: 0;
              background-color: #f8f8f8;
              font-family: Arial, sans-serif;
            }
            table {
              border-collapse: collapse;
            }
            img {
              display: block;
              border: 0;
              outline: none;
              text-decoration: none;
              -ms-interpolation-mode: bicubic;
            }
            a {
              text-decoration: none;
              color: inherit;
            }
            h1, h2, h3, h4, h5, h6 {
              margin: 0;
              padding: 0;
              font-weight: bold;
            }

            /* CONTAINER STYLES */
            .email-container {
              width: 100%;
              max-width: 600px;
              background-color: #ffffff;
              border-radius: 8px;
              overflow: hidden;
            }

            /* CONTENT STYLES */
            .content {
              padding: 30px 40px;
              text-align: left;
              color: #333333;
              font-size: 16px;
              line-height: 24px;
            }
            .logo img {
              max-width: 100px;
              margin-bottom: 20px;
              display: block;
            }
            .message {
              margin: 0 0 30px 0;
            }
            /* BUTTON STYLES */
            .button-wrapper {
              text-align: left;
              margin-top: 20px;
              margin-bottom: 25px;
            }
            .cta-button {
              color: #ffffff !important;
              padding: 14px 28px;
              font-size: 16px;
              font-weight: bold;
              border-radius: 4px;
              display: inline-block;
              text-decoration: none;
              box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
          </style>
        </head>
        <body style="margin:0; padding:0; background-color:#f8f8f8;">
          <table width="100%" border="0" cellspacing="0" cellpadding="0" bgcolor="#f8f8f8">
            <tr>
              <td align="center" style="padding: 40px 0;">
                <table class="email-container" border="0" cellspacing="0" cellpadding="0">
                  <tr>
                    <td>
                      <div class="content">
                        ${logoHtml}
                        
                        <div class="message">
                          <p>Hi ${firstName},</p>
                          <p>We recently reviewed Medigap premiums for your zip code and found some options that might interest you.</p>
                          <p>These plans offer the same comprehensive benefits you currently enjoy, potentially at a better value. We've done the research to find plans that maintain your coverage while possibly reducing your costs.</p>
                        </div>
                        
                        <div class="button-wrapper">
                          <a href="${trackedQuoteUrl}" target="_blank" class="cta-button" style="background-color:rgb(3, 3, 20); color: #ffffff !important; text-decoration: none; font-weight: bold;">  
                            Review Your Medicare Options
                          </a>
                        </div>
                        
                        <div class="message" style="margin-top: 30px;">
                          <p>Many Medicare beneficiaries don't realize they can be paying different rates for identical coverage. We'd be happy to show you your options and potential savings. If we don't find a better value now, we'll keep monitoring rates and reach out when we find something promising.</p>
                          ${formattedPhone ? `<p>If you have any questions, give me a call: ${formattedPhone}</p>` : ''}
                          <p style="margin-top: 25px; margin-bottom: 5px;">
                            Best,<br>
                            <strong>${orgName}</strong><br>
                            Your Medicare Specialist<br>
                            ${formattedPhone ? `<span style="color: #444;">${formattedPhone}</span>` : ''}
                          </p>
                        </div>

                        <div style="font-size: 12px; color: #666666; margin-top: 30px; padding-top: 15px; border-top: 1px solid #eeeeee;">
                          <p style="margin: 5px 0;">
                            Medicare Services<br>
                            ${formattedPhone ? `Phone: <a href="tel:${phone}" style="color: #0066cc; text-decoration: none;">${formattedPhone}</a><br>` : ''}
                            ${website ? `Website: <a href="${websiteUrl}" target="_blank" style="color: #0066cc; text-decoration: underline;">${website}</a>` : ''}
                          </p>
                        </div>
                      </div>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
          </table>
        </body>
        </html>
      `;
      
      const result = await sgMail.send(msg);
      logger.info(`Quote email sent successfully to ${email}`);

      // also send out text via twilio / mds endpoint
      
      
      const tempRetoolEndpoint = "https://api.retool.com/v1/workflows/2dfd31e1-b979-4f4d-a572-ca92879a3c09/startTrigger?workflowApiKey=retool_wk_e06f6026e4be4854bce04b77c90ee4c3"
      const msgContent = `
        Hi ${firstName},
        We recently reviewed Medigap premiums for your zip code and found some options that might interest you. Click the link below to review your options:
        ${trackedQuoteUrl}  
      `
      // Get client's phone number from params
      const clientPhone = params.phone;
      const clientE164Phone = clientPhone ? formatE164(clientPhone) : null;

      if (clientE164Phone) {
        logger.info(`clientE164Phone: ${clientE164Phone}`);
        const bodyToSend = {
          phone: clientE164Phone,
          firstName: firstName,
          quoteUrl: trackedQuoteUrl,
          orgName: orgName
        }
        logger.info(JSON.stringify(bodyToSend));
        
        const twilioResponse = await fetch(tempRetoolEndpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(bodyToSend)
        });
        if (twilioResponse.ok) {
          logger.info(`Text sent successfully to ${clientE164Phone}`);
          logger.info(await twilioResponse.json());
        } else {
          logger.error(`Error sending text: ${twilioResponse.statusText}`);
        }
      } else {
        logger.info('No client phone number provided - skipping text message');
      }

      // Return the SendGrid response and message ID if available
      return { 
        success: true,
        messageId: result && result[0] && result[0].headers ? result[0].headers['x-message-id'] : undefined
      };
    } catch (error) {
      logger.error(`Error sending quote email: ${error}`);
      throw new Error('Failed to send quote email');
    }
  }
}

// For the organization signup flow
export async function sendMagicLink({ email, magicLink, name }: {
  email: string;
  magicLink: string;
  name: string;
}) {
  try {
    const fromEmail = process.env.SENDGRID_FROM_EMAIL || 'information@medicaremax.ai';
    const msg = {
      to: email,
      from: {
        email: fromEmail,
        name: 'MedicareMax'
      },
      subject: 'Verify Your MedicareMax Account',
      text: `Hi ${name},\n\nClick this link to verify your account: ${magicLink}\n\nThis link will expire in 30 minutes.`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">Welcome to MedicareMax</h2>
          <p>Hi ${name},</p>
          <p>Click the button below to verify your account and complete your organization setup. This link will expire in 30 minutes.</p>
          <div style="margin: 30px 0;">
            <a href="${magicLink}" 
               style="background-color: #4F46E5; color: white; padding: 12px 24px; 
                      text-decoration: none; border-radius: 4px; display: inline-block;">
              Verify Account
            </a>
          </div>
          <p style="color: #666; font-size: 14px;">
            If the button doesn't work, copy and paste this link into your browser:
            <br>
            <a href="${magicLink}" style="color: #4F46E5;">${magicLink}</a>
          </p>
        </div>
      `
    };

    await sgMail.send(msg);
    logger.info('Magic link email sent successfully');
  } catch (error) {
    logger.error(`Failed to send magic link email: ${error}`);
    throw error;
  }
}

// Generate a hash for onboarding link validation
function generateHash(orgId: string, email: string): string {
  const SECRET = process.env.HASH_SECRET || 'default-hash-secret'; // Ensure this is set in your environment
  return crypto.createHash('sha256').update(`${orgId}${email}${SECRET}`).digest('hex').slice(0, 16);
}

/**
 * Sends an onboarding link that includes organizationId, and optionally email and hash
 * @param orgId Organization ID to include in the link
 * @param email Optional email to include in the link and use as recipient
 * @param orgName Optional organization name to use as sender name
 */
export async function sendOnboardingLink(orgId: string, email?: string, orgName?: string) {
  try {
    // Base onboarding URL with orgId
    const baseUrl = process.env.FRONTEND_URL || 'https://medicaremax.ai';
    let onboardingUrl = `${baseUrl}/onboard?orgId=${orgId}`;
    
    // If email is provided, add email and hash to the URL
    if (email) {
      const hash = generateHash(orgId, email);
      onboardingUrl += `&email=${encodeURIComponent(email)}&hash=${hash}`;
    }
    
    const fromEmail = process.env.SENDGRID_FROM_EMAIL || 'information@medicaremax.ai';
    // Create email message
    const msg = {
      to: email || process.env.FALLBACK_EMAIL || 'information@medicaremax.ai', // Fallback if no email provided
      from: {
        email: fromEmail,
        name: orgName || 'MedicareMax'
      },
      subject: 'Join MedicareMax',
      text: `Click this link to create or update your profile: ${onboardingUrl}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">Welcome to MedicareMax</h2>
          <p>Click the button below to create or update your profile:</p>
          <div style="margin: 30px 0;">
            <a href="${onboardingUrl}" 
               style="background-color: #4F46E5; color: white; padding: 12px 24px; 
                      text-decoration: none; border-radius: 4px; display: inline-block;">
              Get Started
            </a>
          </div>
          <p style="color: #666; font-size: 14px;">
            If the button doesn't work, copy and paste this link into your browser:
            <br>
            <a href="${onboardingUrl}" style="color: #4F46E5;">${onboardingUrl}</a>
          </p>
          <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
            <p style="color: #888; font-size: 14px;">
              If you have any questions, please don't hesitate to contact us.
              <br>
              The MedicareMax Team
            </p>
          </div>
        </div>
      `
    };

    await sgMail.send(msg);
    logger.info(`Onboarding link email sent successfully${email ? ` to ${email}` : ''}`);
    return { success: true };
  } catch (error) {
    logger.error(`Error sending onboarding link email: ${error}`);
    throw new Error('Failed to send onboarding link email');
  }
}

================
File: backend/src/services/stripe.ts
================
import Stripe from 'stripe';
import { config } from '../config';
import { logger } from '../logger';
import { Database } from '../database';
import { Elysia, t } from 'elysia';
import type { UserContext } from '../types';
import { requireAuth } from '../middleware/auth';

const stripe = new Stripe(config.stripeSecretKey, {
  apiVersion: '2025-02-24.acacia'
});

export type SubscriptionStatus = {
  isActive: boolean;
  tier: string;
  currentPeriodEnd?: number;
  cancelAtPeriodEnd?: boolean;
  paymentStatus: 'paid' | 'unpaid' | 'no_subscription';
};

export async function checkPaymentStatus(db: Database, organizationId: number): Promise<SubscriptionStatus> {
  // First check local database
  const org = await db.fetchOne<{
    stripe_customer_id: string;
    stripe_subscription_id: string;
    subscription_status: string;
    payment_completed: number;
  }>(
    'SELECT stripe_customer_id, stripe_subscription_id, subscription_status, payment_completed FROM organizations WHERE id = ?',
    [organizationId]
  );

  if (!org) {
    throw new Error('Organization not found');
  }

  // If payment is already marked as completed locally, no need to check Stripe
  if (org.payment_completed === 1) {
    return {
      isActive: org.subscription_status === 'active',
      tier: 'paid',
      paymentStatus: 'paid'
    };
  }

  // If no Stripe subscription yet, return unpaid status
  if (!org.stripe_subscription_id) {
    return {
      isActive: false,
      tier: 'basic',
      paymentStatus: 'no_subscription'
    };
  }

  // Check Stripe for current status
  try {
    const subscription = await stripe.subscriptions.retrieve(org.stripe_subscription_id);
    
    // Update local payment_completed status if paid
    if (subscription.status === 'active' && !subscription.cancel_at_period_end) {
      await db.execute(
        'UPDATE organizations SET payment_completed = 1 WHERE id = ?',
        [organizationId]
      );
    }

    return {
      isActive: subscription.status === 'active',
      tier: subscription.items.data[0].price.nickname || 'paid',
      currentPeriodEnd: subscription.current_period_end,
      cancelAtPeriodEnd: subscription.cancel_at_period_end,
      paymentStatus: subscription.status === 'active' ? 'paid' : 'unpaid'
    };
  } catch (error) {
    logger.error(`Error checking Stripe subscription status: ${error}`);
    return {
      isActive: false,
      tier: 'basic',
      paymentStatus: 'unpaid'
    };
  }
}

export async function activateSubscription(db: Database, organizationId: number): Promise<void> {
  await db.execute(
    'UPDATE organizations SET payment_completed = 1, subscription_status = ? WHERE id = ?',
    ['active', organizationId]
  );
}

export async function reportContactUsage(db: Database, organizationId: number): Promise<void> {
  const org = await db.fetchOne<{
    stripe_subscription_id: string;
    contact_count: number;
  }>(
    'SELECT stripe_subscription_id, (SELECT COUNT(*) FROM contacts WHERE organization_id = organizations.id) as contact_count FROM organizations WHERE id = ?',
    [organizationId]
  );

  if (!org?.stripe_subscription_id) {
    logger.info(`No subscription found for organization ${organizationId}`);
    return;
  }

  try {
    // Get subscription items to find the metered price item
    const subscription = await stripe.subscriptions.retrieve(org.stripe_subscription_id);
    const meteredItem = subscription.items.data.find(item => 
      item.price.id === config.stripe.prices.additionalContacts
    );

    if (!meteredItem) {
      logger.info(`No metered item found for subscription ${org.stripe_subscription_id}`);
      return;
    }

    // Report current contact count as usage
    await stripe.subscriptionItems.createUsageRecord(
      meteredItem.id,
      {
        quantity: org.contact_count,
        timestamp: Math.floor(Date.now() / 1000),
        action: 'set'
      }
    );

    logger.info(`Successfully reported contact usage for organization ${organizationId} (${org.contact_count} contacts)`);
  } catch (error) {
    logger.error(`Error reporting contact usage to Stripe: ${error}`);
    throw error;
  }
}

================
File: backend/src/services/subscription.ts
================
import { Database } from '../database';
import { logger } from '../logger';
import Stripe from 'stripe';
import { config } from '../config';

// Define possible account statuses
export type AccountStatus = 
  | 'good_standing'           // Everything is fine
  | 'inactive'                // Subscription inactive (canceled, past_due, etc.)
  | 'agent_limit_exceeded'    // Too many agents for current plan
  | 'contact_limit_exceeded'; // Too many contacts for current plan

export interface AccountStatusDetails {
  status: AccountStatus;
  message: string;
  organizationId: number;
  organizationName: string;
  organizationSlug: string;
  subscriptionTier: string;
  subscriptionStatus: string;
  agentLimit: number;
  contactLimit: number;
  currentAgentCount: number;
  currentContactCount: number;
  billingCycleEnd?: Date;
  paymentFailureCount: number;
  paymentCompleted: boolean;
}

/**
 * Updates organization subscription status from Stripe
 */
export async function syncSubscriptionStatus(organizationId: number): Promise<void> {
  const db = new Database();
  
  try {
    // Get organization details
    const orgResult = await db.execute(
      'SELECT stripe_subscription_id, stripe_customer_id FROM organizations WHERE id = ?', 
      [organizationId]
    );
    
    if (!orgResult.rows || orgResult.rows.length === 0) {
      logger.error(`Organization not found: ${organizationId}`);
      return;
    }
    
    const org = orgResult.rows[0];
    
    // If no Stripe subscription ID, nothing to sync
    if (!org[0]) {
      logger.info(`No Stripe subscription for organization ${organizationId}`);
      return;
    }
    
    // Initialize Stripe client
    const stripe = new Stripe(config.stripe.secretKey, {
      apiVersion: '2025-02-24.acacia' as Stripe.LatestApiVersion,
    });
    
    // Fetch the subscription from Stripe
    const subscription = await stripe.subscriptions.retrieve(org[0]);
    
    // Map Stripe status to our status
    let subscriptionStatus = 'active';
    if (subscription.status === 'active' || subscription.status === 'trialing') {
      subscriptionStatus = 'active';
    } else if (subscription.status === 'past_due') {
      subscriptionStatus = 'past_due';
    } else {
      subscriptionStatus = 'inactive';
    }
    
    // Get the billing cycle end
    const billingCycleEnd = new Date(subscription.current_period_end * 1000);
    
    // Get trial end if applicable
    const trialEnd = subscription.trial_end 
      ? new Date(subscription.trial_end * 1000) 
      : null;
    
    // Get extra agents and contacts from subscription metadata
    const extraAgents = parseInt(subscription.metadata.extraAgents || '0', 10);
    const extraContacts = parseInt(subscription.metadata.extraContacts || '0', 10);
    
    // Update the organization with Stripe data
    await db.execute(`
      UPDATE organizations 
      SET 
        subscription_status = ?,
        billing_cycle_end = ?,
        trial_end_date = ?,
        extra_agents = ?,
        extra_contacts = ?
      WHERE id = ?
    `, [
      subscriptionStatus,
      billingCycleEnd.toISOString(),
      trialEnd?.toISOString() || null,
      extraAgents,
      extraContacts,
      organizationId
    ]);
    
    logger.info(`Updated subscription status for organization ${organizationId}: ${subscriptionStatus}`);
    
  } catch (error) {
    logger.error(`Error syncing subscription status for organization ${organizationId}:`, error);
    throw error;
  }
}

/**
 * Checks if an organization's account is in good standing
 */
export async function checkAccountStatus(organizationId: number): Promise<AccountStatusDetails> {
  const db = new Database();
  
  try {
    // Try to sync with Stripe first
    try {
      await syncSubscriptionStatus(organizationId);
    } catch (error) {
      logger.warn(`Could not sync with Stripe for organization ${organizationId}:`, error);
    }
    
    // Get basic organization info first (this should always work)
    const orgResult = await db.execute(
      'SELECT id, name, slug, subscription_tier, subscription_status, agent_limit, contact_limit, extra_agents, extra_contacts, billing_cycle_end, payment_failure_count, payment_completed FROM organizations WHERE id = ?', 
      [organizationId]
    );
    
    if (!orgResult.rows || orgResult.rows.length === 0) {
      throw new Error(`Organization not found: ${organizationId}`);
    }
    
    const org = orgResult.rows[0];
    
    try {
      // Try to query the organization_status view
      const statusResult = await db.execute(
        'SELECT * FROM organization_status WHERE id = ?', 
        [organizationId]
      );
      
      if (statusResult.rows && statusResult.rows.length > 0) {
        const status = statusResult.rows[0];
        const columns = statusResult.columns || [];
        
        // Create an object from the row array using column names
        const statusObj: any = {};
        columns.forEach((col, i) => {
          statusObj[col] = status[i];
        });
        
        // Prepare status details with appropriate message
        let message = '';
        switch (statusObj.account_status) {
          case 'inactive':
            message = `Your subscription is ${statusObj.subscription_status}. Please update your payment method.`;
            break;
            
          case 'agent_limit_exceeded':
            message = `Your account has ${statusObj.current_agent_count} agents, but your plan only allows for ${statusObj.agent_limit + statusObj.extra_agents}. Please remove some agents or upgrade your plan.`;
            break;
            
          case 'contact_limit_exceeded':
            message = `Your account has ${statusObj.current_contact_count} contacts, but your plan only allows for ${statusObj.contact_limit + statusObj.extra_contacts}. Please remove some contacts or upgrade your plan.`;
            break;
            
          case 'good_standing':
          default:
            message = 'Your account is in good standing.';
            break;
        }
        
        return {
          status: statusObj.account_status,
          message,
          organizationId: statusObj.id,
          organizationName: statusObj.name,
          organizationSlug: statusObj.slug,
          subscriptionTier: statusObj.subscription_tier,
          subscriptionStatus: statusObj.subscription_status,
          agentLimit: statusObj.agent_limit + statusObj.extra_agents,
          contactLimit: statusObj.contact_limit + statusObj.extra_contacts,
          currentAgentCount: statusObj.current_agent_count,
          currentContactCount: statusObj.current_contact_count,
          billingCycleEnd: statusObj.billing_cycle_end ? new Date(statusObj.billing_cycle_end) : undefined,
          paymentFailureCount: statusObj.payment_failure_count,
          paymentCompleted: statusObj.payment_completed
        };
      }
    } catch (viewError) {
      // If there's an error querying the view (e.g., it doesn't exist),
      // we'll fall through to the default implementation below
      logger.warn(`Error querying organization_status view: ${viewError}`);
    }
    
    // If we get here, either the view doesn't exist or there was no result
    // Provide default values based on the organization record
    
    // Default to good standing
    const accountStatus: AccountStatus = 'good_standing';
    const message = 'Your account is in good standing.';
    
    // Extract values from the row array
    const columns = orgResult.columns || [];
    const orgObj: any = {};
    columns.forEach((col, i) => {
      orgObj[col] = org[i];
    });
    
    // Use defaults for missing values
    const subscriptionStatus = orgObj.subscription_status || 'active';
    const agentLimit = orgObj.agent_limit || 5;
    const contactLimit = orgObj.contact_limit || 100;
    const extraAgents = orgObj.extra_agents || 0;
    const extraContacts = orgObj.extra_contacts || 0;
    
    return {
      status: accountStatus,
      message,
      organizationId: orgObj.id,
      organizationName: orgObj.name,
      organizationSlug: orgObj.slug,
      subscriptionTier: orgObj.subscription_tier,
      subscriptionStatus,
      agentLimit: agentLimit + extraAgents,
      contactLimit: contactLimit + extraContacts,
      currentAgentCount: 0, // Default to 0 since we can't query agents table
      currentContactCount: 0, // Default to 0 since we can't query contacts table
      billingCycleEnd: orgObj.billing_cycle_end ? new Date(orgObj.billing_cycle_end) : undefined,
      paymentFailureCount: orgObj.payment_failure_count || 0,
      paymentCompleted: orgObj.payment_completed || false
    };
    
  } catch (error) {
    logger.error(`Error checking account status for organization ${organizationId}:`, error);
    throw error;
  }
}

================
File: backend/src/services/turso.ts
================
import { createClient } from '@libsql/client';
import { TURSO_CONFIG } from '../config/turso';
import { logger } from '../logger';
import { config } from '../config'
import fetch from 'node-fetch'
import * as fs from 'fs';

// Use non-null assertion since we check these values immediately
const TURSO_DB_URL = config.TURSO_DATABASE_URL!;
const TURSO_AUTH_TOKEN = config.TURSO_AUTH_TOKEN!;

if (!config.TURSO_DATABASE_URL) {
  throw new Error('TURSO_DATABASE_URL is not set');
}

if (!config.TURSO_AUTH_TOKEN) {
  throw new Error('TURSO_AUTH_TOKEN is not set');
}

export const tursoClient = createClient({
  url: TURSO_DB_URL,
  authToken: TURSO_AUTH_TOKEN,
});

export async function getTursoClient() {
  try {
    await tursoClient.execute('SELECT 1');
    return tursoClient;
  } catch (error) {
    logger.error(`Error connecting to Turso: ${error instanceof Error ? error.message : String(error)}`);
    throw error;
  }
}

// Export a function to check if the client is healthy
export async function checkTursoHealth(): Promise<boolean> {
  try {
    await tursoClient.execute('SELECT 1');
    return true;
  } catch (error) {
    logger.error(`Turso health check failed: ${error instanceof Error ? error.message : String(error)}`);
    return false;
  }
}

interface TursoResponse {
  databases?: Array<{
    Name: string;
    DbId: string;
    Hostname: string;
    Region: string;
  }>;
  jwt?: string;
  [key: string]: unknown;
}

export class TursoService {
  private apiToken: string
  private client;

  constructor() {
    const token = config.TURSO_API_TOKEN;
    if (!token) {
      throw new Error('TURSO_API_TOKEN is not set');
    }
    this.apiToken = token;
    this.client = tursoClient;
    
    logger.info('TursoService initialized with API token')
  }

  async createDatabaseForImport(orgId: string): Promise<{dbName: string, url: string, token: string}> {
    const dbName = `org-${orgId}-${Date.now()}`

    try {
      // Create database
      logger.info(`Creating Turso database for org ${orgId} with name ${dbName}`)
      const createResponse = await fetch(`https://api.turso.tech/v1/organizations/${TURSO_CONFIG.ORG_SLUG}/databases`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: dbName,
          group: TURSO_CONFIG.GROUP_NAME,
          "seed": { "type": "database_upload" }
        }),
      })

      const newDbData = await fetch(`https://api.turso.tech/v1/organizations/${TURSO_CONFIG.ORG_SLUG}/databases/${dbName}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.apiToken}`,
        },
      })

      const newDbDataJson = await newDbData.json() as any
      const newDbUrl = newDbDataJson.database.Hostname

      const tokenResponse = await fetch(`https://api.turso.tech/v1/organizations/${TURSO_CONFIG.ORG_SLUG}/databases/${dbName}/auth/tokens`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiToken}`,
        },
      })

      const newTokenData = await tokenResponse.json() as any
      const newToken = newTokenData.jwt

      // Verify the database is available by checking the databases list
      let dbFound = false;
      let attempts = 0;
      const maxAttempts = 5;
      
      while (!dbFound && attempts < maxAttempts) {
        const listResponse = await fetch(`https://api.turso.tech/v1/organizations/${TURSO_CONFIG.ORG_SLUG}/databases`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${this.apiToken}`,
          }
        });
        
        if (listResponse.ok) {
          const data = await listResponse.json();
          dbFound = data.databases.some((db: any) => db.Name === dbName);
          
          if (!dbFound) {
            logger.info(`Database ${dbName} not found in list, waiting 1 second before retry (attempt ${attempts + 1}/${maxAttempts})`);
            await new Promise(resolve => setTimeout(resolve, 1000));
            attempts++;
          }
        } else {
          logger.warn(`Failed to list databases, status: ${listResponse.status}`);
          break;
        }
      }
      
      if (!dbFound) {
        logger.warn(`Database ${dbName} not found in databases list after ${maxAttempts} attempts, continuing anyway`);
      } else {
        logger.info(`Database ${dbName} confirmed in databases list`);
      }

      return {
        dbName: dbName,
        url: newDbUrl,
        token: newToken,
      }
    } catch (error) {
      logger.error(`Error creating database for import: ${error instanceof Error ? error.message : String(error)}`)
      throw error
    }
  }

  async uploadDatabase(dbName: string, authToken: string, filePath: string): Promise<any> {
    try {
      // Strip file: protocol if present
      const normalizedPath = filePath.replace(/^file:/, '');
      
      logger.info(`Attempting to upload database from file: ${normalizedPath}`);
      
      // Verify file exists before attempting upload
      if (!fs.existsSync(normalizedPath)) {
        const error = new Error(`File not found at path: ${normalizedPath}`);
        logger.error(`Upload failed - ${error.message}`);
        throw error;
      }

      const uploadUrl = `https://${dbName}-${TURSO_CONFIG.ORG_SLUG}.turso.io/v1/upload`;
      logger.info(`Uploading to URL: ${uploadUrl}`);

      const response = await fetch(uploadUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${authToken}`,
        },
        body: fs.createReadStream(normalizedPath),
      });

      if (!response.ok) {
        const errorText = await response.text();
        logger.error(`Failed to upload database (status ${response.status}): ${errorText}`);
        
        // Log headers for debugging
        const headers: Record<string, string> = {};
        response.headers.forEach((value, key) => {
          headers[key] = value;
        });
        logger.error(`Response headers: ${JSON.stringify(headers)}`);
        
        throw new Error(`Failed to upload database: ${errorText}`);
      }
      
      const result = await response.json();
      logger.info(`Upload successful: ${JSON.stringify(result)}`);
      return result;
    } catch (error: unknown) {
      logger.error(`Error uploading database: ${error instanceof Error ? error.message : String(error)}`);
      if (error instanceof Error && error.stack) {
        logger.error(`Stack trace: ${error.stack}`);
      }
      throw error;
    }
  }

  async createOrganizationDatabase(orgId: string): Promise<{url: string, token: string}> {
    const dbName = `org-${orgId}-${Date.now()}`
    
    try {
      // Create database
      logger.info(`Creating Turso database for org ${orgId} with name ${dbName}`)
      const createResponse = await fetch('https://api.turso.tech/v1/databases', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: dbName,
          group: TURSO_CONFIG.GROUP_NAME,
        }),
      })

      if (!createResponse.ok) {
        const errorText = await createResponse.text()
        logger.error(`Failed to create database: ${errorText}`)
        throw new Error(`Failed to create database: ${errorText}`)
      }

      const createData = await createResponse.json() as any
      logger.info(`Database creation response: ${JSON.stringify(createData)}`)
      
      const hostname = createData.database?.Hostname
      if (!hostname) {
        logger.error(`Invalid database creation response - missing hostname: ${JSON.stringify(createData)}`)
        throw new Error('Failed to get database hostname')
      }
      logger.info(`Successfully created database with hostname: ${hostname}`)
      
      // Create access token
      logger.info(`Creating access token for database ${dbName}`)
      const tokenUrl = `https://api.turso.tech/v1/databases/${dbName}/auth/tokens`
      logger.info(`Token creation URL: ${tokenUrl}`)
      
      const tokenResponse = await fetch(tokenUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          expiration: 'never',
        }),
      })

      if (!tokenResponse.ok) {
        const errorText = await tokenResponse.text()
        logger.error(`Failed to create token (status ${tokenResponse.status}): ${errorText}`)
        // Log response headers for debugging
        const headers: Record<string, string> = {}
        tokenResponse.headers.forEach((value, key) => {
          headers[key] = value
        })
        logger.error(`Token response headers: ${JSON.stringify(headers)}`)
        throw new Error(`Failed to create token: ${errorText}`)
      }

      const tokenData = await tokenResponse.json() as any
      logger.info(`Token creation response: ${JSON.stringify(tokenData)}`)
      
      const token = tokenData.jwt
      if (!token) {
        logger.error(`Invalid token response - missing jwt: ${JSON.stringify(tokenData)}`)
        throw new Error('Failed to get database access token')
      }
      
      logger.info(`Successfully created token for database ${dbName}`)
      
      return {
        url: hostname,
        token,
      }
    } catch (error) {
      logger.error(`Error creating organization database: ${error instanceof Error ? error.message : String(error)}`)
      if (error instanceof Error && error.stack) {
        logger.error(`Stack trace: ${error.stack}`)
      }
      throw error
    }
  }

  async deleteOrganizationDatabase(dbName: string): Promise<void> {
    try {
      logger.info(`Deleting Turso database ${dbName}`)
      const response = await fetch(`https://api.turso.tech/v1/databases/${dbName}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${this.apiToken}`,
        },
      })

      if (!response.ok) {
        const errorText = await response.text()
        logger.error(`Failed to delete database: ${errorText}`)
        throw new Error(`Failed to delete database: ${errorText}`)
      }
      
      logger.info(`Successfully deleted database ${dbName}`)
    } catch (error) {
      logger.error(`Error deleting organization database: ${error}`)
      throw error
    }
  }

  // Helper function to normalize database URLs
  private normalizeDbUrl(url: string): { hostname: string, apiUrl: string, dbUrl: string } {
    // Strip any protocol prefix
    const hostname = url.replace(/(^https?:\/\/)|(^libsql:\/\/)/, '');
    return {
      hostname,  // Raw hostname without protocol
      apiUrl: `https://${hostname}`,  // For API calls
      dbUrl: `libsql://${hostname}`   // For database connections
    };
  }

  async downloadDatabaseDump(dbUrl: string, authToken: string): Promise<string> {
    try {
      const { apiUrl } = this.normalizeDbUrl(dbUrl);
      logger.info(`Downloading database dump from ${apiUrl}/dump`);
      
      const response = await fetch(`${apiUrl}/dump`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${authToken}`,
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to download dump: ${errorText}`);
      }

      return await response.text();
    } catch (error) {
      logger.error(`Error downloading database dump: ${error}`);
      throw error;
    }
  }

  async createDatabaseFromDump(orgId: string, suffix: string, dumpContent: string): Promise<{url: string, token: string}> {
    const dbName = `org-${orgId}-${suffix}`;

    try {
      logger.info(`Creating new database: ${dbName}`);
      
      // Step 1: Create the database with a unique name
      const createDbResponse = await fetch(
        `${TURSO_CONFIG.API_URL}/organizations/${TURSO_CONFIG.ORG_SLUG}/databases`, 
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${this.apiToken}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name: dbName,
            group: TURSO_CONFIG.GROUP_NAME
          })
        }
      );

      if (!createDbResponse.ok) {
        const errorText = await createDbResponse.text();
        throw new Error(`Failed to create database: ${errorText}`);
      }

      const dbData = await createDbResponse.json() as { database: { Hostname: string } };
      const { dbUrl, apiUrl } = this.normalizeDbUrl(dbData.database.Hostname);
      logger.info(`Database created: ${dbUrl}`);
      
      // Step 2: Generate an auth token for the database
      logger.info(`Generating auth token for database ${dbName}`);
      const tokenResponse = await fetch(
        `${TURSO_CONFIG.API_URL}/organizations/${TURSO_CONFIG.ORG_SLUG}/databases/${dbName}/auth/tokens`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${this.apiToken}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (!tokenResponse.ok) {
        const errorText = await tokenResponse.text();
        // Try to clean up the created database
        try {
          await this.deleteOrganizationDatabase(dbName);
        } catch (cleanupError) {
          logger.warn(`Failed to delete database after token error: ${cleanupError}`);
        }
        throw new Error(`Failed to create auth token: ${errorText}`);
      }

      const tokenData = await tokenResponse.json() as { jwt: string };
      const token = tokenData.jwt;
      
      logger.info(`Successfully created database ${dbName} with auth token`);
      
      // Create client for the new database using libsql:// URL
      const client = createClient({
        url: dbUrl,
        authToken: token
      });
      
      // Split dump into logical statement groups for more reliable execution
      const statements = dumpContent
        .split(';')
        .map(stmt => stmt.trim())
        .filter(stmt => stmt.length > 0);
      
      logger.info(`Split SQL dump into ${statements.length} statements`);
      
      // Execute statements in phases - first schema statements, then data statements
      // Parse and categorize statements
      const schemaStatements = statements.filter(stmt => 
        stmt.toUpperCase().startsWith('CREATE TABLE')
      );
      
      const indexStatements = statements.filter(stmt => 
        stmt.toUpperCase().startsWith('CREATE INDEX') || 
        stmt.toUpperCase().startsWith('CREATE UNIQUE INDEX')
      );
      
      const insertStatements = statements.filter(stmt => 
        stmt.toUpperCase().startsWith('INSERT')
      );
      
      const otherStatements = statements.filter(stmt => 
        !schemaStatements.includes(stmt) && 
        !indexStatements.includes(stmt) && 
        !insertStatements.includes(stmt)
      );
      
      logger.info(`Processing ${schemaStatements.length} tables, ${indexStatements.length} indexes, ${insertStatements.length} data inserts, and ${otherStatements.length} other statements`);
      
      // Phase 1: Create tables
      for (const tableStatement of schemaStatements) {
        try {
          logger.info(`Creating table: ${tableStatement.substring(0, 60)}...`);
          await client.execute(tableStatement);
        } catch (error) {
          // If there's an error with the contacts table missing updated_at, add it
          if (tableStatement.includes('contacts') && 
              (error as Error).toString().includes('no column named updated_at')) {
            logger.warn('Error creating contacts table, attempting to fix missing updated_at column');
            
            // Add the updated_at column if it's missing
            try {
              // First create the table without the updated_at column
              await client.execute(tableStatement);
              
              // Then add the updated_at column
              await client.execute(`
                ALTER TABLE contacts
                ADD COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
              `);
              
              logger.info('Successfully added missing updated_at column to contacts table');
            } catch (altError) {
              logger.error(`Failed to fix contacts table: ${altError}`);
              throw altError;
            }
          } else {
            // For other errors, just throw them
            throw error;
          }
        }
      }
      
      // Phase 2: Execute other statements (drops, alters, etc)
      for (const statement of otherStatements) {
        await client.execute(statement);
      }
      
      // Phase 3: Insert data
      logger.info(`Inserting data (${insertStatements.length} statements)...`);
      let successCount = 0;
      let errorCount = 0;
      
      // Check if we've already detected updated_at missing
      let updatedAtMissing = false;
      let checkedUpdatedAt = false;
      
      for (const insertStatement of insertStatements) {
        try {
          // Skip if we know the statement will fail due to updated_at missing
          if (updatedAtMissing && insertStatement.includes('updated_at')) {
            // Try to fix the insert statement by removing the updated_at column
            const fixedInsert = insertStatement
              .replace(/updated_at\s*,/i, '')  // Remove updated_at from column list
              .replace(/(\w+\s*,\s*)CURRENT_TIMESTAMP(\s*\))/gi, '$1$2')  // Remove corresponding value in VALUES
              .replace(/,\s*\)/g, ')');  // Fix any trailing commas
            
            try {
              await client.execute(fixedInsert);
              successCount++;
              
              // Log progress periodically
              if (successCount % 50 === 0) {
                logger.info(`Imported ${successCount}/${insertStatements.length} data statements (with fixes)`);
              }
            } catch (fixError) {
              errorCount++;
              logger.error(`Error executing fixed INSERT: ${fixError}`);
              // Continue with next statement
            }
            continue;
          }
          
          // Try the original statement
          await client.execute(insertStatement);
          successCount++;
          
          // Log progress periodically
          if (successCount % 50 === 0) {
            logger.info(`Imported ${successCount}/${insertStatements.length} data statements`);
          }
        } catch (error) {
          // Check if this is the updated_at missing error
          if (!checkedUpdatedAt && (error as Error).toString().includes('no column named updated_at')) {
            updatedAtMissing = true;
            checkedUpdatedAt = true;
            logger.warn('Detected missing updated_at column in contacts table, will attempt to fix INSERT statements');
            
            // Try to add the column if it's missing
            try {
              await client.execute(`
                ALTER TABLE contacts
                ADD COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
              `);
              logger.info('Added missing updated_at column to contacts table');
              
              // Now we have the column, try the statement again
              try {
                await client.execute(insertStatement);
                successCount++;
                logger.info('Successfully executed INSERT after adding updated_at column');
                
                // We fixed the table, so we don't need to modify statements anymore
                updatedAtMissing = false;
              } catch (retryError) {
                errorCount++;
                logger.error(`Error retrying INSERT after adding column: ${retryError}`);
              }
            } catch (alterError) {
              logger.warn(`Could not add updated_at column: ${alterError}`);
              // Still mark as missing so we can fix the statements
            }
          } else {
            errorCount++;
            logger.error(`Error executing INSERT: ${error}`);
            // Continue with next statement - don't fail everything for one bad insert
          }
        }
      }
      
      // Phase 4: Create indexes (do this last for better performance)
      logger.info(`Creating ${indexStatements.length} indexes...`);
      for (const indexStatement of indexStatements) {
        try {
          await client.execute(indexStatement);
        } catch (error) {
          logger.warn(`Error creating index: ${error}`);
          // Continue with next index - not fatal
        }
      }
      
      // Log summary
      logger.info(`Database import complete: ${successCount} successful inserts, ${errorCount} errors`);
      
      // Verify the database
      try {
        const result = await client.execute('SELECT COUNT(*) as count FROM contacts');
        const count = result.rows?.[0]?.[0];
        logger.info(`Database verification: ${count} contacts found`);
      } catch (error) {
        logger.warn(`Error verifying database: ${error}`);
      }
      
      return { url: dbUrl, token };
    } catch (error) {
      logger.error(`Error creating database from dump: ${error}`);
      throw error;
    }
  }
  

  private handleError(error: unknown): never {
    logger.error(`Turso service error: ${error instanceof Error ? error.message : String(error)}`);
    throw error instanceof Error ? error : new Error(String(error));
  }

  private validateResponse(data: unknown): TursoResponse {
    if (!data || typeof data !== 'object') {
      throw new Error('Invalid response from Turso API');
    }
    return data as TursoResponse;
  }
}

================
File: backend/src/utils/quoteId.ts
================
import { createHash } from 'crypto';

// Function to generate a unique quote ID from org ID and contact ID
export function generateQuoteId(orgId: number, contactId: number): string {
    // Create a string to hash that includes org, contact, and secret

    const secret = process.env.QUOTE_SECRET || 'your-default-secret-key';

    const dataToHash = `${orgId}-${contactId}-${secret}`;
    console.log('dataToHash', dataToHash);
    
    // Generate hash using crypto
    const hash = createHash('sha256')
        .update(dataToHash)
        .digest('hex')
        .slice(0, 8); // Take first 8 characters for brevity
    
    // Combine components into quote ID
    const finalQuoteId = `${orgId}-${contactId}-${hash}`;
    console.log('finalQuoteId', finalQuoteId);
    return finalQuoteId;
}

// Function to decode a quote ID back to org ID and contact ID
export function decodeQuoteId(quoteId: string): { orgId: number; contactId: number } | null {
    try {
        const parts = quoteId.split('-');
        if (parts.length !== 3) {
            return null;
        }

        const [orgId, contactId, providedHash] = parts;
        
        // Recreate hash to validate
        const secret = process.env.QUOTE_SECRET || 'your-default-secret-key';
        const dataToHash = `${orgId}-${contactId}-${secret}`;
        console.log('dataToHash', dataToHash);
        const expectedHash = createHash('sha256')
            .update(dataToHash)
            .digest('hex')
            .slice(0, 8);

        // Compare hashes
        if (providedHash !== expectedHash) {
            return null;
        }

        return {
            orgId: parseInt(orgId),
            contactId: parseInt(contactId)
        };
    } catch (e) {
        return null;
    }
}

================
File: backend/src/utils/tracking.ts
================
/**
 * Utilities for tracking URLs and link analytics
 */

/**
 * Generates a tracking ID for a particular URL
 * Format: tid-[orgId]-[contactId]-[timestamp]
 * @param orgId Organization ID
 * @param contactId Contact ID
 * @param prefix Optional prefix for the tracking ID (defaults to 'tid')
 * @returns Tracking ID string
 */
export const generateTrackingId = (orgId: number | string, contactId: number | string, prefix: string = 'tid'): string => {
  const timestamp = Date.now();
  return `${prefix}-${orgId}-${contactId}-${timestamp}`;
};

/**
 * Adds tracking parameters to a URL
 * @param url The original URL
 * @param trackingId The tracking ID to add
 * @returns URL with tracking parameters
 */
export const addTrackingToUrl = (url: string, trackingId: string): string => {
  try {
    const urlObj = new URL(url);
    urlObj.searchParams.append('tid', trackingId);
    return urlObj.toString();
  } catch (error) {
    // If URL parsing fails, append as a simple query parameter
    const separator = url.includes('?') ? '&' : '?';
    return `${url}${separator}tid=${trackingId}`;
  }
};

/**
 * Extracts information from a tracking ID
 * @param trackingId The tracking ID to parse
 * @returns Object with parsed tracking info or null if invalid
 */
export const parseTrackingId = (trackingId: string): { prefix: string, orgId: string, contactId: string, timestamp: number } | null => {
  const parts = trackingId.split('-');
  if (parts.length < 4) {
    return null;
  }
  
  const [prefix, orgId, contactId, timestampStr] = parts;
  const timestamp = parseInt(timestampStr, 10);
  
  if (isNaN(timestamp)) {
    return null;
  }
  
  return {
    prefix,
    orgId,
    contactId,
    timestamp
  };
};

================
File: backend/src/config.ts
================
import { config as dotenvConfig } from 'dotenv'
import { resolve } from 'path'
import { logger } from './logger'
import { existsSync } from 'fs'
import dotenv from 'dotenv'
import fs from 'fs'
import path from 'path'

// Get absolute path to .env file
const envPath = resolve(__dirname, '../.env')

// Check if .env file exists - but don't exit if using Replit Secrets
const envFileExists = existsSync(envPath)
if (!envFileExists) {
  console.log(`⚠️ .env file not found at: ${envPath}, will attempt to use Replit Secrets instead`)
} else {
  // Load .env file with override option only if it exists
  const result = dotenvConfig({ 
    path: envPath,
    override: true // This tells dotenv to override existing env vars
  })

  if (result.error) {
    console.warn('⚠️ Error loading .env file:', result.error)
  } else {
    console.log('📁 Loading .env from:', envPath)
  }
}

// Log environment variables (safely)
console.log('📝 Environment variables available:', {
  TURSO_DATABASE_URL: process.env.TURSO_DATABASE_URL ? '[PRESENT]' : '[MISSING]',
  TURSO_AUTH_TOKEN: process.env.TURSO_AUTH_TOKEN ? '[PRESENT]' : '[MISSING]',
  TURSO_DATABASE_PATH: process.env.TURSO_DATABASE_PATH ? '[PRESENT]' : '[MISSING]'
})

// Load environment variables from .env file
if (fs.existsSync(path.join(process.cwd(), '.env'))) {
  dotenv.config()
}

// Look for mockStripe: true in the environment, if not found, default to true in development and false in production
const useMockStripe = process.env.USE_MOCK_STRIPE === 'true' || 
  (process.env.NODE_ENV === 'development' && process.env.USE_REAL_STRIPE !== 'true');

export const config = {
  TURSO_DATABASE_URL: process.env.TURSO_DATABASE_URL,
  TURSO_AUTH_TOKEN: process.env.TURSO_AUTH_TOKEN,
  TURSO_DATABASE_PATH: process.env.TURSO_DATABASE_PATH,
  TURSO_API_TOKEN: process.env.TURSO_API_TOKEN,
  TURSO_ORG_GROUP: process.env.TURSO_ORG_GROUP || 'medicare-portal',
  TURSO_ORG_SLUG: process.env.TURSO_ORG_SLUG || 'pyrex41',
  USE_LOCAL_SQLITE: process.env.USE_LOCAL_SQLITE === 'true',
  LOCAL_DB_PATH: process.env.LOCAL_DB_PATH || './.data',
  quoteApiKey: process.env.QUOTE_API_KEY,
  quoteSecret: process.env.QUOTE_SECRET,
  magicLinkSecret: process.env.MAGIC_LINK_SECRET,
  sendgridApiKey: process.env.SENDGRID_API_KEY,
  sendgridFromEmail: process.env.SENDGRID_FROM_EMAIL,
  PUBLIC_URL: process.env.PUBLIC_URL || (process.env.NODE_ENV === 'development' 
    ? 'http://localhost:5173'
    : 'http://localhost:3000'),
  stripe: {
    secretKey: process.env.STRIPE_SECRET_KEY,
    publishableKey: process.env.STRIPE_PUBLISHABLE_KEY,
    webhookSecret: process.env.STRIPE_WEBHOOK_SECRET,
    useMock: useMockStripe,
    pricingTableId: process.env.STRIPE_PRICING_TABLE_ID || 'prctbl_1RAfz9CBUPXAZKNG0EyV8bRU',
    prices: {
      basic: process.env.STRIPE_PRICE_BASIC || 'price_basic',
      pro: process.env.STRIPE_PRICE_PRO || 'price_pro',
      enterprise: process.env.STRIPE_PRICE_ENTERPRISE || 'price_enterprise',
      contactBaseTier: process.env.STRIPE_PRICE_CONTACT_BASE_TIER || 'price_contact_base',
      additionalContacts: process.env.STRIPE_PRICE_ADDITIONAL_CONTACTS || 'price_additional_contacts',
      // Optional price IDs for legacy support
      extraAgent: process.env.STRIPE_PRICE_EXTRA_AGENT,
      extraContact: process.env.STRIPE_PRICE_EXTRA_CONTACT,
    },
    publicKey: process.env.STRIPE_PUBLIC_KEY,
    connectAccount: process.env.STRIPE_CONNECT_ACCOUNT,
  },
  stripeApiKey: process.env.STRIPE_SECRET_KEY,
  stripeWebhookSecret: process.env.STRIPE_WEBHOOK_SECRET,
  clientUrl: process.env.PUBLIC_URL || 'http://localhost:5173',
  stripeSecretKey: process.env.STRIPE_SECRET_KEY || '',
}

// Log loaded config (safely)
logger.info(`Config loaded ${envFileExists ? `from ${envPath}` : 'from environment'}`)

================
File: backend/src/database.ts
================
import { createClient } from '@libsql/client'
import { config } from './config'
import { logger } from './logger'
import { TursoService } from './services/turso'
import { Database as BunDatabase } from 'bun:sqlite'
import fs from 'fs'
import path from 'path'
import { parse } from 'csv-parse'
import { pipeline } from 'stream/promises'
import fetch, { Response } from 'node-fetch'
import type { RequestInit, RequestInfo } from 'node-fetch'
import type { ContactCreate } from './types'
import { Database as SqliteDatabase, open } from 'sqlite'
import sqlite3 from 'sqlite3'
import fsPromises from 'fs/promises'
import Bun from 'bun'
import { ZIP_DATA } from './index' // Import ZIP_DATA for state lookup

// Connection pool to reuse database connections
interface ConnectionInfo {
  client: any;
  url: string;
  lastUsed: number;
}

class ConnectionPool {
  private static instance: ConnectionPool;
  private connections: Map<string, ConnectionInfo> = new Map();
  private readonly MAX_IDLE_TIME = 60000; // 60 seconds max idle time
  private readonly MAX_POOL_SIZE = 20; // Maximum connections to keep in the pool
  private cleanupInterval: any;

  private constructor() {
    // Start the cleanup interval to remove idle connections
    this.cleanupInterval = setInterval(() => this.cleanupIdleConnections(), 30000);
  }

  public static getInstance(): ConnectionPool {
    if (!ConnectionPool.instance) {
      ConnectionPool.instance = new ConnectionPool();
    }
    return ConnectionPool.instance;
  }

  public getConnection(url: string, authToken: string): any {
    // Check if we have a connection for this URL
    if (this.connections.has(url)) {
      const conn = this.connections.get(url)!;
      conn.lastUsed = Date.now();
      return conn.client;
    }

    // If we've reached max pool size, remove the oldest connection
    if (this.connections.size >= this.MAX_POOL_SIZE) {
      let oldestTime = Infinity;
      let oldestUrl = '';
      
      for (const [connUrl, conn] of this.connections.entries()) {
        if (conn.lastUsed < oldestTime) {
          oldestTime = conn.lastUsed;
          oldestUrl = connUrl;
        }
      }
      
      if (oldestUrl) {
        logger.info(`Connection pool: removing oldest connection ${oldestUrl}`);
        this.connections.delete(oldestUrl);
      }
    }

    // Create a new connection
    logger.info(`Creating new Turso connection for ${url}`);
    const client = createClient({
      url,
      authToken,
      concurrency: 25, // Lower concurrency to prevent rate limits
      fetch: async (fetchUrl, options) => {
        // Add custom fetch with retry for 429 errors
        const maxRetries = 3;
        for (let attempt = 0; attempt < maxRetries; attempt++) {
          try {
            const response = await fetch(fetchUrl, options);
            if (response.status === 429) {
              // Rate limited, wait with exponential backoff
              const delay = Math.pow(2, attempt) * 1000;
              logger.warn(`Rate limit hit in Turso API call, retry ${attempt+1}/${maxRetries} after ${delay}ms`);
              await new Promise(resolve => setTimeout(resolve, delay));
              continue;
            }
            return response;
          } catch (error) {
            if (attempt === maxRetries - 1) throw error;
            const delay = Math.pow(2, attempt) * 1000;
            logger.warn(`Error in Turso API call, retry ${attempt+1}/${maxRetries} after ${delay}ms: ${error}`);
            await new Promise(resolve => setTimeout(resolve, delay));
          }
        }
        throw new Error('Max retries reached for Turso API call');
      }
    });

    // Store in the pool
    this.connections.set(url, {
      client,
      url,
      lastUsed: Date.now()
    });

    return client;
  }

  private cleanupIdleConnections() {
    const now = Date.now();
    let cleanedCount = 0;
    
    for (const [url, conn] of this.connections.entries()) {
      if (now - conn.lastUsed > this.MAX_IDLE_TIME) {
        this.connections.delete(url);
        cleanedCount++;
      }
    }
    
    if (cleanedCount > 0) {
      logger.info(`Connection pool: cleaned up ${cleanedCount} idle connections, remaining: ${this.connections.size}`);
    }
  }

  public shutdown() {
    clearInterval(this.cleanupInterval);
    this.connections.clear();
  }
}

type ColumnMapping = {
  firstName: string;
  lastName: string;
  email: string;
  phoneNumber: string;
  state?: string; // Make state optional since we'll infer it from zip code
  currentCarrier: string;
  effectiveDate: string;
  birthDate: string;
  tobaccoUser: string;
  gender: string;
  zipCode: string;
  planType: string;
};

type CarrierMapping = {
  detectedCarriers: string[];
  mappings: Record<string, string>;
};

interface FetchOptions extends RequestInit {
  method?: string;
  headers?: Record<string, string>;
  body?: string | null;
}

export class Database {
  private client: any
  private url: string
  private isLocal: boolean
  private bunDb: BunDatabase | null = null

  public static normalizeDbUrl(url: string): { hostname: string, apiUrl: string, dbUrl: string, dbName: string } {
    // Strip any protocol prefix
    const hostname = url.replace(/(^https?:\/\/)|(^libsql:\/\/)/, '');
    const dbName = hostname.split('/').pop()?.split('.')[0] || '';
    return {
      hostname,  // Raw hostname without protocol
      apiUrl: `https://${hostname}`,  // For API calls
      dbUrl: `libsql://${hostname}`,   // For database connections
      dbName // For local SQLite files
    };
  }

  constructor(dbUrl?: string, authToken?: string) {
    const url = dbUrl || config.TURSO_DATABASE_URL
    const token = authToken || config.TURSO_AUTH_TOKEN

    if (!url) {
      logger.error('Missing database URL')
      throw new Error('Missing database URL')
    }

    const { dbUrl: normalizedUrl, dbName } = Database.normalizeDbUrl(url)
    this.url = normalizedUrl
    this.isLocal = config.USE_LOCAL_SQLITE

    if (this.isLocal) {
      const dbPath = path.join(process.cwd(), config.LOCAL_DB_PATH, `${dbName}.sqlite`)
      logger.info(`Using local SQLite database at: ${dbPath}`)
      
      // Create directory if it doesn't exist
      const dbDir = path.dirname(dbPath)
      if (!fs.existsSync(dbDir)) {
        fs.mkdirSync(dbDir, { recursive: true })
      }
      
      this.bunDb = new BunDatabase(dbPath)
      this.client = this.bunDb
      
      // Enable foreign keys
      this.bunDb.exec('PRAGMA foreign_keys = ON;')
    } else {
      if (!token) {
        logger.error('Missing database token')
        throw new Error('Missing database token')
      }
      this.client = createClient({
        url: normalizedUrl,
        authToken: token,
        concurrency: 25, // Reduced concurrency to prevent rate limits
        fetch: async (fetchUrl, options) => {
          // Add custom fetch with retry for 429 errors
          const maxRetries = 3;
          for (let attempt = 0; attempt < maxRetries; attempt++) {
            try {
              const response = await fetch(fetchUrl, options);
              if (response.status === 429) {
                // Rate limited, wait with exponential backoff
                const delay = Math.pow(2, attempt) * 1000;
                logger.warn(`Rate limit hit in Turso API call, retry ${attempt+1}/${maxRetries} after ${delay}ms`);
                await new Promise(resolve => setTimeout(resolve, delay));
                continue;
              }
              return response;
            } catch (error) {
              if (attempt === maxRetries - 1) throw error;
              const delay = Math.pow(2, attempt) * 1000;
              logger.warn(`Error in Turso API call, retry ${attempt+1}/${maxRetries} after ${delay}ms: ${error}`);
              await new Promise(resolve => setTimeout(resolve, delay));
            }
          }
          throw new Error('Max retries reached for Turso API call');
        }
      })
    }
    
    logger.info(`Database connected to: ${this.isLocal ? dbName : this.url}`)
  }

  static async getOrgDb(orgId: string): Promise<Database> {
    logger.info(`Getting org database for org ${orgId}`);
    const mainDb = new Database();
    
    try {
      const org = await mainDb.fetchOne<{ turso_db_url: string; turso_auth_token: string }>(
        'SELECT turso_db_url, turso_auth_token FROM organizations WHERE id = ?',
        [orgId]
      );

      if (!org?.turso_db_url) {
        logger.error(`No database URL found for org ${orgId}`);
        throw new Error('Organization database not configured');
      }

      logger.info(`Creating Turso client for org ${orgId} **********`);
      const db = new Database(org.turso_db_url, org.turso_auth_token);

      // Validate connection by running a simple query with timeout
      logger.info(`Validating database connection for org ${orgId}...`);
      try {
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Database validation timed out after 5 seconds')), 5000);
        });
        
        const queryPromise = db.execute('SELECT 1');
        
        const result = await Promise.race([queryPromise, timeoutPromise]);
        logger.info(`Database connection validation successful for org ${orgId}. Result: ${JSON.stringify(result)}`);
        return db;
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        logger.error(`Database connection validation failed for org ${orgId}. Error: ${errorMessage}`);
        if (error instanceof Error && error.stack) {
          logger.error(`Stack trace: ${error.stack}`);
        }
        throw new Error(`Failed to establish database connection: ${errorMessage}`);
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      logger.error(`Error getting org database for org ${orgId}: ${errorMessage}`);
      if (error instanceof Error && error.stack) {
        logger.error(`Stack trace: ${error.stack}`);
      }
      throw error;
    }
  }

  /**
   * Get organization's database or initialize it if it doesn't exist
   * This method is used as a fallback when the database needs to be created on the fly
   */
  static async getOrInitOrgDb(orgId: string): Promise<Database> {
    const mainDb = new Database();
    const MAX_RETRIES = 10;
    const RETRY_DELAY_MS = 500;
    let retries = 0;

    while (true) {
      try {
        // Try to get the org DB as usual
        const db = await Database.getOrgDb(orgId)
        await Database.ensureOrgSchema(db)
        return db
      } catch (error) {
        if (error instanceof Error && error.message === 'Organization database not configured') {
          // Try to atomically claim the right to provision the DB
          const claimResult = await mainDb.execute(
            `UPDATE organizations
             SET is_db_provisioning = 1
             WHERE id = ? AND is_db_provisioning = 0 AND (turso_db_url IS NULL OR turso_db_url = '')`,
            [orgId]
          );

          if (claimResult.rowsAffected === 0) {
            // Someone else is provisioning, wait and retry
            if (retries++ >= MAX_RETRIES) {
              throw new Error('Timed out waiting for organization DB provisioning');
            }
            await new Promise(res => setTimeout(res, RETRY_DELAY_MS));
            continue;
          }

          // We have the lock, proceed to provision
          try {
            const orgExists = await mainDb.fetchOne<{ id: number }>(
              'SELECT id FROM organizations WHERE id = ?',
              [orgId]
            )
            if (!orgExists) throw new Error('Organization not found')

            const turso = new TursoService()
            logger.info(`Creating new Turso database for org ${orgId}`)
            const { url, token } = await turso.createOrganizationDatabase(orgId)
            logger.info(`Got new database URL: ${url}`)
            logger.info(`Got new database token (length: ${token.length})`)

            // Verify we can connect with the new credentials
            try {
              logger.info('Verifying connection with new credentials...')
              const testDb = new Database(url, token)
              await testDb.execute('SELECT 1')
              logger.info('Successfully verified connection with new credentials')
            } catch (connError) {
              logger.error(`Failed to verify connection with new credentials: ${connError instanceof Error ? connError.message : String(connError)}`)
              throw new Error('Failed to verify connection with new database credentials')
            }

            // Update organization with new credentials and clear provisioning flag
            logger.info(`Updating organization ${orgId} with new database credentials`)
            await mainDb.execute(
              'UPDATE organizations SET turso_db_url = ?, turso_auth_token = ?, is_db_provisioning = 0 WHERE id = ?',
              [url, token, orgId]
            )

            // Verify the update
            const updatedOrg = await mainDb.fetchOne<{ turso_db_url: string, turso_auth_token: string }>(
              'SELECT turso_db_url, turso_auth_token FROM organizations WHERE id = ?',
              [orgId]
            )
            if (!updatedOrg) {
              logger.error('Failed to fetch updated organization after credential update')
              throw new Error('Failed to update organization credentials')
            }
            if (updatedOrg.turso_db_url !== url || updatedOrg.turso_auth_token !== token) {
              logger.error('Organization credentials mismatch after update')
              logger.error(`Expected URL: ${url}, got: ${updatedOrg.turso_db_url}`)
              logger.error(`Expected token length: ${token.length}, got: ${updatedOrg.turso_auth_token.length}`)
              throw new Error('Organization credentials mismatch after update')
            }

            logger.info(`Successfully initialized database for organization ${orgId}`)
            const newDb = new Database(url, token)
            await Database.ensureOrgSchema(newDb)
            return newDb
          } catch (provisionError) {
            // On error, clear the provisioning flag so future attempts can retry
            await mainDb.execute(
              'UPDATE organizations SET is_db_provisioning = 0 WHERE id = ?',
              [orgId]
            )
            throw provisionError
          }
        }
        logger.error(`Error in getOrInitOrgDb: ${error instanceof Error ? error.message : String(error)}`)
        if (error instanceof Error && error.stack) {
          logger.error(`Stack trace: ${error.stack}`)
        }
        throw error
      }
    }
  }

  /**
   * Ensure that the organization database has all required tables
   * This can be used to add new tables to existing databases when the schema changes
   */
  static async ensureDatabaseSchema(orgId: string): Promise<void> {
    const orgDb = await Database.getOrgDb(orgId);
    
    // Define tables and their schema
    const tables = [
      {
        name: 'contacts',
        createStatement: `
          CREATE TABLE IF NOT EXISTS contacts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            first_name TEXT NOT NULL,
            last_name TEXT NOT NULL,
            email TEXT NOT NULL,
            current_carrier TEXT NOT NULL,
            plan_type TEXT NOT NULL,
            effective_date TEXT NOT NULL,
            birth_date TEXT NOT NULL,
            tobacco_user INTEGER NOT NULL,
            gender TEXT NOT NULL,
            state TEXT NOT NULL,
            zip_code TEXT NOT NULL,
            agent_id INTEGER,
            last_emailed DATETIME,
            phone_number TEXT NOT NULL DEFAULT '',
            status TEXT NOT NULL DEFAULT '',
            aep_request BOOLEAN DEFAULT FALSE,
            aep_request_date DATETIME,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`,
        indexStatements: [
          `CREATE INDEX IF NOT EXISTS idx_contacts_email ON contacts(email)`,
          `CREATE UNIQUE INDEX IF NOT EXISTS idx_contacts_email_unique ON contacts(LOWER(TRIM(email)))`,
        ],
      },
      {
        name: 'eligibility_answers',
        createStatement: `CREATE TABLE IF NOT EXISTS eligibility_answers (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          contact_id INTEGER NOT NULL,
          quote_id TEXT NOT NULL,
          answers TEXT NOT NULL,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (contact_id) REFERENCES contacts(id)
        )`,
        indexStatements: [
          `CREATE INDEX IF NOT EXISTS idx_eligibility_answers_contact_id ON eligibility_answers(contact_id)`
        ]
      },
      {
        name: 'contact_events',
        createStatement: `CREATE TABLE IF NOT EXISTS contact_events (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          contact_id INTEGER,
          lead_id INTEGER,
          event_type TEXT NOT NULL,
          metadata TEXT,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (contact_id) REFERENCES contacts(id) ON DELETE CASCADE,
          FOREIGN KEY (lead_id) REFERENCES leads(id) ON DELETE CASCADE
        )`,
        indexStatements: [
          `CREATE INDEX IF NOT EXISTS idx_contact_events_contact_id ON contact_events(contact_id)`,
          `CREATE INDEX IF NOT EXISTS idx_contact_events_lead_id ON contact_events(lead_id)`,
          `CREATE INDEX IF NOT EXISTS idx_contact_events_type ON contact_events(event_type)`
        ]
      },
      {
        name: 'tracking_clicks',
        createStatement: `CREATE TABLE IF NOT EXISTS tracking_clicks (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          tracking_id TEXT NOT NULL,
          path TEXT NOT NULL,
          query TEXT,
          contact_id INTEGER,
          ip_address TEXT,
          user_agent TEXT,
          referrer TEXT,
          clicked_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (contact_id) REFERENCES contacts(id) ON DELETE CASCADE
        )`,
        indexStatements: [
          `CREATE INDEX IF NOT EXISTS idx_tracking_clicks_tracking_id ON tracking_clicks(tracking_id)`,
          `CREATE INDEX IF NOT EXISTS idx_tracking_clicks_contact_id ON tracking_clicks(contact_id)`,
          `CREATE INDEX IF NOT EXISTS idx_tracking_clicks_clicked_at ON tracking_clicks(clicked_at)`
        ]
      },
      {
        name: 'leads',
        createStatement: `CREATE TABLE IF NOT EXISTS leads (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          email TEXT NOT NULL,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          UNIQUE(email)
        )`,
        indexStatements: [
          `CREATE INDEX IF NOT EXISTS idx_leads_email ON leads(email)`
        ]
      },
      {
        name: 'email_send_tracking',
        createStatement: `CREATE TABLE IF NOT EXISTS email_send_tracking (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          org_id INTEGER NOT NULL,
          contact_id INTEGER NOT NULL,
          email_type TEXT NOT NULL,
          scheduled_date TEXT NOT NULL,
          send_status TEXT NOT NULL CHECK(send_status IN ('pending', 'processing', 'accepted', 'delivered', 'sent', 'deferred', 'bounced', 'dropped', 'failed', 'skipped')) DEFAULT 'pending',
          send_mode TEXT NOT NULL CHECK(send_mode IN ('test', 'production')) DEFAULT 'test',
          test_email TEXT,
          send_attempt_count INTEGER NOT NULL DEFAULT 0,
          last_attempt_date TEXT,
          last_error TEXT,
          batch_id TEXT NOT NULL,
          message_id TEXT,
          delivery_status TEXT,
          status_checked_at TEXT,
          status_details TEXT,
          created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
          updated_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (contact_id) REFERENCES contacts(id) ON DELETE CASCADE
        )`,
        indexStatements: [
          `CREATE INDEX IF NOT EXISTS idx_email_tracking_batch_id ON email_send_tracking(batch_id)`,
          `CREATE INDEX IF NOT EXISTS idx_email_tracking_send_status ON email_send_tracking(send_status)`,
          `CREATE INDEX IF NOT EXISTS idx_email_tracking_send_mode ON email_send_tracking(send_mode)`,
          `CREATE INDEX IF NOT EXISTS idx_email_tracking_contact_id ON email_send_tracking(contact_id)`,
          `CREATE INDEX IF NOT EXISTS idx_email_tracking_contact_type ON email_send_tracking(contact_id, email_type)`,
          `CREATE INDEX IF NOT EXISTS idx_email_tracking_status_date ON email_send_tracking(send_status, scheduled_date)`,
          `CREATE INDEX IF NOT EXISTS idx_email_tracking_message_id ON email_send_tracking(message_id)`,
          `CREATE INDEX IF NOT EXISTS idx_email_tracking_delivery_status ON email_send_tracking(delivery_status)`,
          `CREATE TRIGGER IF NOT EXISTS update_email_tracking_timestamp AFTER UPDATE ON email_send_tracking BEGIN UPDATE email_send_tracking SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id; END`
        ]
      },
      {
        name: 'email_schedules',
        createStatement: `
          CREATE TABLE IF NOT EXISTS email_schedules (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            org_id INTEGER NOT NULL,
            contact_id INTEGER NOT NULL,
            email_type TEXT NOT NULL,
            scheduled_send_date TEXT NOT NULL,
            scheduled_send_time TEXT NOT NULL,
            batch_id TEXT,
            status TEXT NOT NULL DEFAULT 'pre-scheduled',
            skip_reason TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          )
        `,
        indexStatements: [
          `CREATE INDEX IF NOT EXISTS idx_email_schedules_org_contact ON email_schedules (org_id, contact_id)`,
          `CREATE INDEX IF NOT EXISTS idx_email_schedules_org_send_date ON email_schedules (org_id, scheduled_send_date)`,
          `CREATE INDEX IF NOT EXISTS idx_email_schedules_status ON email_schedules (status)`,
          `CREATE TRIGGER IF NOT EXISTS update_email_schedules_updated_at\nAFTER UPDATE ON email_schedules\nFOR EACH ROW\nBEGIN\n    UPDATE email_schedules\n    SET updated_at = CURRENT_TIMESTAMP\n    WHERE id = OLD.id;\nEND;`
        ]
      }
    ];
    
    // Get all existing tables in one query for efficiency
    const existingTables = await orgDb.fetchAll(
      `SELECT name FROM sqlite_master WHERE type='table' AND name IN (${tables.map(t => `'${t.name}'`).join(', ')})`
    );
    
    // Create a set of existing table names for faster lookup
    const tableSet = new Set(existingTables.map((row: any) => row.name || row[0]));
    
    // Prepare batch operations
    const batchOperations = [];
    
    for (const table of tables) {
      if (!tableSet.has(table.name)) {
        logger.info(`Adding create table operation for ${table.name}`);
        batchOperations.push({
          sql: table.createStatement,
          args: []
        });
      }
      
      // Always add index creation statements, even for existing tables
      // This ensures all necessary indexes exist in all databases
      for (const indexStatement of table.indexStatements) {
        logger.info(`Ensuring index for ${table.name}: ${indexStatement}`);
        batchOperations.push({
          sql: indexStatement,
          args: []
        });
      }
    }
    
    // Execute all schema operations in a single batch if there are any
    if (batchOperations.length > 0) {
      logger.info(`Executing ${batchOperations.length} schema operations in batch for org ${orgId}`);
      await orgDb.batch(batchOperations, 'write');
      logger.info(`Schema setup completed successfully for org ${orgId}`);
    } else {
      logger.info(`No schema changes needed for org ${orgId}`);
    }
  }

  getClient() {
    return this.client
  }

  async execute(sql: string, args: any[] = []) {
    try {
      if (this.isLocal && this.bunDb) {
        // For local SQLite
        const stmt = this.bunDb.prepare(sql)
        const result = stmt.run(...args)
        return {
          rows: Array.isArray(result) ? result : result.changes > 0 ? [result] : [],
          rowsAffected: result.changes
        }
      } else {
        // For Turso
        const result = await this.client.execute({
          sql,
          args
        })
        return result
      }
    } catch (error) {
      logger.error(`Database execute error: ${error}`)
      throw error
    }
  }
  
  /**
   * Execute a batch of SQL statements in an implicit transaction
   * @param statements Array of SQL statements with args
   * @param mode Transaction mode (read or write)
   * @returns Result of the batch operation
   */
  async batch(statements: { sql: string, args: any[] }[], mode: 'read' | 'write' = 'write') {
    try {
      if (this.isLocal && this.bunDb) {
        // For local SQLite, implement batch manually with transaction
        this.bunDb.exec('BEGIN TRANSACTION');
        const results = [];
        
        try {
          for (const { sql, args } of statements) {
            const stmt = this.bunDb.prepare(sql);
            const result = stmt.run(...args);
            results.push({
              rows: Array.isArray(result) ? result : result.changes > 0 ? [result] : [],
              rowsAffected: result.changes
            });
          }
          
          this.bunDb.exec('COMMIT');
          return results;
        } catch (error) {
          this.bunDb.exec('ROLLBACK');
          throw error;
        }
      } else {
        // For Turso, use native batch support
        const batchStatements = statements.map(({ sql, args }) => ({
          sql,
          args: args || []
        }));
        
        return await this.client.batch(batchStatements, mode);
      }
    } catch (error) {
      logger.error(`Database batch error: ${error}`);
      throw error;
    }
  }

  async fetchAll(sql: string, args: any[] = []) {
    try {
      if (this.isLocal && this.bunDb) {
        // For local SQLite
        const stmt = this.bunDb.prepare(sql)
        const rows = stmt.all(...args)
        return rows || []
      } else {
        // For Turso
        const result = await this.client.execute({
          sql,
          args
        })
        return result.rows || []
      }
    } catch (error) {
      logger.error(`Database fetchAll error: ${error}`)
      throw error
    }
  }

  async fetchOne<T>(sql: string, args: any[] = []): Promise<T | null> {
    if (this.isLocal && this.bunDb) {
      // For local SQLite
      const stmt = this.bunDb.prepare(sql)
      const row = stmt.get(...args)
      return row as T || null
    } else {
      // For Turso
      const result = await this.execute(sql, args)
      if (!result.rows || result.rows.length === 0) return null
      const row = result.rows[0]
      const columns = result.columns || []
      const obj: any = {}
      columns.forEach((col: string, i: number) => (obj[col] = row[i]))
      return obj as T
    }
  }

  // Compatibility method for old query interface
  async query<T = any>(sql: string, args: any[] = []): Promise<T[]> {
    return this.fetchAll(sql, args)
  }

  // Add transaction support for local SQLite
  async transaction<T>(callback: (tx: Database) => Promise<T>): Promise<T>;
  async transaction<T>(mode: 'read' | 'write', callback: (tx: Database) => Promise<T>): Promise<T>;
  async transaction<T>(
    callbackOrMode: ((tx: Database) => Promise<T>) | 'read' | 'write',
    callback?: (tx: Database) => Promise<T>
  ): Promise<T> {
    let mode: 'read' | 'write' = 'write'
    let fn: ((tx: Database) => Promise<T>) | null = null

    if (typeof callbackOrMode === 'string') {
      mode = callbackOrMode
      fn = callback || null
    } else {
      fn = callbackOrMode
    }
    
    if (!fn) {
      throw new Error('Transaction callback is required')
    }

    if (this.isLocal && this.bunDb) {
      // For local SQLite
      try {
        this.bunDb.exec('BEGIN TRANSACTION')
        const result = await fn(this)
        this.bunDb.exec('COMMIT')
        return result
      } catch (error) {
        this.bunDb.exec('ROLLBACK')
        throw error
      }
    } else {
      // For Turso
      const tx = await this.client.transaction(mode)
      try {
        const txWrapper = new Database()
        txWrapper.client = tx
        const result = await fn(txWrapper)
        await tx.commit()
        return result
      } catch (error) {
        await tx.rollback()
        throw error
      }
    }
  }

  /**
   * Bulk import contacts from CSV directly into the database
   */
  static async bulkImportContacts(
    orgId: string,
    csvFilePath: string,
    overwriteExisting: boolean = false,
    columnMapping?: ColumnMapping,
    carrierMapping?: CarrierMapping,
    agentId?: number | null
  ): Promise<string> {
    logger.info(`Starting bulk import for organization ${orgId} from ${csvFilePath}`);
    
    try {
      // get the main db
      const mainDb = new Database();
      
      // get the org db url / auth token
      const orgData = await mainDb.fetchOne<{ turso_db_url: string, turso_auth_token: string }>(
        'SELECT turso_db_url, turso_auth_token FROM organizations WHERE id = ?',
        [orgId]
      );

      if (!orgData) {
        throw new Error(`Organization ${orgId} not found`);
      }

      const { turso_db_url, turso_auth_token } = orgData;

      if (!turso_db_url || !turso_auth_token) {
        throw new Error(`Could not get database configuration for organization ${orgId}`);
      }

      // First, download the existing database from Turso
      const tursoService = new TursoService();
      logger.info(`Downloading existing database from Turso for org ${orgId}`);
      logger.info(`Turso DB URL: ${turso_db_url}`);
      logger.info(`Turso Auth Token: ${turso_auth_token}`);
      const dumpContent = await tursoService.downloadDatabaseDump(turso_db_url, turso_auth_token);
      logger.info(`Downloaded ${dumpContent.length} bytes of database dump`);

      // Create a temporary file for the dump
      const tempDumpFile = `dump-${Date.now()}.sql`;
      const tempDbFile = `temp-${Date.now()}.db`;
      let localDb: BunDatabase | null = null;
      
      try {
        // Write dump to temporary file
        await fsPromises.writeFile(tempDumpFile, dumpContent);

        // Use sqlite3 CLI to create and populate the database
        logger.info('Creating temporary database from dump...');
        await new Promise((resolve, reject) => {
          const sqlite = Bun.spawn(['sqlite3', tempDbFile], {
            stdin: Bun.file(tempDumpFile),
            onExit(proc, exitCode, signalCode, error) {
              if (exitCode === 0) {
                resolve(null);
              } else {
                reject(new Error(`SQLite process exited with code ${exitCode}: ${error}`));
              }
            }
          });
        });

        logger.info('Successfully created temporary database from dump');

        // Now connect to the temporary database using BunSQLite
        localDb = new BunDatabase(tempDbFile);

        // Use DELETE journal mode instead of WAL for direct file writes
        localDb.exec('PRAGMA journal_mode = DELETE');
        localDb.exec('PRAGMA foreign_keys = OFF');

        // Drop the unique index on email temporarily to allow the import
        logger.info('Dropping unique email index for import...');
        localDb.exec('DROP INDEX IF EXISTS idx_contacts_email_unique');

        // Verify the database state before CSV import
        const tables = ['contacts', 'contact_events', 'leads', 'eligibility_answers', 'email_send_tracking'];
        for (const table of tables) {
          try {
            const count = localDb.prepare(`SELECT COUNT(*) as count FROM ${table}`).get() as { count: number };
            logger.info(`Table ${table} before CSV import: ${count.count} rows`);
          } catch (error) {
            logger.error(`Error counting rows in ${table}: ${error}`);
          }
        }

        // Now process the new contacts from CSV
        logger.info(`Processing new contacts from CSV file`);
        
        // Read the CSV file
        const fileContents = await fsPromises.readFile(csvFilePath, 'utf8');
        const rows = await new Promise<any[]>((resolve, reject) => {
          const results: any[] = [];
          const parser = parse(fileContents, { columns: true });
          
          parser.on('readable', function() {
            let record;
            while ((record = parser.read()) !== null) {
              results.push(record);
            }
          });
          
          parser.on('error', function(err) {
            reject(err);
          });
          
          parser.on('end', function() {
            resolve(results);
          });
        });
        
        logger.info(`Processing ${rows.length} rows from CSV`);
        
        // Find the email column (required for deduplication)
        const emailColumn = columnMapping ? columnMapping.email : 'email';
        if (!rows[0]?.[emailColumn]) {
          throw new Error(`Email column "${emailColumn}" not found in CSV`);
        }
        
        // Map columns based on provided mapping or use default field names
        const processRow = (row: any) => {
          const mappedRow: any = {};
          
          // Apply column mappings if provided
          if (columnMapping) {
            // Map each field using the provided column mapping
            mappedRow.first_name = row[columnMapping.firstName] || '';
            mappedRow.last_name = row[columnMapping.lastName] || '';
            mappedRow.email = row[columnMapping.email] || '';
            mappedRow.phone_number = row[columnMapping.phoneNumber] || '';
            mappedRow.zip_code = row[columnMapping.zipCode] || '';
            
            // Infer state from zip code
            if (mappedRow.zip_code && ZIP_DATA[mappedRow.zip_code]) {
              mappedRow.state = ZIP_DATA[mappedRow.zip_code].state;
              logger.info(`Inferred state ${mappedRow.state} from zip code ${mappedRow.zip_code}`);
            } else if (columnMapping.state && row[columnMapping.state]) {
              // Fallback to provided state if zip code lookup fails
              mappedRow.state = row[columnMapping.state] || '';
              logger.info(`Using provided state ${mappedRow.state} (zip code lookup failed)`);
            } else {
              logger.warn(`No state found for zip code ${mappedRow.zip_code}, defaulting to empty string`);
              mappedRow.state = '';
            }
            
            // Apply carrier mapping if provided
            let carrierValue = '';
            if (columnMapping.currentCarrier && row[columnMapping.currentCarrier]) {
              const originalCarrier = row[columnMapping.currentCarrier];
              
              // Use carrier mapping if available
              if (carrierMapping && carrierMapping.mappings[originalCarrier]) {
                carrierValue = carrierMapping.mappings[originalCarrier];
                
                // If mapped to "Other", preserve original value
                if (carrierValue === 'Other') {
                  carrierValue = originalCarrier;
                }
              } else {
                carrierValue = originalCarrier;
              }
            }
            
            mappedRow.current_carrier = carrierValue;
            mappedRow.effective_date = row[columnMapping.effectiveDate] || '';
            mappedRow.birth_date = row[columnMapping.birthDate] || '';
            mappedRow.tobacco_user = row[columnMapping.tobaccoUser] === 'true' || row[columnMapping.tobaccoUser] === 'yes' || row[columnMapping.tobaccoUser] === '1';
            mappedRow.gender = row[columnMapping.gender] || '';
            mappedRow.plan_type = row[columnMapping.planType] || '';
          } else {
            // Use default field names if no mapping provided
            mappedRow.first_name = row.first_name || row.firstName || '';
            mappedRow.last_name = row.last_name || row.lastName || '';
            mappedRow.email = row.email || '';
            mappedRow.phone_number = row.phone_number || row.phoneNumber || '';
            mappedRow.zip_code = row.zip_code || row.zipCode || '';
            
            // Infer state from zip code
            if (mappedRow.zip_code && ZIP_DATA[mappedRow.zip_code]) {
              mappedRow.state = ZIP_DATA[mappedRow.zip_code].state;
              logger.info(`Inferred state ${mappedRow.state} from zip code ${mappedRow.zip_code}`);
            } else if (row.state) {
              // Fallback to provided state if zip code lookup fails
              mappedRow.state = row.state || '';
              logger.info(`Using provided state ${mappedRow.state} (zip code lookup failed)`);
            } else {
              logger.warn(`No state found for zip code ${mappedRow.zip_code}, defaulting to empty string`);
              mappedRow.state = '';
            }
            
            mappedRow.current_carrier = row.current_carrier || row.currentCarrier || '';
            mappedRow.effective_date = row.effective_date || row.effectiveDate || '';
            mappedRow.birth_date = row.birth_date || row.birthDate || '';
            mappedRow.tobacco_user = row.tobacco_user === 'true' || row.tobacco_user === 'yes' || row.tobacco_user === '1' ||
                                   row.tobaccoUser === 'true' || row.tobaccoUser === 'yes' || row.tobaccoUser === '1';
            mappedRow.gender = row.gender || '';
            mappedRow.plan_type = row.plan_type || row.planType || '';
          }
          
          // Add standard fields
          mappedRow.created_at = new Date().toISOString();
          mappedRow.updated_at = new Date().toISOString();
          
          // Add agent_id if provided
          if (agentId !== undefined && agentId !== null) {
            mappedRow.agent_id = agentId;
          }
          
          return mappedRow;
        };
        
        // Begin transaction for CSV import
        localDb.exec('BEGIN TRANSACTION');
        
        try {
          // First, get all existing emails (for manual deduplication)
          const existingEmails = new Set(
            localDb.prepare('SELECT LOWER(TRIM(email)) as email FROM contacts')
              .all()
              .map((row: any) => row.email || row[0])
          );

          logger.info(`Found ${existingEmails.size} existing emails in database`);

          // Prepare insert statement (without ON CONFLICT since we're handling it manually)
          const stmt = localDb.prepare(`
            INSERT INTO contacts (
              first_name, last_name, email, phone_number, state,
              current_carrier, effective_date, birth_date, tobacco_user,
              gender, zip_code, plan_type, agent_id, created_at, updated_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
          `);

          let totalProcessed = 0;
          let totalAdded = 0;
          let totalSkipped = 0;

          // Process each row
          for (const row of rows) {
            totalProcessed++;
            const processedRow = processRow(row);
            const email = processedRow.email.toLowerCase().trim();
            
            if (!email) {
              logger.warn('Skipping row with no email address');
              totalSkipped++;
              continue;
            }

            try {
              if (existingEmails.has(email)) {
                if (overwriteExisting) {
                  // Update existing record
                  localDb.prepare(`
                    UPDATE contacts SET
                      first_name = ?, last_name = ?, phone_number = ?, state = ?,
                      current_carrier = ?, effective_date = ?, birth_date = ?,
                      tobacco_user = ?, gender = ?, zip_code = ?, plan_type = ?,
                      agent_id = ?, updated_at = ?
                    WHERE LOWER(TRIM(email)) = LOWER(TRIM(?))
                  `).run(
                    processedRow.first_name,
                    processedRow.last_name,
                    processedRow.phone_number,
                    processedRow.state,
                    processedRow.current_carrier,
                    processedRow.effective_date,
                    processedRow.birth_date,
                    processedRow.tobacco_user ? 1 : 0,
                    processedRow.gender,
                    processedRow.zip_code,
                    processedRow.plan_type,
                    processedRow.agent_id || null,
                    processedRow.updated_at,
                    email
                  );
                  totalAdded++;
                } else {
                  totalSkipped++;
                }
              } else {
                stmt.run(
                  processedRow.first_name,
                  processedRow.last_name,
                  email,
                  processedRow.phone_number,
                  processedRow.state,
                  processedRow.current_carrier,
                  processedRow.effective_date,
                  processedRow.birth_date,
                  processedRow.tobacco_user ? 1 : 0,
                  processedRow.gender,
                  processedRow.zip_code,
                  processedRow.plan_type,
                  processedRow.agent_id || null,
                  processedRow.created_at,
                  processedRow.updated_at
                );
                existingEmails.add(email);
                totalAdded++;
              }
            } catch (err) {
              logger.error(`Error processing row with email ${email}: ${err}`);
              totalSkipped++;
            }
          }

          // Recreate the unique index after import
          logger.info('Recreating unique email index...');
          localDb.exec('CREATE UNIQUE INDEX idx_contacts_email_unique ON contacts(LOWER(TRIM(email)))');

          // Commit CSV import transaction
          localDb.exec('COMMIT');
          
          // Force a checkpoint to ensure all changes are written to disk
          localDb.exec('PRAGMA wal_checkpoint(TRUNCATE)');
          
          logger.info(`Successfully processed all rows from CSV`);
          logger.info(`Total processed: ${totalProcessed}, added: ${totalAdded}, skipped: ${totalSkipped}`);

          // Verify final counts
          const finalCount = localDb.prepare('SELECT COUNT(*) as count FROM contacts').get() as { count: number };
          logger.info(`Final contact count in database: ${finalCount.count} (should be ${existingEmails.size} + new additions)`);

          // Close the database to ensure all changes are flushed
          localDb.close();
          localDb = null;

          try {
            // Create new database and upload data
            logger.info(`Creating new Turso database for import`);
            const { dbName: newOrgDbName, url: newOrgDbUrl, token: newOrgDbToken } = await tursoService.createDatabaseForImport(orgId);
            
            // Upload the local db to the new org db
            logger.info(`Uploading data to new Turso database at ${newOrgDbUrl}`);
            await tursoService.uploadDatabase(newOrgDbName, newOrgDbToken, `file:${tempDbFile}`);
            
            // Update main db with new org db url / auth token 
            logger.info(`Updating organization ${orgId} with new database credentials`);
            await mainDb.execute(`
              UPDATE organizations 
              SET turso_db_url = ?, turso_auth_token = ?
              WHERE id = ?
            `, [newOrgDbUrl, newOrgDbToken, orgId]);
            
            logger.info(`Successfully completed import for organization ${orgId}`);
            
            // Return success message with import stats
            return `Successfully imported ${totalAdded} contacts (${totalSkipped} skipped) to new database: ${newOrgDbUrl}`;
          } catch (importError) {
            logger.error(`Error during Turso database creation or upload: ${importError}`);
            throw importError;
          }
        } catch (error) {
          // Rollback transaction on error
          try {
            localDb.exec('ROLLBACK');
          } catch (rollbackError) {
            logger.error(`Error during transaction rollback: ${rollbackError}`);
          }
          throw error;
        }
      } finally {
        // Clean up temporary files
        try {
          if (localDb) {
            localDb.close();
          }
          await fsPromises.unlink(tempDumpFile);
          await fsPromises.unlink(tempDbFile);
          logger.info('Cleaned up temporary files');
        } catch (cleanupError) {
          logger.error(`Error cleaning up temporary files: ${cleanupError}`);
        }
      }
    } catch (error) {
      logger.error(`Error in bulk import for organization ${orgId}: ${error}`);
      throw error;
    }
  }

  static getUserFromSession = getUserFromSession;
  static getOrganizationById = getOrganizationById;

  static async ensureOrgSchema(orgDb: Database): Promise<void> {
    try {
      // Get all existing tables at once
      const existingTables = await orgDb.fetchAll(
        "SELECT name FROM sqlite_master WHERE type='table' AND name IN ('contacts', 'contact_events', 'leads', 'eligibility_answers', 'email_send_tracking')"
      );

      // Create a set of existing table names for faster lookup
      const tableSet = new Set(existingTables.map((row: any) => row.name || row[0]));
      
      // Define tables with their schema and indexes
      const tables = [
        {
          name: 'contacts',
          createSql: `
            CREATE TABLE IF NOT EXISTS contacts (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              first_name TEXT NOT NULL,
              last_name TEXT NOT NULL,
              email TEXT NOT NULL UNIQUE,
              current_carrier TEXT,
              plan_type TEXT,
              effective_date TEXT,
              birth_date TEXT,
              tobacco_user INTEGER NOT NULL,
              gender TEXT,
              state TEXT,
              zip_code TEXT,
              agent_id INTEGER,
              last_emailed DATETIME,
              phone_number TEXT,
              status TEXT NOT NULL DEFAULT '',
              aep_request BOOLEAN DEFAULT FALSE,
              aep_request_date DATETIME,
              created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
              updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
          `,
          indexSqls: [
            `CREATE INDEX IF NOT EXISTS idx_contacts_email ON contacts(email)`,
            `CREATE UNIQUE INDEX IF NOT EXISTS idx_contacts_email_unique ON contacts(LOWER(TRIM(email)))`,
            `CREATE INDEX IF NOT EXISTS idx_contacts_agent_id ON contacts(agent_id)`,
            `CREATE INDEX IF NOT EXISTS idx_contacts_status ON contacts(status)`,
            `CREATE TRIGGER IF NOT EXISTS update_contacts_timestamp AFTER UPDATE ON contacts BEGIN UPDATE contacts SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id; END`
          ]
        },
        {
          name: 'contact_events',
          createSql: `
            CREATE TABLE IF NOT EXISTS contact_events (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              contact_id INTEGER,
              lead_id INTEGER,
              event_type TEXT NOT NULL,
              metadata TEXT,
              created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
              FOREIGN KEY (contact_id) REFERENCES contacts(id) ON DELETE CASCADE,
              FOREIGN KEY (lead_id) REFERENCES leads(id) ON DELETE CASCADE
            )
          `,
          indexSqls: [
            `CREATE INDEX IF NOT EXISTS idx_contact_events_contact_id ON contact_events(contact_id)`,
            `CREATE INDEX IF NOT EXISTS idx_contact_events_lead_id ON contact_events(lead_id)`,
            `CREATE INDEX IF NOT EXISTS idx_contact_events_type ON contact_events(event_type)`
          ]
        },
        {
          name: 'tracking_clicks',
          createSql: `
            CREATE TABLE IF NOT EXISTS tracking_clicks (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              tracking_id TEXT NOT NULL,
              contact_id INTEGER,
              quote_id TEXT,
              clicked_at DATETIME DEFAULT CURRENT_TIMESTAMP,
              FOREIGN KEY (contact_id) REFERENCES contacts(id) ON DELETE CASCADE
            )
          `,
          indexSqls: [
            `CREATE INDEX IF NOT EXISTS idx_tracking_clicks_tracking_id ON tracking_clicks(tracking_id)`,
            `CREATE INDEX IF NOT EXISTS idx_tracking_clicks_contact_id ON tracking_clicks(contact_id)`,
            `CREATE INDEX IF NOT EXISTS idx_tracking_clicks_clicked_at ON tracking_clicks(clicked_at)`,
          ]
        },
        {
          name: 'leads',
          createSql: `
            CREATE TABLE IF NOT EXISTS leads (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              name TEXT NOT NULL,
              email TEXT NOT NULL,
              created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
              UNIQUE(email)
            )
          `,
          indexSqls: [
            `CREATE INDEX IF NOT EXISTS idx_leads_email ON leads(email)`
          ]
        },
        {
          name: 'eligibility_answers',
          createSql: `
            CREATE TABLE IF NOT EXISTS eligibility_answers (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              contact_id INTEGER NOT NULL,
              quote_id TEXT NOT NULL,
              answers TEXT NOT NULL,
              created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
              FOREIGN KEY (contact_id) REFERENCES contacts(id) ON DELETE CASCADE
            )
          `,
          indexSqls: [
            `CREATE INDEX IF NOT EXISTS idx_eligibility_answers_contact_id ON eligibility_answers(contact_id)`
          ]
        },
        {
          name: 'email_send_tracking',
          createSql: `
            CREATE TABLE IF NOT EXISTS email_send_tracking (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              org_id INTEGER NOT NULL,
              contact_id INTEGER NOT NULL,
              email_type TEXT NOT NULL,
              scheduled_date TEXT NOT NULL,
              send_status TEXT NOT NULL CHECK(send_status IN ('pending', 'processing', 'accepted', 'delivered', 'sent', 'deferred', 'bounced', 'dropped', 'failed', 'skipped')) DEFAULT 'pending',
              send_mode TEXT NOT NULL CHECK(send_mode IN ('test', 'production')) DEFAULT 'test',
              test_email TEXT,
              send_attempt_count INTEGER NOT NULL DEFAULT 0,
              last_attempt_date TEXT,
              last_error TEXT,
              batch_id TEXT NOT NULL,
              message_id TEXT,
              delivery_status TEXT,
              status_checked_at TEXT,
              status_details TEXT,
              created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
              updated_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
              FOREIGN KEY (contact_id) REFERENCES contacts(id) ON DELETE CASCADE
            )
          `,
          indexSqls: [
            `CREATE INDEX IF NOT EXISTS idx_email_tracking_batch_id ON email_send_tracking(batch_id)`,
            `CREATE INDEX IF NOT EXISTS idx_email_tracking_send_status ON email_send_tracking(send_status)`,
            `CREATE INDEX IF NOT EXISTS idx_email_tracking_send_mode ON email_send_tracking(send_mode)`,
            `CREATE INDEX IF NOT EXISTS idx_email_tracking_contact_id ON email_send_tracking(contact_id)`,
            `CREATE INDEX IF NOT EXISTS idx_email_tracking_contact_type ON email_send_tracking(contact_id, email_type)`,
            `CREATE INDEX IF NOT EXISTS idx_email_tracking_status_date ON email_send_tracking(send_status, scheduled_date)`,
            `CREATE INDEX IF NOT EXISTS idx_email_tracking_message_id ON email_send_tracking(message_id)`,
            `CREATE INDEX IF NOT EXISTS idx_email_tracking_delivery_status ON email_send_tracking(delivery_status)`,
            `CREATE TRIGGER IF NOT EXISTS update_email_tracking_timestamp AFTER UPDATE ON email_send_tracking BEGIN UPDATE email_send_tracking SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id; END`
          ]
        },
        {
          name: 'email_schedules',
          createSql: `
            CREATE TABLE IF NOT EXISTS email_schedules (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              org_id INTEGER NOT NULL,
              contact_id INTEGER NOT NULL,
              email_type TEXT NOT NULL,
              scheduled_send_date TEXT NOT NULL,
              scheduled_send_time TEXT NOT NULL,
              batch_id TEXT,
              status TEXT NOT NULL DEFAULT 'pre-scheduled',
              skip_reason TEXT,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
          `,
          indexSqls: [
            `CREATE INDEX IF NOT EXISTS idx_email_schedules_org_contact ON email_schedules (org_id, contact_id)`,
            `CREATE INDEX IF NOT EXISTS idx_email_schedules_org_send_date ON email_schedules (org_id, scheduled_send_date)`,
            `CREATE INDEX IF NOT EXISTS idx_email_schedules_status ON email_schedules (status)`,
            `CREATE TRIGGER IF NOT EXISTS update_email_schedules_updated_at\nAFTER UPDATE ON email_schedules\nFOR EACH ROW\nBEGIN\n    UPDATE email_schedules\n    SET updated_at = CURRENT_TIMESTAMP\n    WHERE id = OLD.id;\nEND;`
          ]
        }
      ];
      
      // Prepare batch operations
      const schemaOperations = [];
      
      // Process each table
      for (const table of tables) {
        // Create table if it doesn't exist
        if (!tableSet.has(table.name)) {
          logger.info(`Creating ${table.name} table schema`);
          schemaOperations.push({
            sql: table.createSql,
            args: []
          });
        }
        
        // Always add indexes regardless of whether table existed before
        // This ensures all necessary indexes exist in all databases
        for (const indexSql of table.indexSqls) {
          logger.info(`Ensuring index for ${table.name}: ${indexSql}`);
          schemaOperations.push({
            sql: indexSql,
            args: []
          });
        }
      }
      
      // Execute all schema operations in a single batch if there are any
      if (schemaOperations.length > 0) {
        logger.info(`Executing ${schemaOperations.length} schema operations in batch`);
        await orgDb.batch(schemaOperations, 'write');
        logger.info('Schema setup completed successfully');
      } else {
        logger.info('All required tables exist, checking indexes...');
        
        // Even if all tables exist, we still need to ensure all indexes exist
        const indexOperations = [];
        for (const table of tables) {
          for (const indexSql of table.indexSqls) {
            indexOperations.push({
              sql: indexSql,
              args: []
            });
          }
        }
        
        if (indexOperations.length > 0) {
          logger.info(`Ensuring ${indexOperations.length} indexes exist`);
          await orgDb.batch(indexOperations, 'write');
          logger.info('Index verification completed');
        }
      }
    } catch (error) {
      logger.error(`Error ensuring org schema: ${error}`);
      throw error;
    }
  }

  close() {
    if (this.isLocal && this.bunDb) {
      this.bunDb.close()
    }
  }

  private async fetch(fetchUrl: RequestInfo, options: RequestInit | undefined = undefined): Promise<Response> {
    const response = await fetch(fetchUrl, options || {});
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response;
  }

  private async fetchWithRetry(fetchUrl: RequestInfo, options: RequestInit | undefined = undefined): Promise<Response> {
    const maxRetries = 3;
    let lastError: Error | null = null;

    for (let attempt = 0; attempt < maxRetries; attempt++) {
      try {
        const response = await this.fetch(fetchUrl, options);
        if (response.status === 429) {
          // Rate limited, wait with exponential backoff
          const delay = Math.pow(2, attempt) * 1000;
          logger.warn(`Rate limit hit, retry ${attempt + 1}/${maxRetries} after ${delay}ms`);
          await new Promise(resolve => setTimeout(resolve, delay));
          continue;
        }
        return response;
      } catch (error) {
        lastError = error as Error;
        if (attempt < maxRetries - 1) {
          const delay = Math.pow(2, attempt) * 1000;
          logger.warn(`Request failed, retry ${attempt + 1}/${maxRetries} after ${delay}ms: ${error}`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    }

    throw lastError || new Error('Max retries reached');
  }
}

export const db = new Database() 

/**
 * Get user from session cookie
 */
export async function getUserFromSession(request: any): Promise<any> {
  try {
    const db = new Database();
    let sessionCookie: string | undefined;

    // Handle different request header formats
    if (request.headers) {
      if (typeof request.headers.get === 'function') {
        // Standard Request object
        sessionCookie = request.headers.get('cookie')?.split(';')
          .find((c: string) => c.trim().startsWith('session='))
          ?.split('=')[1];
      } else if (typeof request.headers === 'object') {
        // Raw headers object or Express request
        const cookieHeader = request.headers.cookie || request.headers['cookie'] || request.headers['Cookie'];
        if (typeof cookieHeader === 'string') {
          sessionCookie = cookieHeader.split(';')
            .find((c: string) => c.trim().startsWith('session='))
            ?.split('=')[1];
        }
      }
    }

    if (!sessionCookie) {
      logger.info('No session cookie found');
      return null;
    }

    // Log the session ID for debugging
    logger.info(`Session lookup result: ${JSON.stringify(await db.fetchOne('SELECT * FROM sessions WHERE id = ?', [sessionCookie]))}`);
    
    // Check if the session exists and hasn't expired
    const session = await db.fetchOne<{ id: string, user_id: number, expires_at: string, created_at: string }>(
      'SELECT * FROM sessions WHERE id = ?',
      [sessionCookie]
    );

    if (!session) {
      logger.info('No valid session found');
      return null;
    }

    // Check if session has expired
    const expiresAt = new Date(session.expires_at);
    const now = new Date();
    
    logger.info(`Session expires: ${expiresAt}, current time: ${now}`);
    
    if (expiresAt < now) {
      logger.info('Session has expired');
      return null;
    }

    // Get the user associated with the session
    const user = await db.fetchOne(
      'SELECT u.*, o.name as organization_name FROM users u JOIN organizations o ON u.organization_id = o.id WHERE u.id = ?',
      [session.user_id]
    );

    logger.info(`User lookup result: ${JSON.stringify(user)}`);

    if (!user) {
      logger.info('No user found for session');
      return null;
    }
    
    return user;
  } catch (error) {
    logger.error(`Error getting user from session: ${error}`);
    return null;
  }
}

/**
 * Get organization by ID
 */
export async function getOrganizationById(orgId: number): Promise<any> {
  try {
    const db = new Database();
    const org = await db.query('SELECT * FROM organizations WHERE id = ?', [orgId]);
    if (!org || org.length === 0) return null;
    return org[0];
  } catch (error) {
    logger.error(`Error getting organization: ${error}`);
    return null;
  }
}

// Function to split SQL dump into individual statements
function splitSqlStatements(sql: string): string[] {
  const statements: string[] = [];
  let currentStatement = "";
  let inString = false;
  let inComment = false;
  let inBlockComment = false;
  let stringQuote: string | null = null;

  for (let i = 0; i < sql.length; i++) {
    const char = sql[i];
    const nextChar = i + 1 < sql.length ? sql[i + 1] : null;

    // Handle comments
    if (!inString) {
      if (char === "-" && nextChar === "-" && !inBlockComment) {
        inComment = true;
        i++; // Skip next char
        continue;
      }
      if (char === "/" && nextChar === "*" && !inComment) {
        inBlockComment = true;
        i++;
        continue;
      }
      if (inComment && char === "\n") {
        inComment = false;
        continue;
      }
      if (inBlockComment && char === "*" && nextChar === "/") {
        inBlockComment = false;
        i++;
        continue;
      }
      if (inComment || inBlockComment) {
        continue;
      }
    }

    // Handle string literals
    if ((char === "'" || char === '"') && !inComment && !inBlockComment) {
      if (!inString) {
        inString = true;
        stringQuote = char;
      } else if (char === stringQuote) {
        // Check for escaped quotes
        if (sql[i - 1] !== "\\") {
          inString = false;
          stringQuote = null;
        }
      }
    }

    // Handle statement termination
    if (char === ";" && !inString && !inComment && !inBlockComment) {
      statements.push(currentStatement.trim());
      currentStatement = "";
      continue;
    }

    currentStatement += char;
  }

  // Add the last statement if it exists
  if (currentStatement.trim()) {
    statements.push(currentStatement.trim());
  }

  return statements.filter(stmt => stmt.length > 0);
}

================
File: backend/src/errors.ts
================
export class NotFoundError extends Error {
  constructor(message: string) {
    super(message)
    this.name = 'NotFoundError'
  }
}

export class UnauthorizedError extends Error {
  constructor(message: string = 'Unauthorized') {
    super(message)
    this.name = 'UnauthorizedError'
  }
}

export class ValidationError extends Error {
  constructor(message: string) {
    super(message)
    this.name = 'ValidationError'
  }
}

export class DatabaseError extends Error {
  constructor(message: string) {
    super(message)
    this.name = 'DatabaseError'
  }
}

================
File: backend/src/index.ts
================
import { Elysia, t } from 'elysia'
import { cors } from '@elysiajs/cors'
import { Database } from './database'
import { logger } from './logger'
import type { ContactCreate, AgentCreate } from './types'
import { readFileSync } from 'fs'
import { staticPlugin } from '@elysiajs/static'
import { parse as csvParse } from 'csv-parse/sync'
import { Readable } from 'stream'
import { Buffer } from 'buffer'
import { createAuthRoutes } from './routes/auth'
import { settingsRoutes } from './routes/settings'
import { organizationRoutes } from './routes/organizations'
import { createBrandRoutes } from './routes/brand'
import { quotesRoutes } from './routes/quotes'
import { createOnboardingRoutes } from './routes/onboarding'
import { createWaitlistRoutes } from './routes/waitlist'
import { createSignupRoutes, checkEmailHandler } from './routes/signup'
import { createStripeRoutes } from './routes/stripe'
import { createDashboardRoutes } from './routes/dashboard'
import { errorHandler } from './middleware/error'
import { getUserFromSession } from './services/auth'
import { join } from 'path'
import { existsSync } from 'fs'
import { EmailService } from './services/email'
import * as cron from 'node-cron'
import { eligibilityRoutes } from './routes/eligibility'
import { generateQuoteId } from './utils/quoteId'
import { createSelfServiceRoutes } from './routes/self-service'
import { scheduleRoutes } from './routes/schedule'
import { contactsRoutes } from './routes/contacts'
import * as fs from 'fs/promises'
import * as path from 'path'
import * as os from 'os'
import { readdirSync } from 'fs'
import { parseTrackingId } from './utils/tracking'


// At the top of the file, add interface for ZIP data
export interface ZipInfo {
  state: string;
  counties: string[];
}

// Update ZIP_DATA declaration
export let ZIP_DATA: Record<string, ZipInfo> = {}
try {
  const dataPath = path.join(process.cwd(), 'data', 'zipData.json');
  logger.info(`Loading ZIP data from: ${dataPath}`);
  ZIP_DATA = JSON.parse(readFileSync(dataPath, 'utf-8'))
  logger.info('Successfully loaded ZIP data');
} catch (e) {
  logger.error(`Error loading ZIP data: ${e}`)
}

// Add with the other type imports
type NewAgentRequest = {
  firstName: string
  lastName: string
  email: string
  phone: string
  is_admin: boolean
  is_agent: boolean
  carriers: string[]
  stateLicenses: string[]
}

type AgentUpdate = {
  firstName: string
  lastName: string
  email: string
  phone: string
  is_admin: boolean
  is_agent: boolean
  carriers: string[]
  stateLicenses: string[]
}

interface DbRow {
  id: number;
  first_name: string;
  last_name: string;
  email: string;
  phone: string | null;
  is_admin: number;
  is_agent: number;
  settings: string | null;
}

// Add at the top with other interfaces
interface ContactRow {
  id: number;
  first_name: string;
  last_name: string;
  email: string;
  current_carrier: string;
  plan_type: string;
  effective_date: string;
  birth_date: string;
  tobacco_user: number;
  gender: string;
  state: string;
  zip_code: string;
  agent_id: number | null;
  last_emailed: string | null;
  phone_number: string;
}

interface CarrierRow {
  name: string;
  aliases: string | null;
}

// Add this helper function before startServer
function standardizePhoneNumber(phone: string): { isValid: boolean; standardized: string } {
  const digits = phone.replace(/\D/g, '').slice(0, 10);
  return {
    isValid: digits.length === 10,
    standardized: digits
  };
}

// Add this helper function near the other validation functions
function validateEmail(email: string): boolean {
  // RFC 5322 compliant email regex
  const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  return emailRegex.test(email.trim());
}

// Add this helper function near the other validation functions
function validateISODate(dateStr: string, allowFuture: boolean = false): { isValid: boolean; isoDate: string | null } {
  try {
    const trimmed = dateStr.trim();
    
    // Try to parse the date - will throw if invalid
    const date = new Date(trimmed);
    
    // Check if date is invalid
    if (isNaN(date.getTime())) {
      return { isValid: false, isoDate: null };
    }
    
    // Convert to ISO format (YYYY-MM-DD)
    const isoDate = date.toISOString().split('T')[0];
    
    // Verify the date is not in the future (unless allowed)
    if (!allowFuture && date > new Date()) {
      return { isValid: false, isoDate: null };
    }
    
    return { isValid: true, isoDate };
  } catch (e) {
    return { isValid: false, isoDate: null };
  }
}

// Add this helper function near the other validation functions
async function validateCarrier(carrier: string, db: Database): Promise<{ isValid: boolean; standardizedName: string; wasConverted: boolean }> {
  try {
    // Trim and standardize input
    const trimmedCarrier = carrier.trim();
    logger.info(`Validating carrier: "${trimmedCarrier}"`);
    
    // Create a new instance of the central database
    const centralDb = new Database();
    
    // Get all carriers with their aliases from the central database
    const result = await centralDb.execute<CarrierRow>(
      'SELECT name, aliases FROM carriers'
    );
    
    logger.info(`Found ${result.rows.length} carriers in database`);
    
    // Check each carrier and its aliases
    for (const row of result.rows) {
      logger.info(`Checking against carrier: "${row.name}", aliases: ${row.aliases || '[]'}`);
      
      // Check exact name match (case insensitive)
      if (row.name.toLowerCase() === trimmedCarrier.toLowerCase()) {
        logger.info(`Found exact match with carrier: ${row.name}`);
        return { isValid: true, standardizedName: row.name, wasConverted: false };
      }
      
      // Check aliases if they exist
      if (row.aliases) {
        const aliases = JSON.parse(row.aliases);
        logger.info(`Checking aliases for ${row.name}: ${JSON.stringify(aliases)}`);
        if (Array.isArray(aliases) && aliases.some(alias => alias.toLowerCase() === trimmedCarrier.toLowerCase())) {
          logger.info(`Found match in aliases for carrier: ${row.name}`);
          return { isValid: true, standardizedName: row.name, wasConverted: false };
        }
      }
    }
    
    // If no match found, keep the original carrier name but mark as converted
    logger.info(`No matching carrier found for: "${trimmedCarrier}", keeping original name`);
    return { isValid: true, standardizedName: trimmedCarrier, wasConverted: true };
  } catch (e) {
    logger.error(`Error validating carrier: ${e}`);
    return { isValid: true, standardizedName: carrier.trim(), wasConverted: true };
  }
}

// Interface for validation result
interface ValidationResult {
  isValid: boolean;
  error?: string;
  value?: any;
}

// Validation functions
const validateRow = async (row: any, rowNum: number, carrierMap: Map<string, string>): Promise<ValidationResult> => {
  try {
    logger.info(`Starting validation for row ${rowNum}:`)
    logger.info(`Row data: ${JSON.stringify(row)}`)

    // Required fields check with detailed logging
    const requiredFields = [
      'First Name', 'firstName',
      'Last Name', 'lastName', 
      'Email', 'email',
      'Current Carrier', 'currentCarrier',
      'Plan Type', 'planType',
      'Effective Date', 'effectiveDate',
      'Birth Date', 'birthDate',
      'Tobacco User', 'tobaccoUser',
      'Gender', 'gender',
      'ZIP Code', 'zipCode',
      'Phone Number', 'phoneNumber'
    ]

    logger.info(`Checking required fields: ${requiredFields.join(', ')}`)
    const missingValues = requiredFields.filter(field => {
      const value = row[field]?.trim()
      const isMissing = !value
      if (isMissing) {
        logger.warn(`Missing required field "${field}" in row ${rowNum}`)
      }
      return isMissing
    })

    // Group the missing fields by their base name (e.g. both "First Name" and "firstName" count as one missing field)
    const missingFieldGroups = new Set<string>()
    for (let i = 0; i < missingValues.length; i += 2) {
      if (missingValues[i] && missingValues[i+1]) {
        missingFieldGroups.add(missingValues[i])
      }
    }

    if (missingFieldGroups.size > 0) {
      logger.warn(`Row ${rowNum} missing required fields: ${Array.from(missingFieldGroups).join(', ')}`)
      return {
        isValid: false,
        error: `Missing values for: ${Array.from(missingFieldGroups).join(', ')}`
      }
    }

    // Email validation with logging
    const email = (row['Email'] || row['email'] || '').trim().toLowerCase()
    logger.info(`Validating email: "${email}"`)
    if (!validateEmail(email)) {
      logger.warn(`Row ${rowNum} has invalid email format: ${email}`)
      return {
        isValid: false,
        error: `Invalid email format: ${email}`
      }
    }

    // Phone validation with logging
    logger.info(`Validating phone number: "${row['Phone Number'] || row['phoneNumber']}"`)
    const phoneResult = standardizePhoneNumber(row['Phone Number'] || row['phoneNumber'])
    if (!phoneResult.isValid) {
      logger.warn(`Row ${rowNum} has invalid phone number: ${row['Phone Number'] || row['phoneNumber']}`)
      return {
        isValid: false,
        error: `Invalid phone number: ${row['Phone Number'] || row['phoneNumber']}. Must be exactly 10 digits.`
      }
    }

    // ZIP validation with logging
    const zipCode = (row['ZIP Code'] || row['zipCode'] || '').trim()
    logger.info(`Validating ZIP code: "${zipCode}"`)

    // First check if ZIP code exists and has the right format
    if (!zipCode) {
      logger.warn(`Row ${rowNum} is missing ZIP code`)
      return {
        isValid: false,
        error: `Missing ZIP code. This field is required for determining state coverage and eligibility.`
      }
    }

    // Check if ZIP code is in the correct format (5 digits)
    if (!/^\d{5}$/.test(zipCode)) {
      logger.warn(`Row ${rowNum} has invalid ZIP code format: ${zipCode}`)
      return {
        isValid: false,
        error: `Invalid ZIP code format: ${zipCode}. Must be exactly 5 digits.`
      }
    }

    // Check if ZIP code exists in our database
    const zipInfo = ZIP_DATA[zipCode]
    if (!zipInfo) {
      logger.warn(`Row ${rowNum} has invalid ZIP code: ${zipCode} (not found in database)`)
      return {
        isValid: false,
        error: `Invalid ZIP code: ${zipCode}. This ZIP code is not recognized in our database.`
      }
    }

    // If we get here, we have a valid ZIP code with state information
    logger.info(`Valid ZIP code ${zipCode} maps to state: ${zipInfo.state}`)

    // Gender validation with logging
    const gender = (row['Gender'] || row['gender'] || '').trim().toUpperCase()
    logger.info(`Validating gender: "${gender}"`)
    if (!['M', 'F'].includes(gender)) {
      logger.warn(`Row ${rowNum} has invalid gender: ${gender}`)
      return {
        isValid: false,
        error: `Invalid gender: ${gender}. Must be 'M' or 'F'`
      }
    }

    // Carrier validation with logging
    const carrierInput = (row['Current Carrier'] || row['currentCarrier'] || '').trim().toLowerCase()
    logger.info(`Validating carrier: "${carrierInput}"`)
    const standardizedCarrier = carrierMap.get(carrierInput) || carrierInput
    const wasCarrierConverted = !carrierMap.has(carrierInput)
    if (wasCarrierConverted) {
      logger.warn(`Row ${rowNum} has non-standard carrier: ${carrierInput} (will be kept as-is)`)
    }

    // Date validations with logging
    logger.info(`Validating effective date: "${row['Effective Date'] || row['effectiveDate']}"`)
    const effectiveDateResult = validateISODate(row['Effective Date'] || row['effectiveDate'], true)
    if (!effectiveDateResult.isValid) {
      logger.warn(`Row ${rowNum} has invalid effective date: ${row['Effective Date'] || row['effectiveDate']}`)
      return {
        isValid: false,
        error: `Invalid effective date format: ${row['Effective Date'] || row['effectiveDate']}. Please use YYYY-MM-DD or MM-DD-YYYY format.`
      }
    }

    logger.info(`Validating birth date: "${row['Birth Date'] || row['birthDate']}"`)
    const birthDateResult = validateISODate(row['Birth Date'] || row['birthDate'])
    if (!birthDateResult.isValid) {
      logger.warn(`Row ${rowNum} has invalid birth date: ${row['Birth Date'] || row['birthDate']}`)
      return {
        isValid: false,
        error: `Invalid birth date format: ${row['Birth Date'] || row['birthDate']}. Please use YYYY-MM-DD or MM-DD-YYYY format.`
      }
    }

    // If all validations pass, return processed data
    logger.info(`Row ${rowNum} passed all validations successfully`)
    return {
      isValid: true,
      value: {
        data: [
          (row['First Name'] || row['firstName'] || '').trim(),
          (row['Last Name'] || row['lastName'] || '').trim(),
          email,
          standardizedCarrier,
          (row['Plan Type'] || row['planType'] || '').trim(),
          effectiveDateResult.isoDate,
          birthDateResult.isoDate,
          ['yes', 'true', '1', 'y'].includes((row['Tobacco User'] || row['tobaccoUser'] || '').trim().toLowerCase()),
          gender,
          zipInfo.state,
          zipCode,
          phoneResult.standardized,
          null // agentId - will be set later
        ],
        carrierConverted: wasCarrierConverted ? {
          Row: rowNum,
          ...row,
          OriginalCarrier: row['Current Carrier'] || row['currentCarrier']
        } : null
      }
    }
  } catch (e) {
    // Log the full error details
    logger.error(`Unexpected error in row ${rowNum}:`)
    logger.error(`Error message: ${e instanceof Error ? e.message : String(e)}`)
    logger.error(`Row data: ${JSON.stringify(row)}`)
    if (e instanceof Error && e.stack) {
      logger.error(`Stack trace: ${e.stack}`)
    }
    return {
      isValid: false,
      error: `Unexpected error processing row ${rowNum}. Please check all fields are in the correct format. Error: ${e instanceof Error ? e.message : String(e)}`
    }
  }
};

const startServer = async () => {
  try {
    // Log environment information at startup
    logger.info(`Environment: NODE_ENV = "${process.env.NODE_ENV}"`)
    logger.info(`Current working directory: ${process.cwd()}`)
    logger.info(`Is production mode: ${process.env.NODE_ENV === 'production'}`)
    
    // Check for frontend files
    logger.info(`Checking for SPA files:`)
    const locations = [
      { name: 'public', path: join(process.cwd(), 'public') },
      { name: 'parent dist', path: join(process.cwd(), '..', 'dist') }
    ];
    
    for (const loc of locations) {
      const exists = existsSync(loc.path);
      logger.info(`${loc.name} directory (${loc.path}): ${exists ? 'EXISTS' : 'MISSING'}`);
      
      if (exists) {
        try {
          const files = readdirSync(loc.path);
          logger.info(`${loc.name} contents: ${files.join(', ')}`);
          
          const indexPath = join(loc.path, 'index.html');
          if (existsSync(indexPath)) {
            logger.info(`✅ Found SPA at: ${indexPath}`);
          }
        } catch (err) {
          logger.error(`Error reading ${loc.name} directory: ${err}`);
        }
      }
    }
    
    // Log available environment variables (without values for security)
    logger.info(`Available environment variables: ${Object.keys(process.env).join(', ')}`)
    
    // Try loading directly from process.env
    if (!process.env.TURSO_DATABASE_URL || !process.env.TURSO_AUTH_TOKEN) {
      logger.warn('Critical environment variables missing. Check Replit Secrets are properly set:')
      logger.warn('Required: TURSO_DATABASE_URL, TURSO_AUTH_TOKEN')
      logger.warn('Available env vars: ' + Object.keys(process.env).join(', '))
    } else {
      logger.info('Required environment variables found')
    }
    
    const db = new Database()
    logger.info('Database initialized successfully')

    const app = new Elysia()
      // Add error handler
      .use(errorHandler)
      // Add CORS middleware
      .use(cors({
        // In development, allow the Vite dev server origin
        origin: process.env.NODE_ENV === 'development' 
          ? 'http://localhost:5173'
          : false, // Disable CORS in production
        methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
        allowedHeaders: ['Content-Type', 'Cookie'],  // Add Cookie to allowed headers
        credentials: true,
        preflight: true
      }))
      // Add static file serving
      .use(staticPlugin({
        assets: join(process.cwd(), 'public'), // Public static files
        prefix: '/'
      }))
      // Try parent dist directory if it exists
      .use(staticPlugin({
        assets: join(process.cwd(), '..', 'dist'), // Parent dist static files
        prefix: '/'
      }))
      // Add data directory for specific files
      .use(staticPlugin({
        assets: join(process.cwd(), 'data/public'), // Data files
        prefix: '/api/data/public'
      }))
      // Add SPA route auth bypass handler
      .onRequest(({ request }) => {
        const url = new URL(request.url);
        const path = url.pathname;
        
        // Log all requests (combined from the other handler)
        const method = request.method;
        logger.info(`⮕ ${method} ${path}`);
        
        // Bypass auth for all SPA routes (non-API paths with no file extension)
        if ((!path.startsWith('/api/') && !path.includes('.')) || 
            path.startsWith('/compare/') ||
            path.startsWith('/quote/') ||
            path.startsWith('/eligibility') ||
            path.startsWith('/schedule')) {
          
          logger.info(`[Auth Bypass] Setting bypass header for SPA route: ${path}`);
          // Modify the request headers to include X-Bypass-Auth
          const newHeaders = new Headers(request.headers);
          newHeaders.set('X-Bypass-Auth', 'true');
          
          // Create a new request with the modified headers
          Object.defineProperty(request, 'headers', {
            value: newHeaders,
            writable: true
          });
        }
      })
      // Add explicit OPTIONS handler for preflight
      .options('/api/contacts/:id', ({ set }) => {
        set.headers = {
          'Access-Control-Allow-Origin': 'http://localhost:5173',
          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type, Authorization',
          'Access-Control-Allow-Credentials': 'true'
        }
        return new Response(null, { status: 204 })
      })
      // Log all responses
      .onResponse((context) => {
        const { request: { method }, path, set } = context
        logger.info(`⬅ ${method} ${path} ${set.status}`)
      })
      // Enhanced error handling
      .onError(({ code, error, request }: {
        code: string;
        error: Error;
        request: { url: string; method: string };
      }) => {
        const path = new URL(request.url).pathname
        const errorMessage = `❌ ${request.method} ${path} - ${error.message}`
        logger.error(errorMessage)

        return new Response(JSON.stringify({
          success: false,
          error: error.message
        }), { 
          status: code === 'NOT_FOUND' ? 404 : 500,
          headers: {
            'Content-Type': 'application/json'
          }
        })
      })
      // Add health check endpoint
      .get('/health', () => ({ status: 'OK' }))
      // Register public routes that shouldn't be auth-protected
      .get('/api/signup/check-email/:email', checkEmailHandler)
      // GET /api/contacts is now handled by the contactsRoutes module
      .get('/api/contacts/check-email/:email', async ({ params: { email }, request }) => {
        try {
          const user = await getUserFromSession(request)
          if (!user?.organization_id) {
            throw new Error('No organization ID found in session')
          }

          const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString())
          
          const result = await orgDb.fetchOne(
            'SELECT 1 FROM contacts WHERE LOWER(TRIM(email)) = LOWER(TRIM(?))',
            [email]
          )

          return {
            exists: result !== null
          }
        } catch (e) {
          logger.error(`Error checking email existence: ${e}`)
          throw new Error(String(e))
        }
      })
      .get('/api/contacts/:id', async ({ params: { id }, request }) => {
        try {
          const user = await getUserFromSession(request)
          if (!user?.organization_id) {
            throw new Error('No organization ID found in session')
          }

          logger.info(`GET /api/contacts/${id} - Fetching contact for org ${user.organization_id}`)
          
          // Get org-specific database
          const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString())
          
          // Fetch the contact
          const result = await orgDb.fetchOne<ContactRow>(
            'SELECT * FROM contacts WHERE id = ?',
            [id]
          )

          if (!result) {
            logger.info(`GET /api/contacts/${id} - Contact not found`)
            return new Response('Contact not found', { status: 404 })
          }

          // Return the contact with mapped fields
          return {
            id: result.id,
            first_name: result.first_name,
            last_name: result.last_name,
            email: result.email,
            current_carrier: result.current_carrier,
            plan_type: result.plan_type,
            effective_date: result.effective_date,
            birth_date: result.birth_date,
            tobacco_user: Boolean(result.tobacco_user),
            gender: result.gender,
            state: result.state,
            zip_code: result.zip_code,
            agent_id: result.agent_id,
            last_emailed: result.last_emailed,
            phone_number: result.phone_number || ''
          }
        } catch (e) {
          logger.error(`Error fetching contact: ${e}`)
          throw new Error(String(e))
        }
      })
      .post('/api/contacts', async ({ body, request }: { body: ContactCreate, request: Request }) => {
        try {
          const user = await getUserFromSession(request)
          if (!user?.organization_id) {
            throw new Error('No organization ID found in session')
          }

          const contact = body
          logger.info(`Attempting to create contact for org ${user.organization_id}: ${contact.first_name} ${contact.last_name}`)
          
          // Get org-specific database
          const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString())

          // Check for existing email
          const existingContact = await orgDb.fetchOne(
            'SELECT 1 FROM contacts WHERE LOWER(TRIM(email)) = LOWER(TRIM(?))',
            [contact.email]
          )

          if (existingContact) {
            throw new Error('A contact with this email already exists')
          }
          
          // Map contact_owner_id to agent_id if it exists and agent_id is not set
          if (contact.contact_owner_id && !contact.agent_id) {
            contact.agent_id = contact.contact_owner_id
            logger.info(`Mapped contact_owner_id: ${contact.contact_owner_id} to agent_id`)
          }
          
          const query = `
            INSERT INTO contacts (
              first_name, last_name, email, current_carrier, plan_type,
              effective_date, birth_date, tobacco_user, gender,
              state, zip_code, agent_id, phone_number
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
          `
          
          const params = [
            contact.first_name,
            contact.last_name,
            contact.email,
            contact.current_carrier || null, // Make nullable
            contact.plan_type || null, // Make nullable
            contact.effective_date || null, // Make nullable
            contact.birth_date || null, // Make nullable
            contact.tobacco_user ?? false, // Default tobacco_user to false if null
            contact.gender || null, // Make nullable
            contact.state || null, // Make nullable
            contact.zip_code || null, // Make nullable
            contact.agent_id || null,
            contact.phone_number || null // Make nullable
          ]

          logger.info(`Executing query with params: ${JSON.stringify(params)}`)
          await orgDb.execute(query, params)

          // Fetch the newly created contact
          const result = await orgDb.fetchOne<ContactRow>(
            'SELECT * FROM contacts WHERE email = ? ORDER BY id DESC LIMIT 1',
            [contact.email]
          )

          if (!result) {
            throw new Error('Failed to fetch created contact')
          }

          // Match response format to schema
          return {
            id: result.id,
            first_name: result.first_name,
            last_name: result.last_name,
            email: result.email,
            current_carrier: result.current_carrier,
            plan_type: result.plan_type,
            effective_date: result.effective_date,
            birth_date: result.birth_date,
            tobacco_user: Boolean(result.tobacco_user),
            gender: result.gender,
            state: result.state,
            zip_code: result.zip_code,
            agent_id: result.agent_id,
            last_emailed: result.last_emailed,
            phone_number: result.phone_number || ''
          }
        } catch (e) {
          logger.error(`Error creating contact: ${e}`)
          throw new Error(String(e))
        }
      })
      .put('/api/contacts/:id', async ({ params: { id }, body, request }: { body: ContactCreate, request: Request }) => {
        try {
          // Get user and org info
          const user = await getUserFromSession(request)
          if (!user?.organization_id) {
            throw new Error('No organization ID found in session')
          }

          // Get org-specific database
          const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString())

          const contact = body as ContactCreate
          logger.info(`PUT /api/contacts/${id} - Updating contact for org ${user.organization_id}`)

          // Get state from ZIP code
          const zipInfo = ZIP_DATA[contact.zip_code]
          if (!zipInfo) {
            throw new Error(`Invalid ZIP code: ${contact.zip_code}`)
          }

          // First update the contact
          const updateQuery = /* sql */ `
            UPDATE contacts SET 
              first_name = ?,
              last_name = ?,
              email = ?,
              current_carrier = ?,
              plan_type = ?,
              effective_date = ?,
              birth_date = ?,
              tobacco_user = ?,
              gender = ?,
              state = ?,
              zip_code = ?,
              phone_number = ?
            WHERE id = ?
          `

          const updateParams = [
            contact.first_name,
            contact.last_name,
            contact.email,
            contact.current_carrier,
            contact.plan_type,
            contact.effective_date,
            contact.birth_date,
            contact.tobacco_user,
            contact.gender,
            zipInfo.state, // Use state from ZIP code
            contact.zip_code,
            contact.phone_number || '',
            id
          ]

          // Execute the update
          await orgDb.execute(updateQuery, updateParams)

          // Then fetch the updated contact
          const result = await orgDb.fetchOne<ContactRow>(
            'SELECT * FROM contacts WHERE id = ?',
            [id]
          )

          if (!result) {
            throw new Error(`Contact ${id} not found after update`)
          }

          logger.info(`Successfully updated contact ${id} in org ${user.organization_id}`)

          // Return the updated contact
          return {
            id: result.id,
            first_name: result.first_name,
            last_name: result.last_name,
            email: result.email,
            current_carrier: result.current_carrier,
            plan_type: result.plan_type,
            effective_date: result.effective_date,
            birth_date: result.birth_date,
            tobacco_user: Boolean(result.tobacco_user),
            gender: result.gender,
            state: result.state,
            zip_code: result.zip_code,
            agent_id: result.agent_id,
            last_emailed: result.last_emailed,
            phone_number: result.phone_number
          }
        } catch (e) {
          logger.error(`Error updating contact: ${e}`)
          throw new Error(String(e))
        }
      })
      // Add DELETE endpoint for contacts
      .delete('/api/contacts', async ({ request }) => {
        try {
          const user = await getUserFromSession(request)
          if (!user?.organization_id) {
            throw new Error('No organization ID found in session')
          }

          // Parse contact IDs from the request
          const url = new URL(request.url)
          const ids = url.searchParams.get('ids')
          if (!ids) {
            throw new Error('No contact IDs provided')
          }

          const contactIds = ids.split(',').map(id => parseInt(id.trim(), 10))
          
          logger.info(`DELETE /api/contacts - Attempting to delete ${contactIds.length} contacts for org ${user.organization_id}`)
          
          // Get org-specific database
          const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString())

          // Create placeholders for SQL IN clause
          const placeholders = contactIds.map(() => '?').join(',')
          
          const query = `
            DELETE FROM contacts 
            WHERE id IN (${placeholders})
            RETURNING id
          `

          const result = await orgDb.execute(query, contactIds)
          const deletedIds = result.rows?.map(row => row.id) || []

          logger.info(`DELETE /api/contacts - Successfully deleted ${deletedIds.length} contacts from org ${user.organization_id}`)

          return {
            success: true,
            deleted_ids: deletedIds,
            message: `Successfully deleted ${deletedIds.length} contacts`
          }
        } catch (e) {
          logger.error(`Error deleting contacts: ${e}`)
          throw new Error(String(e))
        }
      })
      // Add endpoint for reassigning contacts to a different agent
      .put('/api/contacts/reassign', async ({ request, body }: { request: Request, body: { contact_ids: number[], agent_id: number | null } }) => {
        try {
          const user = await getUserFromSession(request)
          if (!user?.organization_id) {
            throw new Error('No organization ID found in session')
          }

          const { contact_ids, agent_id } = body
          if (!contact_ids || !Array.isArray(contact_ids) || contact_ids.length === 0) {
            throw new Error('Invalid or empty contact_ids array')
          }

          logger.info(`PUT /api/contacts/reassign - Reassigning ${contact_ids.length} contacts to agent ${agent_id} for org ${user.organization_id}`)
          
          // Get org-specific database
          const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString())

          // Create placeholders for SQL IN clause
          const placeholders = contact_ids.map(() => '?').join(',')
          
          const query = `
            UPDATE contacts 
            SET agent_id = ?
            WHERE id IN (${placeholders})
            RETURNING id
          `

          const params = [agent_id, ...contact_ids]
          const result = await orgDb.execute(query, params)
          const updatedIds = result.rows?.map(row => row.id) || []

          logger.info(`PUT /api/contacts/reassign - Successfully reassigned ${updatedIds.length} contacts to agent ${agent_id}`)

            return {
            success: true,
            updated_ids: updatedIds,
            message: `Successfully reassigned ${updatedIds.length} contacts to agent ${agent_id}`
          }
        } catch (e) {
          logger.error(`Error reassigning contacts: ${e}`)
          throw new Error(String(e))
        }
      })
      // Add file upload endpoint
      .post('/api/contacts/upload', async ({ request, body, set }: { request: Request, body: { file: File, overwrite_duplicates?: boolean | string, duplicateStrategy?: string, agent_id?: string }, set: any }) => {
        try {
          const user = await getUserFromSession(request)
          if (!user?.organization_id) {
            throw new Error('No organization ID found in session')
          }

          // Extract file and overwrite flag from form data
          const formData = body
          const file = formData.file
          
          // Support both naming conventions - overwrite_duplicates (old) and duplicateStrategy (new)
          let overwriteDuplicates = false
          if (formData.overwrite_duplicates !== undefined) {
            // Convert string 'false'/'true' to boolean
            overwriteDuplicates = formData.overwrite_duplicates === 'true' || formData.overwrite_duplicates === true
          } else if (formData.duplicateStrategy !== undefined) {
            // Support the new 'duplicateStrategy' parameter
            overwriteDuplicates = formData.duplicateStrategy === 'overwrite'
          }

          logger.info(`Processing ${file.name} with overwriteDuplicates=${overwriteDuplicates}`)

          // Save file to temp directory
          const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'import-'));
          const tempFilePath = path.join(tempDir, 'contacts.csv');
          await fs.writeFile(tempFilePath, Buffer.from(await file.arrayBuffer()));

          logger.info(`CSV file saved to ${tempFilePath}, starting import`);

          // Start bulk import process
          const importPromise = Database.bulkImportContacts(
            user.organization_id.toString(),
            tempFilePath,
            overwriteDuplicates
          );

          importPromise
            .then(() => fs.rm(tempDir, { recursive: true, force: true }))
            .catch((error: Error) => {
              logger.error(`Background import failed: ${error}`);
              fs.rm(tempDir, { recursive: true, force: true }).catch(() => {});
            });

          return {
            success: true,
            message: 'Started import of contacts',
            errors: []
          };
        } catch (error) {
          const err = error as Error;
          logger.error(`Error processing CSV upload: ${err}`);
          throw err;
        }
      })
      // Add error handler
      .use(errorHandler)
      // Add explicit debug log for auth routes
      .use(app => {
        logger.info('Registering auth routes...')
        return app.use(createAuthRoutes())
      })
      // Add signup routes
      .use(app => {
        logger.info('Registering signup routes...')
        return app.use(createSignupRoutes())
      })
      // Add settings routes
      .use(settingsRoutes)
      // Add organization routes
      .use(organizationRoutes)
      // Add brand routes
      .use(createBrandRoutes())
      // Add quotes routes
      .use(quotesRoutes)
      // Add onboarding routes
      .use(createOnboardingRoutes())
      // Add eligibility routes
      .use(eligibilityRoutes)
      // Add self-service routes
      .use(createSelfServiceRoutes())
      // Add schedule routes
      .use(scheduleRoutes)
      // Add contacts routes
      .use(contactsRoutes)
      // Add waitlist routes
      .use(createWaitlistRoutes())  // Waitlist routes use their own database connection
      // Add dashboard routes
      .use(createDashboardRoutes())
      // Serve backend static files from public directory
      .use(createStripeRoutes)
      // Add this endpoint within the app definition
      .post('/api/agents', async ({ body, request, set }) => {
        try {
          // Get current user from session to determine their org
          const currentUser = await getUserFromSession(request)
          if (!currentUser) {
            set.status = 401
            return {
              success: false,
              error: 'You must be logged in to perform this action'
            }
          }

          // Check if user is an admin
          if (!currentUser.is_admin) {
            set.status = 403
            return {
              success: false,
              error: 'Only administrators can create new agents'
            }
          }

          const newAgent = body as NewAgentRequest
          logger.info(`Creating new agent: ${newAgent.email} (org: ${currentUser.organization_id})`)

          // Ensure that the new user has at least one role
          if (!newAgent.is_admin && !newAgent.is_agent) {
            logger.warn(`Agent created without any roles. Defaulting to is_agent=true for: ${newAgent.email}`)
            newAgent.is_agent = true
          }

          // Get the libSQL client
          const client = db.getClient()
          
          // Check if the organization has reached its agent limit
          const orgLimitResult = await client.execute({
            sql: `
              SELECT 
                o.agent_limit, 
                COUNT(u.id) as current_agent_count
              FROM 
                organizations o
              LEFT JOIN 
                users u ON o.id = u.organization_id AND (u.is_agent = 1 OR u.is_admin = 1) AND u.is_active = 1
              WHERE 
                o.id = ?
              GROUP BY 
                o.id
            `,
            args: [currentUser.organization_id]
          })
          
          if (orgLimitResult.rows.length > 0) {
            const { agent_limit, current_agent_count } = orgLimitResult.rows[0]
            
            if (Number(current_agent_count) >= Number(agent_limit)) {
              logger.warn(`Organization ${currentUser.organization_id} has reached its agent limit (${agent_limit}). Cannot create new agent.`)
              set.status = 403
              return {
                success: false,
                error: `You have reached your plan's agent limit (${agent_limit}). Please upgrade your plan to add more agents.`
              }
            }
            
            logger.info(`Organization has ${current_agent_count}/${agent_limit} agents (before adding new agent)`)
          }
          
          // Get organization settings to inherit carriers and state licenses
          const orgSettingsResult = await client.execute({
            sql: `SELECT org_settings FROM organizations WHERE id = ?`,
            args: [currentUser.organization_id]
          })
          
          let orgSettings = {
            stateLicenses: [],
            carrierContracts: [],
            stateCarrierSettings: []
          }
          
          if (orgSettingsResult.rows.length > 0 && orgSettingsResult.rows[0].org_settings) {
            try {
              const parsedSettings = JSON.parse(orgSettingsResult.rows[0].org_settings as string)
              orgSettings = {
                stateLicenses: parsedSettings.stateLicenses || [],
                carrierContracts: parsedSettings.carrierContracts || [],
                stateCarrierSettings: parsedSettings.stateCarrierSettings || []
              }
              logger.info(`Inherited org settings: ${orgSettings.carrierContracts.length} carriers, ${orgSettings.stateLicenses.length} state licenses`)
            } catch (e) {
              logger.error(`Error parsing org settings: ${e}`)
            }
          }

          // First create the user
          const userResult = await client.execute({
            sql: `INSERT INTO users (
              email, 
              first_name, 
              last_name, 
              phone,
              organization_id,
              is_admin,
              is_agent,
              is_active
            ) VALUES (?, ?, ?, ?, ?, ?, ?, 1)
            RETURNING id`,
            args: [
              newAgent.email,
              newAgent.firstName,
              newAgent.lastName,
              newAgent.phone,
              currentUser.organization_id,
              newAgent.is_admin ? 1 : 0,
              newAgent.is_agent ? 1 : 0
            ]
          })

          const userId = userResult.rows[0].id
          logger.info(`Created new agent with ID: ${userId}`)

          // Then create agent settings - automatically inherit from organization
          await client.execute({
            sql: `INSERT INTO agent_settings (
              agent_id,
              settings
            ) VALUES (?, ?)`,
            args: [
              userId,
              JSON.stringify({
                stateLicenses: orgSettings.stateLicenses,
                carrierContracts: orgSettings.carrierContracts,
                stateCarrierSettings: orgSettings.stateCarrierSettings,
                emailSendBirthday: false,
                emailSendPolicyAnniversary: false,
                emailSendAep: false,
                smartSendEnabled: false
              })
            ]
          })

          logger.info(`Initialized settings for agent: ${userId} with inherited org settings`)

          return {
            success: true,
            message: 'Agent created successfully',
            id: userId
          }

        } catch (e) {
          logger.error(`Error creating agent: ${e}`)
          set.status = 500
          return {
            success: false,
            error: String(e)
          }
        }
      })
      // Add an alias endpoint for POST /api/agents/create to match frontend expectations
      .post('/api/agents/create', async ({ body, request, set }) => {
        try {
          // Log the request to the alias endpoint
          logger.info(`POST /api/agents/create - Using the same implementation as /api/agents`)
          
          // Get current user from session to determine their org
          const currentUser = await getUserFromSession(request)
          if (!currentUser) {
            set.status = 401
            return {
              success: false,
              error: 'You must be logged in to perform this action'
            }
          }

          // Check if user is an admin
          if (!currentUser.is_admin) {
            set.status = 403
            return {
              success: false,
              error: 'Only administrators can create new agents'
            }
          }

          const newAgent = body as NewAgentRequest
          logger.info(`Creating new agent via /api/agents/create: ${newAgent.email} (org: ${currentUser.organization_id})`)
          
          // Ensure that the new user has at least one role
          if (!newAgent.is_admin && !newAgent.is_agent) {
            logger.warn(`Agent created without any roles. Defaulting to is_agent=true for: ${newAgent.email}`)
            newAgent.is_agent = true
          }

          // Get the libSQL client
          const client = db.getClient()
          
          // Get organization settings to inherit carriers and state licenses
          const orgSettingsResult = await client.execute({
            sql: `SELECT org_settings FROM organizations WHERE id = ?`,
            args: [currentUser.organization_id]
          })
          
          let orgSettings = {
            stateLicenses: [],
            carrierContracts: [],
            stateCarrierSettings: []
          }
          
          if (orgSettingsResult.rows.length > 0 && orgSettingsResult.rows[0].org_settings) {
            try {
              const parsedSettings = JSON.parse(orgSettingsResult.rows[0].org_settings as string)
              orgSettings = {
                stateLicenses: parsedSettings.stateLicenses || [],
                carrierContracts: parsedSettings.carrierContracts || [],
                stateCarrierSettings: parsedSettings.stateCarrierSettings || []
              }
              logger.info(`Inherited org settings: ${orgSettings.carrierContracts.length} carriers, ${orgSettings.stateLicenses.length} state licenses`)
            } catch (e) {
              logger.error(`Error parsing org settings: ${e}`)
            }
          }

          // First create the user
          const userResult = await client.execute({
            sql: `INSERT INTO users (
              email, 
              first_name, 
              last_name, 
              phone,
              organization_id,
              is_admin,
              is_agent,
              is_active
            ) VALUES (?, ?, ?, ?, ?, ?, ?, 1)
            RETURNING id`,
            args: [
              newAgent.email,
              newAgent.firstName,
              newAgent.lastName,
              newAgent.phone,
              currentUser.organization_id,
              newAgent.is_admin ? 1 : 0,
              newAgent.is_agent ? 1 : 0
            ]
          })

          const userId = userResult.rows[0].id
          logger.info(`Created new agent with ID: ${userId}`)

          // Then create agent settings - automatically inherit from organization
          await client.execute({
            sql: `INSERT INTO agent_settings (
              agent_id,
              settings
            ) VALUES (?, ?)`,
            args: [
              userId,
              JSON.stringify({
                stateLicenses: orgSettings.stateLicenses,
                carrierContracts: orgSettings.carrierContracts,
                stateCarrierSettings: orgSettings.stateCarrierSettings,
                emailSendBirthday: false,
                emailSendPolicyAnniversary: false,
                emailSendAep: false,
                smartSendEnabled: false
              })
            ]
          })

          logger.info(`Initialized settings for agent: ${userId} with inherited org settings`)

          return {
            success: true,
            message: 'Agent created successfully',
            id: userId
          }

        } catch (e) {
          logger.error(`Error creating agent via /api/agents/create: ${e}`)
          set.status = 500
          return {
            success: false,
            error: String(e)
          }
        }
      })
      // Add this GET endpoint within the app definition, near the POST /api/agents endpoint
      .get('/api/agents', async ({ request, set }) => {
        try {
          const currentUser = await getUserFromSession(request)
          if (!currentUser) {
            set.status = 401
            return {
              success: false,
              error: 'You must be logged in to perform this action'
            }
          }

          // Remove admin check - allow any authenticated user to fetch agents for their organization
          // All users should be able to see the agent list for assignment purposes
          logger.info(`GET /api/agents - Fetching agents for org ${currentUser.organization_id}`)

          // Get the libSQL client
          const client = db.getClient()

          // Fetch the default agent ID for this organization
          const orgResult = await client.execute({
            sql: `SELECT default_agent_id FROM organizations WHERE id = ?`,
            args: [currentUser.organization_id]
          })
          
          const defaultAgentId = orgResult.rows[0]?.default_agent_id ? String(orgResult.rows[0].default_agent_id) : null
          logger.info(`GET /api/agents - Default agent ID for org ${currentUser.organization_id} is ${defaultAgentId || 'not set'}`)

          // Fetch all agents (users) from the organization along with their settings
          const result = await client.execute({
            sql: `
              SELECT 
                u.id,
                u.first_name,
                u.last_name,
                u.email,
                u.phone,
                u.is_admin,
                u.is_agent,
                a.settings
              FROM users u
              LEFT JOIN agent_settings a ON u.id = a.agent_id
              WHERE u.organization_id = ?
              AND u.is_active = 1
              ORDER BY u.first_name, u.last_name
            `,
            args: [currentUser.organization_id]
          })

          logger.info(`GET /api/agents - Found ${result.rows.length} agents`)

          // Map the database results to the expected format with camelCase field names
          const agents = result.rows.map((row: any) => {
            const settings = row.settings ? JSON.parse(row.settings) : {
              stateLicenses: [],
              carrierContracts: [],
              stateCarrierSettings: []
            }
            
            // Check if this agent is the default agent
            const isDefault = defaultAgentId ? String(row.id) === defaultAgentId : false

            return {
              id: String(row.id),
              firstName: row.first_name,
              lastName: row.last_name,
              email: row.email,
              phone: row.phone || '',
              isAdmin: Boolean(row.is_admin),
              isAgent: Boolean(row.is_agent),
              isDefault: isDefault,
              carriers: settings.carrierContracts || [],
              stateLicenses: settings.stateLicenses || []
            }
          })

          logger.info(`GET /api/agents - Returning ${agents.length} agents`)
          // Return both agents and the default agent ID
          return {
            agents,
            defaultAgentId
          }

        } catch (e) {
          logger.error(`Error fetching agents: ${e}`)
          set.status = 500
          return {
            success: false,
            error: String(e)
          }
        }
      })
      .post('/api/agents/set_default_agent', async ({ body, request, set }) => {
        try {
          const currentUser = await getUserFromSession(request)
          if (!currentUser) {
            set.status = 401
            return {
              success: false,
              error: 'You must be logged in to perform this action'
            }
          }

          const { agentId } = body  
          logger.info(`Setting default agent to ${agentId} for user ${currentUser.id}`)

          // Get the libSQL client
          const client = db.getClient()

          // Update the default agent for the organization
          await client.execute({
            sql: `UPDATE organizations SET default_agent_id = ? WHERE id = ?`,
            args: [agentId, currentUser.organization_id]
          })

          logger.info(`Default agent set to ${agentId} for organization ${currentUser.organization_id}`)
          
          set.status = 200
          return {
            success: true,
            message: 'Default agent set successfully'
          }
        } catch (e) {
          logger.error(`Error setting default agent: ${e}`) 
          set.status = 500
          return {
            success: false,
            error: String(e)
          }
        }
      })
      // Update PUT endpoint for updating agent details - moved here to be with other agent endpoints
      .put('/api/agents/:id', async ({ params, body, request, set }: {
        params: { id: string },
        body: AgentUpdate,
        request: Request,
        set: any
      }) => {
        console.log('DEBUG: PUT handler hit', { params, path: request.url })
        logger.info(`Starting update for agent ${params.id}`)
        logger.info(`Request body: ${JSON.stringify(body, null, 2)}`)
        
        try {
          const currentUser = await getUserFromSession(request)
          if (!currentUser) {
            logger.error('Authentication failed: No user in session')
            set.status = 401
            return {
              success: false,
              error: 'You must be logged in to perform this action'
            }
          }

          // Allow users to update their own details or admins to update any agent
          if (!currentUser.is_admin && currentUser.id.toString() !== params.id) {
            logger.error(`Authorization failed: User ${currentUser.id} is not an admin and trying to update another user`)
            set.status = 403
            return {
              success: false,
              error: 'Only administrators can update other agents'
            }
          }
          
          // Security protection: NEVER allow ANY user to remove their own admin status,
          // even if they are an admin themselves
          if (currentUser.id.toString() === params.id) {
            // If this is a self-update and user is trying to change admin status
            if (body.is_admin !== Boolean(currentUser.is_admin)) {
              // If they're trying to REMOVE admin status
              if (Boolean(currentUser.is_admin) && !body.is_admin) {
                logger.warn(`Security protection: Admin user ${currentUser.id} attempted to remove their own admin status`)
                // Prevent admin from removing their own admin status - keep it as is
                body.is_admin = true;
              }
              // Note: We still allow non-admins to be promoted by an admin
            }
          }

          const agent = body
          logger.info(`Updating agent ${params.id} - Name: ${agent.firstName} ${agent.lastName}, Phone: ${agent.phone}`)

          // Get the libSQL client
          const client = db.getClient()

          // Determine if this is a self-update by a non-admin
          const isSelfUpdate = currentUser.id.toString() === params.id && !currentUser.is_admin
          
          // Create dynamic SQL that excludes is_admin for self-updates
          let sql, args
          if (isSelfUpdate) {
            // For self-updates, exclude is_admin from the update
            sql = `UPDATE users 
                  SET first_name = ?, 
                      last_name = ?, 
                      email = ?, 
                      phone = ?,
                      is_agent = ?
                  WHERE id = ? AND organization_id = ?
                  RETURNING *`
            args = [
              agent.firstName,
              agent.lastName,
              agent.email,
              agent.phone,
              agent.is_agent ? 1 : 0,
              params.id,
              currentUser.organization_id
            ]
            logger.info(`Self-update detected: excluding admin status from update for user ${params.id}`)
          } else {
            // For admin updates or other users, include all fields
            sql = `UPDATE users 
                  SET first_name = ?, 
                      last_name = ?, 
                      email = ?, 
                      phone = ?,
                      is_admin = ?,
                      is_agent = ?
                  WHERE id = ? AND organization_id = ?
                  RETURNING *`
            args = [
              agent.firstName,
              agent.lastName,
              agent.email,
              agent.phone,
              agent.is_admin ? 1 : 0,
              agent.is_agent ? 1 : 0,
              params.id,
              currentUser.organization_id
            ]
          }

          // Execute the update with the appropriate SQL and args
          const userUpdateResult = await client.execute({
            sql,
            args
          })

          logger.info(`User update result: ${JSON.stringify(userUpdateResult.rows, null, 2)}`)

          if (!userUpdateResult.rows || userUpdateResult.rows.length === 0) {
            logger.error('User update failed: No rows affected')
            throw new Error('User update failed - no rows affected')
          }

          logger.info('User details updated successfully')

          // Update agent settings
          const settings = {
            stateLicenses: agent.stateLicenses,
            carrierContracts: agent.carriers,
            stateCarrierSettings: [],
            emailSendBirthday: false,
            emailSendPolicyAnniversary: false,
            emailSendAep: false,
            smartSendEnabled: false
          }

          logger.info(`Agent settings to update: ${JSON.stringify(settings, null, 2)}`)

          const settingsUpdateResult = await client.execute({
            sql: `INSERT INTO agent_settings (
              agent_id,
              settings
            ) VALUES (?, ?)
            ON CONFLICT (agent_id) 
            DO UPDATE SET settings = EXCLUDED.settings
            RETURNING *`,
            args: [
              params.id,
              JSON.stringify(settings)
            ]
          })

          logger.info(`Settings update result: ${JSON.stringify(settingsUpdateResult.rows, null, 2)}`)

          if (!settingsUpdateResult.rows || settingsUpdateResult.rows.length === 0) {
            logger.error('Settings update failed: No rows affected')
            throw new Error('Settings update failed - no rows affected')
          }

          logger.info('Settings updated successfully')

          const updatedUser = userUpdateResult.rows[0]
          const updatedSettings = JSON.parse(settingsUpdateResult.rows[0].settings)

          return {
            success: true,
            message: 'Agent updated successfully',
            agent: {
              id: updatedUser.id.toString(),
              firstName: updatedUser.first_name,
              lastName: updatedUser.last_name,
              email: updatedUser.email,
              phone: updatedUser.phone || '',
              is_admin: Boolean(updatedUser.is_admin),
              is_agent: Boolean(updatedUser.is_agent),
              carriers: updatedSettings.carrierContracts,
              stateLicenses: updatedSettings.stateLicenses
            }
          }

        } catch (error: unknown) {
          const dbError = error as Error
          logger.error(`Database error: ${dbError.message}`)
          set.status = 500
          return {
            success: false,
            error: dbError.message
          }
        }
      })
      // Add DELETE endpoint for agent deletion with contact reassignment
      .delete('/api/agents/:id', async ({ params, request, set, query }: {
        params: { id: string },
        request: Request,
        set: any,
        query: { reassignTo?: string }
      }) => {
        try {
          const currentUser = await getUserFromSession(request)
          if (!currentUser) {
            set.status = 401
            return {
              success: false,
              error: 'You must be logged in to perform this action'
            }
          }

          // Only admins can delete agents
          if (!currentUser.is_admin) {
            set.status = 403
            return {
              success: false,
              error: 'Only administrators can delete agents'
            }
          }

          const agentId = params.id
          
          // Prevent users from deleting themselves
          if (String(currentUser.id) === agentId) {
            set.status = 403
            return {
              success: false,
              error: 'You cannot delete your own account'
            }
          }
          
          const reassignToAgentId = query.reassignTo

          // Get the main database client for user/agent operations
          const client = db.getClient()

          // Also get the organization-specific database for contact operations
          const orgDb = await Database.getOrgDb(currentUser.organization_id.toString())

          // First handle contact operations in org database
          try {
            // Using the transaction method instead of direct SQL commands
            await orgDb.transaction(async (orgTx) => {
            // If reassignToAgentId is provided, reassign contacts to the new agent
            if (reassignToAgentId && reassignToAgentId !== agentId) {
              logger.info(`Reassigning contacts from agent ${agentId} to agent ${reassignToAgentId}`)
              
                // Update contacts in the org-specific database
                await orgTx.execute(
                  `UPDATE contacts
                  SET agent_id = ?
                   WHERE agent_id = ?`,
                  [reassignToAgentId, agentId]
                )
            } else {
              // Set agent_id to NULL for contacts associated with this agent
              logger.info(`Setting contacts from agent ${agentId} to have no assigned agent`)
              
                // Update contacts in the org-specific database
                await orgTx.execute(
                  `UPDATE contacts
                  SET agent_id = NULL
                   WHERE agent_id = ?`,
                  [agentId]
                )
              }
            })
            
            logger.info(`Successfully updated contacts for agent ${agentId}`)
            
            // Now handle agent operations in the main database
            await db.transaction(async (tx) => {
              // First, check if the user has any other related records that need to be deleted

            // Delete agent's settings
              await tx.execute(
                `DELETE FROM agent_settings
                 WHERE agent_id = ?`,
                [agentId]
              )
              
              // Check for any related records in other tables that might reference this user
              // For example, delete from sessions table if it exists
              await tx.execute(
                `DELETE FROM sessions
                 WHERE user_id = ?`,
                [agentId]
              )
              
              // IMPORTANT: Add any other related tables that might have foreign keys to users
              
              // Finally, completely delete the user record instead of just marking as inactive
              await tx.execute(
                `DELETE FROM users
                 WHERE id = ?`,
                [agentId]
              )
            })
            
            logger.info(`Successfully deleted agent ${agentId}`)

            return {
              success: true,
              message: 'Agent deleted successfully'
            }
          } catch (error) {
            logger.error(`Error in agent deletion: ${error}`)
            throw error;
          }
        } catch (e) {
          logger.error(`Error deleting agent: ${e}`)
          set.status = 500
          return {
            success: false,
            error: 'An error occurred while deleting the agent'
          }
        }
      })
      // Add this endpoint within the app definition
      .get('/api/me', async ({ request, set }) => {
        try {
          const currentUser = await getUserFromSession(request)
          logger.info(`GET /api/me - Current user from session: ${JSON.stringify(currentUser)}`)
          
          if (!currentUser) {
            set.status = 401
            return {
              success: false,
              error: 'Not authenticated'
            }
          }

          // Get user details including agent settings if they exist
          const client = db.getClient()
          const userDetails = await client.execute({
            sql: `
              SELECT 
                u.id,
                u.email,
                u.first_name as firstName,
                u.last_name as lastName,
                u.is_admin,
                u.is_agent,
                u.phone,
                u.organization_id,
                o.slug as organization_slug,
                o.subscription_tier,
                a.settings as agentSettings
              FROM users u
              JOIN organizations o ON u.organization_id = o.id
              LEFT JOIN agent_settings a ON a.agent_id = u.id
              WHERE u.id = ?
            `,
            args: [currentUser.id]
          })

          logger.info(`GET /api/me - Raw user details from DB: (omitted)`)

          if (!userDetails.rows[0]) {
            set.status = 404
            return {
              success: false,
              error: 'User not found'
            }
          }

          const user = userDetails.rows[0]
          const response = {
            success: true,
            user: {
              id: user.id,
              email: user.email,
              firstName: user.firstName,
              lastName: user.lastName,
              is_admin: Boolean(user.is_admin),
              is_agent: Boolean(user.is_agent),
              phone: user.phone || '',
              organization_id: user.organization_id,
              organization_slug: user.organization_slug,
              subscription_tier: user.subscription_tier,
              agentSettings: user.agentSettings ? JSON.parse(user.agentSettings) : null
            }
          }
          logger.info(`GET /api/me - Sending response ${JSON.stringify(response)}`)
          return response

        } catch (e) {
          logger.error(`Error fetching current user: ${e}`)
          set.status = 500
          return {
            success: false,
            error: String(e)
          }
        }
      })
      // Add development endpoints for easy session management
      .get('/api/dev/session/:redirect', async ({ params, set }) => {
        // Only allow in development
        if (process.env.NODE_ENV === 'production') {
          set.status = 404
          return { error: 'Not found' }
        }

        try {
          // Get most recent session from database
          const client = db.getClient()
          const result = await client.execute({
            sql: `
              SELECT s.id 
              FROM sessions s
              JOIN users u ON s.user_id = u.id
              WHERE u.is_active = 1
              ORDER BY s.created_at DESC 
              LIMIT 1
            `
          })

          if (!result.rows[0]) {
            set.status = 404
            return { error: 'No sessions found' }
          }

          // Convert the numeric ID to a string
          const sessionId = String(result.rows[0].id)
          logger.info(`Setting session cookie: ${sessionId} for redirect to: ${params.redirect}`)

          // Set the session cookie
          set.headers['Set-Cookie'] = `session=${sessionId}; Path=/; HttpOnly; SameSite=Lax`

          // Handle redirect
          const redirectPath = params.redirect === 'add-agent' ? 'agents/add' : params.redirect
          set.redirect = `/${redirectPath}`
          return { success: true }
        } catch (e) {
          logger.error(`Error in dev session endpoint: ${e}`)
          set.status = 500
          return { error: String(e) }
        }
      })
      // Add development endpoints for easy session management
      .get('/api/dev/session/login', async ({ set }) => {
        // Only allow in development
        if (process.env.NODE_ENV === 'production') {
          set.status = 404
          return { error: 'Not found' }
        }

        try {
          // Get most recent session from database
          const client = db.getClient()
          const result = await client.execute({
            sql: `
              SELECT s.id 
              FROM sessions s
              JOIN users u ON s.user_id = u.id
              WHERE u.is_active = 1
              ORDER BY s.created_at DESC 
              LIMIT 1
            `
          })

          if (!result.rows[0]) {
            set.status = 404
            return { error: 'No sessions found' }
          }

          // Convert the numeric ID to a string
          const sessionId = String(result.rows[0].id)
          logger.info(`Setting session cookie: ${sessionId} for login page`)

          // Set the session cookie
          set.headers['Set-Cookie'] = `session=${sessionId}; Path=/; HttpOnly; SameSite=Lax`
          return { success: true }
        } catch (e) {
          logger.error(`Error in dev session endpoint: ${e}`)
          set.status = 500
          return { error: String(e) }
        }
      })
      // Add ZIP lookup endpoint
      .get('/api/zip-lookup/:zipCode', ({ params: { zipCode } }) => {
        try {
          const zipInfo = ZIP_DATA[zipCode]
          if (!zipInfo) {
            return {
              success: false,
              error: `Invalid ZIP code: ${zipCode}`
            }
          }
          return {
            success: true,
            ...zipInfo
          }
        } catch (e) {
          logger.error(`Error looking up ZIP code ${zipCode}: ${e}`)
          return {
            success: false,
            error: String(e)
          }
        }
      })

      .get('/api/contacts/email-tracking/:contactId', async ({ params, request }) => {
        try {
          logger.info(`Fetching email tracking records for contact ID: ${params.contactId}`);
          
          const user = await getUserFromSession(request);
          if (!user) {
            logger.warn(`Authentication failed when fetching email tracking for contact ID: ${params.contactId}`);
            return {
              success: false,
              message: 'Authentication required'
            };
          }

          const contactId = Number(params.contactId);
          if (isNaN(contactId)) {
            logger.warn(`Invalid contact ID provided: ${params.contactId}`);
            return {
              success: false,
              message: 'Invalid contact ID'
            };
          }

          logger.info(`User requesting email tracking for contact ID: ${contactId}`);
          const orgDb = await Database.getOrgDb(user.organization_id.toString());
          logger.info(`Fetching email tracking records from organization database`);

          const trackingRecords = await orgDb.fetchAll(
            `SELECT email_type,scheduled_date,send_status,send_mode FROM email_send_tracking 
             WHERE contact_id = ? 
             ORDER BY created_at DESC`,
            [contactId.toString()]
          );
          
          logger.info(`Found ${trackingRecords.length} email tracking records for contact ID: ${contactId}`);

          return {
            success: true,
            trackingRecords
          };
        } catch (error) {
          logger.error(`Error fetching email tracking records: ${error}`);
          return {
            success: false,
            message: 'Failed to fetch email tracking records',
            error: String(error)
          };
        }
      })
      // Add API endpoint for tracking clicks
      .post('/api/tracking/log-tracking-click', async ({ body, request }: { body: { tid: string, orgId: string, contactId?: string, quoteId?: string }, request: Request }) => {
        try {
          logger.info(`Received tracking click: ${JSON.stringify(body)}`);
          
          // Extract tracking data from request
          const { tid, orgId, contactId, quoteId } = body;
          
          if (!tid) {
            logger.warn('Missing tracking ID in click tracking request');
            return { success: false, message: 'Missing tracking ID' };
          }
          
          if (!orgId) {
            logger.warn('Missing organization ID in click tracking request');
            return { success: false, message: 'Missing organization ID' };
          }
          
          try {
            // Get organization database using the provided orgId
            const orgDb = await Database.getOrInitOrgDb(orgId);
            
            // Insert the tracking click record with the updated schema
            await orgDb.execute(
              `INSERT INTO tracking_clicks (
                tracking_id, contact_id, quote_id
              ) VALUES (?, ?, ?)`,
              [tid, contactId ? parseInt(contactId, 10) : null, quoteId || null]
            );
            
            logger.info(`Successfully logged tracking click with ID: ${tid} for organization ${orgId}`);
            
            return { success: true };
          } catch (dbError) {
            logger.error(`Error storing tracking data: ${dbError}`);
            return { 
              success: false, 
              message: 'Error recording tracking click', 
              error: 'Database error' 
            };
          }
        } catch (error) {
          logger.error(`Error processing tracking click: ${error}`);
          return { 
            success: false, 
            message: 'Failed to process tracking click', 
            error: 'Internal server error' 
          };
        }
      })
      // Send quote email to contact
      .post('/api/contacts/:contactId/send-quote-email', async ({ params, request, body }) => {
        try {
          const user = await getUserFromSession(request);
          if (!user) {
            return {
              success: false,
              message: 'Authentication required'
            };
          }

          const contactId = Number(params.contactId);
          if (isNaN(contactId)) {
            return {
              success: false,
              message: 'Invalid contact ID'
            };
          }

          // Get org-specific database
          const orgDb = await Database.getOrgDb(user.organization_id.toString());

          // Fetch contact details
          const contact = await orgDb.fetchOne<{id: number, first_name: string, last_name: string, email: string, plan_type: string, phone_number: string}>(
            'SELECT id, first_name, last_name, email, plan_type, phone_number FROM contacts WHERE id = ?',
            [contactId]
          );

          if (!contact) {
            return {
              success: false,
              message: 'Contact not found'
            };
          }

          logger.info(`Contact: ${JSON.stringify(contact)}`);

          // Use the proper generateQuoteId function
          const quoteId = generateQuoteId(user.organization_id, contactId);
          
          // Calculate base URL
          const baseUrl = process.env.PUBLIC_URL || 'http://localhost:5173';
          let quoteUrl = `${baseUrl}/compare?id=${quoteId}&planType=${contact.plan_type}`;

          // Add organization ID to URL
          quoteUrl += `&orgId=${user.organization_id}`;

          // Send the email via SendGrid
          const emailService = new EmailService();
          
          // Fetch organization data
          const organization = await db.fetchOne<{
            id: number;
            name: string;
            logo_data: string;
            primary_color: string;
            phone: string;
            website: string;
          }>(
            'SELECT id, name, logo_data, primary_color, phone, website FROM organizations WHERE id = ?',
            [user.organization_id]
          );
          
          // Log more details about the logo data
          if (organization?.logo_data) {
            const logoDataPrefix = organization.logo_data.substring(0, 50);
            logger.info(`Logo data prefix: ${logoDataPrefix}...`);
          }
          
          // Log the presence of logo data
          logger.info(`Sending quote email for org ${user.organization_id} with logo: ${organization?.logo_data ? 'Present' : 'Missing'}`);
          
          const result = await emailService.sendQuoteEmail({
            email: contact.email,
            firstName: contact.first_name,
            lastName: contact.last_name,
            quoteUrl,
            planType: contact.plan_type,
            organization: organization || undefined,
            phone: contact.phone_number,
            contactId: contactId
          });

          // Record in email tracking table
          const now = new Date().toISOString();
          const batchId = `manual-${Date.now()}-${contactId}`;
          
          await emailService.recordEmailSend(orgDb, {
            orgId: user.organization_id,
            contactId: contactId,
            emailType: 'quote_email',
            sendStatus: 'sent',
            sendMode: 'production',
            batchId: batchId,
            messageId: result.messageId
          });

          const trackingRecord = await orgDb.fetchOne<{id: number, email_type: string, scheduled_date: string, send_status: string, send_mode: string}>(
            'SELECT id, email_type, scheduled_date, send_status, send_mode FROM email_send_tracking WHERE batch_id = ?',
            [batchId]
          );

          // Update last_emailed timestamp
          await orgDb.execute(
            'UPDATE contacts SET last_emailed = CURRENT_TIMESTAMP WHERE id = ?',
            [contactId]
          );

          return {
            success: true,
            message: 'Quote email sent successfully',
            trackingRecords: trackingRecord ? {
              id: trackingRecord.id,
              email_type: trackingRecord.email_type,
              scheduled_date: trackingRecord.scheduled_date,
              send_status: trackingRecord.send_status,
              send_mode: trackingRecord.send_mode
            } : null
          };
        } catch (error) {
          logger.error(`Error sending quote email: ${error}`);
          return {
            success: false,
            message: 'Failed to send quote email',
            error: String(error)
          };
        }
      })
      
      .post('/api/contact-request', async ({ body, request }: { body: { name: string; email: string; type: string; quoteId?: string }, request: Request }) => {
        try {
          const user = await getUserFromSession(request)
          if (!user?.organization_id) {
            throw new Error('No organization ID found in session')
          }

          const contactRequest = body as { name: string, email: string, type: string, quoteId: string }
          const { name, email, type, quoteId } = contactRequest
          logger.info(`Processing contact request for ${email} (type: ${type})`)
          
          // Get org-specific database
          const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString())

          // Check for existing contact
          const existingContact = await orgDb.fetchOne<{ id: number }>(
            'SELECT id FROM contacts WHERE LOWER(TRIM(email)) = LOWER(TRIM(?))',
            [email]
          )

          let eventTargetId: number
          let isLead = false

          if (existingContact) {
            // Use existing contact
            logger.info(`Found existing contact with ID ${existingContact.id}`)
            eventTargetId = existingContact.id
          } else {
            // Create new lead
            logger.info(`No existing contact found, creating lead for ${email}`)
            const leadResult = await orgDb.execute(
              `INSERT INTO leads (name, email) VALUES (?, ?) RETURNING id`,
              [name, email]
            )
            
            if (!leadResult.rows?.[0]?.id) {
              throw new Error('Failed to create lead')
            }
            
            eventTargetId = leadResult.rows[0].id
            isLead = true
          }

          // Record the event
          const metadata = {
            quoteId,
            requestType: type
          }

          const eventQuery = isLead
            ? `INSERT INTO contact_events (lead_id, event_type, metadata) VALUES (?, 'followup_request', ?)`
            : `INSERT INTO contact_events (contact_id, event_type, metadata) VALUES (?, 'followup_request', ?)`

          await orgDb.execute(eventQuery, [eventTargetId, JSON.stringify(metadata)])
          logger.info(`Recorded followup request event for ${isLead ? 'lead' : 'contact'} ${eventTargetId}`)

          // Return success response
          return {
            success: true,
            message: 'Contact request recorded successfully'
          }

        } catch (e: unknown) {
          logger.error(`Error processing contact request: ${e instanceof Error ? e.message : String(e)}`)
          throw new Error(e instanceof Error ? e.message : String(e))
        }
      })
      .get('/api/contacts/:id/eligibility', async ({ params: { id }, request }) => {
        try {
          const user = await getUserFromSession(request)
          if (!user?.organization_id) {
            throw new Error('No organization ID found in session')
          }

          logger.info(`GET /api/contacts/${id}/eligibility - Fetching eligibility results`)
          
          // Get org-specific database
          const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString())
          
          // Get most recent eligibility answers for this contact
          const result = await orgDb.fetchOne(
            `SELECT answers 
             FROM eligibility_answers 
             WHERE contact_id = ? 
             ORDER BY created_at DESC 
             LIMIT 1`,
            [id]
          ) as { answers: string } | null

          if (!result) {
            return {
              status: "incomplete",
              answers: null
            }
          }

          // Parse answers JSON and determine status
          const answers = JSON.parse(result.answers)
          const allTrue = Object.values(answers).every(value => value === true)

          return {
            status: allTrue ? "pass" : "flagged",
            answers: result.answers  // Return the raw JSON string instead of the parsed object
          }

        } catch (e) {
          logger.error(`Error fetching eligibility results: ${e}`)
          throw new Error(String(e))
        }
      })
      // Add new endpoint to get follow-up requests
      .get('/api/contacts/:id/follow-ups', async ({ params: { id }, request }) => {
        try {
          const user = await getUserFromSession(request)
          if (!user?.organization_id) {
            throw new Error('No organization ID found in session')
          }

          logger.info(`GET /api/contacts/${id}/follow-ups - Fetching follow-up requests`)
          
          // Get org-specific database
          const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString())
          
          // Get follow-up requests from contact_events table
          const result = await orgDb.execute(
            `SELECT 
              event_type,
              metadata,
              created_at
             FROM contact_events 
             WHERE contact_id = ? 
               AND event_type = 'followup_request'
             ORDER BY created_at DESC`,
            [id]
          )

          // Map results to a more friendly format
          const followUps = result.rows?.map((row: { metadata: string, created_at: string }) => {
            const metadata = JSON.parse(row.metadata)
            return {
              type: metadata.requestType,
              quoteId: metadata.quoteId,
              createdAt: row.created_at
            }
          }) || []

          return followUps

        } catch (e) {
          logger.error(`Error fetching follow-up requests: ${e instanceof Error ? e.message : String(e)}`)
          throw new Error(e instanceof Error ? e.message : String(e))
        }
      })
      // Add profile update endpoint
      .put('/api/profile', async ({ request, body, set }) => {
        try {
          const currentUser = await getUserFromSession(request)
          if (!currentUser) {
            set.status = 401
            return {
              success: false,
              error: 'Not authenticated'
            }
          }

          const { firstName, lastName, phone } = body as { 
            firstName: string;
            lastName: string;
            phone: string;
          }

          // Get the libSQL client
          const client = db.getClient()

          // Update only allowed profile fields
          const result = await client.execute({
            sql: `UPDATE users 
                  SET first_name = ?, 
                      last_name = ?, 
                      phone = ?
                  WHERE id = ?
                  RETURNING *`,
            args: [firstName, lastName, phone, currentUser.id]
          })

          if (!result.rows || result.rows.length === 0) {
            set.status = 404
            return {
              success: false,
              error: 'User not found'
            }
          }

          return {
            success: true,
            message: 'Profile updated successfully'
          }

        } catch (error) {
          logger.error(`Error updating profile: ${error}`)
          set.status = 500
          return {
            success: false,
            error: String(error)
          }
        }
      })
      .get('/api/agents/:id/contacts', async ({ params, request }) => {
        try {
          const currentUser = await getUserFromSession(request)
          if (!currentUser?.organization_id) {
            throw new Error('No organization ID found in session')
          }
          
          logger.info(`GET /api/agents/${params.id}/contacts - Fetching contacts for agent ${params.id}`)
          
          // Get organization-specific database
          const orgDb = await Database.getOrInitOrgDb(currentUser.organization_id.toString())
          
          // Fetch all contacts for the agent
          const result = await orgDb.fetchAll('SELECT * FROM contacts WHERE agent_id = ?', [params.id])
          
          logger.info(`GET /api/agents/${params.id}/contacts - Found ${result.length} contacts`)
          
          // Map the database results to the expected format with camelCase field names
          const contacts = result.map((contact: { 
            id: number;
            first_name: string;
            last_name: string;
            email: string;
            current_carrier: string;
            plan_type: string;
            effective_date: string;
            birth_date: string;
            tobacco_user: number;
            gender: string;
            state: string;
            zip_code: string;
            agent_id: number | null;
            last_emailed: string | null;
            phone_number: string;
          }) => ({
            id: contact.id,
            first_name: contact.first_name,
            last_name: contact.last_name,
            email: contact.email,
            current_carrier: contact.current_carrier,
            plan_type: contact.plan_type,
            effective_date: contact.effective_date,
            birth_date: contact.birth_date,
            tobacco_user: Boolean(contact.tobacco_user),
            gender: contact.gender,
            state: contact.state,
            zip_code: contact.zip_code,
            agent_id: contact.agent_id,
            last_emailed: contact.last_emailed,
            phone_number: contact.phone_number || ''
          }))
          
          return {
            success: true,
            contacts: contacts
          }
        } catch (e: unknown) {
          logger.error(`Error fetching contacts for agent ${params.id}: ${e instanceof Error ? e.message : String(e)}`)
          return {
            success: false,
            error: String(e)
          }
        }
      })
      .get('/api/contact-requests', async ({ request }) => {
        try {
          const user = await getUserFromSession(request)
          if (!user?.organization_id) {
            throw new Error('No organization ID found in session')
          }

          logger.info(`GET /api/contact-requests - Fetching follow-up requests`)
          
          // Get org-specific database
          const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString())
          
          // Fetch all follow-up requests
          const result = await orgDb.fetchAll('SELECT * FROM contact_events WHERE event_type = ?', ['followup_request'])
          
          logger.info(`GET /api/contact-requests - Found ${result.length} follow-up requests`)
          
          // Map the database results to the expected format with camelCase field names
          const followUps = result.map(followUp => ({
            id: followUp.id,
            event_type: followUp.event_type,
            metadata: JSON.parse(followUp.metadata),
            created_at: followUp.created_at
          }))
          
          return {
            success: true,
            followUps: followUps
          }
        } catch (e) {
          logger.error(`Error fetching follow-up requests: ${e}`)
          return {
            success: false,
            error: String(e)
          }
        }
      })
      .get('/api/contacts/:id/follow-ups', async ({ params: { id }, request }) => {
        try {
          const user = await getUserFromSession(request)
          if (!user?.organization_id) {
            throw new Error('No organization ID found in session')
          }

          logger.info(`GET /api/contacts/${id}/follow-ups - Fetching follow-up requests`)
          
          // Get org-specific database
          const orgDb = await Database.getOrInitOrgDb(user.organization_id.toString())
          
          // Get follow-up requests from contact_events table
          const result = await orgDb.execute(
            `SELECT 
              event_type,
              metadata,
              created_at
             FROM contact_events 
             WHERE contact_id = ? 
               AND event_type = 'followup_request'
             ORDER BY created_at DESC`,
            [id]
          )

          // Map results to a more friendly format
          const followUps = result.rows?.map((row: { metadata: string, created_at: string }) => {
            const metadata = JSON.parse(row.metadata)
            return {
              type: metadata.requestType,
              quoteId: metadata.quoteId,
              createdAt: row.created_at
            }
          }) || []

          return followUps

        } catch (e) {
          logger.error(`Error fetching follow-up requests: ${e instanceof Error ? e.message : String(e)}`)
          throw new Error(e instanceof Error ? e.message : String(e))
        }
      })
      // Add a catch-all route handler for SPA routes
      .all('*', async ({ request, set }) => {
        const url = new URL(request.url);
        const path = url.pathname;
        
        // Skip API routes
        if (path.startsWith('/api/')) {
          set.status = 404;
          return { error: 'API endpoint not found' };
        }
        
        // Skip files with extensions (static assets)
        if (path.includes('.') && !path.endsWith('/')) {
          set.status = 404;
          return { error: 'File not found' };
        }
        
        // For all other routes, serve the SPA index.html
        logger.info(`Serving SPA for route: ${path}`);
        
        // Determine the path to index.html based on environment
        let indexPath = '';
        
        // Check multiple possible locations for the index.html file
        const possiblePaths = [
          join(process.cwd(), 'dist', 'index.html'),  // Main dist directory
          join(process.cwd(), '..', 'dist', 'index.html'), // Parent dist directory
          join(process.cwd(), 'public', 'index.html'), // Public directory
          join(process.cwd(), '..', 'frontend', 'dist', 'index.html') // Frontend dist directory
        ];
        
        // Try each path until we find one that exists
        for (const possiblePath of possiblePaths) {
          logger.info(`Checking for SPA at: ${possiblePath}`);
          if (existsSync(possiblePath)) {
            indexPath = possiblePath;
            logger.info(`Found SPA at: ${indexPath}`);
            break;
          }
        }
        
        if (!indexPath || !existsSync(indexPath)) {
          logger.error(`Cannot find SPA index.html file to serve for route: ${path}`);
          set.status = 404;
          return { error: 'SPA file not found' };
        }
        
        // Read and serve the index.html file
        try {
          const content = readFileSync(indexPath, 'utf-8');
          set.headers['Content-Type'] = 'text/html';
          return content;
        } catch (error) {
          logger.error(`Error reading SPA index.html: ${error}`);
          set.status = 500;
          return { error: 'Error serving SPA' };
        }
      })
      .listen(8000)

    logger.info('Server started on port 8000')

    // Schedule the cleanup job to run daily at midnight
    cron.schedule('0 0 * * *', () => {
      logger.info('Running scheduled cleanup job for old organizations');
      // cleanupOldOrganizations().catch(error => {
      //   logger.error(`Error in scheduled cleanup job: ${error}`);
      // });
    });
    
    logger.info('Scheduled daily cleanup job for old organizations');

    return app
  } catch (error) {
    logger.error(`Error starting server: ${error}`)
    throw error
  }
}

startServer()

================
File: backend/src/logger.ts
================
export const logger = {
  info: (message: string) => {
    const timestamp = new Date().toISOString()
    console.log(`[${timestamp}] [INFO] ${message}`)
  },
  error: (message: string) => {
    const timestamp = new Date().toISOString()
    console.error(`[${timestamp}] [ERROR] ${message}`)
  },
  warn: (message: string) => {
    const timestamp = new Date().toISOString()
    console.warn(`[${timestamp}] [WARN] ${message}`)
  }
}

================
File: backend/src/types.ts
================
import { Database } from './database';
import { cookie } from '@elysiajs/cookie';

export interface ContactCreate {
  first_name: string
  last_name: string
  email: string
  current_carrier: string
  plan_type: string
  effective_date: string
  birth_date: string
  tobacco_user: boolean
  gender: string
  state: string
  zip_code: string
  agent_id?: number | null
  contact_owner_id?: number | null
  phone_number: string
}

export interface AgentCreate {
  first_name: string
  last_name: string
  email: string
  phone: string
}

export interface User {
  id: number;
  email: string;
  organization_id: number;
  organizationId?: number;
  is_admin: boolean;
  is_agent: boolean;
  is_active: boolean;
  first_name: string;
  last_name: string;
  phone: string;
  organization_name?: string;
}

export interface BaseSettings {
  stateLicenses: string[];
  carrierContracts: string[];
  stateCarrierSettings: any[];
  allowAgentSettings: boolean;
  emailSendBirthday: boolean;
  emailSendPolicyAnniversary: boolean;
  emailSendAep: boolean;
  smartSendEnabled: boolean;
  brandName?: string;
  logo?: string | null;
  orgSignature?: boolean;
  phone?: string;
  redirectUrl?: string;
  signature?: string;
}

export interface UserContext {
  store: {
    db: Database;
  };
  user: User;
  set: {
    status?: number;
    headers?: Record<string, string>;
  };
  cookie: ReturnType<typeof cookie>;
  query: Record<string, string | undefined>;
  body: unknown;
}

================
File: frontend/backup/Steps/AddAgents.elm
================
module Onboarding.Steps.AddAgents exposing
    ( Model
    , Msg
    , OutMsg(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, viewBox)
import Time
import Url



-- MODEL


type alias Model =
    { agents : List Agent
    , newAgent : NewAgentForm
    , isLoading : Bool
    , error : Maybe String
    , key : Nav.Key
    , orgSlug : String
    , showAddForm : Bool
    , pendingSave : Maybe String
    , emailStatus : EmailStatus
    , isOnboarding : Bool
    }


type alias Agent =
    { id : String
    , firstName : String
    , lastName : String
    , email : String
    , phone : String
    , isAdmin : Bool
    , isAgent : Bool
    }


type alias NewAgentForm =
    { firstName : String
    , lastName : String
    , email : String
    , phone : String
    , isAdmin : Bool
    , isAgent : Bool
    }


type EmailStatus
    = NotChecked
    | Checking
    | Valid
    | Invalid String


init : Nav.Key -> String -> Bool -> ( Model, Cmd Msg )
init key orgSlug isOnboarding =
    ( { agents = []
      , newAgent =
            { firstName = ""
            , lastName = ""
            , email = ""
            , phone = ""
            , isAdmin = False
            , isAgent = True
            }
      , isLoading = not isOnboarding -- Only set loading true if not in onboarding
      , error = Nothing
      , key = key
      , orgSlug = orgSlug
      , showAddForm = isOnboarding -- Auto-show the add form in onboarding
      , pendingSave = Nothing
      , emailStatus = NotChecked
      , isOnboarding = isOnboarding
      }
    , if isOnboarding then
        -- Skip fetching agents during onboarding
        Cmd.none

      else
        -- Fetch existing agents when not in onboarding
        fetchAgents orgSlug
    )



-- UPDATE


type Msg
    = UpdateFirstName String
    | UpdateLastName String
    | UpdateEmail String
    | UpdatePhone String
    | UpdateAdminCheckbox Bool
    | UpdateAgentCheckbox Bool
    | AddAgent
    | SaveAgent
    | CancelAddAgent
    | NextStepClicked
    | GotAgents (Result Http.Error (List Agent))
    | AgentSaved (Result Http.Error ())
    | CheckAgentEmail
    | GotEmailResponse (Result Http.Error EmailResponse)
    | NoOp


type OutMsg
    = NoOutMsg
    | NextStep
    | ShowError String


type alias EmailResponse =
    { available : Bool
    , message : String
    }


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        UpdateFirstName value ->
            ( { model | newAgent = updateNewAgentField model.newAgent "firstName" value }
            , Cmd.none
            , NoOutMsg
            )

        UpdateLastName value ->
            ( { model | newAgent = updateNewAgentField model.newAgent "lastName" value }
            , Cmd.none
            , NoOutMsg
            )

        UpdateEmail value ->
            ( { model | newAgent = updateNewAgentField model.newAgent "email" value, emailStatus = NotChecked }
            , Cmd.none
            , NoOutMsg
            )

        UpdatePhone value ->
            ( { model | newAgent = updateNewAgentField model.newAgent "phone" value }
            , Cmd.none
            , NoOutMsg
            )

        UpdateAdminCheckbox value ->
            let
                -- Ensure at least one role is selected
                newIsAgent =
                    if not value then
                        True
                        -- If admin is being unchecked, ensure agent is checked

                    else
                        model.newAgent.isAgent

                updatedNewAgent =
                    { firstName = model.newAgent.firstName
                    , lastName = model.newAgent.lastName
                    , email = model.newAgent.email
                    , phone = model.newAgent.phone
                    , isAdmin = value
                    , isAgent = newIsAgent
                    }
            in
            ( { model | newAgent = updatedNewAgent }
            , Cmd.none
            , NoOutMsg
            )

        UpdateAgentCheckbox value ->
            let
                -- Ensure at least one role is selected
                newIsAdmin =
                    if not value then
                        True
                        -- If agent is being unchecked, ensure admin is checked

                    else
                        model.newAgent.isAdmin

                updatedNewAgent =
                    { firstName = model.newAgent.firstName
                    , lastName = model.newAgent.lastName
                    , email = model.newAgent.email
                    , phone = model.newAgent.phone
                    , isAgent = value
                    , isAdmin = newIsAdmin
                    }
            in
            ( { model | newAgent = updatedNewAgent }
            , Cmd.none
            , NoOutMsg
            )

        AddAgent ->
            ( { model | showAddForm = True }
            , Cmd.none
            , NoOutMsg
            )

        SaveAgent ->
            if isFormValid model then
                ( { model | isLoading = True }
                , saveAgent model.orgSlug model.newAgent
                , NoOutMsg
                )

            else
                ( { model | error = Just "Please fill out all required fields and ensure email is valid" }
                , Cmd.none
                , ShowError "Please fill out all required fields and ensure email is valid"
                )

        CancelAddAgent ->
            ( { model | showAddForm = False }
            , Cmd.none
            , NoOutMsg
            )

        NextStepClicked ->
            ( model
            , Cmd.none
            , NextStep
            )

        GotAgents result ->
            case result of
                Ok agents ->
                    ( { model | agents = agents, isLoading = False }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to load agents"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to load agents"
                    )

        AgentSaved result ->
            case result of
                Ok _ ->
                    ( { model
                        | isLoading = False
                        , showAddForm = False
                        , newAgent =
                            { firstName = ""
                            , lastName = ""
                            , email = ""
                            , phone = ""
                            , isAdmin = False
                            , isAgent = True
                            }
                        , emailStatus = NotChecked
                      }
                    , fetchAgents model.orgSlug
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to save agent"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to save agent"
                    )

        CheckAgentEmail ->
            if String.isEmpty (String.trim model.newAgent.email) then
                ( { model | emailStatus = NotChecked }
                , Cmd.none
                , NoOutMsg
                )

            else if model.emailStatus == Checking then
                ( model, Cmd.none, NoOutMsg )

            else
                ( { model | emailStatus = Checking }
                , checkAgentEmail model.orgSlug model.newAgent.email
                , NoOutMsg
                )

        GotEmailResponse result ->
            case result of
                Ok response ->
                    ( { model
                        | emailStatus =
                            if response.available then
                                Valid

                            else
                                Invalid response.message
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | emailStatus = Invalid "Failed to check email availability"
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

        NoOp ->
            ( model, Cmd.none, NoOutMsg )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Add Team Members" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Invite agents to join your organization" ]
            ]
        , if model.isLoading then
            viewLoading

          else
            div [ class "space-y-6" ]
                [ if model.error /= Nothing then
                    div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , viewAgentsList model
                , viewAddAgentSection model
                , div [ class "flex justify-end space-x-4 mt-8" ]
                    [ button
                        [ class "px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        , onClick NextStepClicked
                        ]
                        [ text "Continue" ]
                    ]
                ]
        ]


viewLoading : Html msg
viewLoading =
    div [ class "text-center py-12" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading..." ]
        ]


viewAgentsList : Model -> Html Msg
viewAgentsList model =
    if model.isOnboarding && List.isEmpty model.agents then
        -- In onboarding with no agents, show a more appropriate message
        div [ class "bg-gray-50 p-6 rounded-lg text-center" ]
            [ p [ class "text-gray-500" ]
                [ text "Add team members who will have access to your Medicare Max portal." ]
            ]

    else if List.isEmpty model.agents then
        div [ class "bg-gray-50 p-6 rounded-lg text-center" ]
            [ p [ class "text-gray-500" ]
                [ text "No agents added yet. Add your first agent below." ]
            ]

    else
        div [ class "bg-white shadow rounded-lg overflow-hidden" ]
            [ div [ class "px-6 py-4 border-b border-gray-200" ]
                [ h2 [ class "text-lg font-medium text-gray-900" ]
                    [ text "Team Members" ]
                ]
            , div [ class "divide-y divide-gray-200" ]
                (List.map viewAgentItem model.agents)
            ]


viewAgentItem : Agent -> Html Msg
viewAgentItem agent =
    div [ class "px-6 py-4" ]
        [ div [ class "flex items-center justify-between" ]
            [ div [ class "flex items-center" ]
                [ div [ class "ml-4" ]
                    [ div [ class "text-sm font-medium text-gray-900" ]
                        [ text (agent.firstName ++ " " ++ agent.lastName) ]
                    , div [ class "text-sm text-gray-500" ]
                        [ text agent.email ]
                    ]
                ]
            , div [ class "flex space-x-2" ]
                [ if agent.isAdmin then
                    span [ class "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800" ]
                        [ text "Admin" ]

                  else
                    text ""
                , if agent.isAgent then
                    span [ class "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800" ]
                        [ text "Agent" ]

                  else
                    text ""
                ]
            ]
        ]


viewAddAgentSection : Model -> Html Msg
viewAddAgentSection model =
    div [ class "bg-white shadow rounded-lg overflow-hidden" ]
        [ div [ class "px-6 py-4 border-b border-gray-200" ]
            [ h2 [ class "text-lg font-medium text-gray-900" ]
                [ text "Add New Agent" ]
            ]
        , if model.showAddForm then
            div [ class "px-6 py-4" ]
                [ div [ class "space-y-6" ]
                    [ div [ class "grid grid-cols-2 gap-6" ]
                        [ div []
                            [ label [ class "block text-sm font-medium text-gray-700" ]
                                [ text "First Name" ]
                            , input
                                [ type_ "text"
                                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                , value model.newAgent.firstName
                                , onInput UpdateFirstName
                                , placeholder "Enter first name"
                                ]
                                []
                            ]
                        , div []
                            [ label [ class "block text-sm font-medium text-gray-700" ]
                                [ text "Last Name" ]
                            , input
                                [ type_ "text"
                                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                , value model.newAgent.lastName
                                , onInput UpdateLastName
                                , placeholder "Enter last name"
                                ]
                                []
                            ]
                        ]
                    , div [ class "grid grid-cols-2 gap-6" ]
                        [ div []
                            [ label [ class "block text-sm font-medium text-gray-700" ]
                                [ text "Email" ]
                            , input
                                [ type_ "email"
                                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                , value model.newAgent.email
                                , onInput UpdateEmail
                                , onBlur CheckAgentEmail
                                , placeholder "name@example.com"
                                ]
                                []
                            , viewEmailStatus model.emailStatus
                            ]
                        , div []
                            [ label [ class "block text-sm font-medium text-gray-700" ]
                                [ text "Phone" ]
                            , input
                                [ type_ "tel"
                                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                , value model.newAgent.phone
                                , onInput UpdatePhone
                                , placeholder "(555) 555-5555"
                                ]
                                []
                            ]
                        ]
                    , div []
                        [ label [ class "block text-sm font-medium text-gray-700 mb-2" ]
                            [ text "Role (at least one required)" ]
                        , div [ class "flex items-center space-x-6" ]
                            [ label [ class "inline-flex items-center" ]
                                [ input
                                    [ type_ "checkbox"
                                    , class "rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                    , checked model.newAgent.isAdmin
                                    , onClick (UpdateAdminCheckbox (not model.newAgent.isAdmin))
                                    ]
                                    []
                                , span [ class "ml-2 text-sm text-gray-700" ]
                                    [ text "Admin" ]
                                ]
                            , label [ class "inline-flex items-center" ]
                                [ input
                                    [ type_ "checkbox"
                                    , class "rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                    , checked model.newAgent.isAgent
                                    , onClick (UpdateAgentCheckbox (not model.newAgent.isAgent))
                                    ]
                                    []
                                , span [ class "ml-2 text-sm text-gray-700" ]
                                    [ text "Agent" ]
                                ]
                            ]
                        ]
                    , div [ class "flex justify-end space-x-4 mt-6" ]
                        [ button
                            [ class "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                            , onClick CancelAddAgent
                            ]
                            [ text "Cancel" ]
                        , button
                            [ class "px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                            , onClick SaveAgent
                            , disabled (not (isFormValid model))
                            ]
                            [ text "Add Agent" ]
                        ]
                    ]
                ]

          else
            div [ class "px-6 py-4 flex justify-center" ]
                [ button
                    [ class "inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
                    , onClick AddAgent
                    ]
                    [ span [ class "mr-2" ] [ text "+" ]
                    , text "Add Agent"
                    ]
                ]
        ]


viewEmailStatus : EmailStatus -> Html Msg
viewEmailStatus status =
    div [ class "mt-1 transition-all duration-200" ]
        [ case status of
            NotChecked ->
                text ""

            Checking ->
                div [ class "text-blue-600 text-sm flex items-center" ]
                    [ div [ class "animate-spin h-4 w-4 mr-2 border-2 border-blue-600 border-t-transparent rounded-full" ] []
                    , text "Checking availability..."
                    ]

            Valid ->
                div [ class "text-green-600 text-sm flex items-center" ]
                    [ -- Checkmark icon
                      svg
                        [ class "h-4 w-4 mr-1"
                        , viewBox "0 0 20 20"
                        , fill "currentColor"
                        ]
                        [ path
                            [ fillRule "evenodd"
                            , d "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                            , clipRule "evenodd"
                            ]
                            []
                        ]
                    , text "Email is available"
                    ]

            Invalid message ->
                div [ class "text-red-600 text-sm flex items-center" ]
                    [ -- X icon
                      svg
                        [ class "h-4 w-4 mr-1"
                        , viewBox "0 0 20 20"
                        , fill "currentColor"
                        ]
                        [ path
                            [ fillRule "evenodd"
                            , d "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            , clipRule "evenodd"
                            ]
                            []
                        ]
                    , text message
                    ]
        ]



-- HELPERS


updateNewAgentField : NewAgentForm -> String -> String -> NewAgentForm
updateNewAgentField form field value =
    case field of
        "firstName" ->
            { form | firstName = value }

        "lastName" ->
            { form | lastName = value }

        "email" ->
            { form | email = value }

        "phone" ->
            { form | phone = value }

        _ ->
            form


isFormValid : Model -> Bool
isFormValid model =
    let
        isEmailValid =
            model.emailStatus == Valid

        areNamesValid =
            not (String.isEmpty (String.trim model.newAgent.firstName))
                && not (String.isEmpty (String.trim model.newAgent.lastName))

        isPhoneValid =
            not (String.isEmpty (String.trim model.newAgent.phone))

        hasValidRole =
            model.newAgent.isAdmin || model.newAgent.isAgent
    in
    isEmailValid && areNamesValid && isPhoneValid && hasValidRole



-- API CALLS


fetchAgents : String -> Cmd Msg
fetchAgents orgSlug =
    Http.get
        { url = "/api/organizations/" ++ orgSlug ++ "/agents"
        , expect = Http.expectJson GotAgents (Decode.list agentDecoder)
        }


saveAgent : String -> NewAgentForm -> Cmd Msg
saveAgent orgSlug agent =
    Http.post
        { url = "/api/organizations/" ++ orgSlug ++ "/agents"
        , body = Http.jsonBody (encodeNewAgent agent)
        , expect = Http.expectWhatever AgentSaved
        }


checkAgentEmail : String -> String -> Cmd Msg
checkAgentEmail orgSlug email =
    Http.get
        { url = "/api/organizations/" ++ orgSlug ++ "/check-email/" ++ Url.percentEncode email
        , expect = Http.expectJson GotEmailResponse emailResponseDecoder
        }



-- DECODERS & ENCODERS


agentDecoder : Decode.Decoder Agent
agentDecoder =
    Decode.succeed Agent
        |> Pipeline.required "id" Decode.string
        |> Pipeline.required "firstName" Decode.string
        |> Pipeline.required "lastName" Decode.string
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "phone" Decode.string
        |> Pipeline.required "isAdmin" Decode.bool
        |> Pipeline.required "isAgent" Decode.bool


encodeNewAgent : NewAgentForm -> Encode.Value
encodeNewAgent agent =
    Encode.object
        [ ( "firstName", Encode.string agent.firstName )
        , ( "lastName", Encode.string agent.lastName )
        , ( "email", Encode.string agent.email )
        , ( "phone", Encode.string agent.phone )
        , ( "isAdmin", Encode.bool agent.isAdmin )
        , ( "isAgent", Encode.bool agent.isAgent )
        ]


emailResponseDecoder : Decode.Decoder EmailResponse
emailResponseDecoder =
    Decode.map2 EmailResponse
        (Decode.field "available" Decode.bool)
        (Decode.field "message" Decode.string)



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/backup/Steps/CompanyDetails.elm
================
module Onboarding.Steps.CompanyDetails exposing
    ( Model
    , Msg
    , OutMsg(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser.Navigation as Nav
import File exposing (File)
import File.Select as Select
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import Task



-- MODEL


type alias Model =
    { agencyName : String
    , website : String
    , phone : String
    , primaryColor : String
    , secondaryColor : String
    , logo : Maybe String
    , isLoading : Bool
    , error : Maybe String
    , key : Nav.Key
    , orgSlug : String
    , uploadingLogo : Bool
    , sessionToken : String
    , loadedFromSession : Bool
    }


init : Nav.Key -> String -> String -> ( Model, Cmd Msg )
init key orgSlug sessionToken =
    ( { agencyName = ""
      , website = ""
      , phone = ""
      , primaryColor = "#6B46C1"
      , secondaryColor = "#9F7AEA"
      , logo = Nothing
      , isLoading = True
      , error = Nothing
      , key = key
      , orgSlug = orgSlug
      , uploadingLogo = False
      , sessionToken = sessionToken
      , loadedFromSession = False
      }
    , fetchCompanyDetails orgSlug
    )



-- UPDATE


type Msg
    = UpdateAgencyName String
    | UpdateWebsite String
    | UpdatePhone String
    | UpdatePrimaryColor String
    | UpdateSecondaryColor String
    | UploadLogo
    | GotLogo File
    | GotLogoUrl String
    | LogoUploaded (Result Http.Error String)
    | NextStepClicked
    | SkipStepClicked
    | GotCompanyDetails (Result Http.Error CompanyDetailsResponse)
    | CompanyDetailsSaved (Result Http.Error ())
    | NoOp


type OutMsg
    = NoOutMsg
    | NextStep
    | ShowError String


type alias CompanyDetailsResponse =
    { agencyName : String
    , website : String
    , phone : String
    , primaryColor : String
    , secondaryColor : String
    , logo : Maybe String
    }


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        UpdateAgencyName value ->
            ( { model | agencyName = value }, Cmd.none, NoOutMsg )

        UpdateWebsite value ->
            ( { model | website = value }, Cmd.none, NoOutMsg )

        UpdatePhone value ->
            ( { model | phone = value }, Cmd.none, NoOutMsg )

        UpdatePrimaryColor value ->
            ( { model | primaryColor = value }, Cmd.none, NoOutMsg )

        UpdateSecondaryColor value ->
            ( { model | secondaryColor = value }, Cmd.none, NoOutMsg )

        UploadLogo ->
            ( model, Select.file [ "image/png", "image/jpeg" ] GotLogo, NoOutMsg )

        GotLogo file ->
            ( { model | uploadingLogo = True }, Task.perform GotLogoUrl (File.toUrl file), NoOutMsg )

        GotLogoUrl url ->
            ( { model | logo = Just url, uploadingLogo = False }, Cmd.none, NoOutMsg )

        LogoUploaded result ->
            case result of
                Ok url ->
                    ( { model | logo = Just url, uploadingLogo = False }, Cmd.none, NoOutMsg )

                Err _ ->
                    ( { model | error = Just "Failed to upload logo", uploadingLogo = False }
                    , Cmd.none
                    , ShowError "Failed to upload logo"
                    )

        NextStepClicked ->
            ( { model | isLoading = True }
            , saveCompanyDetails model
            , NoOutMsg
            )

        SkipStepClicked ->
            ( model, Cmd.none, NextStep )

        GotCompanyDetails result ->
            case result of
                Ok response ->
                    ( { model
                        | agencyName = response.agencyName
                        , website = response.website
                        , phone = response.phone
                        , primaryColor = response.primaryColor
                        , secondaryColor = response.secondaryColor
                        , logo = response.logo
                        , isLoading = False
                        , loadedFromSession = True
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model | isLoading = False }, Cmd.none, NoOutMsg )

        CompanyDetailsSaved result ->
            case result of
                Ok _ ->
                    ( { model | isLoading = False }
                    , Cmd.none
                    , NextStep
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to save company details"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to save company details"
                    )

        NoOp ->
            ( model, Cmd.none, NoOutMsg )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Company Details" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Tell us about your agency (all fields are optional)" ]
            , if model.loadedFromSession then
                p [ class "text-blue-600 mt-2 italic" ]
                    [ text "Your previously entered information has been loaded." ]

              else
                text ""
            ]
        , if model.isLoading then
            viewLoading

          else
            viewCompanyDetailsForm model
        ]


viewCompanyDetailsForm : Model -> Html Msg
viewCompanyDetailsForm model =
    div [ class "space-y-8" ]
        [ div [ class "bg-white shadow rounded-lg p-6" ]
            [ h2 [ class "text-lg font-medium mb-4" ] [ text "Agency Settings" ]
            , div [ class "space-y-6" ]
                [ div [ class "space-y-4" ]
                    [ viewFormGroup "Agency Name"
                        (input
                            [ type_ "text"
                            , class "w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                            , value model.agencyName
                            , onInput UpdateAgencyName
                            , placeholder "Enter your agency name"
                            ]
                            []
                        )
                    , viewFormGroup "Primary Color"
                        (div [ class "flex items-center space-x-4" ]
                            [ input
                                [ type_ "color"
                                , class "w-16 h-10 p-1 border border-gray-300 rounded"
                                , value model.primaryColor
                                , onInput UpdatePrimaryColor
                                ]
                                []
                            , input
                                [ type_ "text"
                                , class "flex-1 px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                                , value model.primaryColor
                                , onInput UpdatePrimaryColor
                                ]
                                []
                            ]
                        )
                    , viewFormGroup "Secondary Color"
                        (div [ class "flex items-center space-x-4" ]
                            [ input
                                [ type_ "color"
                                , class "w-16 h-10 p-1 border border-gray-300 rounded"
                                , value model.secondaryColor
                                , onInput UpdateSecondaryColor
                                ]
                                []
                            , input
                                [ type_ "text"
                                , class "flex-1 px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                                , value model.secondaryColor
                                , onInput UpdateSecondaryColor
                                ]
                                []
                            ]
                        )
                    , viewFormGroup "Logo"
                        (div [ class "flex items-center space-x-4" ]
                            [ case model.logo of
                                Just logoUrl ->
                                    div [ class "flex items-center space-x-4" ]
                                        [ img
                                            [ src logoUrl
                                            , class "h-16 w-16 object-contain border border-gray-200 rounded"
                                            ]
                                            []
                                        , button
                                            [ class "px-4 py-2 text-sm text-blue-600 hover:text-blue-800 border border-blue-200 rounded"
                                            , onClick UploadLogo
                                            , disabled model.uploadingLogo
                                            ]
                                            [ text "Change Logo" ]
                                        ]

                                Nothing ->
                                    if model.uploadingLogo then
                                        div [ class "flex items-center space-x-2" ]
                                            [ div [ class "animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-blue-500" ] []
                                            , text "Uploading..."
                                            ]

                                    else
                                        button
                                            [ class "px-4 py-2 text-sm text-blue-600 hover:text-blue-800 border border-blue-200 rounded"
                                            , onClick UploadLogo
                                            ]
                                            [ text "Upload Logo" ]
                            ]
                        )
                    ]
                ]
            ]
        , if model.error /= Nothing then
            div [ class "bg-red-100 border border-red-400 text-red-700 px-6 py-4 rounded" ]
                [ text (Maybe.withDefault "" model.error) ]

          else
            text ""
        , div [ class "flex justify-center mt-8" ]
            [ button
                [ class "px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                , onClick NextStepClicked
                , disabled model.isLoading
                ]
                [ if model.isLoading then
                    div [ class "flex items-center justify-center" ]
                        [ div [ class "animate-spin mr-2 h-4 w-4 border-t-2 border-b-2 border-white rounded-full" ] []
                        , text "Saving..."
                        ]

                  else
                    text "Continue"
                ]
            ]
        ]


viewFormGroup : String -> Html Msg -> Html Msg
viewFormGroup labelText content =
    div [ class "mb-4" ]
        [ label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text labelText ]
        , content
        ]


viewLoading : Html msg
viewLoading =
    div [ class "flex justify-center items-center py-12" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading..." ]
        ]



-- HELPERS


isFormValid : Model -> Bool
isFormValid model =
    -- Agency name is now optional as it will be auto-generated
    True



-- API CALLS


fetchCompanyDetails : String -> Cmd Msg
fetchCompanyDetails _ =
    Http.get
        { url = "/api/onboarding/settings"
        , expect = Http.expectJson GotCompanyDetails companyDetailsDecoder
        }


saveCompanyDetails : Model -> Cmd Msg
saveCompanyDetails model =
    let
        url =
            "/api/onboarding/company-details"
    in
    Http.request
        { method = "POST"
        , headers = [] -- The session token is in the cookies, no need to pass it
        , url = url
        , body = Http.jsonBody (encodeCompanyDetails model)
        , expect = Http.expectWhatever CompanyDetailsSaved
        , timeout = Nothing
        , tracker = Nothing
        }



-- DECODERS & ENCODERS


companyDetailsDecoder : Decode.Decoder CompanyDetailsResponse
companyDetailsDecoder =
    Decode.field "companyDetailsModel"
        (Decode.map6 CompanyDetailsResponse
            (Decode.field "agencyName" Decode.string)
            (Decode.field "website" Decode.string)
            (Decode.field "phone" Decode.string)
            (Decode.field "primaryColor" Decode.string)
            (Decode.field "secondaryColor" Decode.string)
            (Decode.field "logo" (Decode.nullable Decode.string))
        )


encodeCompanyDetails : Model -> Encode.Value
encodeCompanyDetails model =
    Encode.object
        [ ( "agencyName", Encode.string model.agencyName )
        , ( "website", Encode.string model.website )
        , ( "phone", Encode.string model.phone )
        , ( "primaryColor", Encode.string model.primaryColor )
        , ( "secondaryColor", Encode.string model.secondaryColor )
        , ( "logo", Maybe.withDefault Encode.null (Maybe.map Encode.string model.logo) )
        ]



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/backup/Steps/EnterpriseForm.elm
================
module Onboarding.Steps.EnterpriseForm exposing
    ( Model
    , Msg
    , OutMsg(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, viewBox)



-- MODEL


type alias Model =
    { companyName : String
    , contactName : String
    , email : String
    , phone : String
    , displayPhone : String
    , message : String
    , isSubmitting : Bool
    , isSubmitted : Bool
    , error : Maybe String
    , key : Nav.Key
    }


type Msg
    = UpdateCompanyName String
    | UpdateContactName String
    | UpdateEmail String
    | UpdatePhone String
    | UpdateMessage String
    | SubmitForm
    | SubmitSuccess
    | SubmitError String
    | BackToPlans


type OutMsg
    = NoOutMsg
    | BackToPlanSelection
    | ShowError String


init : Nav.Key -> ( Model, Cmd Msg )
init key =
    ( { companyName = ""
      , contactName = ""
      , email = ""
      , phone = ""
      , displayPhone = ""
      , message = ""
      , isSubmitting = False
      , isSubmitted = False
      , error = Nothing
      , key = key
      }
    , Cmd.none
    )



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        UpdateCompanyName value ->
            ( { model | companyName = value }
            , Cmd.none
            , NoOutMsg
            )

        UpdateContactName value ->
            ( { model | contactName = value }
            , Cmd.none
            , NoOutMsg
            )

        UpdateEmail value ->
            ( { model | email = value }
            , Cmd.none
            , NoOutMsg
            )

        UpdatePhone value ->
            let
                digitsOnly =
                    String.filter Char.isDigit value

                updatedPhone =
                    String.left 10 digitsOnly
            in
            ( { model
                | phone = updatedPhone
                , displayPhone = formatPhoneNumber updatedPhone
              }
            , Cmd.none
            , NoOutMsg
            )

        UpdateMessage value ->
            ( { model | message = value }
            , Cmd.none
            , NoOutMsg
            )

        SubmitForm ->
            if isFormValid model then
                ( { model | isSubmitting = True, error = Nothing }
                , submitEnterpriseForm model
                , NoOutMsg
                )

            else
                ( { model | error = Just "Please fill out all required fields" }
                , Cmd.none
                , NoOutMsg
                )

        SubmitSuccess ->
            ( { model | isSubmitted = True, isSubmitting = False }
            , Cmd.none
            , NoOutMsg
            )

        SubmitError errorMsg ->
            ( { model | error = Just errorMsg, isSubmitting = False }
            , Cmd.none
            , NoOutMsg
            )

        BackToPlans ->
            ( model
            , Cmd.none
            , BackToPlanSelection
            )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Enterprise Plan Inquiry" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Please provide your information and we'll contact you about our Enterprise plan options." ]
            ]
        , if model.isSubmitted then
            viewSuccess

          else
            viewForm model
        ]


viewSuccess : Html Msg
viewSuccess =
    div [ class "bg-green-50 border border-green-200 rounded-lg p-8 text-center" ]
        [ div [ class "mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4" ]
            [ -- Checkmark icon
              svg
                [ Svg.Attributes.class "h-6 w-6 text-green-600"
                , Svg.Attributes.viewBox "0 0 20 20"
                , Svg.Attributes.fill "currentColor"
                ]
                [ path
                    [ fillRule "evenodd"
                    , d "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                    , clipRule "evenodd"
                    ]
                    []
                ]
            ]
        , h3 [ class "text-lg font-medium text-gray-900 mb-2" ]
            [ text "Thank you for your interest!" ]
        , p [ class "text-gray-600" ]
            [ text "We've received your inquiry and will contact you soon to discuss our Enterprise plan options." ]
        , div [ class "mt-6" ]
            [ button
                [ class "px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                , onClick BackToPlans
                ]
                [ text "Back to Plans" ]
            ]
        ]


viewForm : Model -> Html Msg
viewForm model =
    let
        isValid =
            isFormValid model
    in
    Html.form [ onSubmit SubmitForm, class "bg-white rounded-lg shadow-sm p-6 space-y-6" ]
        [ -- Form error message
          case model.error of
            Just errorMsg ->
                div [ class "bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4" ]
                    [ text errorMsg ]

            Nothing ->
                text ""
        , -- Company Name
          div []
            [ label [ for "company-name", class "block text-sm font-medium text-gray-700 mb-1" ]
                [ text "Company Name *" ]
            , input
                [ type_ "text"
                , id "company-name"
                , class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                , value model.companyName
                , onInput UpdateCompanyName
                , placeholder "Enter your company name"
                , required True
                ]
                []
            ]
        , -- Contact Name
          div []
            [ label [ for "contact-name", class "block text-sm font-medium text-gray-700 mb-1" ]
                [ text "Contact Name *" ]
            , input
                [ type_ "text"
                , id "contact-name"
                , class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                , value model.contactName
                , onInput UpdateContactName
                , placeholder "Enter your full name"
                , required True
                ]
                []
            ]
        , -- Email
          div []
            [ label [ for "email", class "block text-sm font-medium text-gray-700 mb-1" ]
                [ text "Email *" ]
            , input
                [ type_ "email"
                , id "email"
                , class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                , value model.email
                , onInput UpdateEmail
                , placeholder "Enter your email address"
                , required True
                ]
                []
            , if not (String.isEmpty model.email) && not (isValidEmail model.email) then
                div [ class "text-red-500 text-sm mt-1" ]
                    [ text "Please enter a valid email address" ]

              else
                text ""
            ]
        , -- Phone
          div []
            [ label [ for "phone", class "block text-sm font-medium text-gray-700 mb-1" ]
                [ text "Phone *" ]
            , input
                [ type_ "tel"
                , id "phone"
                , class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                , value model.displayPhone
                , onInput UpdatePhone
                , placeholder "Enter your phone number"
                , required True
                ]
                []
            , if not (String.isEmpty model.phone) && not (isValidPhone model.phone) then
                div [ class "text-red-500 text-sm mt-1" ]
                    [ text "Please enter a valid 10-digit phone number" ]

              else
                text ""
            ]
        , -- Message
          div []
            [ label [ for "message", class "block text-sm font-medium text-gray-700 mb-1" ]
                [ text "Message" ]
            , textarea
                [ id "message"
                , class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                , value model.message
                , onInput UpdateMessage
                , placeholder "Tell us about your needs and requirements"
                , rows 4
                ]
                []
            ]
        , -- Submit button
          div [ class "flex items-center justify-between pt-4" ]
            [ button
                [ type_ "button"
                , class "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50"
                , onClick BackToPlans
                ]
                [ text "Back to Plans" ]
            , button
                [ type_ "submit"
                , class
                    ("px-4 py-2 text-sm font-medium text-white rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 "
                        ++ (if isValid then
                                "bg-blue-600 border border-transparent hover:bg-blue-700 focus:ring-blue-500"

                            else
                                "bg-gray-400 border border-transparent cursor-not-allowed"
                           )
                    )
                , disabled (not isValid || model.isSubmitting)
                ]
                [ if model.isSubmitting then
                    text "Submitting..."

                  else
                    text "Submit Inquiry"
                ]
            ]
        ]



-- HELPERS


isFormValid : Model -> Bool
isFormValid model =
    not (String.isEmpty (String.trim model.companyName))
        && not (String.isEmpty (String.trim model.contactName))
        && not (String.isEmpty (String.trim model.email))
        && isValidEmail model.email
        && not (String.isEmpty model.phone)
        && isValidPhone model.phone


isValidEmail : String -> Bool
isValidEmail email =
    let
        trimmedEmail =
            String.trim email
    in
    not (String.isEmpty trimmedEmail)
        && String.contains "@" trimmedEmail
        && String.contains "." trimmedEmail
        && not (String.startsWith "@" trimmedEmail)
        && not (String.endsWith "@" trimmedEmail)
        && not (String.endsWith "." trimmedEmail)
        && (String.indexes "@" trimmedEmail |> List.length)
        == 1


isValidPhone : String -> Bool
isValidPhone phone =
    let
        -- Remove all non-digit characters
        digits =
            String.filter Char.isDigit phone
    in
    String.length digits == 10


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    let
        digits =
            String.filter Char.isDigit phone
                |> String.left 10

        len =
            String.length digits
    in
    if len == 0 then
        ""

    else if len <= 3 then
        "(" ++ digits

    else if len <= 6 then
        "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

    else
        "("
            ++ String.left 3 digits
            ++ ") "
            ++ String.slice 3 6 digits
            ++ "-"
            ++ String.dropLeft 6 digits



-- API


submitEnterpriseForm : Model -> Cmd Msg
submitEnterpriseForm model =
    let
        body =
            Encode.object
                [ ( "companyName", Encode.string model.companyName )
                , ( "contactName", Encode.string model.contactName )
                , ( "email", Encode.string model.email )
                , ( "phone", Encode.string model.phone )
                , ( "message", Encode.string model.message )
                ]
    in
    Http.post
        { url = "/api/enterprise-inquiry"
        , body = Http.jsonBody body
        , expect = Http.expectJson handleSubmitResponse (Decode.field "success" Decode.bool)
        }


handleSubmitResponse : Result Http.Error Bool -> Msg
handleSubmitResponse result =
    case result of
        Ok True ->
            SubmitSuccess

        Ok False ->
            SubmitError "The server couldn't process your request. Please try again."

        Err httpError ->
            case httpError of
                Http.BadUrl _ ->
                    SubmitError "Invalid URL. Please contact support."

                Http.Timeout ->
                    SubmitError "Request timed out. Please check your connection and try again."

                Http.NetworkError ->
                    SubmitError "Network error. Please check your connection and try again."

                Http.BadStatus statusCode ->
                    SubmitError ("Server error: " ++ String.fromInt statusCode)

                Http.BadBody _ ->
                    SubmitError "Invalid response from server. Please try again."



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/backup/Steps/LicensingSettings.elm
================
module Onboarding.Steps.LicensingSettings exposing
    ( Model
    , Msg
    , OutMsg(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode



-- MODEL


type alias Model =
    { carrierContracts : List String
    , useSmartSendForGI : Bool
    , isLoading : Bool
    , error : Maybe String
    , key : Nav.Key
    , orgSlug : String
    , expandedSections : List String
    }


init : Nav.Key -> String -> ( Model, Cmd Msg )
init key orgSlug =
    ( { carrierContracts = []
      , useSmartSendForGI = True
      , isLoading = True
      , error = Nothing
      , key = key
      , orgSlug = orgSlug
      , expandedSections = [ "Carrier Contracts", "Guaranteed Issue Settings" ]
      }
    , fetchLicensingSettings orgSlug
    )



-- UPDATE


type Msg
    = AddCarrierContract String
    | RemoveCarrierContract String
    | ToggleSection String
    | ToggleAllCarriers Bool
    | ToggleSmartSendForGI Bool
    | NextStepClicked
    | GotLicensingSettings (Result Http.Error LicensingSettingsResponse)
    | LicensingSettingsSaved (Result Http.Error LicensingSettingsUpdateResponse)
    | NoOp


type OutMsg
    = NoOutMsg
    | NextStep
    | ShowError String


type alias LicensingSettingsResponse =
    { carrierContracts : List String
    , useSmartSendForGI : Bool
    }


type alias LicensingSettingsUpdateResponse =
    { success : Bool
    , message : String
    , isBasicPlan : Bool
    }


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        AddCarrierContract carrier ->
            let
                newModel =
                    if List.member carrier model.carrierContracts then
                        model

                    else
                        { model | carrierContracts = carrier :: model.carrierContracts }
            in
            ( newModel, Cmd.none, NoOutMsg )

        RemoveCarrierContract carrier ->
            let
                newModel =
                    { model | carrierContracts = List.filter (\x -> x /= carrier) model.carrierContracts }
            in
            ( newModel, Cmd.none, NoOutMsg )

        ToggleSection title ->
            let
                newExpandedSections =
                    if List.member title model.expandedSections then
                        List.filter ((/=) title) model.expandedSections

                    else
                        title :: model.expandedSections
            in
            ( { model | expandedSections = newExpandedSections }, Cmd.none, NoOutMsg )

        ToggleAllCarriers checked ->
            let
                newModel =
                    { model
                        | carrierContracts =
                            if checked then
                                allCarriers

                            else
                                []
                    }
            in
            ( newModel, Cmd.none, NoOutMsg )

        ToggleSmartSendForGI useSmartSend ->
            ( { model | useSmartSendForGI = useSmartSend }, Cmd.none, NoOutMsg )

        NextStepClicked ->
            if List.isEmpty model.carrierContracts then
                ( { model | error = Just "Please select at least one carrier contract" }
                , Cmd.none
                , ShowError "Please select at least one carrier contract"
                )

            else
                ( { model | isLoading = True }
                , saveLicensingSettings model
                , NoOutMsg
                )

        GotLicensingSettings result ->
            case result of
                Ok response ->
                    ( { model
                        | carrierContracts = response.carrierContracts
                        , useSmartSendForGI = response.useSmartSendForGI
                        , isLoading = False
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err error ->
                    ( { model
                        | error = Just "Failed to load licensing settings"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to load licensing settings"
                    )

        LicensingSettingsSaved result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model | isLoading = False }
                        , Cmd.none
                        , NextStep
                        )

                    else
                        ( { model
                            | error = Just response.message
                            , isLoading = False
                          }
                        , Cmd.none
                        , ShowError response.message
                        )

                Err error ->
                    ( { model
                        | error = Just "Failed to save licensing settings"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to save licensing settings"
                    )

        NoOp ->
            ( model, Cmd.none, NoOutMsg )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Licensing & Carriers" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Configure your carrier contracts" ]
            ]
        , if model.isLoading && List.isEmpty model.carrierContracts then
            viewLoading

          else
            div [ class "space-y-6" ]
                [ viewExpandableSection "Carrier Contracts"
                    (viewCarriersGrid model)
                    model.expandedSections
                , viewGISettings model
                , if model.error /= Nothing then
                    div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , div [ class "flex justify-center" ]
                    [ button
                        [ class "px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        , onClick NextStepClicked
                        , disabled (List.isEmpty model.carrierContracts || model.isLoading)
                        , title
                            (if List.isEmpty model.carrierContracts then
                                "Please select at least one carrier contract"

                             else
                                ""
                            )
                        ]
                        [ if model.isLoading then
                            div [ class "flex items-center justify-center" ]
                                [ div [ class "animate-spin mr-2 h-4 w-4 border-t-2 border-b-2 border-white rounded-full" ] []
                                , text "Saving..."
                                ]

                          else
                            text "Continue"
                        ]
                    ]
                ]
        ]


viewLoading : Html msg
viewLoading =
    div [ class "text-center py-12" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading..." ]
        ]


viewExpandableSection : String -> Html Msg -> List String -> Html Msg
viewExpandableSection title content expandedSections =
    let
        isExpanded =
            List.member title expandedSections
    in
    div [ class "bg-white shadow rounded-lg overflow-hidden" ]
        [ button
            [ class "w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50"
            , onClick (ToggleSection title)
            ]
            [ h2 [ class "text-lg font-medium" ] [ text title ]
            , div
                [ class "transform transition-transform"
                , classList [ ( "rotate-180", isExpanded ) ]
                ]
                [ text "▼" ]
            ]
        , div
            [ class "px-6 pb-6"
            , classList [ ( "hidden", not isExpanded ) ]
            ]
            [ content ]
        ]


viewCarriersGrid : Model -> Html Msg
viewCarriersGrid model =
    div []
        [ div [ class "mb-4 flex items-center" ]
            [ checkbox "Select All Carriers"
                (List.length model.carrierContracts == List.length allCarriers)
                ToggleAllCarriers
            ]
        , div [ class "grid grid-cols-2 sm:grid-cols-3 gap-4" ]
            (List.map
                (\carrier ->
                    checkbox carrier
                        (List.member carrier model.carrierContracts)
                        (\checked ->
                            if checked then
                                AddCarrierContract carrier

                            else
                                RemoveCarrierContract carrier
                        )
                )
                allCarriers
            )
        ]


viewGISettings : Model -> Html Msg
viewGISettings model =
    div [ class "bg-white shadow rounded-lg overflow-hidden" ]
        [ div [ class "px-6 py-4 border-b border-gray-200" ]
            [ h2 [ class "text-lg font-medium" ] [ text "Guaranteed Issue Settings" ]
            ]
        , div [ class "p-6 space-y-6" ]
            [ div [ class "mb-4 p-4 bg-blue-50 border border-blue-100 rounded-md" ]
                [ div [ class "flex items-start" ]
                    [ div [ class "flex items-center h-5" ]
                        [ input
                            [ type_ "checkbox"
                            , checked model.useSmartSendForGI
                            , onCheck ToggleSmartSendForGI
                            , class "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            ]
                            []
                        ]
                    , div [ class "ml-3 text-sm" ]
                        [ label [ class "font-medium text-gray-700" ]
                            [ text "Use SmartSend for Guaranteed Issue" ]
                        , p [ class "text-gray-500 mt-1" ]
                            [ text "When enabled, SmartSend will automatically identify which carrier combinations offer full compensation for Guaranteed Issue (GI) policies." ]
                        ]
                    ]
                ]
            , div [ class "mt-4 p-4 bg-gray-50 rounded-md" ]
                [ h3 [ class "text-lg font-medium text-gray-900 mb-2" ]
                    [ text "How SmartSend Works" ]
                , p [ class "text-gray-600" ]
                    [ text "SmartSend analyzes each carrier to determine which ones offer full carrier compensation for Guaranteed Issue policies. This helps maximize your commissions while ensuring your quotes are always compliant with the latest carrier regulations." ]
                ]
            ]
        ]


checkbox : String -> Bool -> (Bool -> msg) -> Html msg
checkbox labelText isChecked onToggle =
    Html.label [ class "flex items-center space-x-3" ]
        [ input
            [ type_ "checkbox"
            , checked isChecked
            , onCheck onToggle
            , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
            ]
            []
        , span [ class "text-gray-700" ] [ text labelText ]
        ]


th : List (Attribute msg) -> List (Html msg) -> Html msg
th attributes children =
    Html.th attributes children


td : List (Attribute msg) -> List (Html msg) -> Html msg
td attributes children =
    Html.td attributes children



-- HELPERS
-- API CALLS


fetchLicensingSettings : String -> Cmd Msg
fetchLicensingSettings _ =
    Http.get
        { url = "/api/onboarding/settings"
        , expect = Http.expectJson GotLicensingSettings licensingSettingsDecoder
        }


saveLicensingSettings : Model -> Cmd Msg
saveLicensingSettings model =
    Http.post
        { url = "/api/onboarding/licensing-settings"
        , body = Http.jsonBody (encodeLicensingSettings model)
        , expect = Http.expectJson LicensingSettingsSaved licensingSettingsUpdateResponseDecoder
        }



-- DECODERS & ENCODERS


licensingSettingsDecoder : Decode.Decoder LicensingSettingsResponse
licensingSettingsDecoder =
    Decode.field "licensingSettingsModel"
        (Decode.succeed LicensingSettingsResponse
            |> Pipeline.required "carrierContracts" (Decode.list Decode.string)
            |> Pipeline.required "useSmartSendForGI" Decode.bool
        )


licensingSettingsUpdateResponseDecoder : Decode.Decoder LicensingSettingsUpdateResponse
licensingSettingsUpdateResponseDecoder =
    Decode.succeed LicensingSettingsUpdateResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "message" Decode.string
        |> Pipeline.required "isBasicPlan" Decode.bool


encodeLicensingSettings : Model -> Encode.Value
encodeLicensingSettings model =
    Encode.object
        [ ( "carrierContracts", Encode.list Encode.string model.carrierContracts )
        , ( "useSmartSendForGI", Encode.bool model.useSmartSendForGI )
        ]



-- CONSTANTS


allCarriers : List String
allCarriers =
    [ "Aetna"
    , "Humana"
    , "UnitedHealthcare"
    , "Cigna"
    , "Aflac"
    , "Allstate"
    , "Mutual of Omaha"
    , "Ace Chubb"
    ]



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/backup/Steps/Payment.elm
================
module Onboarding.Steps.Payment exposing
    ( Model
    , Msg
    , OutMsg(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Url
import Url.Builder as UrlBuilder



-- MODEL


type alias Model =
    { isLoading : Bool
    , error : Maybe String
    , key : Nav.Key
    , orgSlug : String
    , subscriptionDetails : Maybe SubscriptionDetails
    , processingPayment : Bool
    , email : String
    }


type alias SubscriptionDetails =
    { planName : String
    , planPrice : String
    , extraAgents : Int
    , extraAgentsCost : Int
    , extraContacts : Int
    , extraContactsCost : Int
    , totalPrice : String
    , isTrial : Bool
    , trialEndsAt : Maybe String
    }


init : Nav.Key -> String -> ( Model, Cmd Msg )
init key orgSlug =
    ( { isLoading = False
      , error = Nothing
      , key = key
      , orgSlug = orgSlug
      , subscriptionDetails =
            Just
                { planName = "Your Selected Plan"
                , planPrice = "$29/mo"
                , extraAgents = 0
                , extraAgentsCost = 0
                , extraContacts = 0
                , extraContactsCost = 0
                , totalPrice = "$29/mo"
                , isTrial = True
                , trialEndsAt = Just "30 days after signup"
                }
      , processingPayment = False
      , email = ""
      }
    , fetchUserEmail
    )



-- UPDATE


type Msg
    = CompleteOnboarding
    | ProcessPayment
    | GotSubscriptionDetails (Result Http.Error SubscriptionDetails)
    | PaymentProcessed (Result Http.Error String)
    | OnboardingCompleted (Result Http.Error ())
    | GotUserEmail (Result Http.Error String)
    | NoOp


type OutMsg
    = NoOutMsg
    | Completed
    | ShowError String
    | NavigateToWalkthrough


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        CompleteOnboarding ->
            ( { model | processingPayment = True }
            , completeOnboarding model.orgSlug
            , NoOutMsg
            )

        ProcessPayment ->
            ( { model | processingPayment = True }
            , createStripeCheckoutSession model.orgSlug
            , NoOutMsg
            )

        GotSubscriptionDetails result ->
            case result of
                Ok details ->
                    ( { model
                        | subscriptionDetails = Just details
                        , isLoading = False
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to load subscription details"
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError "Failed to load subscription details"
                    )

        PaymentProcessed result ->
            case result of
                Ok sessionId ->
                    -- Redirect to Stripe checkout
                    ( { model | processingPayment = False }
                    , redirectToStripeCheckout sessionId
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to process payment"
                        , processingPayment = False
                      }
                    , Cmd.none
                    , ShowError "Failed to process payment"
                    )

        GotUserEmail result ->
            case result of
                Ok email ->
                    ( { model | email = email }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    -- If we can't get the email, just continue without it
                    ( model, Cmd.none, NoOutMsg )

        OnboardingCompleted result ->
            case result of
                Ok _ ->
                    -- Directly navigate to walkthrough, bypassing login
                    ( { model | isLoading = False, processingPayment = False }
                    , Nav.load "/walkthrough"
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to complete onboarding"
                        , isLoading = False
                        , processingPayment = False
                      }
                    , Cmd.none
                    , ShowError "Failed to complete onboarding"
                    )

        NoOp ->
            ( model, Cmd.none, NoOutMsg )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Complete Your Account Setup" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "You're almost done! Click 'Continue to Walkthrough' to finish the onboarding process." ]
            ]
        , div [ class "bg-white shadow rounded-lg p-6" ]
            [ div [ class "text-center space-y-6" ]
                [ div [ class "mb-4 text-green-500 text-6xl" ]
                    [ text "✓" ]
                , h2 [ class "text-xl font-medium text-gray-900" ]
                    [ text "All Set!" ]
                , p [ class "text-gray-600" ]
                    [ text "Your account is ready to be created with the details you've provided." ]
                , div [ class "mt-6" ]
                    [ button
                        [ class "px-8 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        , onClick CompleteOnboarding
                        , disabled model.processingPayment
                        ]
                        [ if model.processingPayment then
                            div [ class "flex items-center justify-center" ]
                                [ div [ class "mr-2 animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white" ] []
                                , text "Finalizing your account... You'll be redirected to login shortly."
                                ]

                          else
                            text "Continue to Walkthrough"
                        ]
                    ]
                ]
            ]
        , if model.error /= Nothing then
            div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                [ text (Maybe.withDefault "" model.error) ]

          else
            text ""
        ]


viewLoading : Html msg
viewLoading =
    div [ class "text-center py-12" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading..." ]
        ]


viewSubscriptionSummary : Model -> Html Msg
viewSubscriptionSummary model =
    case model.subscriptionDetails of
        Just details ->
            div [ class "bg-white shadow rounded-lg overflow-hidden" ]
                [ div [ class "px-6 py-4 border-b border-gray-200" ]
                    [ h2 [ class "text-lg font-medium text-gray-900" ]
                        [ text "Subscription Summary" ]
                    ]
                , div [ class "px-6 py-4" ]
                    [ div [ class "space-y-4" ]
                        [ div [ class "flex justify-between" ]
                            [ span [ class "text-gray-600" ] [ text "Plan" ]
                            , span [ class "font-medium" ] [ text details.planName ]
                            ]
                        , div [ class "flex justify-between" ]
                            [ span [ class "text-gray-600" ] [ text "Base Price" ]
                            , span [ class "font-medium" ] [ text details.planPrice ]
                            ]
                        , if details.extraAgents > 0 then
                            div [ class "flex justify-between" ]
                                [ span [ class "text-gray-600" ]
                                    [ text ("Extra Agents (" ++ String.fromInt details.extraAgents ++ ")") ]
                                , span [ class "font-medium" ]
                                    [ text ("$" ++ String.fromInt details.extraAgentsCost) ]
                                ]

                          else
                            text ""
                        , if details.extraContacts > 0 then
                            div [ class "flex justify-between" ]
                                [ span [ class "text-gray-600" ]
                                    [ text ("Extra Contacts (" ++ String.fromInt details.extraContacts ++ ")") ]
                                , span [ class "font-medium" ]
                                    [ text ("$" ++ String.fromInt details.extraContactsCost) ]
                                ]

                          else
                            text ""
                        , div [ class "pt-4 border-t border-gray-200 flex justify-between" ]
                            [ span [ class "font-medium text-gray-900" ] [ text "Total" ]
                            , span [ class "font-bold text-gray-900" ] [ text details.totalPrice ]
                            ]
                        ]
                    ]
                , if details.isTrial then
                    div [ class "px-6 py-4 bg-blue-50 border-t border-blue-100" ]
                        [ div [ class "flex items-start" ]
                            [ div [ class "flex-shrink-0 pt-0.5" ]
                                [ span [ class "text-blue-500 text-lg" ] [ text "ℹ" ]
                                ]
                            , div [ class "ml-3" ]
                                [ h3 [ class "text-sm font-medium text-blue-800" ]
                                    [ text "Free Trial" ]
                                , div [ class "mt-2 text-sm text-blue-700" ]
                                    [ p []
                                        [ text
                                            (case details.trialEndsAt of
                                                Just date ->
                                                    "Your free trial will end on " ++ date ++ ". No payment is required today."

                                                Nothing ->
                                                    "You're starting with a free trial. No payment is required today."
                                            )
                                        ]
                                    ]
                                ]
                            ]
                        ]

                  else
                    text ""
                ]

        Nothing ->
            div [ class "bg-gray-100 p-6 rounded-lg text-center" ]
                [ text "No subscription details available" ]



-- API CALLS


fetchSubscriptionDetails : String -> Cmd Msg
fetchSubscriptionDetails orgSlug =
    Http.get
        { url = "/api/organizations/" ++ orgSlug ++ "/subscription-details"
        , expect = Http.expectJson GotSubscriptionDetails subscriptionDetailsDecoder
        }


createStripeCheckoutSession : String -> Cmd Msg
createStripeCheckoutSession orgSlug =
    Http.post
        { url = "/api/organizations/" ++ orgSlug ++ "/create-checkout-session"
        , body = Http.jsonBody (encodeCheckoutRequest orgSlug)
        , expect = Http.expectJson PaymentProcessed Decode.string
        }


redirectToStripeCheckout : String -> Cmd Msg
redirectToStripeCheckout sessionId =
    Nav.load ("/api/stripe/redirect-to-checkout?session_id=" ++ sessionId)


completeOnboarding : String -> Cmd Msg
completeOnboarding orgSlug =
    Http.post
        { url = "/api/onboarding/complete"
        , body = Http.emptyBody
        , expect = Http.expectWhatever OnboardingCompleted
        }



-- DECODERS & ENCODERS


subscriptionDetailsDecoder : Decode.Decoder SubscriptionDetails
subscriptionDetailsDecoder =
    Decode.succeed SubscriptionDetails
        |> Pipeline.required "planName" Decode.string
        |> Pipeline.required "planPrice" Decode.string
        |> Pipeline.required "extraAgents" Decode.int
        |> Pipeline.required "extraAgentsCost" Decode.int
        |> Pipeline.required "extraContacts" Decode.int
        |> Pipeline.required "extraContactsCost" Decode.int
        |> Pipeline.required "totalPrice" Decode.string
        |> Pipeline.required "isTrial" Decode.bool
        |> Pipeline.required "trialEndsAt" (Decode.nullable Decode.string)


encodeCheckoutRequest : String -> Encode.Value
encodeCheckoutRequest orgSlug =
    Encode.object
        [ ( "orgSlug", Encode.string orgSlug )
        ]



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none



-- New function to fetch user email


fetchUserEmail : Cmd Msg
fetchUserEmail =
    Http.get
        { url = "/api/onboarding/user-details"
        , expect = Http.expectJson GotUserEmail userEmailDecoder
        }



-- New decoder for user email


userEmailDecoder : Decode.Decoder String
userEmailDecoder =
    Decode.field "email" Decode.string

================
File: frontend/backup/Steps/PlanSelection.elm
================
module Onboarding.Steps.PlanSelection exposing
    ( Model
    , Msg(..)
    , OutMsg(..)
    , fetchSubscriptionTiers
    , init
    , initWithFetch
    , initWithSavedState
    , subscriptions
    , update
    , view
    )

import Basics
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder, field)
import Json.Encode as Encode
import Process
import Task



-- MODEL


type alias SubscriptionTier =
    { id : String
    , name : String
    , price : String
    , agentLimit : Int
    , contactLimit : Int
    , features : List String
    }


type alias Model =
    { selectedPlan : Maybe String
    , extraAgents : Int
    , extraContacts : Int
    , tiers : List SubscriptionTier
    , isLoading : Bool
    , error : Maybe String
    , key : Nav.Key
    , orgSlug : String
    , session : String
    , loadedFromSession : Bool
    }


init : Nav.Key -> String -> String -> ( Model, Cmd Msg )
init key orgSlug session =
    initWithFetch key orgSlug session True



-- Add a version that allows controlling whether to fetch tiers


initWithFetch : Nav.Key -> String -> String -> Bool -> ( Model, Cmd Msg )
initWithFetch key orgSlug session shouldFetchTiers =
    ( { selectedPlan = Nothing
      , extraAgents = 0
      , extraContacts = 0
      , tiers = []
      , isLoading = shouldFetchTiers
      , error = Nothing
      , key = key
      , orgSlug = orgSlug
      , session = session
      , loadedFromSession = False
      }
    , if shouldFetchTiers then
        Cmd.batch
            [ fetchSubscriptionTiers
            , -- Also check if we have a plan type in localStorage
              checkSessionForPlan key orgSlug session
            , -- Add a timeout to clear loading state after 2 seconds (reduced from 5)
              Process.sleep 2000
                |> Task.perform (\_ -> LoadingTimeout)
            ]

      else
        Cmd.none
    )



-- Initialize with saved state from session


initWithSavedState : Nav.Key -> String -> String -> String -> ( Model, Cmd Msg )
initWithSavedState key orgSlug session savedPlan =
    let
        initialModel =
            { selectedPlan = Just savedPlan
            , extraAgents = 0 -- We could load these from session too if needed
            , extraContacts = 0
            , tiers = []
            , isLoading = True
            , error = Nothing
            , key = key
            , orgSlug = orgSlug
            , session = session
            , loadedFromSession = True
            }
    in
    ( initialModel
    , fetchSubscriptionTiers
    )



-- UPDATE


type Msg
    = SelectPlan String
    | SetExtraAgents String
    | SetExtraContacts String
    | GotTiers (Result Http.Error (List SubscriptionTier))
    | NextStepClicked
    | LoadingTimeout
    | OnboardingInitialized (Result Http.Error { organizationId : Int, slug : String, sessionToken : String, onboardingStep : Int, planType : String })
    | LoadPlanFromSession String
    | NoOp


type OutMsg
    = NoOutMsg
    | SelectedPlan String
    | NextStep
    | OnboardingInitializedSuccess { organizationId : Int, slug : String, sessionToken : String, onboardingStep : Int, planType : String }
    | ShowError String


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        SelectPlan planId ->
            ( { model | selectedPlan = Just planId }
            , Cmd.none
            , SelectedPlan planId
            )

        SetExtraAgents value ->
            let
                extraAgents =
                    String.toInt value |> Maybe.withDefault 0
            in
            ( { model | extraAgents = extraAgents }
            , Cmd.none
            , NoOutMsg
            )

        SetExtraContacts value ->
            let
                extraContacts =
                    String.toInt value |> Maybe.withDefault 0
            in
            ( { model | extraContacts = extraContacts }
            , Cmd.none
            , NoOutMsg
            )

        GotTiers result ->
            case result of
                Ok tiers ->
                    ( { model | tiers = tiers, isLoading = False }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    ( { model | isLoading = False }
                    , Cmd.none
                    , NoOutMsg
                    )

        OnboardingInitialized result ->
            case result of
                Ok response ->
                    ( { model | isLoading = False }
                    , Cmd.none
                    , OnboardingInitializedSuccess response
                    )

                Err error ->
                    let
                        errorMsg =
                            case error of
                                Http.BadUrl url ->
                                    "Bad URL: " ++ url

                                Http.Timeout ->
                                    "Request timed out"

                                Http.NetworkError ->
                                    "Network error"

                                Http.BadStatus code ->
                                    "Bad status: " ++ String.fromInt code

                                Http.BadBody message ->
                                    "Onboarding initialized successfully, but there was an issue with the response format. Continuing..."
                    in
                    -- Check for the specific error case without using Debug
                    case error of
                        Http.BadBody message ->
                            if String.contains "planType" message then
                                -- This is the specific error we're looking for - missing planType field
                                ( { model | isLoading = False }
                                , Cmd.none
                                , NextStep
                                )

                            else
                                ( { model | error = Just errorMsg, isLoading = False }
                                , Cmd.none
                                , ShowError errorMsg
                                )

                        -- For all other error types, show the error message
                        _ ->
                            ( { model | error = Just errorMsg, isLoading = False }
                            , Cmd.none
                            , ShowError errorMsg
                            )

        LoadPlanFromSession planType ->
            -- Handle loading a plan selection from the session
            ( { model | selectedPlan = Just planType, loadedFromSession = True }
            , Cmd.none
            , NoOutMsg
            )

        NextStepClicked ->
            case model.selectedPlan of
                Just planId ->
                    if planId == "enterprise" then
                        -- For Enterprise, redirect to the Enterprise form
                        ( model
                        , Cmd.none
                        , SelectedPlan "enterprise"
                        )

                    else
                        -- Initialize onboarding with selected plan
                        ( { model | isLoading = True }
                        , initializeOnboarding planId
                        , NextStep
                        )

                Nothing ->
                    ( { model | error = Just "Please select a plan" }
                    , Cmd.none
                    , ShowError "Please select a plan"
                    )

        LoadingTimeout ->
            -- If we're still loading after the timeout, clear the loading state
            if model.isLoading then
                ( { model | isLoading = False }
                , Cmd.none
                , NoOutMsg
                )

            else
                ( model, Cmd.none, NoOutMsg )

        NoOp ->
            ( model, Cmd.none, NoOutMsg )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8 max-w-5xl mx-auto px-4 -ml-24" ]
        [ div [ class "mb-8 text-center" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Choose your plan" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Select a plan that best fits your organization's needs" ]
            , if model.loadedFromSession && model.selectedPlan /= Nothing then
                p [ class "text-blue-600 mt-2 italic" ]
                    [ text "Your previously selected plan has been loaded." ]

              else
                text ""
            ]
        , if model.isLoading && List.isEmpty model.tiers then
            viewLoading

          else
            div [ class "flex flex-col items-center" ]
                [ div [ class "grid grid-cols-1 md:grid-cols-3 gap-6 w-full" ]
                    (if List.isEmpty model.tiers then
                        -- Fallback to hardcoded plans if no tiers available
                        [ viewPlanOption
                            "basic"
                            "Solo"
                            "$29/mo"
                            [ "1 Agent Seat"
                            , "Up to 1,000 Clients"
                            , "Analytics Dashboard"
                            , "Quote Tool"
                            , "Customizable Booking Options"
                            , "Access to our Smart Send Technology"
                            ]
                            1
                            1000
                            model.selectedPlan
                        , viewPlanOption
                            "pro"
                            "Agency / Solo+"
                            "$99/mo"
                            [ "Everything in the Solo package plus:"
                            , "5+ Agent Seats"
                            , "5,000+ Clients"
                            , "Admin and Organization Settings"
                            , "Organization Wide Analytics"
                            ]
                            5
                            5000
                            model.selectedPlan
                        , viewPlanOption
                            "enterprise"
                            "Enterprise"
                            "Contact Us"
                            [ "Everything in Solo & Agency Packages"
                            , "10+ Agent Seats"
                            , "Unlimited Clients"
                            , "24/7 Platform Support"
                            , "White-Labeled Quote Tool and Dashboard"
                            ]
                            -1
                            -1
                            model.selectedPlan
                        ]

                     else
                        List.map
                            (\tier ->
                                viewPlanOption
                                    tier.id
                                    tier.name
                                    tier.price
                                    tier.features
                                    tier.agentLimit
                                    tier.contactLimit
                                    model.selectedPlan
                            )
                            model.tiers
                    )
                , if canAddExtraResources model.selectedPlan then
                    div [ class "w-full mt-8" ]
                        [ viewExtraResources model ]

                  else
                    text ""
                , if model.error /= Nothing then
                    div [ class "mt-4 text-red-500" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , div [ class "mt-8 flex justify-center" ]
                    [ button
                        [ class
                            ("px-6 py-3 rounded-lg transition-colors duration-200 "
                                ++ (if model.selectedPlan == Nothing then
                                        "bg-[#2563EB]/50 cursor-not-allowed text-white"

                                    else
                                        "bg-[#2563EB] hover:bg-[#1D4ED8] text-white"
                                   )
                            )
                        , onClick NextStepClicked
                        , disabled (model.selectedPlan == Nothing)
                        ]
                        [ text "Continue" ]
                    ]
                ]
        ]


viewLoading : Html msg
viewLoading =
    div [ class "flex flex-col items-center justify-center py-12" ]
        [ div [ class "animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading subscription tiers..." ]
        ]


viewPlanOption : String -> String -> String -> List String -> Int -> Int -> Maybe String -> Html Msg
viewPlanOption id name price features agentLimit contactLimit selectedPlan =
    div
        [ class
            ("p-6 rounded-lg cursor-pointer transition-all h-full flex flex-col min-h-[500px] "
                ++ (if Just id == selectedPlan then
                        "bg-[#2563EB]/10 ring-2 ring-[#2563EB]"

                    else
                        "bg-gray-50 hover:bg-gray-100 border border-gray-200"
                   )
            )
        , onClick (SelectPlan id)
        ]
        [ div [ class "flex-1 flex flex-col" ]
            [ div [ class "mb-4" ]
                [ h3 [ class "text-xl font-semibold text-gray-900" ] [ text name ]
                , p [ class "text-3xl font-bold text-gray-900 mt-2" ]
                    [ text
                        (if id == "enterprise" then
                            "Contact Us"

                         else
                            price
                        )
                    ]
                ]
            , div [ class "space-y-2 py-4 border-t border-b border-gray-200 mb-4" ]
                [ if id /= "enterprise" then
                    div [ class "text-gray-600" ]
                        [ text
                            (if id == "pro" then
                                "5+ agent seats"

                             else if agentLimit == -1 then
                                "Unlimited agent seats"

                             else if agentLimit == 1 then
                                "1 agent seat"

                             else
                                "Up to " ++ String.fromInt agentLimit ++ " agent seats"
                            )
                        ]

                  else
                    div [ class "text-gray-600" ]
                        [ text "Custom agent seats" ]
                , if id /= "enterprise" then
                    div [ class "text-gray-600" ]
                        [ text
                            (if id == "pro" then
                                "5,000+ clients"

                             else if contactLimit == -1 then
                                "Unlimited clients"

                             else if contactLimit == 1000 then
                                "1,000 clients"

                             else
                                "Up to " ++ String.fromInt contactLimit ++ " clients"
                            )
                        ]

                  else
                    div [ class "text-gray-600" ]
                        [ text "Unlimited clients" ]
                ]
            , div [ class "mt-auto" ]
                [ p [ class "text-sm font-medium text-gray-900 mb-2" ] [ text "Features:" ]
                , ul [ class "space-y-2" ]
                    (List.map
                        (\feature ->
                            li [ class "flex items-start text-sm text-gray-600" ]
                                [ span [ class "text-[#059669] mr-2 flex-shrink-0 mt-0.5" ] [ text "✓" ]
                                , span [ class "leading-relaxed" ] [ text feature ]
                                ]
                        )
                        features
                    )
                ]
            ]
        ]


viewExtraResources : Model -> Html Msg
viewExtraResources model =
    div [ class "p-6 bg-gray-50 rounded-lg border border-gray-200 w-full" ]
        [ h3 [ class "text-lg font-semibold text-gray-900 mb-4 text-center" ]
            [ text "Additional Resources" ]
        , div [ class "grid grid-cols-1 md:grid-cols-2 gap-6" ]
            [ div [ class "space-y-2" ]
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "Extra Agents" ]
                , p [ class "text-xs text-gray-500" ]
                    [ text "Add more agent seats beyond your plan's included limit ($20/agent seat/month)" ]
                , div [ class "flex items-center" ]
                    [ button
                        [ class "bg-gray-200 px-3 py-1 rounded-l-md hover:bg-gray-300"
                        , onClick (SetExtraAgents (String.fromInt (Basics.max 0 (model.extraAgents - 1))))
                        ]
                        [ text "-" ]
                    , input
                        [ type_ "number"
                        , class "w-16 text-center border-y border-gray-200 py-1"
                        , value (String.fromInt model.extraAgents)
                        , onInput SetExtraAgents
                        ]
                        []
                    , button
                        [ class "bg-gray-200 px-3 py-1 rounded-r-md hover:bg-gray-300"
                        , onClick (SetExtraAgents (String.fromInt (model.extraAgents + 1)))
                        ]
                        [ text "+" ]
                    , span [ class "ml-2 text-sm font-medium" ]
                        [ text ("$" ++ String.fromInt (model.extraAgents * 20) ++ "/mo") ]
                    ]
                ]
            , div [ class "space-y-2" ]
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "Extra Clients" ]
                , p [ class "text-xs text-gray-500" ]
                    [ text "Add more clients beyond your plan's included limit ($50/5,000 clients/month)" ]
                , div [ class "flex items-center" ]
                    [ button
                        [ class "bg-gray-200 px-3 py-1 rounded-l-md hover:bg-gray-300"
                        , onClick (SetExtraContacts (String.fromInt (Basics.max 0 (model.extraContacts - 5000))))
                        ]
                        [ text "-" ]
                    , input
                        [ type_ "number"
                        , class "w-20 text-center border-y border-gray-200 py-1"
                        , value (String.fromInt model.extraContacts)
                        , onInput SetExtraContacts
                        , Html.Attributes.step "5000"
                        ]
                        []
                    , button
                        [ class "bg-gray-200 px-3 py-1 rounded-r-md hover:bg-gray-300"
                        , onClick (SetExtraContacts (String.fromInt (model.extraContacts + 5000)))
                        ]
                        [ text "+" ]
                    , span [ class "ml-2 text-sm font-medium" ]
                        [ text ("$" ++ String.fromInt (model.extraContacts // 5000 * 50) ++ "/mo") ]
                    ]
                ]
            ]
        ]



-- HELPERS


canAddExtraResources : Maybe String -> Bool
canAddExtraResources selectedPlan =
    case selectedPlan of
        Just plan ->
            plan == "pro"

        Nothing ->
            False



-- API CALLS


fetchSubscriptionTiers : Cmd Msg
fetchSubscriptionTiers =
    Http.get
        { url = "/api/organizations/subscription-tiers"
        , expect = Http.expectJson GotTiers subscriptionTiersDecoder
        }


initializeOnboarding : String -> Cmd Msg
initializeOnboarding planType =
    let
        url =
            "/api/onboarding/initialize"

        body =
            Encode.object
                [ ( "planType", Encode.string planType )
                , ( "organizationName", Encode.string "New Medicare Agency" )
                ]
                |> Http.jsonBody

        decoder =
            Decode.map5
                (\organizationId slug sessionToken onboardingStep planTypeValue ->
                    { organizationId = organizationId
                    , slug = slug
                    , sessionToken = sessionToken
                    , onboardingStep = onboardingStep
                    , planType = planTypeValue
                    }
                )
                (Decode.field "organizationId" Decode.int)
                (Decode.field "slug" Decode.string)
                (Decode.field "sessionToken" Decode.string)
                (Decode.field "onboardingStep" Decode.int)
                (Decode.oneOf
                    [ Decode.field "planType" Decode.string
                    , Decode.succeed planType -- Default to the planType we sent in the request
                    ]
                )
    in
    Http.post
        { url = url
        , body = body
        , expect = Http.expectJson OnboardingInitialized decoder
        }



-- DECODERS & ENCODERS


subscriptionTiersDecoder : Decoder (List SubscriptionTier)
subscriptionTiersDecoder =
    field "tiers"
        (Decode.list
            (Decode.map6 SubscriptionTier
                (field "id" Decode.string)
                (field "name" Decode.string)
                (field "price" Decode.string)
                (field "agentLimit" Decode.int)
                (field "contactLimit" Decode.int)
                (field "features" (Decode.list Decode.string))
            )
        )



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none



-- Helper function to check session for plan type and dispatch appropriate message


checkSessionForPlan : Nav.Key -> String -> String -> Cmd Msg
checkSessionForPlan key orgSlug session =
    -- This would be replaced with an actual API call in a real implementation
    -- For now, we'll just simulate finding the plan in the session by checking localStorage
    -- via the port system. The port would return the plan type if found.
    -- Since we can't directly call a port from here, we'll use a Task.succeed
    -- to simulate waiting for the response
    Task.perform (\_ -> NoOp) (Task.succeed ())

================
File: frontend/backup/Steps/UserDetails.elm
================
module Onboarding.Steps.UserDetails exposing
    ( EmailStatus(..)
    , Model
    , Msg
    , OutMsg(..)
    , fetchUserDetails
    , init
    , loadUserFromSession
    , subscriptions
    , update
    , view
    )

import Browser.Navigation as Nav
import Char
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import Svg exposing (circle, path, svg)
import Svg.Attributes as SvgAttr exposing (clipRule, cx, cy, d, fill, fillRule, r, stroke, strokeWidth, viewBox)
import Task
import Utils.RandomOrgName exposing (generateOrgName)



-- PORTS
-- These ports are defined in Onboarding.elm, we just use them here
-- MODEL


type alias Model =
    { firstName : String
    , lastName : String
    , email : String
    , phone : String
    , isLoading : Bool
    , error : Maybe String
    , key : Nav.Key
    , orgSlug : String
    , emailStatus : EmailStatus
    , loadedFromSession : Bool
    , sessionToken : String
    }


type EmailStatus
    = NotChecked
    | Checking
    | Available
    | Unavailable String


init : Nav.Key -> String -> Bool -> ( Model, Cmd Msg )
init key orgSlug isNewSignup =
    ( { firstName = ""
      , lastName = ""
      , email = ""
      , phone = ""
      , isLoading = True -- Set to true while loading
      , error = Nothing
      , key = key
      , orgSlug = orgSlug
      , emailStatus = NotChecked
      , loadedFromSession = False
      , sessionToken = ""
      }
    , fetchUserDetails orgSlug
      -- Fetch user details from backend using session cookie
    )



-- New function to load user details from session/localStorage


loadUserFromSession : { firstName : String, lastName : String, email : String, phone : String } -> Msg
loadUserFromSession userData =
    LoadUserFromSession userData



-- UPDATE


type Msg
    = UpdateFirstName String
    | UpdateLastName String
    | UpdateEmail String
    | UpdatePhone String
    | NextStepClicked
    | GotUserDetails (Result Http.Error UserDetailsResponse)
    | UserDetailsSaved (Result Http.Error SignupResponse)
    | NoOp
    | EmailBlurred
    | EmailFocused
    | GotEmailCheckResponse (Result Http.Error EmailCheckResponse)
    | LoadUserFromSession { firstName : String, lastName : String, email : String, phone : String }
    | SaveUserDetails


type OutMsg
    = NoOutMsg
    | NextStep
    | ShowError String
    | SaveUserToCookie { firstName : String, lastName : String, email : String, phone : String }
    | UpdateOrgSlug String
    | NextStepAndUpdateSlug String


type alias UserDetailsResponse =
    { firstName : String
    , lastName : String
    , email : String
    , phone : String
    , slug : String
    }


type alias EmailCheckResponse =
    { available : Bool
    , message : String
    }


type alias SignupResponse =
    { success : Bool
    , message : String
    , slug : String
    }


update : Msg -> Model -> ( Model, Cmd Msg, OutMsg )
update msg model =
    case msg of
        UpdateFirstName value ->
            ( { model | firstName = value }, Cmd.none, NoOutMsg )

        UpdateLastName value ->
            ( { model | lastName = value }, Cmd.none, NoOutMsg )

        UpdateEmail value ->
            ( { model
                | email = value
                , emailStatus = NotChecked -- Reset status
              }
            , Cmd.none
            , NoOutMsg
            )

        EmailFocused ->
            -- Immediately clear validation state when field gets focus
            ( { model | emailStatus = NotChecked }
            , Cmd.none
            , NoOutMsg
            )

        UpdatePhone value ->
            -- Store only the digits, but display formatted version
            ( { model | phone = String.filter Char.isDigit value }, Cmd.none, NoOutMsg )

        EmailBlurred ->
            if String.isEmpty (String.trim model.email) then
                -- Don't validate empty emails
                ( model, Cmd.none, NoOutMsg )

            else
                -- Always check email validity when field loses focus
                ( { model | emailStatus = Checking }
                , checkEmailAvailability model.email
                , NoOutMsg
                )

        GotEmailCheckResponse result ->
            case result of
                Ok response ->
                    if response.available then
                        ( { model | emailStatus = Available }
                        , Cmd.none
                        , NoOutMsg
                        )

                    else
                        ( { model | emailStatus = Unavailable response.message }
                        , Cmd.none
                        , NoOutMsg
                        )

                Err httpError ->
                    let
                        errorMsg =
                            case httpError of
                                Http.BadBody message ->
                                    "Decoder error: " ++ message

                                Http.BadStatus status ->
                                    "Server error: " ++ String.fromInt status

                                _ ->
                                    "Error checking email availability"
                    in
                    ( { model | emailStatus = Unavailable errorMsg }
                    , Cmd.none
                    , NoOutMsg
                    )

        NextStepClicked ->
            if isFormValid model then
                -- Save user details and move to next step
                let
                    userData =
                        { firstName = model.firstName
                        , lastName = model.lastName
                        , email = model.email
                        , phone = model.phone
                        }
                in
                ( { model | isLoading = True }
                , saveUserDetails model
                , SaveUserToCookie userData
                )

            else
                ( { model | error = Just "Please fill out all required fields" }
                , Cmd.none
                , ShowError "Please fill out all required fields"
                )

        GotUserDetails result ->
            case result of
                Ok response ->
                    let
                        -- Use the slug from the response if it's not empty
                        updatedSlug =
                            if String.isEmpty response.slug then
                                model.orgSlug

                            else
                                response.slug
                    in
                    ( { model
                        | firstName = response.firstName
                        , lastName = response.lastName
                        , email = response.email
                        , phone = response.phone
                        , isLoading = False
                        , emailStatus = Available -- Consider email as valid since it's already registered
                        , loadedFromSession = True -- Mark as loaded from session
                        , orgSlug = updatedSlug
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

                Err _ ->
                    -- On error, we don't cause a fatal error, just keep the form empty
                    ( { model
                        | isLoading = False
                      }
                    , Cmd.none
                    , NoOutMsg
                    )

        UserDetailsSaved result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model | isLoading = False, orgSlug = response.slug }
                        , Cmd.none
                        , NextStepAndUpdateSlug response.slug
                        )

                    else
                        ( { model
                            | error = Just response.message
                            , isLoading = False
                          }
                        , Cmd.none
                        , ShowError response.message
                        )

                Err httpError ->
                    let
                        errorMsg =
                            case httpError of
                                Http.BadUrl url ->
                                    "Invalid URL: " ++ url

                                Http.Timeout ->
                                    "Request timed out"

                                Http.NetworkError ->
                                    "Network error"

                                Http.BadStatus statusCode ->
                                    "Bad status: " ++ String.fromInt statusCode

                                Http.BadBody errorMessage ->
                                    if String.contains "phone" errorMessage then
                                        "Invalid phone number format. Please enter a valid phone number."

                                    else
                                        "Bad body: " ++ errorMessage
                    in
                    ( { model
                        | error = Just ("Failed to save user details: " ++ errorMsg)
                        , isLoading = False
                      }
                    , Cmd.none
                    , ShowError ("Failed to save user details: " ++ errorMsg)
                    )

        LoadUserFromSession userData ->
            -- Load user details from session/cookies
            ( { model
                | firstName = userData.firstName
                , lastName = userData.lastName
                , email = userData.email
                , phone = userData.phone
                , loadedFromSession = True

                -- Auto-validate email if it's been loaded from session
                , emailStatus =
                    if String.isEmpty userData.email then
                        NotChecked

                    else
                        Available
              }
            , Cmd.none
            , NoOutMsg
            )

        SaveUserDetails ->
            -- Explicit action to save user details to backend
            if isFormValid model then
                ( { model | isLoading = True }
                , saveUserDetails model
                , NoOutMsg
                )

            else
                ( model, Cmd.none, NoOutMsg )

        NoOp ->
            ( model, Cmd.none, NoOutMsg )



-- VIEW


view : Model -> Html Msg
view model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Personal Details" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Tell us about yourself" ]
            , if model.loadedFromSession then
                p [ class "text-blue-600 mt-2 italic" ]
                    [ text "Your previously entered information has been loaded." ]

              else
                text ""
            ]
        , if model.isLoading then
            viewLoading

          else
            div [ class "space-y-6" ]
                [ div [ class "bg-white shadow rounded-lg p-6" ]
                    [ div [ class "space-y-6" ]
                        [ div [ class "grid grid-cols-1 sm:grid-cols-2 gap-6" ]
                            [ div []
                                [ label [ class "block text-sm font-medium text-gray-700" ]
                                    [ text "First Name" ]
                                , input
                                    [ type_ "text"
                                    , class "mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    , value model.firstName
                                    , onInput UpdateFirstName
                                    , placeholder "Enter your first name"
                                    ]
                                    []
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700" ]
                                    [ text "Last Name" ]
                                , input
                                    [ type_ "text"
                                    , class "mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    , value model.lastName
                                    , onInput UpdateLastName
                                    , placeholder "Enter your last name"
                                    ]
                                    []
                                ]
                            ]
                        , div [ class "grid grid-cols-1 sm:grid-cols-2 gap-6 pt-2" ]
                            [ div [ class "relative pb-6" ]
                                [ label [ class "block text-sm font-medium text-gray-700" ]
                                    [ text "Email" ]
                                , div [ class "relative" ]
                                    [ input
                                        [ type_ "email"
                                        , class "mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                        , value model.email
                                        , onInput UpdateEmail
                                        , onFocus EmailFocused
                                        , onBlur EmailBlurred
                                        , placeholder "you@example.com"
                                        ]
                                        []
                                    , viewEmailStatus model.emailStatus
                                    ]
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700" ]
                                    [ text "Phone" ]
                                , input
                                    [ type_ "tel"
                                    , class "mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    , value (formatPhoneNumber model.phone)
                                    , onInput UpdatePhone
                                    , placeholder "(555) 555-5555"
                                    ]
                                    []
                                ]
                            ]
                        ]
                    ]

                {--
                , if model.error /= Nothing then
                    div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                --}
                , div [ class "flex justify-center" ]
                    [ button
                        [ class
                            (if isFormValid model then
                                "px-4 py-2 sm:px-6 sm:py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"

                             else
                                "px-4 py-2 sm:px-6 sm:py-3 bg-gray-300 text-gray-500 rounded-md cursor-not-allowed"
                            )
                        , onClick NextStepClicked
                        , disabled (not (isFormValid model) || model.isLoading)
                        ]
                        [ if model.isLoading then
                            div [ class "flex items-center justify-center" ]
                                [ div [ class "animate-spin mr-2 h-4 w-4 border-t-2 border-b-2 border-white rounded-full" ] []
                                , text "Saving..."
                                ]

                          else
                            text "Continue"
                        ]
                    ]
                ]
        ]


viewEmailStatus : EmailStatus -> Html msg
viewEmailStatus status =
    case status of
        NotChecked ->
            -- When not checked, explicitly render an empty div structure to properly replace any previous status
            div []
                [ div [ class "absolute right-0 inset-y-0" ] [ text "" ]
                , text "" -- Empty text element to replace any error message
                ]

        Checking ->
            -- Show loading spinner while checking
            div []
                [ div
                    [ class "absolute right-0 inset-y-0" ]
                    [ div
                        [ class "absolute right-0 inset-y-0 flex items-center pr-3" ]
                        [ div
                            [ class "animate-spin h-5 w-5 text-blue-500" ]
                            [ svg
                                [ viewBox "0 0 24 24"
                                , SvgAttr.class "h-5 w-5"
                                ]
                                [ circle
                                    [ cx "12"
                                    , cy "12"
                                    , r "10"
                                    , stroke "currentColor"
                                    , strokeWidth "4"
                                    , SvgAttr.class "opacity-25"
                                    ]
                                    []
                                , path
                                    [ fill "currentColor"
                                    , d "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                    , SvgAttr.class "opacity-75"
                                    ]
                                    []
                                ]
                            ]
                        ]
                    ]
                , text "" -- Empty text element to replace any error message
                ]

        Available ->
            -- Show only the success icon for available emails
            div []
                [ div
                    [ class "absolute right-0 inset-y-0" ]
                    [ div
                        [ class "absolute right-0 inset-y-0 flex items-center pr-3" ]
                        [ div
                            [ class "text-green-500" ]
                            [ svg
                                [ viewBox "0 0 20 20"
                                , fill "currentColor"
                                , SvgAttr.class "h-5 w-5"
                                ]
                                [ path
                                    [ fillRule "evenodd"
                                    , d "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                    , clipRule "evenodd"
                                    ]
                                    []
                                ]
                            ]
                        ]
                    ]
                , text "" -- Empty text element to replace the error message
                ]

        Unavailable message ->
            -- For unavailable emails, show icon and error message
            div []
                [ div
                    [ class "absolute right-0 inset-y-0" ]
                    [ div
                        [ class "absolute right-0 inset-y-0 flex items-center pr-3" ]
                        [ div
                            [ class "text-red-500" ]
                            [ svg
                                [ viewBox "0 0 20 20"
                                , fill "currentColor"
                                , SvgAttr.class "h-5 w-5"
                                ]
                                [ path
                                    [ fillRule "evenodd"
                                    , d "M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                                    , clipRule "evenodd"
                                    ]
                                    []
                                ]
                            ]
                        ]
                    ]
                , p
                    [ class "text-xs text-red-600 mt-1 absolute left-0 top-full w-full" ]
                    [ text message ]
                ]


viewLoading : Html msg
viewLoading =
    div [ class "text-center py-12" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading..." ]
        ]



-- HELPERS


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    let
        digits =
            String.filter Char.isDigit phone
                |> String.left 10

        len =
            String.length digits
    in
    if len == 0 then
        ""

    else if len <= 3 then
        "(" ++ digits

    else if len <= 6 then
        "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

    else
        "("
            ++ String.left 3 digits
            ++ ") "
            ++ String.slice 3 6 digits
            ++ "-"
            ++ String.dropLeft 6 digits


isFormValid : Model -> Bool
isFormValid model =
    let
        emailValid =
            case model.emailStatus of
                Available ->
                    True

                -- If the email hasn't been checked yet, consider it invalid
                NotChecked ->
                    False

                -- Email is being checked, consider it invalid until check completes
                Checking ->
                    False

                -- Email is unavailable (error state)
                Unavailable _ ->
                    False
    in
    not (String.isEmpty (String.trim model.firstName))
        && not (String.isEmpty (String.trim model.lastName))
        && not (String.isEmpty (String.trim model.email))
        && not (String.isEmpty (String.trim model.phone))
        && emailValid



-- API CALLS


fetchUserDetails : String -> Cmd Msg
fetchUserDetails _ =
    Http.get
        { url = "/api/onboarding/user-details"
        , expect = Http.expectJson GotUserDetails userDetailsDecoder
        }


saveUserDetails : Model -> Cmd Msg
saveUserDetails model =
    let
        -- Ensure phone number only contains digits
        phoneDigits =
            String.filter Char.isDigit model.phone

        requestBody =
            Encode.object
                [ ( "firstName", Encode.string model.firstName )
                , ( "lastName", Encode.string model.lastName )
                , ( "email", Encode.string model.email )
                , ( "phone", Encode.string phoneDigits )
                ]

        url =
            "/api/onboarding/user-details"
    in
    Http.request
        { method = "POST"
        , url = url
        , headers = [] -- The session token is in the cookies, no need to pass it
        , body = Http.jsonBody requestBody
        , expect =
            Http.expectJson UserDetailsSaved
                (Decode.map3 SignupResponse
                    (Decode.field "success" Decode.bool)
                    (Decode.field "message" Decode.string)
                    (Decode.field "slug" Decode.string)
                )
        , timeout = Nothing
        , tracker = Nothing
        }


checkEmailAvailability : String -> Cmd Msg
checkEmailAvailability email =
    Http.request
        { method = "GET"
        , headers = []
        , url = "/api/organizations/check-email/" ++ email
        , body = Http.emptyBody
        , expect = Http.expectStringResponse GotEmailCheckResponse handleEmailCheckResponse
        , timeout = Nothing
        , tracker = Nothing
        }



-- Custom response handler to deal with empty responses and provide better error logging


handleEmailCheckResponse : Http.Response String -> Result Http.Error EmailCheckResponse
handleEmailCheckResponse response =
    case response of
        Http.BadUrl_ url ->
            Err (Http.BadUrl url)

        Http.Timeout_ ->
            Err Http.Timeout

        Http.NetworkError_ ->
            Err Http.NetworkError

        Http.BadStatus_ metadata body ->
            Err (Http.BadStatus metadata.statusCode)

        Http.GoodStatus_ metadata body ->
            -- If we get a 200 status but empty body, consider it a success
            if String.isEmpty (String.trim body) then
                Ok { available = True, message = "Email is available" }

            else
                -- Try to decode the response as JSON
                case Decode.decodeString emailCheckDecoder body of
                    Ok value ->
                        Ok value

                    Err error ->
                        -- Consider most 200 responses as success even with decode errors
                        Ok { available = True, message = "Email is available (decode error)" }



-- DECODERS & ENCODERS


userDetailsDecoder : Decode.Decoder UserDetailsResponse
userDetailsDecoder =
    Decode.map5 UserDetailsResponse
        (Decode.field "firstName" Decode.string)
        (Decode.field "lastName" Decode.string)
        (Decode.field "email" Decode.string)
        (Decode.field "phone" Decode.string)
        (Decode.oneOf
            [ Decode.field "slug" Decode.string
            , Decode.succeed "" -- Default to empty string if slug is not present
            ]
        )


emailCheckDecoder : Decode.Decoder EmailCheckResponse
emailCheckDecoder =
    let
        -- Try to be more flexible with the response format
        baseDecoder =
            Decode.map2 EmailCheckResponse
                (Decode.oneOf
                    [ Decode.field "available" Decode.bool
                    , Decode.field "success" Decode.bool
                    , Decode.succeed True -- Default to true if field not found (changed from false)
                    ]
                )
                (Decode.oneOf
                    [ Decode.field "message" Decode.string
                    , Decode.field "error" Decode.string
                    , Decode.succeed "Email is available" -- Changed default message
                    ]
                )
    in
    Decode.oneOf
        [ baseDecoder
        , Decode.field "data" baseDecoder
        , Decode.succeed { available = True, message = "Email is available" } -- Last resort fallback
        ]



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/backup/Onboarding.elm
================
port module Onboarding.Onboarding exposing
    ( Model
    , Msg(..)
    , Step(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser
import Browser.Dom as Dom
import Browser.Navigation as Nav
import Components.SetupLayout as SetupLayout
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import Onboarding.Steps.AddAgents as AddAgents
import Onboarding.Steps.CompanyDetails as CompanyDetails
import Onboarding.Steps.EnterpriseForm as EnterpriseForm
import Onboarding.Steps.LicensingSettings as LicensingSettings
import Onboarding.Steps.Payment as Payment
import Onboarding.Steps.PlanSelection as PlanSelection exposing (fetchSubscriptionTiers)
import Onboarding.Steps.UserDetails as UserDetails
import Random
import Task
import Url
import Utils.RandomOrgName exposing (generateOrgName)



-- Ports for local storage


port storeOnboardingState : { organizationId : String, slug : String, sessionToken : String, step : Int, planType : String } -> Cmd msg


port retrieveOnboardingState : () -> Cmd msg


port onboardingStateReceived : (Maybe { organizationId : String, slug : String, sessionToken : String, step : Int, planType : String } -> msg) -> Sub msg



-- New ports for plan type


port retrievePlanType :
    String
    -> Cmd msg -- Send organization slug to get plan


port planTypeReceived :
    (Maybe String -> msg)
    -> Sub msg -- Receive plan type


port storePlanType :
    { orgSlug : String, planType : String }
    -> Cmd msg -- Store plan type in localStorage



-- New ports for user details


port storeUserDetails : { organizationId : String, firstName : String, lastName : String, email : String, phone : String } -> Cmd msg


port retrieveUserDetails :
    String
    -> Cmd msg -- Pass organization ID to get user details


port userDetailsReceived : (Maybe { firstName : String, lastName : String, email : String, phone : String } -> msg) -> Sub msg



-- MODEL


type Step
    = PlanSelectionStep
    | UserDetailsStep
    | CompanyDetailsStep
    | LicensingSettingsStep
    | AddAgentsStep
    | PaymentStep
    | EnterpriseFormStep


type alias Model =
    { step : Step
    , planSelectionModel : PlanSelection.Model
    , userDetailsModel : UserDetails.Model
    , companyDetailsModel : CompanyDetails.Model
    , licensingSettingsModel : LicensingSettings.Model
    , addAgentsModel : Maybe AddAgents.Model -- Optional, only for Pro plans
    , paymentModel : Payment.Model
    , enterpriseFormModel : Maybe EnterpriseForm.Model -- Optional, only for Enterprise plan
    , key : Nav.Key
    , orgSlug : String
    , session : String
    , isBasicPlan : Bool
    , error : Maybe String
    , isLoading : Bool

    -- New fields for progressive onboarding
    , organizationId : Maybe Int
    , sessionToken : Maybe String
    , onboardingInProgress : Bool

    -- Track if each step's model has been initialized
    , userDetailsInitialized : Bool
    , companyDetailsInitialized : Bool
    , licensingSettingsInitialized : Bool
    , addAgentsInitialized : Bool
    , paymentInitialized : Bool
    , enterpriseFormInitialized : Bool

    -- Track step history for back navigation
    , stepHistory : List Step
    }


init : Nav.Key -> String -> String -> Step -> ( Model, Cmd Msg )
init key orgSlug session initialStep =
    let
        -- Only fetch tiers when we're on the plan selection step
        isOnPlanSelectionStep =
            initialStep == PlanSelectionStep

        -- Check localStorage for any stored onboarding state
        ( planSelectionModel, planSelectionCmd ) =
            -- If we're not on the plan selection step but have a stored state with plan selection,
            -- we should initialize with the saved plan to ensure consistency
            if isOnPlanSelectionStep then
                PlanSelection.initWithFetch key orgSlug session True

            else
                PlanSelection.initWithFetch key orgSlug session False

        -- Determine if this is a new signup
        isNewSignup =
            String.isEmpty (String.trim orgSlug) || initialStep == PlanSelectionStep

        -- Initialize UserDetails model
        ( userDetailsModel, userDetailsCmd ) =
            UserDetails.init key orgSlug isNewSignup

        -- Initialize CompanyDetails model only if needed
        ( companyDetailsModel, companyDetailsCmd ) =
            if initialStep == CompanyDetailsStep then
                CompanyDetails.init key orgSlug session

            else
                -- Create an empty model without making API calls
                ( { agencyName = ""
                  , website = ""
                  , phone = ""
                  , primaryColor = "#0047AB" -- Default blue
                  , secondaryColor = "#FFFFFF" -- Default white
                  , logo = Nothing
                  , isLoading = False
                  , error = Nothing
                  , key = key
                  , orgSlug = orgSlug
                  , uploadingLogo = False
                  , sessionToken = session
                  , loadedFromSession = False
                  }
                , Cmd.none
                )

        -- Initialize LicensingSettings model only if needed
        ( licensingSettingsModel, licensingSettingsCmd ) =
            if initialStep == LicensingSettingsStep then
                LicensingSettings.init key orgSlug

            else
                -- Create an empty model without making API calls
                ( { carrierContracts = []
                  , useSmartSendForGI = True
                  , isLoading = False
                  , error = Nothing
                  , key = key
                  , orgSlug = orgSlug
                  , expandedSections = [ "Carrier Contracts", "Guaranteed Issue Settings" ]
                  }
                , Cmd.none
                )

        -- Initialize Payment model only if needed
        ( paymentModel, paymentCmd ) =
            if initialStep == PaymentStep then
                Payment.init key orgSlug

            else
                -- Create an empty model without making API calls
                ( { isLoading = False
                  , error = Nothing
                  , key = key
                  , orgSlug = orgSlug
                  , subscriptionDetails = Nothing
                  , processingPayment = False
                  , email = ""
                  }
                , Cmd.none
                )

        -- Check if we need to initialize the AddAgents model based on the initial step
        -- or if we're starting with a non-basic plan
        shouldInitAddAgents =
            initialStep
                == AddAgentsStep
                && (planSelectionModel.selectedPlan |> Maybe.map (\p -> p /= "basic") |> Maybe.withDefault False)

        ( addAgentsModel, addAgentsCmd ) =
            if shouldInitAddAgents then
                let
                    ( model, cmd ) =
                        AddAgents.init key orgSlug True
                in
                ( Just model, Cmd.map AddAgentsMsg cmd )

            else
                ( Nothing, Cmd.none )

        -- Initialize enterprise form model if needed
        ( enterpriseFormModel, enterpriseFormCmd ) =
            if initialStep == EnterpriseFormStep then
                let
                    ( model, cmd ) =
                        EnterpriseForm.init key
                in
                ( Just model, Cmd.map EnterpriseFormMsg cmd )

            else
                ( Nothing, Cmd.none )

        -- Determine if we're on a basic plan
        isBasicPlan =
            planSelectionModel.selectedPlan
                |> Maybe.map (\p -> p == "basic")
                |> Maybe.withDefault True

        -- Determine which commands to run based on the current step
        initCmds =
            case initialStep of
                PlanSelectionStep ->
                    [ Cmd.map PlanSelectionMsg planSelectionCmd
                    , retrieveOnboardingState () -- Check for any in-progress onboarding
                    , if not (String.isEmpty orgSlug) then
                        -- When on plan selection, also try to get the plan type directly
                        retrievePlanType orgSlug

                      else
                        Cmd.none
                    ]

                UserDetailsStep ->
                    [ Cmd.map UserDetailsMsg userDetailsCmd
                    , retrieveOnboardingState () -- Check for any in-progress onboarding
                    , if not isNewSignup && not (String.isEmpty orgSlug) then
                        -- When on user details step and not a new signup, fetch user details
                        fetchUserDetails orgSlug ""

                      else
                        Cmd.none
                    ]

                CompanyDetailsStep ->
                    [ Cmd.map CompanyDetailsMsg companyDetailsCmd ]

                LicensingSettingsStep ->
                    [ Cmd.map LicensingSettingsMsg licensingSettingsCmd ]

                AddAgentsStep ->
                    [ addAgentsCmd ]

                PaymentStep ->
                    [ Cmd.map PaymentMsg paymentCmd ]

                EnterpriseFormStep ->
                    [ enterpriseFormCmd ]
    in
    ( { step = initialStep
      , planSelectionModel = planSelectionModel
      , userDetailsModel = userDetailsModel
      , companyDetailsModel = companyDetailsModel
      , licensingSettingsModel = licensingSettingsModel
      , addAgentsModel = addAgentsModel
      , paymentModel = paymentModel
      , enterpriseFormModel = enterpriseFormModel
      , key = key
      , orgSlug = orgSlug
      , session = session
      , isBasicPlan = isBasicPlan
      , error = Nothing
      , isLoading = False

      -- Initialize new fields
      , organizationId = Nothing
      , sessionToken = Nothing
      , onboardingInProgress = False

      -- Initialize step tracking to match current models
      , userDetailsInitialized = initialStep == UserDetailsStep
      , companyDetailsInitialized = initialStep == CompanyDetailsStep
      , licensingSettingsInitialized = initialStep == LicensingSettingsStep
      , addAgentsInitialized = shouldInitAddAgents
      , paymentInitialized = initialStep == PaymentStep
      , enterpriseFormInitialized = initialStep == EnterpriseFormStep

      -- Initialize step history
      , stepHistory = []
      }
    , Cmd.batch initCmds
    )



-- Helper function to update step and maintain history


changeStep : Step -> Model -> Model
changeStep newStep model =
    -- Only add to history if actually changing step
    if newStep /= model.step then
        { model
            | step = newStep
            , stepHistory = model.step :: model.stepHistory

            -- Reset initialization flags based on the new step
            , userDetailsInitialized =
                if newStep == UserDetailsStep then
                    False

                else
                    model.userDetailsInitialized
            , companyDetailsInitialized =
                if newStep == CompanyDetailsStep then
                    False

                else
                    model.companyDetailsInitialized
            , licensingSettingsInitialized =
                if newStep == LicensingSettingsStep then
                    False

                else
                    model.licensingSettingsInitialized
            , addAgentsInitialized =
                if newStep == AddAgentsStep then
                    False

                else
                    model.addAgentsInitialized
            , paymentInitialized =
                if newStep == PaymentStep then
                    False

                else
                    model.paymentInitialized
            , enterpriseFormInitialized =
                if newStep == EnterpriseFormStep then
                    False

                else
                    model.enterpriseFormInitialized
        }

    else
        model



-- UPDATE


type Msg
    = PlanSelectionMsg PlanSelection.Msg
    | UserDetailsMsg UserDetails.Msg
    | CompanyDetailsMsg CompanyDetails.Msg
    | LicensingSettingsMsg LicensingSettings.Msg
    | AddAgentsMsg AddAgents.Msg
    | PaymentMsg Payment.Msg
    | EnterpriseFormMsg EnterpriseForm.Msg
    | NavigateToStep Step
    | NavigateBack
    | SkipStep
    | CompleteOnboarding (Result Http.Error ())
    | GotError String
    | NoOp
      -- New messages for progressive onboarding
    | InitOnboarding String String -- planType, email
    | OnboardingInitialized (Result Http.Error { organizationId : Int, slug : String, sessionToken : String, onboardingStep : Int, planType : String })
    | OnboardingStateReceived (Maybe { organizationId : String, slug : String, sessionToken : String, step : Int, planType : String })
    | UpdateUser
    | UserUpdated (Result Http.Error { onboardingStep : Int })
    | UpdateCompany
    | CompanyUpdated (Result Http.Error { onboardingStep : Int })
    | UpdateLicensing
    | LicensingUpdated (Result Http.Error { onboardingStep : Int, nextStep : Int, isBasicPlan : Bool })
    | AddTeamMembers
    | TeamMembersAdded (Result Http.Error { onboardingStep : Int })
    | CompleteSubscription
    | SubscriptionCompleted (Result Http.Error { clientSecret : String, publishableKey : String })
    | ResumeOnboarding String -- email
    | PlanTypeReceived (Maybe String) -- New message for plan type
    | UserDetailsReceived (Maybe { firstName : String, lastName : String, email : String, phone : String })
    | ScrollToTop
    | RandomOrgNameGenerated String
    | GotUserDetails (Result Http.Error { firstName : String, lastName : String, email : String, phone : String })
    | InitializeCurrentStep
    | CompanyDetailsSaved (Result Http.Error { onboardingStep : Int })


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        PlanSelectionMsg subMsg ->
            let
                ( updatedPlanModel, planCmd, outMsg ) =
                    PlanSelection.update subMsg model.planSelectionModel

                -- Handle the selected plan type to determine if we need to initialize the AddAgents model
                ( isBasicPlan, storePlanCmd ) =
                    case outMsg of
                        PlanSelection.SelectedPlan planType ->
                            -- Only store plan type if we haven't already
                            if model.sessionToken == Nothing then
                                ( planType == "basic"
                                , storePlanType { orgSlug = model.orgSlug, planType = planType }
                                )

                            else
                                ( planType == "basic", Cmd.none )

                        _ ->
                            ( model.isBasicPlan, Cmd.none )

                -- Initialize AddAgents model if needed and not already initialized
                ( addAgentsModel, addAgentsInitialized, addAgentsCmd ) =
                    if not isBasicPlan && model.addAgentsModel == Nothing then
                        let
                            ( newModel, cmd ) =
                                AddAgents.init model.key model.orgSlug True
                        in
                        ( Just newModel, True, Cmd.map AddAgentsMsg cmd )

                    else
                        ( model.addAgentsModel, model.addAgentsInitialized, Cmd.none )

                -- Create navigation command (now just updates the model)
                updatedModelWithStep =
                    case outMsg of
                        PlanSelection.NextStep ->
                            changeStep UserDetailsStep model

                        _ ->
                            model

                -- Process onboarding initialization if needed
                ( updatedModel, onboardingCmd ) =
                    case outMsg of
                        PlanSelection.OnboardingInitializedSuccess response ->
                            -- Only store onboarding state if we haven't already
                            if model.sessionToken == Nothing then
                                let
                                    state =
                                        { organizationId = String.fromInt response.organizationId
                                        , slug = response.slug
                                        , sessionToken = response.sessionToken
                                        , step = response.onboardingStep
                                        , planType = response.planType
                                        }

                                    oldUserDetailsModel =
                                        model.userDetailsModel

                                    updatedUserDetailsModel =
                                        { oldUserDetailsModel | orgSlug = response.slug }

                                    navigationCmd =
                                        Nav.pushUrl model.key "/onboarding/personal"
                                in
                                ( { updatedModelWithStep
                                    | organizationId = Just response.organizationId
                                    , orgSlug = response.slug
                                    , sessionToken = Just response.sessionToken
                                    , onboardingInProgress = True
                                    , step = UserDetailsStep
                                    , userDetailsModel = updatedUserDetailsModel
                                  }
                                , Cmd.batch
                                    [ storeOnboardingState state
                                    , navigationCmd
                                    ]
                                )

                            else
                                ( updatedModelWithStep, Cmd.none )

                        PlanSelection.NextStep ->
                            let
                                navigationCmd =
                                    Nav.pushUrl model.key "/onboarding/personal"
                            in
                            ( updatedModelWithStep
                            , navigationCmd
                            )

                        _ ->
                            ( updatedModelWithStep, Cmd.none )

                -- Handle error messages
                errorCmd =
                    case outMsg of
                        PlanSelection.ShowError err ->
                            Cmd.none

                        _ ->
                            Cmd.none
            in
            ( { updatedModel
                | planSelectionModel = updatedPlanModel
                , isBasicPlan = isBasicPlan
                , addAgentsModel = addAgentsModel
                , addAgentsInitialized = addAgentsInitialized
              }
            , Cmd.batch
                [ Cmd.map PlanSelectionMsg planCmd
                , errorCmd
                , addAgentsCmd
                , onboardingCmd
                , storePlanCmd
                , Task.perform (\_ -> ScrollToTop) (Task.succeed ())
                ]
            )

        UserDetailsMsg subMsg ->
            let
                ( updatedUserDetailsModel, userDetailsCmd, outMsg ) =
                    UserDetails.update subMsg model.userDetailsModel

                -- Update navigation without URL changes
                updatedModelWithStep =
                    case outMsg of
                        UserDetails.NextStep ->
                            let
                                nextStep =
                                    getNextStep UserDetailsStep model.isBasicPlan

                                stepChangedModel =
                                    changeStep nextStep model

                                -- Initialize the next step
                                ( _, initializedModel ) =
                                    initializeStep nextStep stepChangedModel
                            in
                            initializedModel

                        _ ->
                            model

                -- Handle the new slug update
                updatedModelWithSlug =
                    case outMsg of
                        UserDetails.UpdateOrgSlug newSlug ->
                            let
                                -- Update all sub-models that need the slug
                                oldCompanyDetails =
                                    model.companyDetailsModel

                                updatedCompanyDetailsModel =
                                    { oldCompanyDetails | orgSlug = newSlug }

                                oldLicensingSettings =
                                    model.licensingSettingsModel

                                updatedLicensingSettingsModel =
                                    { oldLicensingSettings | orgSlug = newSlug }

                                updatedAddAgentsModel =
                                    model.addAgentsModel
                                        |> Maybe.map (\m -> { m | orgSlug = newSlug })
                            in
                            { updatedModelWithStep
                                | orgSlug = newSlug
                                , companyDetailsModel = updatedCompanyDetailsModel
                                , licensingSettingsModel = updatedLicensingSettingsModel
                                , addAgentsModel = updatedAddAgentsModel
                            }

                        UserDetails.NextStepAndUpdateSlug newSlug ->
                            let
                                -- Update all sub-models that need the slug
                                oldCompanyDetails =
                                    model.companyDetailsModel

                                updatedCompanyDetailsModel =
                                    { oldCompanyDetails | orgSlug = newSlug }

                                oldLicensingSettings =
                                    model.licensingSettingsModel

                                updatedLicensingSettingsModel =
                                    { oldLicensingSettings | orgSlug = newSlug }

                                updatedAddAgentsModel =
                                    model.addAgentsModel
                                        |> Maybe.map (\m -> { m | orgSlug = newSlug })

                                nextStep =
                                    getNextStep UserDetailsStep model.isBasicPlan
                            in
                            { model
                                | orgSlug = newSlug
                                , companyDetailsModel = updatedCompanyDetailsModel
                                , licensingSettingsModel = updatedLicensingSettingsModel
                                , addAgentsModel = updatedAddAgentsModel
                                , step = nextStep
                                , sessionToken = Just updatedUserDetailsModel.sessionToken
                            }

                        _ ->
                            updatedModelWithStep

                outCmd =
                    case outMsg of
                        UserDetails.NoOutMsg ->
                            Cmd.none

                        UserDetails.NextStep ->
                            case model.sessionToken of
                                Just token ->
                                    updateUserDetails updatedUserDetailsModel.orgSlug token updatedUserDetailsModel

                                Nothing ->
                                    -- Generate a random org name when creating a new organization
                                    Random.generate RandomOrgNameGenerated generateOrgName

                        UserDetails.ShowError err ->
                            Cmd.none

                        UserDetails.SaveUserToCookie userData ->
                            -- Store user details in localStorage
                            case model.organizationId of
                                Just orgId ->
                                    storeUserDetails
                                        { organizationId = String.fromInt orgId
                                        , firstName = userData.firstName
                                        , lastName = userData.lastName
                                        , email = userData.email
                                        , phone = userData.phone
                                        }

                                Nothing ->
                                    -- If no organization ID, try to use slug
                                    if not (String.isEmpty model.orgSlug) then
                                        storeUserDetails
                                            { organizationId = model.orgSlug
                                            , firstName = userData.firstName
                                            , lastName = userData.lastName
                                            , email = userData.email
                                            , phone = userData.phone
                                            }

                                    else
                                        Cmd.none

                        UserDetails.UpdateOrgSlug _ ->
                            Cmd.none

                        UserDetails.NextStepAndUpdateSlug _ ->
                            case model.sessionToken of
                                Just token ->
                                    updateUserDetails updatedUserDetailsModel.orgSlug token updatedUserDetailsModel

                                Nothing ->
                                    -- Generate a random org name when creating a new organization
                                    Random.generate RandomOrgNameGenerated generateOrgName
            in
            ( { updatedModelWithSlug
                | userDetailsModel = updatedUserDetailsModel
                , userDetailsInitialized = True
                , sessionToken = Just updatedUserDetailsModel.sessionToken
              }
            , Cmd.batch
                [ Cmd.map UserDetailsMsg userDetailsCmd
                , outCmd
                ]
            )

        CompanyDetailsMsg subMsg ->
            let
                ( updatedCompanyDetailsModel, companyDetailsCmd, outMsg ) =
                    CompanyDetails.update subMsg model.companyDetailsModel

                -- Update navigation without URL changes
                updatedModelWithStep =
                    case outMsg of
                        CompanyDetails.NextStep ->
                            let
                                nextStep =
                                    getNextStep CompanyDetailsStep model.isBasicPlan

                                -- Add navigation command
                                navigationCmd =
                                    Nav.pushUrl model.key (getStepFragment nextStep)

                                stepChangedModel =
                                    changeStep nextStep model
                            in
                            stepChangedModel

                        _ ->
                            model

                -- When NextStep is triggered, also update company details and navigate
                outCmd =
                    case outMsg of
                        CompanyDetails.NoOutMsg ->
                            Cmd.none

                        CompanyDetails.NextStep ->
                            let
                                nextStep =
                                    getNextStep CompanyDetailsStep model.isBasicPlan

                                -- Add URL navigation command
                                navCmd =
                                    Nav.pushUrl model.key (getStepFragment nextStep)

                                updateCmd =
                                    case model.sessionToken of
                                        Just token ->
                                            updateCompanyDetails model.orgSlug token updatedCompanyDetailsModel

                                        Nothing ->
                                            Cmd.none
                            in
                            Cmd.batch [ updateCmd, navCmd ]

                        CompanyDetails.ShowError err ->
                            Cmd.none

                -- Always ensure the company details model has the latest orgSlug
                updatedCompanyDetailsModelWithSlug =
                    { updatedCompanyDetailsModel | orgSlug = model.orgSlug }
            in
            ( { updatedModelWithStep
                | companyDetailsModel = updatedCompanyDetailsModelWithSlug
              }
            , Cmd.batch
                [ Cmd.map CompanyDetailsMsg companyDetailsCmd
                , outCmd
                ]
            )

        CompanyDetailsSaved result ->
            case result of
                Ok response ->
                    let
                        nextStep =
                            getNextStep CompanyDetailsStep model.isBasicPlan

                        -- Add URL navigation command
                        navCmd =
                            Nav.pushUrl model.key (getStepFragment nextStep)
                    in
                    ( { model | isLoading = False, companyDetailsInitialized = True }
                    , navCmd
                    )

                Err error ->
                    ( { model | error = Just "Failed to save company details. Please try again." }
                    , Cmd.none
                    )

        LicensingSettingsMsg subMsg ->
            let
                ( updatedLicensingSettingsModel, licensingSettingsCmd, outMsg ) =
                    LicensingSettings.update subMsg model.licensingSettingsModel

                -- Ensure addAgentsModel is initialized if we're on a non-basic plan
                ( addAgentsModel, addAgentsInitialized, addAgentsCmd ) =
                    if not model.isBasicPlan && model.addAgentsModel == Nothing then
                        let
                            ( newModel, cmd ) =
                                AddAgents.init model.key model.orgSlug True
                        in
                        ( Just newModel, True, Cmd.map AddAgentsMsg cmd )

                    else
                        ( model.addAgentsModel, model.addAgentsInitialized, Cmd.none )

                -- Update navigation without URL changes
                updatedModelWithStep =
                    case outMsg of
                        LicensingSettings.NextStep ->
                            let
                                nextStep =
                                    getNextStep LicensingSettingsStep model.isBasicPlan

                                stepChangedModel =
                                    changeStep nextStep model

                                -- Initialize the next step
                                ( _, initializedModel ) =
                                    initializeStep nextStep stepChangedModel
                            in
                            initializedModel

                        _ ->
                            model

                -- When NextStep is triggered, also update licensing settings
                outCmd =
                    case outMsg of
                        LicensingSettings.NoOutMsg ->
                            Cmd.none

                        LicensingSettings.NextStep ->
                            case model.sessionToken of
                                Just token ->
                                    updateLicensingDetails model.orgSlug token updatedLicensingSettingsModel

                                Nothing ->
                                    Cmd.none

                        LicensingSettings.ShowError err ->
                            Cmd.none
            in
            ( { updatedModelWithStep
                | licensingSettingsModel = updatedLicensingSettingsModel
                , addAgentsModel = addAgentsModel
                , addAgentsInitialized = addAgentsInitialized
              }
            , Cmd.batch
                [ Cmd.map LicensingSettingsMsg licensingSettingsCmd
                , outCmd
                , addAgentsCmd
                ]
            )

        AddAgentsMsg subMsg ->
            case model.addAgentsModel of
                Just addAgentsModel ->
                    let
                        ( updatedAddAgentsModel, addAgentsCmd, outMsg ) =
                            AddAgents.update subMsg addAgentsModel

                        -- Update navigation without URL changes
                        updatedModelWithStep =
                            case outMsg of
                                AddAgents.NextStep ->
                                    let
                                        nextStep =
                                            getNextStep AddAgentsStep model.isBasicPlan
                                    in
                                    changeStep nextStep model

                                _ ->
                                    model

                        outCmd =
                            case outMsg of
                                AddAgents.NoOutMsg ->
                                    Cmd.none

                                AddAgents.NextStep ->
                                    Task.perform (\_ -> ScrollToTop) (Task.succeed ())

                                AddAgents.ShowError err ->
                                    Cmd.none
                    in
                    ( { updatedModelWithStep
                        | addAgentsModel = Just updatedAddAgentsModel
                        , addAgentsInitialized = True
                      }
                    , Cmd.batch
                        [ Cmd.map AddAgentsMsg addAgentsCmd
                        , outCmd
                        ]
                    )

                Nothing ->
                    -- Initialize the model if it doesn't exist
                    let
                        ( newAddAgentsModel, addAgentsCmd ) =
                            AddAgents.init model.key model.orgSlug True
                    in
                    ( { model
                        | addAgentsModel = Just newAddAgentsModel
                        , addAgentsInitialized = True
                      }
                    , Cmd.map AddAgentsMsg addAgentsCmd
                    )

        PaymentMsg subMsg ->
            let
                ( updatedPaymentModel, paymentCmd, outMsg ) =
                    Payment.update subMsg model.paymentModel

                outCmd =
                    case outMsg of
                        Payment.NoOutMsg ->
                            Cmd.none

                        Payment.Completed ->
                            -- Only complete onboarding if we're at the final step
                            if model.step == PaymentStep then
                                -- First update company details if needed
                                if not model.companyDetailsInitialized then
                                    case model.sessionToken of
                                        Just token ->
                                            updateCompanyDetails model.orgSlug token model.companyDetailsModel

                                        Nothing ->
                                            Cmd.none
                                    -- Then update licensing settings if needed

                                else if not model.licensingSettingsInitialized then
                                    case model.sessionToken of
                                        Just token ->
                                            updateLicensingDetails model.orgSlug token model.licensingSettingsModel

                                        Nothing ->
                                            Cmd.none
                                    -- Then add team members if needed (for non-basic plans)

                                else if not model.isBasicPlan && not model.addAgentsInitialized then
                                    case ( model.sessionToken, model.addAgentsModel ) of
                                        ( Just token, Just agentsModel ) ->
                                            addTeamMembers model.orgSlug token agentsModel

                                        _ ->
                                            Cmd.none
                                    -- Finally complete the onboarding

                                else
                                    completeOnboarding model

                            else
                                Cmd.none

                        Payment.NavigateToWalkthrough ->
                            -- Only complete onboarding if we're at the final step
                            if model.step == PaymentStep then
                                -- Same flow as Completed
                                if not model.companyDetailsInitialized then
                                    case model.sessionToken of
                                        Just token ->
                                            updateCompanyDetails model.orgSlug token model.companyDetailsModel

                                        Nothing ->
                                            Cmd.none

                                else if not model.licensingSettingsInitialized then
                                    case model.sessionToken of
                                        Just token ->
                                            updateLicensingDetails model.orgSlug token model.licensingSettingsModel

                                        Nothing ->
                                            Cmd.none

                                else if not model.isBasicPlan && not model.addAgentsInitialized then
                                    case ( model.sessionToken, model.addAgentsModel ) of
                                        ( Just token, Just agentsModel ) ->
                                            addTeamMembers model.orgSlug token agentsModel

                                        _ ->
                                            Cmd.none

                                else
                                    completeOnboarding model

                            else
                                Cmd.none

                        Payment.ShowError err ->
                            Cmd.none
            in
            ( { model
                | paymentModel = updatedPaymentModel
                , paymentInitialized = True
              }
            , Cmd.batch
                [ Cmd.map PaymentMsg paymentCmd
                , outCmd
                ]
            )

        EnterpriseFormMsg subMsg ->
            case model.enterpriseFormModel of
                Just enterpriseFormModel ->
                    let
                        ( updatedEnterpriseFormModel, enterpriseFormCmd, outMsg ) =
                            EnterpriseForm.update subMsg enterpriseFormModel

                        -- Check if we're navigating back to plan selection
                        updatedModelWithStep =
                            if outMsg == EnterpriseForm.BackToPlanSelection then
                                changeStep PlanSelectionStep model

                            else
                                model

                        outCmd =
                            case outMsg of
                                EnterpriseForm.NoOutMsg ->
                                    Cmd.none

                                EnterpriseForm.BackToPlanSelection ->
                                    Task.perform (\_ -> ScrollToTop) (Task.succeed ())

                                EnterpriseForm.ShowError err ->
                                    Cmd.none
                    in
                    ( { updatedModelWithStep
                        | enterpriseFormModel = Just updatedEnterpriseFormModel
                        , enterpriseFormInitialized = True
                      }
                    , Cmd.batch
                        [ Cmd.map EnterpriseFormMsg enterpriseFormCmd
                        , outCmd
                        ]
                    )

                Nothing ->
                    -- If the model doesn't exist, create it
                    let
                        ( enterpriseFormModel, enterpriseFormCmd ) =
                            EnterpriseForm.init model.key
                    in
                    ( { model
                        | enterpriseFormModel = Just enterpriseFormModel
                        , enterpriseFormInitialized = True
                      }
                    , Cmd.map EnterpriseFormMsg enterpriseFormCmd
                    )

        NavigateToStep step ->
            let
                updatedModel =
                    changeStep step model

                -- Update URL fragment without page reload to preserve state in browser history
                urlUpdateCmd =
                    Nav.pushUrl model.key (getStepFragment step)

                -- Initialize the step directly
                ( initCmd, finalModel ) =
                    initializeStep step updatedModel
            in
            ( finalModel
            , Cmd.batch
                [ urlUpdateCmd
                , initCmd
                , Task.perform (\_ -> ScrollToTop) (Task.succeed ())
                ]
            )

        NavigateBack ->
            case model.stepHistory of
                previousStep :: restHistory ->
                    let
                        updatedModel =
                            { model
                                | step = previousStep
                                , stepHistory = restHistory
                            }

                        -- Initialize the step directly
                        ( initCmd, finalModel ) =
                            initializeStep previousStep updatedModel
                    in
                    ( finalModel
                    , Cmd.batch
                        [ Nav.pushUrl model.key (getStepFragment previousStep)
                        , initCmd
                        , Task.perform (\_ -> ScrollToTop) (Task.succeed ())
                        ]
                    )

                [] ->
                    -- If no history, stay on current step
                    ( model, Cmd.none )

        SkipStep ->
            let
                nextStep =
                    getNextStep model.step model.isBasicPlan

                updatedModel =
                    changeStep nextStep model

                -- Initialize the step directly
                ( initCmd, finalModel ) =
                    initializeStep nextStep updatedModel
            in
            ( finalModel
            , Cmd.batch
                [ Nav.pushUrl model.key (getStepFragment nextStep)
                , initCmd
                , Task.perform (\_ -> ScrollToTop) (Task.succeed ())
                ]
            )

        ScrollToTop ->
            ( model, Dom.setViewport 0 0 |> Task.attempt (\_ -> NoOp) )

        CompleteOnboarding result ->
            case result of
                Ok _ ->
                    -- Redirect directly to walkthrough, bypassing login
                    ( { model | isLoading = False }
                    , Nav.pushUrl model.key "/walkthrough"
                    )

                Err _ ->
                    ( { model | isLoading = False, error = Just "Failed to complete onboarding. Please try again." }
                    , Cmd.none
                    )

        GotError errorMsg ->
            ( { model | error = Just errorMsg, isLoading = False }, Cmd.none )

        NoOp ->
            ( model, Cmd.none )

        -- New messages for progressive onboarding
        InitOnboarding planType email ->
            ( { model | isLoading = True }
            , initializeOnboarding planType email model.orgSlug
            )

        OnboardingInitialized result ->
            case result of
                Ok response ->
                    -- Store state in localStorage
                    let
                        state =
                            { organizationId = String.fromInt response.organizationId
                            , slug = response.slug
                            , sessionToken = response.sessionToken
                            , step = response.onboardingStep
                            , planType = response.planType
                            }

                        -- Reinitialize the user details model with the proper org slug
                        ( newUserDetailsModel, userDetailsCmd ) =
                            UserDetails.init model.key response.slug True

                        -- Update plan selection model with the plan type
                        oldPlanSelectionModel =
                            model.planSelectionModel

                        newPlanSelectionModel =
                            { oldPlanSelectionModel | selectedPlan = Just response.planType }
                    in
                    ( { model
                        | isLoading = False
                        , organizationId = Just response.organizationId
                        , orgSlug = response.slug
                        , sessionToken = Just response.sessionToken
                        , onboardingInProgress = True
                        , step = UserDetailsStep
                        , userDetailsModel = newUserDetailsModel
                        , planSelectionModel = newPlanSelectionModel
                      }
                    , Cmd.batch
                        [ storeOnboardingState state
                        , Nav.pushUrl model.key "/onboarding/personal"
                        , Cmd.map UserDetailsMsg userDetailsCmd
                        ]
                    )

                Err error ->
                    ( { model
                        | isLoading = False
                        , error = Just "Failed to initialize onboarding. Please try again."
                      }
                    , Cmd.none
                    )

        OnboardingStateReceived maybeState ->
            case maybeState of
                Just state ->
                    -- If we have a stored state, resume onboarding
                    let
                        step =
                            case state.step of
                                1 ->
                                    UserDetailsStep

                                2 ->
                                    CompanyDetailsStep

                                3 ->
                                    LicensingSettingsStep

                                4 ->
                                    AddAgentsStep

                                5 ->
                                    PaymentStep

                                _ ->
                                    PlanSelectionStep

                        organizationId =
                            String.toInt state.organizationId

                        -- Use the planType from the state
                        planType =
                            state.planType

                        -- Extract plan type from session - in a real app this should be retrieved from API
                        -- For now we'll load it from cookie/session storage via a port
                        fetchPlanTypeCmd =
                            if not (String.isEmpty state.slug) && not (String.isEmpty state.sessionToken) then
                                -- In a real implementation, issue an API request to get the plan
                                -- For now, trigger the port to get the plan type from localStorage
                                retrievePlanType state.slug

                            else
                                Cmd.none

                        -- Update the plan selection model with the saved plan
                        updatedPlanSelectionModel =
                            let
                                currentModel =
                                    model.planSelectionModel

                                -- Only update if we don't already have a selection
                                planSelectionWithSession =
                                    if currentModel.selectedPlan == Nothing then
                                        -- Set the selected plan and mark as loaded from session
                                        { currentModel
                                            | selectedPlan = Just planType
                                            , loadedFromSession = True
                                            , orgSlug = state.slug
                                        }

                                    else
                                        currentModel
                            in
                            planSelectionWithSession

                        oldUserDetailsModel =
                            model.userDetailsModel

                        updatedUserDetailsModel =
                            { oldUserDetailsModel | orgSlug = state.slug }

                        updatedModel =
                            { model
                                | orgSlug = state.slug
                                , sessionToken = Just state.sessionToken
                                , organizationId = organizationId
                                , onboardingInProgress = True
                                , step = step
                                , planSelectionModel = updatedPlanSelectionModel
                                , isBasicPlan = planType == "basic"
                                , userDetailsModel = updatedUserDetailsModel
                            }

                        -- Command to navigate to the appropriate step
                        navigateCmd =
                            Nav.pushUrl model.key (getStepFragment step)

                        -- If we're on the plan selection step, send the plan type to PlanSelection
                        planSelectionCmd =
                            if step == PlanSelectionStep then
                                -- Send command to load the plan from session if we have one
                                case updatedPlanSelectionModel.selectedPlan of
                                    Just plan ->
                                        Cmd.map PlanSelectionMsg (Task.perform (\_ -> PlanSelection.LoadPlanFromSession plan) (Task.succeed ()))

                                    Nothing ->
                                        Cmd.none

                            else
                                Cmd.none
                    in
                    ( updatedModel
                    , Cmd.batch
                        [ navigateCmd
                        , fetchPlanTypeCmd
                        , planSelectionCmd
                        ]
                    )

                Nothing ->
                    -- No stored state, continue as normal
                    ( model, Cmd.none )

        UpdateUser ->
            case model.sessionToken of
                Just token ->
                    ( { model | isLoading = True }
                    , updateUserDetails model.orgSlug token model.userDetailsModel
                    )

                Nothing ->
                    ( { model | error = Just "Session information is missing. Please try again." }
                    , Cmd.none
                    )

        UserUpdated result ->
            case result of
                Ok response ->
                    ( { model
                        | isLoading = False
                        , step = CompanyDetailsStep
                      }
                    , Nav.pushUrl model.key "/onboarding/company"
                    )

                Err error ->
                    ( { model
                        | isLoading = False
                        , error = Just "Failed to update user details. Please try again."
                      }
                    , Cmd.none
                    )

        UpdateCompany ->
            case model.sessionToken of
                Just token ->
                    ( { model | isLoading = True }
                    , updateCompanyDetails model.orgSlug token model.companyDetailsModel
                    )

                Nothing ->
                    ( { model | error = Just "Session information is missing. Please try again." }
                    , Cmd.none
                    )

        CompanyUpdated result ->
            case result of
                Ok response ->
                    -- After company details are updated, update licensing settings
                    let
                        nextCmd =
                            case model.sessionToken of
                                Just token ->
                                    updateLicensingDetails model.orgSlug token model.licensingSettingsModel

                                Nothing ->
                                    Cmd.none
                    in
                    ( { model
                        | isLoading = False
                        , companyDetailsInitialized = True
                      }
                    , nextCmd
                    )

                Err error ->
                    ( { model
                        | isLoading = False
                        , error = Just "Failed to update company details. Please try again."
                      }
                    , Cmd.none
                    )

        UpdateLicensing ->
            case model.sessionToken of
                Just token ->
                    ( { model | isLoading = True }
                    , updateLicensingDetails model.orgSlug token model.licensingSettingsModel
                    )

                Nothing ->
                    ( { model | error = Just "Session information is missing. Please try again." }
                    , Cmd.none
                    )

        LicensingUpdated result ->
            case result of
                Ok response ->
                    -- After licensing settings are updated, navigate to the next step
                    let
                        nextStep =
                            if not response.isBasicPlan then
                                AddAgentsStep

                            else
                                PaymentStep

                        -- Use the nextStep field from the response to determine if we should navigate
                        -- instead of checking carrierContracts which doesn't exist in the response
                        gotoNextStep =
                            response.nextStep > 0

                        navCmd =
                            if gotoNextStep then
                                Nav.pushUrl model.key (getStepFragment nextStep)

                            else
                                Cmd.none
                    in
                    ( { model
                        | isLoading = False
                        , licensingSettingsInitialized = True
                        , isBasicPlan = response.isBasicPlan
                        , step =
                            --if gotoNextStep then
                            --    nextStep
                            --else
                            model.step
                      }
                    , Cmd.none
                      -- navCmd
                    )

                Err error ->
                    ( { model
                        | isLoading = False
                        , error = Just "Failed to update licensing details. Please try again."
                      }
                    , Cmd.none
                    )

        AddTeamMembers ->
            case model.sessionToken of
                Just token ->
                    case model.addAgentsModel of
                        Just agentsModel ->
                            ( { model | isLoading = True }
                            , addTeamMembers model.orgSlug token agentsModel
                            )

                        Nothing ->
                            ( { model | error = Just "Team members information is missing. Please try again." }
                            , Cmd.none
                            )

                Nothing ->
                    ( { model | error = Just "Session information is missing. Please try again." }
                    , Cmd.none
                    )

        TeamMembersAdded result ->
            case result of
                Ok response ->
                    -- After team members are added, navigate to payment step
                    let
                        nextStep =
                            PaymentStep

                        navCmd =
                            Nav.pushUrl model.key (getStepFragment nextStep)
                    in
                    ( { model
                        | isLoading = False
                        , addAgentsInitialized = True
                        , step = nextStep
                      }
                    , navCmd
                    )

                Err error ->
                    ( { model
                        | isLoading = False
                        , error = Just "Failed to add team members. Please try again."
                      }
                    , Cmd.none
                    )

        CompleteSubscription ->
            case model.sessionToken of
                Just token ->
                    let
                        selectedPlan =
                            model.planSelectionModel.selectedPlan |> Maybe.withDefault "basic"

                        extraAgents =
                            model.planSelectionModel.extraAgents

                        extraContacts =
                            model.planSelectionModel.extraContacts
                    in
                    ( { model | isLoading = True }
                    , completeSubscription model.orgSlug token selectedPlan extraAgents extraContacts
                    )

                Nothing ->
                    ( { model | error = Just "Session information is missing. Please try again." }
                    , Cmd.none
                    )

        SubscriptionCompleted result ->
            case result of
                Ok response ->
                    -- Clear onboarding state from localStorage and redirect to success page
                    ( { model | isLoading = False }
                    , Cmd.batch
                        [ Nav.pushUrl model.key ("/login?onboarding=completed&email=" ++ Url.percentEncode model.userDetailsModel.email)
                        ]
                    )

                -- don't remove the parens here
                Err error ->
                    ( { model
                        | isLoading = False
                        , error = Just "Failed to complete subscription. Please try again."
                      }
                    , Cmd.none
                    )

        ResumeOnboarding email ->
            ( { model | isLoading = True }
            , resumeOnboarding email
            )

        PlanTypeReceived maybePlanType ->
            let
                planType =
                    Maybe.withDefault "basic" maybePlanType

                updatedPlanSelectionModel =
                    let
                        currentModel =
                            model.planSelectionModel
                    in
                    { currentModel
                        | selectedPlan = Just planType
                        , loadedFromSession = True
                    }

                -- Update the model with the plan type
                updatedModel =
                    { model
                        | planSelectionModel = updatedPlanSelectionModel
                        , isBasicPlan = planType == "basic"
                    }

                -- Command to update the PlanSelection model with the received plan
                planSelectionCmd =
                    if model.step == PlanSelectionStep then
                        -- Pass the plan type to PlanSelection module
                        Cmd.map PlanSelectionMsg (Task.perform (\_ -> PlanSelection.LoadPlanFromSession planType) (Task.succeed ()))

                    else
                        Cmd.none
            in
            ( updatedModel, planSelectionCmd )

        UserDetailsReceived maybeUserData ->
            case maybeUserData of
                Just userData ->
                    ( model
                    , Cmd.map UserDetailsMsg (Task.perform (\_ -> UserDetails.loadUserFromSession userData) (Task.succeed ()))
                    )

                -- don't remove the parens here
                Nothing ->
                    ( model, Cmd.none )

        RandomOrgNameGenerated orgName ->
            -- When we get a random org name, update both the org slug and the CompanyDetails model
            let
                oldCompanyDetailsModel =
                    model.companyDetailsModel

                updatedCompanyDetailsModel =
                    { oldCompanyDetailsModel | orgSlug = orgName }

                oldUserDetailsModel =
                    model.userDetailsModel

                updatedUserDetailsModel =
                    { oldUserDetailsModel | orgSlug = orgName }
            in
            ( { model
                | companyDetailsModel = updatedCompanyDetailsModel
                , userDetailsModel = updatedUserDetailsModel
                , orgSlug = orgName -- Update the orgSlug in the main model
              }
            , Cmd.none
            )

        GotUserDetails result ->
            case result of
                Ok userDetails ->
                    let
                        oldUserDetailsModel =
                            model.userDetailsModel

                        updatedUserDetailsModel =
                            { oldUserDetailsModel
                                | firstName = userDetails.firstName
                                , lastName = userDetails.lastName
                                , email = userDetails.email
                                , phone = userDetails.phone
                                , emailStatus = UserDetails.Available -- Consider email as valid since it's already registered
                            }
                    in
                    ( { model | userDetailsModel = updatedUserDetailsModel }, Cmd.none )

                Err error ->
                    ( { model | error = Just ("Failed to load user details: " ++ httpErrorToString error) }, Cmd.none )

        InitializeCurrentStep ->
            -- Initialize the current step based on the model's step field
            let
                ( cmd, updatedModel ) =
                    initializeStep model.step model
            in
            ( updatedModel, cmd )



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = getStepTitle model.step
    , body =
        [ div []
            [ if model.isLoading then
                -- Show loading spinner when loading
                div [ class "flex justify-center items-center h-screen" ]
                    [ div [ class "animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500" ] [] ]

              else
                div []
                    [ SetupLayout.view
                        (mapStepToSetupStep model.step)
                        model.isBasicPlan
                        (getStepNumber model.step)
                        [ div [ class "max-w-3xl mx-auto" ]
                            [ viewCurrentStep model
                            , viewNavigationControls model
                            ]
                        ]
                    ]
            ]
        ]
    }


viewCurrentStep : Model -> Html Msg
viewCurrentStep model =
    if model.step == PlanSelectionStep && not model.onboardingInProgress then
        -- On the first step, show the plan selection
        Html.map PlanSelectionMsg (PlanSelection.view model.planSelectionModel)

    else if model.step == PlanSelectionStep && model.onboardingInProgress then
        -- If we have an in-progress onboarding, show the resume view
        viewResumeOnboarding model

    else
        case model.step of
            PlanSelectionStep ->
                -- This case is handled above
                text ""

            UserDetailsStep ->
                Html.map UserDetailsMsg (UserDetails.view model.userDetailsModel)

            CompanyDetailsStep ->
                Html.map CompanyDetailsMsg (CompanyDetails.view model.companyDetailsModel)

            LicensingSettingsStep ->
                Html.map LicensingSettingsMsg (LicensingSettings.view model.licensingSettingsModel)

            AddAgentsStep ->
                if model.isBasicPlan then
                    div [ class "text-center p-8" ]
                        [ text "This step is not available for the basic plan. Please continue to payment."
                        , div [ class "mt-4" ]
                            [ button
                                [ class "px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                                , onClick (NavigateToStep PaymentStep)
                                ]
                                [ text "Continue to Payment" ]
                            ]
                        ]
                    -- don't add another bracket here

                else
                    case model.addAgentsModel of
                        Just aamodel ->
                            Html.map AddAgentsMsg (AddAgents.view aamodel)

                        Nothing ->
                            div [ class "text-center p-8" ]
                                [ text "Error: Add Agents model not initialized."
                                , button
                                    [ class "px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                                    , onClick (NavigateToStep PaymentStep)
                                    ]
                                    [ text "Continue to Payment" ]
                                ]

            -- don't add another bracket here
            PaymentStep ->
                Html.map PaymentMsg (Payment.view model.paymentModel)

            EnterpriseFormStep ->
                case model.enterpriseFormModel of
                    Just enterpriseFormModel ->
                        Html.map EnterpriseFormMsg (EnterpriseForm.view enterpriseFormModel)

                    Nothing ->
                        div [ class "text-center p-8" ]
                            [ text "Error: Enterprise Form model not initialized." ]



-- Add navigation controls to every step


viewNavigationControls : Model -> Html Msg
viewNavigationControls model =
    div [ class "flex justify-between mt-8 border-t pt-4" ]
        [ if not (List.isEmpty model.stepHistory) then
            button
                [ class "px-4 py-2 text-blue-600 border border-blue-600 rounded hover:bg-blue-50"
                , onClick NavigateBack
                ]
                [ text "Back" ]

          else
            div [] []

        -- Empty spacer
        , div [] [] -- Removed "Skip to X" link
        ]



-- UTILS


getStepTitle : Step -> String
getStepTitle step =
    case step of
        PlanSelectionStep ->
            "Choose Your Plan - Onboarding"

        UserDetailsStep ->
            "Personal Details - Onboarding"

        CompanyDetailsStep ->
            "Company Details - Onboarding"

        LicensingSettingsStep ->
            "Licensing & Carriers - Onboarding"

        AddAgentsStep ->
            "Add Team Members - Onboarding"

        PaymentStep ->
            "Payment - Onboarding"

        EnterpriseFormStep ->
            "Enterprise Form - Onboarding"


mapStepToSetupStep : Step -> SetupLayout.SetupStep
mapStepToSetupStep step =
    case step of
        PlanSelectionStep ->
            SetupLayout.PlanSelection

        UserDetailsStep ->
            SetupLayout.OrganizationSetup

        CompanyDetailsStep ->
            SetupLayout.OrganizationSetup

        LicensingSettingsStep ->
            SetupLayout.OrganizationSetup

        AddAgentsStep ->
            SetupLayout.AgentSetup

        PaymentStep ->
            SetupLayout.OrganizationSetup

        EnterpriseFormStep ->
            SetupLayout.OrganizationSetup



-- Define the Agent type locally


type alias Agent =
    { id : String
    , firstName : String
    , lastName : String
    , email : String
    , phone : String
    , isAdmin : Bool
    , isAgent : Bool
    }



-- Helper function to encode agent data


encodeAgent : Agent -> Encode.Value
encodeAgent agent =
    Encode.object
        [ ( "id", Encode.string agent.id )
        , ( "firstName", Encode.string agent.firstName )
        , ( "lastName", Encode.string agent.lastName )
        , ( "email", Encode.string agent.email )
        , ( "phone", Encode.string agent.phone )
        , ( "isAdmin", Encode.bool agent.isAdmin )
        , ( "isAgent", Encode.bool agent.isAgent )
        ]



-- Update agents list handling to convert AddAgents.Model.agents to our local Agent type


encodeOnboardingData : Model -> Encode.Value
encodeOnboardingData model =
    let
        selectedPlan =
            model.planSelectionModel.selectedPlan |> Maybe.withDefault "basic"

        extraAgents =
            model.planSelectionModel.extraAgents

        extraContacts =
            model.planSelectionModel.extraContacts

        -- User details
        firstName =
            model.userDetailsModel.firstName

        lastName =
            model.userDetailsModel.lastName

        email =
            model.userDetailsModel.email

        phone =
            model.userDetailsModel.phone

        -- Company details
        agencyName =
            model.companyDetailsModel.agencyName

        website =
            model.companyDetailsModel.website

        companyPhone =
            model.companyDetailsModel.phone

        primaryColor =
            model.companyDetailsModel.primaryColor

        secondaryColor =
            model.companyDetailsModel.secondaryColor

        logo =
            model.companyDetailsModel.logo

        -- Licensing settings
        carrierContracts =
            model.licensingSettingsModel.carrierContracts

        stateCarrierSettings =
            -- Create state carrier settings based on whether SmartSend for GI is enabled
            List.map
                (\carrier ->
                    { carrier = carrier
                    , active = True
                    , targetGI = model.licensingSettingsModel.useSmartSendForGI
                    }
                )
                carrierContracts

        -- Agents (if applicable)
        agents =
            case model.addAgentsModel of
                Just addAgentsModel ->
                    -- Use the agents from the model (already correct type)
                    Encode.list encodeAgent addAgentsModel.agents

                Nothing ->
                    Encode.list identity []
    in
    Encode.object
        [ ( "plan"
          , Encode.object
                [ ( "type", Encode.string selectedPlan )
                , ( "extraAgents", Encode.int extraAgents )
                , ( "extraContacts", Encode.int extraContacts )
                , ( "price", Encode.int (getPlanPrice selectedPlan) )
                , ( "billingCycle", Encode.string "monthly" )
                ]
          )
        , ( "user"
          , Encode.object
                [ ( "firstName", Encode.string firstName )
                , ( "lastName", Encode.string lastName )
                , ( "email", Encode.string email )
                , ( "phone", Encode.string phone )
                ]
          )
        , ( "company"
          , Encode.object
                [ ( "agencyName", Encode.string agencyName )
                , ( "website", Encode.string website )
                , ( "phone", Encode.string companyPhone )
                , ( "primaryColor", Encode.string primaryColor )
                , ( "secondaryColor", Encode.string secondaryColor )
                , ( "logo", Maybe.withDefault Encode.null (Maybe.map Encode.string logo) )
                ]
          )
        , ( "licensing"
          , Encode.object
                [ ( "carrierContracts", Encode.list Encode.string carrierContracts )
                , ( "useSmartSendForGI", Encode.bool model.licensingSettingsModel.useSmartSendForGI )
                ]
          )
        , ( "agents", agents )
        ]



-- Update the completeOnboarding function to submit all data at once


completeOnboarding : Model -> Cmd Msg
completeOnboarding model =
    case model.sessionToken of
        Just token ->
            Http.post
                { url = "/api/onboarding/complete"
                , body = Http.emptyBody
                , expect = Http.expectWhatever CompleteOnboarding
                }

        Nothing ->
            -- If we don't have a session token, something went wrong
            Cmd.none



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.batch
        [ Sub.map PlanSelectionMsg (PlanSelection.subscriptions model.planSelectionModel)
        , Sub.map UserDetailsMsg (UserDetails.subscriptions model.userDetailsModel)
        , Sub.map CompanyDetailsMsg (CompanyDetails.subscriptions model.companyDetailsModel)
        , Sub.map LicensingSettingsMsg (LicensingSettings.subscriptions model.licensingSettingsModel)
        , case model.addAgentsModel of
            Just addAgentsModel ->
                Sub.map AddAgentsMsg (AddAgents.subscriptions addAgentsModel)

            Nothing ->
                Sub.none
        , Sub.map PaymentMsg (Payment.subscriptions model.paymentModel)
        , case model.enterpriseFormModel of
            Just enterpriseFormModel ->
                Sub.map EnterpriseFormMsg (EnterpriseForm.subscriptions enterpriseFormModel)

            Nothing ->
                Sub.none
        , onboardingStateReceived OnboardingStateReceived
        , planTypeReceived PlanTypeReceived
        , userDetailsReceived UserDetailsReceived
        ]



-- Define StateCarrierSetting type locally


type alias StateCarrierSetting =
    { state : String
    , carrier : String
    , active : Bool
    , targetGI : Bool
    }



-- Encode StateCarrierSetting


encodeStateCarrierSetting : StateCarrierSetting -> Encode.Value
encodeStateCarrierSetting setting =
    Encode.object
        [ ( "state", Encode.string setting.state )
        , ( "carrier", Encode.string setting.carrier )
        , ( "active", Encode.bool setting.active )
        , ( "targetGI", Encode.bool setting.targetGI )
        ]



-- Helper function to get URL for a step (full URL instead of just fragment)


getStepFragment : Step -> String
getStepFragment step =
    "/onboarding/"
        ++ (case step of
                PlanSelectionStep ->
                    "plan"

                UserDetailsStep ->
                    "personal"

                CompanyDetailsStep ->
                    "company"

                LicensingSettingsStep ->
                    "licensing"

                AddAgentsStep ->
                    "agents"

                PaymentStep ->
                    "payment"

                EnterpriseFormStep ->
                    "enterprise"
           )



-- Helper function to get readable label for a step


getStepLabel : Step -> String
getStepLabel step =
    case step of
        PlanSelectionStep ->
            "Plan Selection"

        UserDetailsStep ->
            "Personal Details"

        CompanyDetailsStep ->
            "Company Details"

        LicensingSettingsStep ->
            "Licensing Settings"

        AddAgentsStep ->
            "Add Agents"

        PaymentStep ->
            "Payment"

        EnterpriseFormStep ->
            "Enterprise Form"



-- Helper function to convert the step to a number for progress tracking


getStepNumber : Step -> Int
getStepNumber step =
    case step of
        PlanSelectionStep ->
            0

        UserDetailsStep ->
            1

        CompanyDetailsStep ->
            2

        LicensingSettingsStep ->
            3

        AddAgentsStep ->
            4

        PaymentStep ->
            5

        EnterpriseFormStep ->
            6



-- Helper function to get the next step in sequence


getNextStep : Step -> Bool -> Step
getNextStep currentStep isBasicPlan =
    case currentStep of
        PlanSelectionStep ->
            UserDetailsStep

        UserDetailsStep ->
            CompanyDetailsStep

        CompanyDetailsStep ->
            LicensingSettingsStep

        LicensingSettingsStep ->
            if isBasicPlan then
                PaymentStep

            else
                AddAgentsStep

        AddAgentsStep ->
            PaymentStep

        PaymentStep ->
            PaymentStep

        -- No next step after payment
        EnterpriseFormStep ->
            EnterpriseFormStep



-- Can't proceed from enterprise form
-- Helper function to get plan price based on type


getPlanPrice : String -> Int
getPlanPrice planType =
    case planType of
        "basic" ->
            29

        "pro" ->
            99

        "enterprise" ->
            499

        _ ->
            29



-- Default to basic price
-- HTTP functions for progressive onboarding


initializeOnboarding : String -> String -> String -> Cmd Msg
initializeOnboarding planType email orgSlug =
    let
        url =
            "/api/onboarding/initialize"

        body =
            Encode.object
                [ ( "planType", Encode.string planType )
                , ( "email", Encode.string email )
                , ( "organizationName", Encode.string orgSlug )
                ]
                |> Http.jsonBody

        decoder =
            Decode.map5
                (\organizationId slug sessionToken onboardingStep planTypeValue ->
                    { organizationId = organizationId
                    , slug = slug
                    , sessionToken = sessionToken
                    , onboardingStep = onboardingStep
                    , planType = planTypeValue
                    }
                )
                (Decode.field "organizationId" Decode.int)
                (Decode.field "slug" Decode.string)
                (Decode.field "sessionToken" Decode.string)
                (Decode.field "onboardingStep" Decode.int)
                (Decode.field "planType" (Decode.oneOf [ Decode.string, Decode.null "basic" ]))
    in
    Http.post
        { url = url
        , body = body
        , expect = Http.expectJson OnboardingInitialized decoder
        }


resumeOnboarding : String -> Cmd Msg
resumeOnboarding email =
    let
        url =
            "/api/onboarding/resume-onboarding"

        body =
            Encode.object
                [ ( "email", Encode.string email )
                ]
                |> Http.jsonBody

        decoder =
            Decode.map5
                (\organizationId slug sessionToken onboardingStep planTypeValue ->
                    { organizationId = organizationId
                    , slug = slug
                    , sessionToken = sessionToken
                    , onboardingStep = onboardingStep
                    , planType = planTypeValue
                    }
                )
                (Decode.field "organizationId" Decode.int)
                (Decode.field "slug" Decode.string)
                (Decode.field "sessionToken" Decode.string)
                (Decode.field "onboardingStep" Decode.int)
                (Decode.field "planType" (Decode.oneOf [ Decode.string, Decode.null "basic" ]))
    in
    Http.post
        { url = url
        , body = body
        , expect = Http.expectJson OnboardingInitialized decoder
        }


updateUserDetails : String -> String -> UserDetails.Model -> Cmd Msg
updateUserDetails orgSlug sessionToken model =
    let
        url =
            "/api/onboarding/user-details"

        -- Ensure phone number only contains digits
        phoneDigits =
            String.filter Char.isDigit model.phone

        body =
            Encode.object
                [ ( "firstName", Encode.string model.firstName )
                , ( "lastName", Encode.string model.lastName )
                , ( "email", Encode.string model.email )
                , ( "phone", Encode.string phoneDigits )
                ]
                |> Http.jsonBody

        decoder =
            Decode.map
                (\onboardingStep ->
                    { onboardingStep = onboardingStep }
                )
                (Decode.field "onboardingStep" Decode.int)
    in
    Http.request
        { method = "POST"
        , url = url
        , body = body
        , expect = Http.expectJson UserUpdated decoder
        , headers = [] -- The session token is in the cookies, no need to pass it
        , timeout = Nothing
        , tracker = Nothing
        }


updateCompanyDetails : String -> String -> CompanyDetails.Model -> Cmd Msg
updateCompanyDetails orgSlug sessionToken model =
    let
        url =
            "/api/onboarding/company-details"

        body =
            Encode.object
                [ ( "agencyName", Encode.string model.agencyName )
                , ( "website", Encode.string model.website )
                , ( "phone", Encode.string model.phone )
                , ( "primaryColor", Encode.string model.primaryColor )
                , ( "secondaryColor", Encode.string model.secondaryColor )
                , ( "logo", Maybe.map Encode.string model.logo |> Maybe.withDefault Encode.null )
                ]
                |> Http.jsonBody

        decoder =
            Decode.map
                (\onboardingStep ->
                    { onboardingStep = onboardingStep }
                )
                (Decode.field "onboardingStep" Decode.int)
    in
    Http.request
        { method = "POST"
        , url = url
        , body = body
        , expect = Http.expectJson CompanyUpdated decoder
        , headers = [] -- The session token is in the cookies, no need to pass it
        , timeout = Nothing
        , tracker = Nothing
        }


updateLicensingDetails : String -> String -> LicensingSettings.Model -> Cmd Msg
updateLicensingDetails orgSlug sessionToken model =
    let
        url =
            "/api/onboarding/licensing-settings"

        body =
            Encode.object
                [ ( "carrierContracts", Encode.list Encode.string model.carrierContracts )
                , ( "useSmartSendForGI", Encode.bool model.useSmartSendForGI )
                ]
                |> Http.jsonBody

        decoder =
            Decode.map3
                (\onboardingStep nextStep isBasicPlan ->
                    { onboardingStep = onboardingStep
                    , nextStep = nextStep
                    , isBasicPlan = isBasicPlan
                    }
                )
                (Decode.field "onboardingStep" Decode.int)
                (Decode.field "nextStep" Decode.int)
                (Decode.field "isBasicPlan" Decode.bool)
    in
    Http.request
        { method = "POST"
        , url = url
        , body = body
        , expect = Http.expectJson LicensingUpdated decoder
        , headers =
            if String.isEmpty sessionToken then
                []

            else
                [ Http.header "x-onboarding-session" sessionToken ]
        , timeout = Nothing
        , tracker = Nothing
        }


addTeamMembers : String -> String -> AddAgents.Model -> Cmd Msg
addTeamMembers orgSlug sessionToken model =
    let
        url =
            "/api/onboarding/agents"

        encodeTeamMember agent =
            Encode.object
                [ ( "firstName", Encode.string agent.firstName )
                , ( "lastName", Encode.string agent.lastName )
                , ( "email", Encode.string agent.email )
                , ( "phone", Encode.string agent.phone )
                , ( "isAdmin", Encode.bool agent.isAdmin )
                , ( "isAgent", Encode.bool agent.isAgent )
                ]

        body =
            Encode.object
                [ ( "agents", Encode.list encodeTeamMember model.agents )
                ]
                |> Http.jsonBody

        headers =
            [ Http.header "x-onboarding-session" sessionToken ]

        decoder =
            Decode.map
                (\onboardingStep ->
                    { onboardingStep = onboardingStep }
                )
                (Decode.field "onboardingStep" Decode.int)
    in
    Http.request
        { method = "POST"
        , url = url
        , body = body
        , expect = Http.expectJson TeamMembersAdded decoder
        , headers = headers
        , timeout = Nothing
        , tracker = Nothing
        }


completeSubscription : String -> String -> String -> Int -> Int -> Cmd Msg
completeSubscription orgSlug sessionToken selectedPlan extraAgents extraContacts =
    let
        url =
            "/api/onboarding/" ++ orgSlug ++ "/complete"

        body =
            Encode.object
                [ ( "planType", Encode.string selectedPlan )
                , ( "extraAgents", Encode.int extraAgents )
                , ( "extraContacts", Encode.int extraContacts )
                ]
                |> Http.jsonBody

        headers =
            [ Http.header "Authorization" ("Bearer " ++ sessionToken) ]

        decoder =
            Decode.map2
                (\clientSecret publishableKey ->
                    { clientSecret = clientSecret
                    , publishableKey = publishableKey
                    }
                )
                (Decode.field "clientSecret" Decode.string)
                (Decode.field "publishableKey" Decode.string)
    in
    Http.request
        { method = "POST"
        , url = url
        , body = body
        , expect = Http.expectJson SubscriptionCompleted decoder
        , headers = headers
        , timeout = Nothing
        , tracker = Nothing
        }



-- Add a function to handle the email input for resuming onboarding


viewResumeOnboarding : Model -> Html Msg
viewResumeOnboarding model =
    let
        emailValue =
            model.userDetailsModel.email
    in
    div [ class "max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md" ]
        [ h2 [ class "text-2xl font-bold mb-6 text-center" ] [ text "Resume Your Onboarding" ]
        , p [ class "mb-6 text-gray-600" ]
            [ text "It looks like you've already started the onboarding process. Enter your email to continue where you left off." ]
        , div [ class "mb-4" ]
            [ label [ class "block text-gray-700 text-sm font-bold mb-2", for "email" ] [ text "Email" ]
            , input
                [ class "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                , id "email"
                , type_ "email"
                , placeholder "your.email@example.com"
                , value emailValue
                , onInput (\email -> ResumeOnboarding email)
                ]
                []
            ]
        , div [ class "flex items-center justify-between" ]
            [ button
                [ class "bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                , onClick (ResumeOnboarding emailValue)
                ]
                [ text "Resume Onboarding" ]
            , button
                [ class "bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                , onClick (NavigateToStep PlanSelectionStep)
                ]
                [ text "Start New" ]
            ]
        ]



-- Add this function near the other HTTP functions


fetchUserDetails : String -> String -> Cmd Msg
fetchUserDetails _ _ =
    let
        url =
            "/api/onboarding/user-details"

        decoder =
            Decode.map4
                (\firstName lastName email phone ->
                    { firstName = firstName
                    , lastName = lastName
                    , email = email
                    , phone = phone
                    }
                )
                (Decode.field "firstName" Decode.string)
                (Decode.field "lastName" Decode.string)
                (Decode.field "email" Decode.string)
                (Decode.field "phone" Decode.string)
    in
    Http.request
        { method = "GET"
        , url = url
        , body = Http.emptyBody
        , expect = Http.expectJson GotUserDetails decoder
        , headers = [] -- The session token is in the cookies, no need to pass it
        , timeout = Nothing
        , tracker = Nothing
        }



-- Helper function to convert Http.Error to a readable string


httpErrorToString : Http.Error -> String
httpErrorToString error =
    case error of
        Http.BadUrl url ->
            "Bad URL: " ++ url

        Http.Timeout ->
            "Request timed out"

        Http.NetworkError ->
            "Network error"

        Http.BadStatus statusCode ->
            "Bad status: " ++ String.fromInt statusCode

        Http.BadBody message ->
            "Bad body: " ++ message



-- Helper function to initialize a specific step


initializeStep : Step -> Model -> ( Cmd Msg, Model )
initializeStep step model =
    case step of
        PlanSelectionStep ->
            -- Plan selection is always initialized in init, so just return the model
            ( Cmd.none, model )

        UserDetailsStep ->
            -- Always fetch user details from backend when navigating to this step
            let
                fetchCmd =
                    case model.sessionToken of
                        Just token ->
                            -- If we have a session token, fetch user details from backend
                            fetchUserDetails model.orgSlug token

                        Nothing ->
                            -- Otherwise, just initialize the model
                            Cmd.map UserDetailsMsg (UserDetails.fetchUserDetails model.orgSlug)
            in
            ( fetchCmd, { model | userDetailsInitialized = True } )

        CompanyDetailsStep ->
            -- Always initialize company details from backend when navigating to this step
            let
                ( newModel, subCmd ) =
                    case model.sessionToken of
                        Just token ->
                            CompanyDetails.init model.key model.orgSlug token

                        Nothing ->
                            CompanyDetails.init model.key model.orgSlug model.session

                -- Preserve existing company details if they exist
                modelWithDetails =
                    { newModel
                        | agencyName = model.companyDetailsModel.agencyName
                        , website = model.companyDetailsModel.website
                        , phone = model.companyDetailsModel.phone
                        , primaryColor = model.companyDetailsModel.primaryColor
                        , secondaryColor = model.companyDetailsModel.secondaryColor
                        , logo = model.companyDetailsModel.logo
                    }
            in
            ( Cmd.map CompanyDetailsMsg subCmd
            , { model | companyDetailsModel = modelWithDetails, companyDetailsInitialized = True }
            )

        LicensingSettingsStep ->
            -- Always initialize licensing settings from backend when navigating to this step
            let
                ( newModel, subCmd ) =
                    LicensingSettings.init model.key model.orgSlug
            in
            ( Cmd.map LicensingSettingsMsg subCmd
            , { model | licensingSettingsModel = newModel, licensingSettingsInitialized = True }
            )

        AddAgentsStep ->
            -- Always initialize add agents from backend when navigating to this step
            let
                ( newModel, subCmd ) =
                    AddAgents.init model.key model.orgSlug True
            in
            ( Cmd.map AddAgentsMsg subCmd
            , { model | addAgentsModel = Just newModel, addAgentsInitialized = True }
            )

        PaymentStep ->
            -- Always initialize payment from backend when navigating to this step
            let
                ( newModel, subCmd ) =
                    Payment.init model.key model.orgSlug
            in
            ( Cmd.map PaymentMsg subCmd
            , { model | paymentModel = newModel, paymentInitialized = True }
            )

        EnterpriseFormStep ->
            -- Always initialize enterprise form from backend when navigating to this step
            let
                ( newModel, subCmd ) =
                    EnterpriseForm.init model.key
            in
            ( Cmd.map EnterpriseFormMsg subCmd
            , { model | enterpriseFormModel = Just newModel, enterpriseFormInitialized = True }
            )

================
File: frontend/backup/OnboardingNew.elm
================
port module OnboardingNew exposing
    ( Model
    , Msg(..)
    , Step(..)
    , init
    , subscriptions
    , update
    , view
    )

import Browser
import Browser.Dom as Dom
import Browser.Navigation as Nav
import Components.SetupLayout as SetupLayout
import Html exposing (..)
import Html.Attributes exposing (alt, checked, class, for, href, id, placeholder, src, type_, value)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode
import Random
import Task
import Url
import Utils.RandomOrgName exposing (generateOrgName)



-- Subscription Tier Type


type alias SubscriptionTier =
    { id : String
    , name : String
    , description : String
    , price : Float
    , features : List String
    , maxAgents : Int
    , maxContacts : Int
    }



-- Ports for onboarding cookie management


port setOnboardingCookie : { sessionId : String, planType : String, step : Int } -> Cmd msg


port getOnboardingCookie : () -> Cmd msg


port onboardingCookieReceived : (Maybe { sessionId : String, planType : String, step : Int } -> msg) -> Sub msg



-- Ports for storing section data


port storeOnboardingData : { section : String, data : Encode.Value } -> Cmd msg


port getOnboardingData : String -> Cmd msg


port onboardingDataReceived : (Maybe Encode.Value -> msg) -> Sub msg



-- TYPES


type Step
    = PlanSelectionStep
    | UserDetailsStep
    | CompanyDetailsStep
    | LicensingSettingsStep
    | AddAgentsStep
    | PaymentStep
    | EnterpriseFormStep


type alias UserDetails =
    { firstName : String
    , lastName : String
    , email : String
    , phone : String
    }


userDetailsInit : UserDetails
userDetailsInit =
    { firstName = ""
    , lastName = ""
    , email = ""
    , phone = ""
    }


userDetailsDecoder : Decoder UserDetails
userDetailsDecoder =
    Decode.succeed UserDetails
        |> required "firstName" Decode.string
        |> required "lastName" Decode.string
        |> required "email" Decode.string
        |> required "phone" Decode.string


userDetailsEncoder : UserDetails -> Encode.Value
userDetailsEncoder details =
    Encode.object
        [ ( "firstName", Encode.string details.firstName )
        , ( "lastName", Encode.string details.lastName )
        , ( "email", Encode.string details.email )
        , ( "phone", Encode.string details.phone )
        ]


type alias CompanyDetails =
    { agencyName : String
    , website : String
    , phone : String
    , primaryColor : String
    , secondaryColor : String
    , logo : Maybe String
    }


companyDetailsInit : CompanyDetails
companyDetailsInit =
    { agencyName = ""
    , website = ""
    , phone = ""
    , primaryColor = "#6B46C1"
    , secondaryColor = "#9F7AEA"
    , logo = Nothing
    }


companyDetailsDecoder : Decoder CompanyDetails
companyDetailsDecoder =
    Decode.succeed CompanyDetails
        |> required "agencyName" Decode.string
        |> required "website" Decode.string
        |> optional "phone" Decode.string ""
        |> optional "primaryColor" Decode.string ""
        |> optional "secondaryColor" Decode.string ""
        |> optional "logo" (Decode.nullable Decode.string) Nothing


companyDetailsEncoder : CompanyDetails -> Encode.Value
companyDetailsEncoder details =
    Encode.object
        [ ( "agencyName", Encode.string details.agencyName )
        , ( "website", Encode.string details.website )
        , ( "phone", Encode.string details.phone )
        , ( "primaryColor", Encode.string details.primaryColor )
        , ( "secondaryColor", Encode.string details.secondaryColor )
        , ( "logo"
          , case details.logo of
                Just logoPath ->
                    Encode.string logoPath

                Nothing ->
                    Encode.null
          )
        ]


type alias LicensingSettings =
    { carrierContracts : List String
    , useSmartSendForGI : Bool
    }


licensingSettingsInit : LicensingSettings
licensingSettingsInit =
    { carrierContracts = []
    , useSmartSendForGI = True
    }


licensingSettingsDecoder : Decoder LicensingSettings
licensingSettingsDecoder =
    Decode.succeed LicensingSettings
        |> required "carrierContracts" (Decode.list Decode.string)
        |> required "useSmartSendForGI" Decode.bool


licensingSettingsEncoder : LicensingSettings -> Encode.Value
licensingSettingsEncoder settings =
    Encode.object
        [ ( "carrierContracts", Encode.list Encode.string settings.carrierContracts )
        , ( "useSmartSendForGI", Encode.bool settings.useSmartSendForGI )
        ]


type alias Agent =
    { id : String
    , firstName : String
    , lastName : String
    , email : String
    , phone : String
    , isAdmin : Bool
    , isAgent : Bool
    }


agentInit : Agent
agentInit =
    { id = ""
    , firstName = ""
    , lastName = ""
    , email = ""
    , phone = ""
    , isAdmin = False
    , isAgent = True
    }


agentDecoder : Decoder Agent
agentDecoder =
    Decode.succeed Agent
        |> required "id" Decode.string
        |> required "firstName" Decode.string
        |> required "lastName" Decode.string
        |> required "email" Decode.string
        |> required "phone" Decode.string
        |> required "isAdmin" Decode.bool
        |> optional "isAgent" Decode.bool True


agentEncoder : Agent -> Encode.Value
agentEncoder agent =
    Encode.object
        [ ( "id", Encode.string agent.id )
        , ( "firstName", Encode.string agent.firstName )
        , ( "lastName", Encode.string agent.lastName )
        , ( "email", Encode.string agent.email )
        , ( "phone", Encode.string agent.phone )
        , ( "isAdmin", Encode.bool agent.isAdmin )
        , ( "isAgent", Encode.bool agent.isAgent )
        ]


type alias NewAgentForm =
    { firstName : String
    , lastName : String
    , email : String
    , phone : String
    , isAdmin : Bool
    , isAgent : Bool
    }


newAgentInit : NewAgentForm
newAgentInit =
    { firstName = ""
    , lastName = ""
    , email = ""
    , phone = ""
    , isAdmin = False
    , isAgent = True
    }


type alias AddAgents =
    { agents : List Agent
    , newAgent : NewAgentForm
    , agentEmailStatus : EmailStatus
    }


addAgentsInit : AddAgents
addAgentsInit =
    { agents = []
    , newAgent = newAgentInit
    , agentEmailStatus = NotChecked
    }


addAgentsEncoder : AddAgents -> Encode.Value
addAgentsEncoder addAgents =
    Encode.object
        [ ( "agents", Encode.list agentEncoder addAgents.agents ) ]


type EmailStatus
    = NotChecked
    | Checking
    | Valid
    | Invalid String


type alias Payment =
    { paymentSucceeded : Bool
    , paymentError : Maybe String
    , extraAgents : Int
    , extraContacts : Int
    }


paymentInit : Payment
paymentInit =
    { paymentSucceeded = False
    , paymentError = Nothing
    , extraAgents = 0
    , extraContacts = 0
    }


paymentDecoder : Decoder Payment
paymentDecoder =
    Decode.succeed Payment
        |> required "paymentSucceeded" Decode.bool
        |> optional "paymentError" (Decode.nullable Decode.string) Nothing
        |> optional "extraAgents" Decode.int 0
        |> optional "extraContacts" Decode.int 0


paymentEncoder : Payment -> Encode.Value
paymentEncoder payment =
    Encode.object
        [ ( "paymentSucceeded", Encode.bool payment.paymentSucceeded )
        , ( "paymentError"
          , case payment.paymentError of
                Just err ->
                    Encode.string err

                Nothing ->
                    Encode.null
          )
        , ( "extraAgents", Encode.int payment.extraAgents )
        , ( "extraContacts", Encode.int payment.extraContacts )
        ]


type alias EnterpriseForm =
    { enterpriseName : String
    , enterpriseEmail : String
    , enterprisePhone : String
    , message : String
    }


enterpriseFormInit : EnterpriseForm
enterpriseFormInit =
    { enterpriseName = ""
    , enterpriseEmail = ""
    , enterprisePhone = ""
    , message = ""
    }


enterpriseFormDecoder : Decoder EnterpriseForm
enterpriseFormDecoder =
    Decode.succeed EnterpriseForm
        |> required "enterpriseName" Decode.string
        |> required "enterpriseEmail" Decode.string
        |> required "enterprisePhone" Decode.string
        |> required "message" Decode.string


enterpriseFormEncoder : EnterpriseForm -> Encode.Value
enterpriseFormEncoder form =
    Encode.object
        [ ( "enterpriseName", Encode.string form.enterpriseName )
        , ( "enterpriseEmail", Encode.string form.enterpriseEmail )
        , ( "enterprisePhone", Encode.string form.enterprisePhone )
        , ( "message", Encode.string form.message )
        ]


type FormStatus
    = NotSubmitted
    | Submitted
    | SubmittedSuccessfully
    | SubmittedWithError String


type alias OnboardingSession =
    { sessionId : String
    , planType : String
    , currentStep : Int
    }


type alias Model =
    { step : Step
    , userDetails : UserDetails
    , userEmailStatus : EmailStatus
    , companyDetails : CompanyDetails
    , licensingSettings : LicensingSettings
    , addAgents : AddAgents
    , payment : Payment
    , enterpriseForm : EnterpriseForm
    , enterpriseEmailStatus : EmailStatus
    , enterpriseFormStatus : FormStatus
    , session : Maybe OnboardingSession
    , orgSlug : String
    , isBasicPlan : Bool
    , error : Maybe String
    , isLoading : Bool
    , key : Nav.Key
    , stepHistory : List Step
    , subscriptionTiers : List SubscriptionTier
    }


init : Nav.Key -> String -> String -> Step -> ( Model, Cmd Msg )
init key initialOrgSlug sessionToken initialStep =
    let
        model =
            { step = initialStep
            , userDetails = userDetailsInit
            , userEmailStatus = NotChecked
            , companyDetails = companyDetailsInit
            , licensingSettings = licensingSettingsInit
            , addAgents = addAgentsInit
            , payment = paymentInit
            , enterpriseForm = enterpriseFormInit
            , enterpriseEmailStatus = NotChecked
            , enterpriseFormStatus = NotSubmitted
            , session =
                if String.isEmpty sessionToken then
                    Nothing

                else
                    Just { sessionId = sessionToken, planType = "basic", currentStep = 1 }
            , orgSlug = initialOrgSlug
            , isBasicPlan = True
            , error = Nothing
            , isLoading = False
            , key = key
            , stepHistory = []
            , subscriptionTiers = []
            }
    in
    ( model, fetchSubscriptionTiers )


type alias EmailCheckResponse =
    { available : Bool
    , message : String
    }


type alias SaveResponse =
    { success : Bool
    , message : String
    , slug : String
    }


type alias OnboardingSettingsResponse =
    { userDetails : Maybe UserDetails
    , companyDetails : Maybe CompanyDetails
    , licensingSettings : Maybe LicensingSettings
    , agents : Maybe (List Agent)
    , paymentInfo : Maybe Payment
    , enterpriseForm : Maybe EnterpriseForm
    , currentStep : Int
    , planType : String
    }


onboardingSettingsDecoder : Decoder OnboardingSettingsResponse
onboardingSettingsDecoder =
    Decode.succeed OnboardingSettingsResponse
        |> optional "userDetails" (Decode.nullable userDetailsDecoder) Nothing
        |> optional "companyDetails" (Decode.nullable companyDetailsDecoder) Nothing
        |> optional "licensingSettings" (Decode.nullable licensingSettingsDecoder) Nothing
        |> optional "agents" (Decode.nullable (Decode.list agentDecoder)) Nothing
        |> optional "paymentInfo" (Decode.nullable paymentDecoder) Nothing
        |> optional "enterpriseForm" (Decode.nullable enterpriseFormDecoder) Nothing
        |> required "currentStep" Decode.int
        |> required "planType" Decode.string


type
    Msg
    -- Session Management
    = OnboardingCookieReceived (Maybe { sessionId : String, planType : String, step : Int })
    | OnboardingDataReceived (Maybe Encode.Value)
    | FetchOnboardingData String
    | GotOnboardingSettings (Result Http.Error OnboardingSettingsResponse)
    | StartOnboarding String -- planType
    | OnboardingStarted (Result Http.Error { sessionId : String, planType : String, step : Int })
      -- User Details
    | UpdateUserFirstName String
    | UpdateUserLastName String
    | UpdateUserEmail String
    | UserEmailBlurred
    | UserEmailFocused
    | GotUserEmailCheckResponse (Result Http.Error EmailCheckResponse)
    | UpdateUserPhone String
    | SaveUserDetails
    | UserDetailsSaved (Result Http.Error SaveResponse)
      -- Company Details
    | UpdateAgencyName String
    | UpdateWebsite String
    | UpdatePhone String
    | UpdatePrimaryColor String
    | UpdateSecondaryColor String
    | SaveCompanyDetails
    | CompanyDetailsSaved (Result Http.Error SaveResponse)
      -- Licensing Settings
    | AddCarrierContract String
    | RemoveCarrierContract String
    | ToggleSection String
    | ToggleAllCarriers Bool
    | ToggleSmartSendForGI Bool
    | SaveLicensingSettings
    | LicensingSettingsSaved (Result Http.Error SaveResponse)
      -- Add Agents
    | UpdateAgentFirstName String
    | UpdateAgentLastName String
    | UpdateAgentEmail String
    | AgentEmailBlurred
    | AgentEmailFocused
    | UpdateAgentPhone String
    | UpdateAgentCheckbox Bool
    | UpdateAgentRole Bool
    | AddAgent
    | SaveAgent
    | CancelAddAgent
    | GotAgentEmailCheckResponse (Result Http.Error EmailCheckResponse)
    | AgentSaved (Result Http.Error SaveResponse)
      -- Payment
    | UpdateExtraAgents Int
    | UpdateExtraContacts Int
    | CompletePayment
    | PaymentCompleted (Result Http.Error SaveResponse)
      -- Enterprise Form
    | UpdateEnterpriseName String
    | UpdateEnterpriseEmail String
    | UpdateEnterprisePhone String
    | UpdateEnterpriseMessage String
    | SaveEnterpriseForm
    | EnterpriseFormSaved (Result Http.Error SaveResponse)
      -- Navigation
    | NavigateToStep Step
    | NavigateBack
    | SkipStep
    | CompleteOnboarding
    | OnboardingCompleted (Result Http.Error SaveResponse)
    | RandomOrgNameGenerated String
    | ScrollToTop
    | NoOp
      -- Subscription Tiers
    | GotSubscriptionTiers (Result Http.Error (List SubscriptionTier))
    | SelectPlanType String



-- HTTP Fetches


fetchSubscriptionTiers : Cmd Msg
fetchSubscriptionTiers =
    Http.get
        { url = "/api/organizations/subscription-tiers"
        , expect = Http.expectJson GotSubscriptionTiers subscriptionTiersDecoder
        }


subscriptionTiersDecoder : Decoder (List SubscriptionTier)
subscriptionTiersDecoder =
    Decode.field "tiers" <|
        Decode.list
            (Decode.map7 SubscriptionTier
                (Decode.field "id" Decode.string)
                (Decode.field "name" Decode.string)
                (Decode.oneOf
                    [ Decode.field "description" Decode.string
                    , Decode.succeed ""
                    ]
                )
                (Decode.map
                    (\priceStr ->
                        String.replace "$" "" priceStr
                            |> String.replace "/mo" ""
                            |> String.toFloat
                            |> Maybe.withDefault 0
                    )
                    (Decode.field "price" Decode.string)
                )
                (Decode.field "features" (Decode.list Decode.string))
                (Decode.field "agentLimit" Decode.int)
                (Decode.field "contactLimit" Decode.int)
            )


fetchOnboardingSettings : String -> Cmd Msg
fetchOnboardingSettings sessionId =
    Http.request
        { method = "GET"
        , headers = [ Http.header "X-Onboarding-Session" sessionId ]
        , url = "/api/onboarding/settings"
        , body = Http.emptyBody
        , expect = Http.expectJson GotOnboardingSettings onboardingSettingsDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


startOnboarding : String -> Cmd Msg
startOnboarding planType =
    Http.post
        { url = "/api/onboarding/start"
        , body = Http.jsonBody (Encode.object [ ( "planType", Encode.string planType ) ])
        , expect = Http.expectJson OnboardingStarted onboardingSessionDecoder
        }


onboardingSessionDecoder : Decoder { sessionId : String, planType : String, step : Int }
onboardingSessionDecoder =
    Decode.map3 (\id plan step -> { sessionId = id, planType = plan, step = step })
        (Decode.field "sessionId" Decode.string)
        (Decode.field "planType" Decode.string)
        (Decode.field "step" Decode.int)


saveUserDetails : String -> UserDetails -> Cmd Msg
saveUserDetails sessionId userDetails =
    let
        -- Only add the session header if a non-empty session ID is provided
        headers =
            if String.isEmpty sessionId then
                []

            else
                [ Http.header "X-Onboarding-Session" sessionId ]
    in
    Http.request
        { method = "POST"
        , headers = headers
        , url = "/api/onboarding/user-details"
        , body = Http.jsonBody (userDetailsEncoder userDetails)
        , expect = Http.expectJson UserDetailsSaved saveResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


saveResponseDecoder : Decoder SaveResponse
saveResponseDecoder =
    Decode.map3 SaveResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "message" Decode.string)
        (Decode.oneOf
            [ Decode.field "slug" Decode.string
            , Decode.succeed "" -- Default to empty string if no slug is provided
            ]
        )


saveCompanyDetails : String -> CompanyDetails -> Cmd Msg
saveCompanyDetails sessionId companyDetails =
    let
        -- Only add the session header if a non-empty session ID is provided
        headers =
            if String.isEmpty sessionId then
                []

            else
                [ Http.header "X-Onboarding-Session" sessionId ]
    in
    Http.request
        { method = "POST"
        , headers = headers
        , url = "/api/onboarding/company-details"
        , body = Http.jsonBody (companyDetailsEncoder companyDetails)
        , expect = Http.expectJson CompanyDetailsSaved saveResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


saveLicensingSettings : String -> LicensingSettings -> Cmd Msg
saveLicensingSettings sessionId licensingSettings =
    let
        -- Only add the session header if a non-empty session ID is provided
        headers =
            if String.isEmpty sessionId then
                []

            else
                [ Http.header "X-Onboarding-Session" sessionId ]
    in
    Http.request
        { method = "POST"
        , headers = headers
        , url = "/api/onboarding/licensing-settings"
        , body = Http.jsonBody (licensingSettingsEncoder licensingSettings)
        , expect = Http.expectJson LicensingSettingsSaved saveResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


saveAgent : String -> Agent -> Cmd Msg
saveAgent sessionId agent =
    Http.request
        { method = "POST"
        , headers = [ Http.header "X-Onboarding-Session" sessionId ]
        , url = "/api/onboarding/agents"
        , body = Http.jsonBody (agentEncoder agent)
        , expect = Http.expectJson AgentSaved saveResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


completePayment : String -> Payment -> Cmd Msg
completePayment sessionId payment =
    Http.request
        { method = "POST"
        , headers = [ Http.header "X-Onboarding-Session" sessionId ]
        , url = "/api/onboarding/payment"
        , body = Http.jsonBody (paymentEncoder payment)
        , expect = Http.expectJson PaymentCompleted saveResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


saveEnterpriseForm : String -> EnterpriseForm -> Cmd Msg
saveEnterpriseForm sessionId form =
    Http.request
        { method = "POST"
        , headers = [ Http.header "X-Onboarding-Session" sessionId ]
        , url = "/api/onboarding/enterprise"
        , body = Http.jsonBody (enterpriseFormEncoder form)
        , expect = Http.expectJson EnterpriseFormSaved saveResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


completeOnboardingRequest : String -> Cmd Msg
completeOnboardingRequest sessionId =
    Http.request
        { method = "POST"
        , headers = [ Http.header "X-Onboarding-Session" sessionId ]
        , url = "/api/onboarding/complete"
        , body = Http.emptyBody
        , expect = Http.expectJson OnboardingCompleted saveResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


checkEmail : String -> String -> Cmd Msg
checkEmail email endpoint =
    Http.post
        { url = "/api/onboarding/check-email"
        , body = Http.jsonBody (Encode.object [ ( "email", Encode.string email ), ( "endpoint", Encode.string endpoint ) ])
        , expect = Http.expectJson GotUserEmailCheckResponse emailCheckResponseDecoder
        }


emailCheckResponseDecoder : Decoder EmailCheckResponse
emailCheckResponseDecoder =
    Decode.map2 EmailCheckResponse
        (Decode.field "available" Decode.bool)
        (Decode.field "message" Decode.string)


checkAgentEmail : String -> String -> Cmd Msg
checkAgentEmail email sessionId =
    Http.request
        { method = "POST"
        , headers = [ Http.header "X-Onboarding-Session" sessionId ]
        , url = "/api/onboarding/check-agent-email"
        , body = Http.jsonBody (Encode.object [ ( "email", Encode.string email ) ])
        , expect = Http.expectJson GotAgentEmailCheckResponse emailCheckResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        -- Session Management
        OnboardingCookieReceived maybeCookie ->
            case maybeCookie of
                Just cookie ->
                    -- If we have a cookie, fetch all onboarding data from the backend
                    let
                        session =
                            { sessionId = cookie.sessionId
                            , planType = cookie.planType
                            , currentStep = cookie.step
                            }

                        isBasicPlan =
                            cookie.planType == "basic"

                        newStep =
                            case cookie.step of
                                1 ->
                                    UserDetailsStep

                                2 ->
                                    CompanyDetailsStep

                                3 ->
                                    LicensingSettingsStep

                                4 ->
                                    AddAgentsStep

                                5 ->
                                    PaymentStep

                                6 ->
                                    EnterpriseFormStep

                                _ ->
                                    PlanSelectionStep
                    in
                    ( { model
                        | session = Just session
                        , isBasicPlan = isBasicPlan
                        , step = newStep
                      }
                    , fetchOnboardingSettings cookie.sessionId
                    )

                Nothing ->
                    -- No cookie, stay on initial step
                    ( model, Cmd.none )

        OnboardingDataReceived maybeData ->
            -- Not used directly, as we use specific endpoints instead of generic data
            ( model, Cmd.none )

        FetchOnboardingData sectionName ->
            -- For now, we'll fetch all settings at once
            case model.session of
                Just session ->
                    ( model, fetchOnboardingSettings session.sessionId )

                Nothing ->
                    ( model, Cmd.none )

        GotOnboardingSettings result ->
            case result of
                Ok settings ->
                    -- Update all models with the retrieved settings
                    let
                        updatedUserDetails =
                            Maybe.withDefault model.userDetails settings.userDetails

                        updatedCompanyDetails =
                            Maybe.withDefault model.companyDetails settings.companyDetails

                        updatedLicensingSettings =
                            Maybe.withDefault model.licensingSettings settings.licensingSettings

                        updatedAddAgents =
                            case settings.agents of
                                Just agents ->
                                    { newAgent = model.addAgents.newAgent
                                    , agents = agents
                                    , agentEmailStatus = NotChecked
                                    }

                                Nothing ->
                                    model.addAgents

                        updatedPayment =
                            Maybe.withDefault model.payment settings.paymentInfo

                        updatedEnterpriseForm =
                            Maybe.withDefault model.enterpriseForm settings.enterpriseForm

                        isBasicPlan =
                            settings.planType == "basic"

                        newStep =
                            case settings.currentStep of
                                1 ->
                                    UserDetailsStep

                                2 ->
                                    CompanyDetailsStep

                                3 ->
                                    LicensingSettingsStep

                                4 ->
                                    AddAgentsStep

                                5 ->
                                    PaymentStep

                                6 ->
                                    EnterpriseFormStep

                                _ ->
                                    PlanSelectionStep

                        -- Update the session if needed
                        updatedSession =
                            case model.session of
                                Just session ->
                                    Just { session | currentStep = settings.currentStep, planType = settings.planType }

                                Nothing ->
                                    model.session
                    in
                    ( { model
                        | userDetails = updatedUserDetails
                        , companyDetails = updatedCompanyDetails
                        , licensingSettings = updatedLicensingSettings
                        , addAgents = updatedAddAgents
                        , payment = updatedPayment
                        , enterpriseForm = updatedEnterpriseForm
                        , isBasicPlan = isBasicPlan
                        , step = newStep
                        , session = updatedSession
                        , isLoading = False
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model | error = Just "Failed to load onboarding settings.", isLoading = False }, Cmd.none )

        StartOnboarding planType ->
            ( { model | isLoading = True }, startOnboarding planType )

        OnboardingStarted result ->
            case result of
                Ok response ->
                    -- Store the session in a cookie and update the model
                    let
                        session =
                            { sessionId = response.sessionId
                            , planType = response.planType
                            , currentStep = response.step
                            }

                        isBasicPlan =
                            response.planType == "basic"

                        -- Update the cookie
                        cookieCmd =
                            setOnboardingCookie
                                { sessionId = response.sessionId
                                , planType = response.planType
                                , step = response.step
                                }
                    in
                    ( { model
                        | session = Just session
                        , isBasicPlan = isBasicPlan
                        , step = UserDetailsStep
                        , isLoading = False
                      }
                    , Cmd.batch [ cookieCmd, Nav.pushUrl model.key "/onboarding/personal" ]
                    )

                Err _ ->
                    ( { model | error = Just "Failed to start onboarding process.", isLoading = False }, Cmd.none )

        -- User Details
        UpdateUserFirstName firstName ->
            let
                userDetails =
                    model.userDetails
            in
            ( { model | userDetails = { userDetails | firstName = firstName } }, Cmd.none )

        UpdateUserLastName lastName ->
            let
                userDetails =
                    model.userDetails
            in
            ( { model | userDetails = { userDetails | lastName = lastName } }, Cmd.none )

        UpdateUserEmail email ->
            let
                userDetails =
                    model.userDetails
            in
            ( { model | userDetails = { userDetails | email = email }, userEmailStatus = NotChecked }, Cmd.none )

        UserEmailBlurred ->
            -- Check email availability when field loses focus
            if String.length model.userDetails.email > 0 then
                ( { model | userEmailStatus = Checking }, checkEmail model.userDetails.email "user" )

            else
                ( model, Cmd.none )

        UserEmailFocused ->
            -- Reset validation when field gets focus
            ( { model | userEmailStatus = NotChecked }, Cmd.none )

        GotUserEmailCheckResponse result ->
            case result of
                Ok response ->
                    if response.available then
                        ( { model | userEmailStatus = Valid }, Cmd.none )

                    else
                        ( { model | userEmailStatus = Invalid response.message }, Cmd.none )

                Err _ ->
                    ( { model | userEmailStatus = Invalid "Error checking email." }, Cmd.none )

        UpdateUserPhone phone ->
            let
                userDetails =
                    model.userDetails
            in
            ( { model | userDetails = { userDetails | phone = phone } }, Cmd.none )

        SaveUserDetails ->
            -- Always proceed with submitting the form, even without a session
            ( { model | isLoading = True, error = Nothing }
            , case model.session of
                Just session ->
                    saveUserDetails session.sessionId model.userDetails

                Nothing ->
                    -- If no session ID, just call the function without a session ID
                    saveUserDetails "" model.userDetails
            )

        UserDetailsSaved result ->
            case result of
                Ok response ->
                    -- Update the org slug with the one returned from the server
                    let
                        -- Move to the next step
                        nextStep =
                            getNextStep UserDetailsStep model.isBasicPlan

                        -- Store the updated onboarding state in a cookie
                        cookieCmd =
                            case model.session of
                                Just session ->
                                    setOnboardingCookie
                                        { sessionId = session.sessionId
                                        , planType = session.planType
                                        , step = 2 -- UserDetails is step 1, next is 2
                                        }

                                Nothing ->
                                    Cmd.none
                    in
                    ( { model
                        | orgSlug = response.slug
                        , step = nextStep
                        , isLoading = False
                        , stepHistory = model.step :: model.stepHistory
                      }
                    , Cmd.batch [ cookieCmd, Nav.pushUrl model.key (getStepUrl nextStep) ]
                    )

                Err _ ->
                    ( { model | error = Just "Failed to save user details.", isLoading = False }, Cmd.none )

        -- Company Details
        UpdateAgencyName agencyName ->
            let
                companyDetails =
                    model.companyDetails
            in
            ( { model | companyDetails = { companyDetails | agencyName = agencyName } }, Cmd.none )

        UpdateWebsite website ->
            let
                companyDetails =
                    model.companyDetails
            in
            ( { model | companyDetails = { companyDetails | website = website } }, Cmd.none )

        UpdatePhone phone ->
            let
                companyDetails =
                    model.companyDetails
            in
            ( { model | companyDetails = { companyDetails | phone = phone } }, Cmd.none )

        UpdatePrimaryColor color ->
            let
                companyDetails =
                    model.companyDetails
            in
            ( { model | companyDetails = { companyDetails | primaryColor = color } }, Cmd.none )

        UpdateSecondaryColor color ->
            let
                companyDetails =
                    model.companyDetails
            in
            ( { model | companyDetails = { companyDetails | secondaryColor = color } }, Cmd.none )

        SaveCompanyDetails ->
            -- Always proceed with submitting the form, even without a session
            ( { model | isLoading = True, error = Nothing }
            , case model.session of
                Just session ->
                    saveCompanyDetails session.sessionId model.companyDetails

                Nothing ->
                    -- If no session ID, just call the function without a session ID
                    saveCompanyDetails "" model.companyDetails
            )

        CompanyDetailsSaved result ->
            case result of
                Ok _ ->
                    -- Move to the next step
                    let
                        nextStep =
                            getNextStep CompanyDetailsStep model.isBasicPlan

                        -- Store the updated onboarding state in a cookie
                        cookieCmd =
                            case model.session of
                                Just session ->
                                    setOnboardingCookie
                                        { sessionId = session.sessionId
                                        , planType = session.planType
                                        , step = 3 -- Company details is step 2, next is 3
                                        }

                                Nothing ->
                                    Cmd.none
                    in
                    ( { model
                        | step = nextStep
                        , isLoading = False
                        , stepHistory = model.step :: model.stepHistory
                      }
                    , Cmd.batch [ cookieCmd, Nav.pushUrl model.key (getStepUrl nextStep) ]
                    )

                Err error ->
                    let
                        errorMsg =
                            case error of
                                Http.BadUrl url ->
                                    "Invalid URL: " ++ url

                                Http.Timeout ->
                                    "Request timed out"

                                Http.NetworkError ->
                                    "Network error"

                                Http.BadStatus code ->
                                    "Server error: " ++ String.fromInt code

                                Http.BadBody message ->
                                    "Data error: " ++ message
                    in
                    ( { model | error = Just ("Failed to save company details: " ++ errorMsg), isLoading = False }, Cmd.none )

        -- Licensing Settings
        AddCarrierContract carrier ->
            let
                settings =
                    model.licensingSettings

                updatedCarriers =
                    if List.member carrier settings.carrierContracts then
                        settings.carrierContracts

                    else
                        carrier :: settings.carrierContracts
            in
            ( { model | licensingSettings = { settings | carrierContracts = updatedCarriers } }, Cmd.none )

        RemoveCarrierContract carrier ->
            let
                settings =
                    model.licensingSettings

                updatedCarriers =
                    List.filter (\c -> c /= carrier) settings.carrierContracts
            in
            ( { model | licensingSettings = { settings | carrierContracts = updatedCarriers } }, Cmd.none )

        ToggleSection _ ->
            -- This is a UI-only change, doesn't affect the model
            ( model, Cmd.none )

        ToggleAllCarriers selected ->
            let
                settings =
                    model.licensingSettings

                newSettings =
                    if selected then
                        { settings | carrierContracts = allCarriers }

                    else
                        { settings | carrierContracts = [] }
            in
            ( { model | licensingSettings = newSettings }, Cmd.none )

        ToggleSmartSendForGI value ->
            let
                settings =
                    model.licensingSettings
            in
            ( { model | licensingSettings = { settings | useSmartSendForGI = value } }, Cmd.none )

        SaveLicensingSettings ->
            -- Always proceed with submitting the form, even without a session
            ( { model | isLoading = True, error = Nothing }
            , case model.session of
                Just session ->
                    saveLicensingSettings session.sessionId model.licensingSettings

                Nothing ->
                    -- If no session ID, just call the function without a session ID
                    saveLicensingSettings "" model.licensingSettings
            )

        LicensingSettingsSaved result ->
            case result of
                Ok _ ->
                    -- Move to the next step, depends on plan type
                    let
                        nextStep =
                            getNextStep LicensingSettingsStep model.isBasicPlan

                        -- Store the updated onboarding state in a cookie
                        cookieCmd =
                            case model.session of
                                Just session ->
                                    setOnboardingCookie
                                        { sessionId = session.sessionId
                                        , planType = session.planType
                                        , step =
                                            if model.isBasicPlan then
                                                5

                                            else
                                                4

                                        -- Skip AgentsStep if basic plan
                                        }

                                Nothing ->
                                    Cmd.none
                    in
                    ( { model
                        | step = nextStep
                        , isLoading = False
                        , stepHistory = model.step :: model.stepHistory
                      }
                    , Cmd.batch [ cookieCmd, Nav.pushUrl model.key (getStepUrl nextStep) ]
                    )

                Err _ ->
                    ( { model | error = Just "Failed to save licensing settings.", isLoading = False }, Cmd.none )

        -- Add Agents
        UpdateAgentFirstName name ->
            let
                addAgents =
                    model.addAgents

                newAgent =
                    addAgents.newAgent

                updatedNewAgent =
                    { newAgent | firstName = name }
            in
            ( { model | addAgents = { addAgents | newAgent = updatedNewAgent } }, Cmd.none )

        UpdateAgentLastName name ->
            let
                addAgents =
                    model.addAgents

                newAgent =
                    addAgents.newAgent

                updatedNewAgent =
                    { newAgent | lastName = name }
            in
            ( { model | addAgents = { addAgents | newAgent = updatedNewAgent } }, Cmd.none )

        UpdateAgentEmail email ->
            let
                addAgents =
                    model.addAgents

                newAgent =
                    addAgents.newAgent

                updatedNewAgent =
                    { newAgent | email = email }
            in
            ( { model | addAgents = { addAgents | newAgent = updatedNewAgent, agentEmailStatus = NotChecked } }, Cmd.none )

        AgentEmailBlurred ->
            -- Check email availability when field loses focus
            let
                agentEmail =
                    model.addAgents.newAgent.email
            in
            if String.length agentEmail > 0 then
                case model.session of
                    Just session ->
                        let
                            addAgents =
                                model.addAgents
                        in
                        ( { model | addAgents = { addAgents | agentEmailStatus = Checking } }
                        , checkAgentEmail agentEmail session.sessionId
                        )

                    Nothing ->
                        ( model, Cmd.none )

            else
                ( model, Cmd.none )

        AgentEmailFocused ->
            -- Reset validation when field gets focus
            let
                addAgents =
                    model.addAgents
            in
            ( { model | addAgents = { addAgents | agentEmailStatus = NotChecked } }, Cmd.none )

        GotAgentEmailCheckResponse result ->
            case result of
                Ok response ->
                    let
                        addAgents =
                            model.addAgents

                        newStatus =
                            if response.available then
                                Valid

                            else
                                Invalid response.message
                    in
                    ( { model | addAgents = { addAgents | agentEmailStatus = newStatus } }, Cmd.none )

                Err _ ->
                    let
                        addAgents =
                            model.addAgents
                    in
                    ( { model | addAgents = { addAgents | agentEmailStatus = Invalid "Error checking email." } }, Cmd.none )

        UpdateAgentPhone phone ->
            let
                addAgents =
                    model.addAgents

                newAgent =
                    addAgents.newAgent

                updatedNewAgent =
                    { newAgent | phone = phone }
            in
            ( { model | addAgents = { addAgents | newAgent = updatedNewAgent } }, Cmd.none )

        UpdateAgentCheckbox isAdmin ->
            let
                addAgents =
                    model.addAgents

                newAgent =
                    addAgents.newAgent

                updatedNewAgent =
                    { newAgent | isAdmin = isAdmin }
            in
            ( { model | addAgents = { addAgents | newAgent = updatedNewAgent } }, Cmd.none )

        UpdateAgentRole isAgent ->
            let
                addAgents =
                    model.addAgents

                newAgent =
                    addAgents.newAgent

                updatedNewAgent =
                    { newAgent | isAgent = isAgent }
            in
            ( { model | addAgents = { addAgents | newAgent = updatedNewAgent } }, Cmd.none )

        AddAgent ->
            -- Create a new agent from the form data
            let
                addAgents =
                    model.addAgents

                newAgentForm =
                    addAgents.newAgent

                -- Create a new agent with a temporary ID
                newAgent =
                    { id = String.fromInt (List.length addAgents.agents + 1)
                    , firstName = newAgentForm.firstName
                    , lastName = newAgentForm.lastName
                    , email = newAgentForm.email
                    , phone = newAgentForm.phone
                    , isAdmin = newAgentForm.isAdmin
                    , isAgent = newAgentForm.isAgent
                    }

                updatedAgents =
                    newAgent :: addAgents.agents
            in
            case model.session of
                Just session ->
                    -- Save the agent to the server and then clear the form
                    ( { model | isLoading = True }
                    , saveAgent session.sessionId newAgent
                    )

                Nothing ->
                    -- Just add to the local list and clear the form
                    ( { model | addAgents = { addAgents | agents = updatedAgents, newAgent = newAgentInit } }, Cmd.none )

        SaveAgent ->
            -- Add the current agent being edited
            -- For simplicity, this is the same as AddAgent in this implementation
            update AddAgent model

        CancelAddAgent ->
            -- Clear the form without adding the agent
            let
                addAgents =
                    model.addAgents
            in
            ( { model | addAgents = { addAgents | newAgent = newAgentInit, agentEmailStatus = NotChecked } }, Cmd.none )

        AgentSaved result ->
            case result of
                Ok _ ->
                    -- Refresh the agents list from the server
                    case model.session of
                        Just session ->
                            ( { model | isLoading = False }
                            , fetchOnboardingSettings session.sessionId
                            )

                        Nothing ->
                            -- Just clear the form
                            let
                                addAgents =
                                    model.addAgents
                            in
                            ( { model | isLoading = False, addAgents = { addAgents | newAgent = newAgentInit, agentEmailStatus = NotChecked } }, Cmd.none )

                Err _ ->
                    ( { model | error = Just "Failed to save agent.", isLoading = False }, Cmd.none )

        -- Payment
        UpdateExtraAgents count ->
            let
                payment =
                    model.payment
            in
            ( { model | payment = { payment | extraAgents = count } }, Cmd.none )

        UpdateExtraContacts count ->
            let
                payment =
                    model.payment
            in
            ( { model | payment = { payment | extraContacts = count } }, Cmd.none )

        CompletePayment ->
            case model.session of
                Just session ->
                    ( { model | isLoading = True }
                    , completePayment session.sessionId model.payment
                    )

                Nothing ->
                    ( { model | error = Just "No active session." }, Cmd.none )

        PaymentCompleted result ->
            case result of
                Ok _ ->
                    -- Complete the onboarding process
                    ( { model | isLoading = False }, update CompleteOnboarding model |> Tuple.second )

                Err _ ->
                    ( { model | error = Just "Failed to process payment.", isLoading = False }, Cmd.none )

        -- Enterprise Form
        UpdateEnterpriseName name ->
            let
                form =
                    model.enterpriseForm
            in
            ( { model | enterpriseForm = { form | enterpriseName = name } }, Cmd.none )

        UpdateEnterpriseEmail email ->
            let
                form =
                    model.enterpriseForm
            in
            ( { model | enterpriseForm = { form | enterpriseEmail = email } }, Cmd.none )

        UpdateEnterprisePhone phone ->
            let
                form =
                    model.enterpriseForm
            in
            ( { model | enterpriseForm = { form | enterprisePhone = phone } }, Cmd.none )

        UpdateEnterpriseMessage message ->
            let
                form =
                    model.enterpriseForm
            in
            ( { model | enterpriseForm = { form | message = message } }, Cmd.none )

        SaveEnterpriseForm ->
            case model.session of
                Just session ->
                    ( { model | enterpriseFormStatus = Submitted, isLoading = True }
                    , saveEnterpriseForm session.sessionId model.enterpriseForm
                    )

                Nothing ->
                    ( { model | error = Just "No active session." }, Cmd.none )

        EnterpriseFormSaved result ->
            case result of
                Ok _ ->
                    -- Return to plan selection
                    ( { model
                        | enterpriseFormStatus = SubmittedSuccessfully
                        , isLoading = False
                      }
                    , Nav.pushUrl model.key "/onboarding/plan"
                    )

                Err _ ->
                    ( { model
                        | enterpriseFormStatus = SubmittedWithError "Failed to submit enterprise form."
                        , isLoading = False
                      }
                    , Cmd.none
                    )

        -- Navigation
        NavigateToStep step ->
            -- Handle navigation between steps
            let
                newHistory =
                    model.step :: model.stepHistory
            in
            ( { model | step = step, stepHistory = newHistory }
            , Nav.pushUrl model.key (getStepUrl step)
            )

        NavigateBack ->
            -- Go back to previous step
            case model.stepHistory of
                prevStep :: restHistory ->
                    ( { model | step = prevStep, stepHistory = restHistory }
                    , Nav.pushUrl model.key (getStepUrl prevStep)
                    )

                [] ->
                    -- No history, stay on current step
                    ( model, Cmd.none )

        SkipStep ->
            -- Skip to the next step
            let
                nextStep =
                    getNextStep model.step model.isBasicPlan
            in
            ( { model | step = nextStep, stepHistory = model.step :: model.stepHistory }
            , Nav.pushUrl model.key (getStepUrl nextStep)
            )

        CompleteOnboarding ->
            -- Complete the onboarding process
            case model.session of
                Just session ->
                    ( { model | isLoading = True }
                    , completeOnboardingRequest session.sessionId
                    )

                Nothing ->
                    ( { model | error = Just "No active session." }, Cmd.none )

        OnboardingCompleted result ->
            case result of
                Ok _ ->
                    -- Redirect to login with special parameters
                    ( { model | isLoading = False }
                    , Nav.pushUrl model.key ("/login?onboarding=completed&email=" ++ Url.percentEncode model.userDetails.email)
                    )

                Err _ ->
                    ( { model | error = Just "Failed to complete onboarding.", isLoading = False }, Cmd.none )

        RandomOrgNameGenerated orgName ->
            -- After generating a random organization name, start onboarding with this name
            ( { model | orgSlug = orgName }
            , startOnboarding
                (if model.isBasicPlan then
                    "basic"

                 else
                    "pro"
                )
            )

        ScrollToTop ->
            ( model, Task.perform (\_ -> NoOp) (Dom.setViewport 0 0) )

        NoOp ->
            ( model, Cmd.none )

        -- Subscription Tiers
        GotSubscriptionTiers result ->
            case result of
                Ok tiers ->
                    -- Store the subscription tiers and use them in the UI
                    ( { model | subscriptionTiers = tiers, isLoading = False }, Cmd.none )

                Err _ ->
                    ( { model | error = Just "Failed to load subscription plans.", isLoading = False }, Cmd.none )

        SelectPlanType planType ->
            -- When a plan is selected, set isBasicPlan flag
            ( { model | isBasicPlan = planType == "basic" }, Cmd.none )



-- Helper functions for navigation


getStepUrl : Step -> String
getStepUrl step =
    "/onboarding/"
        ++ (case step of
                PlanSelectionStep ->
                    "plan"

                UserDetailsStep ->
                    "personal"

                CompanyDetailsStep ->
                    "company"

                LicensingSettingsStep ->
                    "licensing"

                AddAgentsStep ->
                    "agents"

                PaymentStep ->
                    "payment"

                EnterpriseFormStep ->
                    "enterprise"
           )


getNextStep : Step -> Bool -> Step
getNextStep currentStep isBasicPlan =
    case currentStep of
        PlanSelectionStep ->
            UserDetailsStep

        UserDetailsStep ->
            CompanyDetailsStep

        CompanyDetailsStep ->
            LicensingSettingsStep

        LicensingSettingsStep ->
            if isBasicPlan then
                -- Skip adding agents for basic plan
                PaymentStep

            else
                AddAgentsStep

        AddAgentsStep ->
            PaymentStep

        PaymentStep ->
            -- Last step, don't advance
            PaymentStep

        EnterpriseFormStep ->
            -- Special case, goes back to plan selection
            PlanSelectionStep



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.batch
        [ onboardingCookieReceived OnboardingCookieReceived
        , onboardingDataReceived OnboardingDataReceived
        ]



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = getStepTitle model.step
    , body =
        [ div []
            [ if model.isLoading then
                -- Show loading spinner when loading
                div [ class "flex justify-center items-center h-screen" ]
                    [ div [ class "animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500" ] [] ]

              else
                div []
                    [ viewHeader model
                    , SetupLayout.view
                        (mapStepToSetupStep model.step)
                        model.isBasicPlan
                        (getStepNumber model.step)
                        [ div [ class "max-w-3xl mx-auto" ]
                            [ case model.error of
                                Just errorMsg ->
                                    div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" ]
                                        [ text errorMsg ]

                                Nothing ->
                                    text ""
                            , viewCurrentStep model
                            , viewNavigationControls model
                            ]
                        ]
                    ]
            ]
        ]
    }


viewHeader : Model -> Html Msg
viewHeader model =
    header [ class "bg-white shadow" ]
        [ div [ class "max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8 flex items-center justify-between" ]
            [ div [ class "flex items-center" ]
                [ div [ class "flex-shrink-0 mr-4" ]
                    [ if not (String.isEmpty model.companyDetails.agencyName) && String.isEmpty (Maybe.withDefault "" model.companyDetails.logo) then
                        -- If no logo but has company name, show initials
                        div [ class "w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center text-white font-bold text-xl" ]
                            [ text (String.left 1 model.companyDetails.agencyName) ]

                      else if not (String.isEmpty (Maybe.withDefault "" model.companyDetails.logo)) then
                        -- If logo exists, show it
                        img [ class "h-10 w-auto", src (Maybe.withDefault "" model.companyDetails.logo), alt "Company Logo" ] []

                      else
                        -- Default Medicare Portal logo
                        div [ class "w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center text-white font-bold text-xl" ]
                            [ text "M" ]
                    ]
                ]
            , div [ class "hidden md:block" ]
                [ div [ class "text-sm text-gray-600" ]
                    [ text "Need help? "
                    , a [ href "mailto:support@medicareportal.org", class "text-blue-600 hover:text-blue-800" ]
                        [ text "Contact Support" ]
                    ]
                ]
            ]
        ]


viewCurrentStep : Model -> Html Msg
viewCurrentStep model =
    case model.step of
        PlanSelectionStep ->
            viewPlanSelection model

        UserDetailsStep ->
            viewUserDetails model

        CompanyDetailsStep ->
            viewCompanyDetails model

        LicensingSettingsStep ->
            viewLicensingSettings model

        AddAgentsStep ->
            if model.isBasicPlan then
                div [ class "text-center p-8" ]
                    [ text "This step is not available for the basic plan. Please continue to payment."
                    , div [ class "mt-4" ]
                        [ button
                            [ class "px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                            , onClick (NavigateToStep PaymentStep)
                            ]
                            [ text "Continue to Payment" ]
                        ]
                    ]

            else
                viewAddAgents model

        PaymentStep ->
            viewPayment model

        EnterpriseFormStep ->
            viewEnterpriseForm model


viewPlanSelection : Model -> Html Msg
viewPlanSelection model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Choose your plan" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Select a plan that best fits your organization's needs" ]
            ]
        , if model.isLoading then
            viewLoading

          else
            div []
                [ div [ class "grid grid-cols-1 md:grid-cols-3 gap-4" ]
                    (if List.isEmpty model.subscriptionTiers then
                        -- Fallback to hardcoded plans if no tiers available
                        [ viewPlanOption
                            "basic"
                            "Basic"
                            "$29/month"
                            [ "1 agent seat"
                            , "Up to 100 clients"
                            , "Medicare Advantage quotes"
                            , "Medicare Supplement quotes"
                            , "PDP quotes"
                            , "Client management"
                            ]
                            1
                            100
                            model.isBasicPlan
                        , viewPlanOption
                            "pro"
                            "Pro"
                            "$99/month"
                            [ "Up to 3 agent seats"
                            , "Up to 1,000 clients"
                            , "Medicare Advantage quotes"
                            , "Medicare Supplement quotes"
                            , "PDP quotes"
                            , "Client management"
                            , "Team collaboration"
                            , "Advanced reporting"
                            , "Email campaigns"
                            ]
                            3
                            1000
                            (not model.isBasicPlan && not (model.step == EnterpriseFormStep))
                        , viewPlanOption
                            "enterprise"
                            "Enterprise"
                            "Contact Us"
                            [ "Custom agent seats"
                            , "Unlimited clients"
                            , "Medicare Advantage quotes"
                            , "Medicare Supplement quotes"
                            , "PDP quotes"
                            , "Client management"
                            , "Team collaboration"
                            , "Advanced reporting"
                            , "Email campaigns"
                            , "Custom integrations"
                            , "Dedicated account manager"
                            , "Priority support"
                            ]
                            -1
                            -1
                            (model.step == EnterpriseFormStep)
                        ]

                     else
                        -- Use tiers from the database
                        List.map
                            (\tier ->
                                viewPlanOption
                                    tier.id
                                    tier.name
                                    (if tier.id == "enterprise" then
                                        "Contact Us"

                                     else
                                        "$" ++ String.fromFloat tier.price ++ "/month"
                                    )
                                    tier.features
                                    tier.maxAgents
                                    tier.maxContacts
                                    (if tier.id == "basic" then
                                        model.isBasicPlan

                                     else if tier.id == "enterprise" then
                                        model.step == EnterpriseFormStep

                                     else
                                        not model.isBasicPlan && not (model.step == EnterpriseFormStep)
                                    )
                            )
                            model.subscriptionTiers
                    )
                , if canAddMoreResources model then
                    viewExtraResources model

                  else
                    text ""
                , if model.error /= Nothing then
                    div [ class "mt-4 text-red-500" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , div [ class "mt-8 flex justify-center" ]
                    [ button
                        [ class
                            ("px-6 py-3 rounded-lg transition-colors duration-200 "
                                ++ (if not (isPlanBasic model) && not (isPlanPro model) && not (isPlanEnterprise model) then
                                        "bg-[#2563EB]/50 cursor-not-allowed text-white"

                                    else
                                        "bg-[#2563EB] hover:bg-[#1D4ED8] text-white"
                                   )
                            )
                        , onClick
                            (if isPlanEnterprise model then
                                NavigateToStep EnterpriseFormStep

                             else
                                StartOnboarding
                                    (if model.isBasicPlan then
                                        "basic"

                                     else
                                        "pro"
                                    )
                            )
                        , Html.Attributes.disabled (not (isPlanBasic model) && not (isPlanPro model) && not (isPlanEnterprise model))
                        ]
                        [ text "Continue" ]
                    ]
                ]
        ]


viewLoading : Html msg
viewLoading =
    div [ class "text-center" ]
        [ div [ class "animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading subscription tiers..." ]
        ]


viewPlanOption : String -> String -> String -> List String -> Int -> Int -> Bool -> Html Msg
viewPlanOption id name price features agentLimit contactLimit isSelected =
    div
        [ class
            ("p-6 rounded-lg cursor-pointer transition-all "
                ++ (if isSelected then
                        "bg-[#2563EB]/10 ring-2 ring-[#2563EB]"

                    else
                        "bg-gray-50 hover:bg-gray-100"
                   )
            )
        , onClick
            (if id == "enterprise" then
                NavigateToStep EnterpriseFormStep

             else
                SelectPlanType id
            )
        ]
        [ div [ class "space-y-4" ]
            [ div []
                [ h3 [ class "text-xl font-semibold text-gray-900" ] [ text name ]
                , p [ class "text-3xl font-bold text-gray-900 mt-2" ]
                    [ text price ]
                ]
            , div [ class "space-y-2 py-4 border-t border-b border-gray-200" ]
                [ if id /= "enterprise" then
                    div [ class "text-gray-600" ]
                        [ text
                            (if id == "pro" then
                                "5+ agent seats"

                             else if agentLimit == -1 then
                                "Unlimited agent seats"

                             else if agentLimit == 1 then
                                "1 agent seat"

                             else
                                "Up to " ++ String.fromInt agentLimit ++ " agent seats"
                            )
                        ]

                  else
                    div [ class "text-gray-600" ]
                        [ text "Custom agent seats" ]
                , if id /= "enterprise" then
                    div [ class "text-gray-600" ]
                        [ text
                            (if id == "pro" then
                                "5,000+ clients"

                             else if contactLimit == -1 then
                                "Unlimited clients"

                             else if contactLimit == 1000 then
                                "1,000 clients"

                             else
                                "Up to " ++ String.fromInt contactLimit ++ " clients"
                            )
                        ]

                  else
                    div [ class "text-gray-600" ]
                        [ text "Unlimited clients" ]
                ]
            , div [ class "mt-4" ]
                [ p [ class "text-sm font-medium text-gray-900 mb-2" ] [ text "Features:" ]
                , ul [ class "space-y-2" ]
                    (List.map
                        (\feature ->
                            li [ class "flex items-center text-sm text-gray-600" ]
                                [ span [ class "text-[#059669] mr-2" ] [ text "✓" ]
                                , text feature
                                ]
                        )
                        features
                    )
                ]
            ]
        ]


viewExtraResources : Model -> Html Msg
viewExtraResources model =
    div [ class "mt-8 p-4 bg-gray-50 rounded-lg border border-gray-200" ]
        [ h3 [ class "text-lg font-semibold text-gray-900 mb-4" ]
            [ text "Additional Resources" ]
        , div [ class "grid grid-cols-1 md:grid-cols-2 gap-6" ]
            [ div [ class "space-y-2" ]
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "Extra Agents" ]
                , p [ class "text-xs text-gray-500" ]
                    [ text "Add more agent seats beyond your plan's included limit ($20/agent seat/month)" ]
                , div [ class "flex items-center" ]
                    [ button
                        [ class "bg-gray-200 px-3 py-1 rounded-l-md hover:bg-gray-300"
                        , onClick (UpdateExtraAgents (max 0 (model.payment.extraAgents - 1)))
                        ]
                        [ text "-" ]
                    , input
                        [ type_ "number"
                        , class "w-16 text-center border-y border-gray-200 py-1"
                        , value (String.fromInt model.payment.extraAgents)
                        , onInput (\val -> UpdateExtraAgents (String.toInt val |> Maybe.withDefault 0))
                        ]
                        []
                    , button
                        [ class "bg-gray-200 px-3 py-1 rounded-r-md hover:bg-gray-300"
                        , onClick (UpdateExtraAgents (model.payment.extraAgents + 1))
                        ]
                        [ text "+" ]
                    , span [ class "ml-2 text-sm font-medium" ]
                        [ text ("$" ++ String.fromInt (model.payment.extraAgents * 20) ++ "/mo") ]
                    ]
                ]
            , div [ class "space-y-2" ]
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "Extra Clients" ]
                , p [ class "text-xs text-gray-500" ]
                    [ text "Add more clients beyond your plan's included limit ($50/5,000 clients/month)" ]
                , div [ class "flex items-center" ]
                    [ button
                        [ class "bg-gray-200 px-3 py-1 rounded-l-md hover:bg-gray-300"
                        , onClick (UpdateExtraContacts (max 0 (model.payment.extraContacts - 5000)))
                        ]
                        [ text "-" ]
                    , input
                        [ type_ "number"
                        , class "w-20 text-center border-y border-gray-200 py-1"
                        , value (String.fromInt model.payment.extraContacts)
                        , onInput (\val -> UpdateExtraContacts (String.toInt val |> Maybe.withDefault 0))
                        , Html.Attributes.step "5000"
                        ]
                        []
                    , button
                        [ class "bg-gray-200 px-3 py-1 rounded-r-md hover:bg-gray-300"
                        , onClick (UpdateExtraContacts (model.payment.extraContacts + 5000))
                        ]
                        [ text "+" ]
                    , span [ class "ml-2 text-sm font-medium" ]
                        [ text ("$" ++ String.fromInt (model.payment.extraContacts // 5000 * 50) ++ "/mo") ]
                    ]
                ]
            ]
        ]


viewEnterpriseForm : Model -> Html Msg
viewEnterpriseForm model =
    div [ class "py-8" ]
        [ h2 [ class "text-2xl font-semibold mb-6" ] [ text "Enterprise Inquiry" ]
        , div [ class "bg-white shadow rounded-lg p-6" ]
            [ p [ class "mb-6 text-gray-600" ]
                [ text "Please fill in the details below, and our team will contact you with a customized enterprise quote." ]
            , div [ class "space-y-6" ]
                [ div []
                    [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "enterpriseName" ] [ text "Company Name" ]
                    , input
                        [ class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        , id "enterpriseName"
                        , type_ "text"
                        , placeholder "Enter your company name"
                        , value model.enterpriseForm.enterpriseName
                        , onInput UpdateEnterpriseName
                        ]
                        []
                    ]
                , div []
                    [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "enterpriseEmail" ] [ text "Contact Email" ]
                    , input
                        [ class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        , id "enterpriseEmail"
                        , type_ "email"
                        , placeholder "Enter your contact email"
                        , value model.enterpriseForm.enterpriseEmail
                        , onInput UpdateEnterpriseEmail
                        ]
                        []
                    ]
                , div []
                    [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "enterprisePhone" ] [ text "Contact Phone" ]
                    , input
                        [ class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        , id "enterprisePhone"
                        , type_ "tel"
                        , placeholder "Enter your contact phone"
                        , value model.enterpriseForm.enterprisePhone
                        , onInput UpdateEnterprisePhone
                        ]
                        []
                    ]
                , div []
                    [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "enterpriseMessage" ] [ text "Additional Information" ]
                    , textarea
                        [ class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        , id "enterpriseMessage"
                        , placeholder "Tell us about your needs, team size, and any specific requirements"
                        , value model.enterpriseForm.message
                        , onInput UpdateEnterpriseMessage
                        , Html.Attributes.rows 4
                        ]
                        []
                    ]
                , div [ class "flex space-x-4 mt-6" ]
                    [ button
                        [ class "flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                        , onClick SaveEnterpriseForm
                        ]
                        [ text "Submit Inquiry" ]
                    , button
                        [ class "flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
                        , onClick (NavigateToStep PlanSelectionStep)
                        ]
                        [ text "Back to Plans" ]
                    ]
                ]
            , if model.enterpriseFormStatus == SubmittedSuccessfully then
                div [ class "mt-6 p-4 bg-green-100 text-green-700 rounded" ]
                    [ text "Thank you for your inquiry! Our team will contact you shortly." ]

              else if model.enterpriseFormStatus == Submitted then
                div [ class "mt-6 p-4 bg-blue-100 text-blue-700 rounded" ]
                    [ text "Submitting your inquiry..." ]

              else
                text ""
            ]
        ]


viewNavigationControls : Model -> Html Msg
viewNavigationControls model =
    div [ class "flex justify-between mt-8 border-t pt-4" ]
        [ if not (List.isEmpty model.stepHistory) then
            button
                [ class "px-4 py-2 text-blue-600 border border-blue-600 rounded hover:bg-blue-50"
                , onClick NavigateBack
                ]
                [ text "Back" ]

          else
            div [] []

        -- Empty spacer
        , let
            canSkip =
                case model.step of
                    PlanSelectionStep ->
                        False

                    -- Can't skip plan selection
                    PaymentStep ->
                        False

                    -- Can't skip payment
                    EnterpriseFormStep ->
                        False

                    -- Can't skip enterprise form
                    _ ->
                        True

            -- Can skip other steps
            nextStep =
                getNextStep model.step model.isBasicPlan

            isLastStep =
                model.step == PaymentStep
          in
          if canSkip && not isLastStep then
            button
                [ class "px-4 py-2 text-gray-600 hover:text-gray-800"
                , onClick SkipStep
                ]
                [ text ("Skip to " ++ getStepTitle nextStep) ]

          else
            div [] []

        -- Empty spacer
        ]


mapStepToSetupStep : Step -> SetupLayout.SetupStep
mapStepToSetupStep step =
    case step of
        PlanSelectionStep ->
            SetupLayout.PlanSelection

        UserDetailsStep ->
            SetupLayout.OrganizationSetup

        CompanyDetailsStep ->
            SetupLayout.OrganizationSetup

        LicensingSettingsStep ->
            SetupLayout.OrganizationSetup

        AddAgentsStep ->
            SetupLayout.AgentSetup

        PaymentStep ->
            SetupLayout.OrganizationSetup

        EnterpriseFormStep ->
            SetupLayout.OrganizationSetup


getStepTitle : Step -> String
getStepTitle step =
    case step of
        PlanSelectionStep ->
            "Choose Your Plan"

        UserDetailsStep ->
            "Personal Details"

        CompanyDetailsStep ->
            "Company Details"

        LicensingSettingsStep ->
            "Licensing & Carriers"

        AddAgentsStep ->
            "Add Team Members"

        PaymentStep ->
            "Payment"

        EnterpriseFormStep ->
            "Enterprise Form"


getStepNumber : Step -> Int
getStepNumber step =
    case step of
        PlanSelectionStep ->
            1

        UserDetailsStep ->
            2

        CompanyDetailsStep ->
            3

        LicensingSettingsStep ->
            4

        AddAgentsStep ->
            5

        PaymentStep ->
            6

        EnterpriseFormStep ->
            7


viewUserDetails : Model -> Html Msg
viewUserDetails model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Personal Details" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Tell us about yourself" ]
            ]
        , if model.isLoading then
            viewLoading

          else
            div [ class "space-y-6" ]
                [ div [ class "bg-white shadow rounded-lg p-6" ]
                    [ div [ class "space-y-6" ]
                        [ div [ class "grid grid-cols-1 sm:grid-cols-2 gap-6" ]
                            [ div []
                                [ label [ class "block text-sm font-medium text-gray-700" ]
                                    [ text "First Name" ]
                                , input
                                    [ type_ "text"
                                    , class "mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    , value model.userDetails.firstName
                                    , onInput UpdateUserFirstName
                                    , placeholder "Enter your first name"
                                    ]
                                    []
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700" ]
                                    [ text "Last Name" ]
                                , input
                                    [ type_ "text"
                                    , class "mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    , value model.userDetails.lastName
                                    , onInput UpdateUserLastName
                                    , placeholder "Enter your last name"
                                    ]
                                    []
                                ]
                            ]
                        , div [ class "grid grid-cols-1 sm:grid-cols-2 gap-6 pt-2" ]
                            [ div [ class "relative pb-6" ]
                                [ label [ class "block text-sm font-medium text-gray-700" ]
                                    [ text "Email" ]
                                , div [ class "relative" ]
                                    [ input
                                        [ type_ "email"
                                        , class "mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                        , value model.userDetails.email
                                        , onInput UpdateUserEmail
                                        , onFocus UserEmailFocused
                                        , onBlur UserEmailBlurred
                                        , placeholder "you@example.com"
                                        ]
                                        []
                                    , viewEmailStatus model.userEmailStatus
                                    ]
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700" ]
                                    [ text "Phone" ]
                                , input
                                    [ type_ "tel"
                                    , class "mt-1 block w-full px-3 py-2 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    , value (formatPhoneNumber model.userDetails.phone)
                                    , onInput UpdateUserPhone
                                    , placeholder "(555) 555-5555"
                                    ]
                                    []
                                ]
                            ]
                        ]
                    ]
                , if model.error /= Nothing then
                    div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , div [ class "flex justify-center" ]
                    [ button
                        [ class
                            (if isUserDetailsFormValid model then
                                "px-4 py-2 sm:px-6 sm:py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"

                             else
                                "px-4 py-2 sm:px-6 sm:py-3 bg-gray-300 text-gray-500 rounded-md cursor-not-allowed"
                            )
                        , onClick SaveUserDetails
                        , Html.Attributes.disabled (not (isUserDetailsFormValid model))
                        ]
                        [ text "Continue" ]
                    ]
                ]
        ]


viewEmailStatus : EmailStatus -> Html msg
viewEmailStatus status =
    case status of
        NotChecked ->
            -- When not checked, explicitly render an empty div structure to properly replace any previous status
            div []
                [ div [ class "absolute right-0 inset-y-0" ] [ text "" ]
                , text "" -- Empty text element to replace any error message
                ]

        Checking ->
            -- Show loading spinner while checking
            div []
                [ div
                    [ class "absolute right-0 inset-y-0" ]
                    [ div
                        [ class "absolute right-0 inset-y-0 flex items-center pr-3" ]
                        [ div
                            [ class "animate-spin h-5 w-5 text-blue-500" ]
                            [ text "•" ]

                        -- Simple spinner replacement
                        ]
                    ]
                , text "" -- Empty text element to replace any error message
                ]

        Valid ->
            -- Show only the success icon for available emails
            div []
                [ div
                    [ class "absolute right-0 inset-y-0" ]
                    [ div
                        [ class "absolute right-0 inset-y-0 flex items-center pr-3" ]
                        [ div
                            [ class "text-green-500" ]
                            [ text "✓" ]

                        -- Simple checkmark
                        ]
                    ]
                , text "" -- Empty text element to replace the error message
                ]

        Invalid message ->
            -- For unavailable emails, show icon and error message
            div []
                [ div
                    [ class "absolute right-0 inset-y-0" ]
                    [ div
                        [ class "absolute right-0 inset-y-0 flex items-center pr-3" ]
                        [ div
                            [ class "text-red-500" ]
                            [ text "✗" ]

                        -- Simple X mark
                        ]
                    ]
                , p
                    [ class "text-xs text-red-600 mt-1 absolute left-0 top-full w-full" ]
                    [ text message ]
                ]


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    let
        digits =
            String.filter Char.isDigit phone
                |> String.left 10

        len =
            String.length digits
    in
    if len == 0 then
        ""

    else if len <= 3 then
        "(" ++ digits

    else if len <= 6 then
        "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

    else
        "("
            ++ String.left 3 digits
            ++ ") "
            ++ String.slice 3 6 digits
            ++ "-"
            ++ String.dropLeft 6 digits


isUserDetailsFormValid : Model -> Bool
isUserDetailsFormValid model =
    let
        emailValid =
            case model.userEmailStatus of
                Valid ->
                    True

                -- If the email hasn't been checked yet, consider it invalid
                NotChecked ->
                    False

                -- Email is being checked, consider it invalid until check completes
                Checking ->
                    False

                -- Email is unavailable (error state)
                Invalid _ ->
                    False
    in
    not (String.isEmpty (String.trim model.userDetails.firstName))
        && not (String.isEmpty (String.trim model.userDetails.lastName))
        && not (String.isEmpty (String.trim model.userDetails.email))
        && not (String.isEmpty (String.trim model.userDetails.phone))
        && emailValid


viewLicensingSettings : Model -> Html Msg
viewLicensingSettings model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Licensing & Carriers" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Select carrier contracts you currently have" ]
            ]
        , if model.isLoading then
            viewLoading

          else
            div [ class "space-y-6" ]
                [ div [ class "bg-white shadow rounded-lg p-6" ]
                    [ div [ class "space-y-6" ]
                        [ div []
                            [ h3 [ class "text-lg font-medium mb-3" ] [ text "Carrier Contracts" ]
                            , div [ class "mb-4 flex items-center" ]
                                [ viewSelectAllCarriers model.licensingSettings ]
                            , div [ class "grid grid-cols-1 md:grid-cols-2 gap-3" ]
                                (List.map
                                    (\carrier ->
                                        viewCarrierCheckbox carrier model.licensingSettings
                                    )
                                    allCarriers
                                )
                            ]
                        , div [ class "mt-4" ]
                            [ label [ class "flex items-center space-x-2 cursor-pointer" ]
                                [ input
                                    [ class "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                                    , type_ "checkbox"
                                    , checked model.licensingSettings.useSmartSendForGI
                                    , onCheck ToggleSmartSendForGI
                                    ]
                                    []
                                , span [ class "text-sm font-medium text-gray-700" ] [ text "Use SmartSend for Group Insurance" ]
                                ]
                            ]
                        ]
                    ]
                , if model.error /= Nothing then
                    div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , div [ class "flex justify-center" ]
                    [ button
                        [ class "px-4 py-2 sm:px-6 sm:py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        , onClick SaveLicensingSettings
                        ]
                        [ text "Continue" ]
                    ]
                ]
        ]


viewSelectAllCarriers : LicensingSettings -> Html Msg
viewSelectAllCarriers settings =
    label [ class "flex items-center space-x-3 mb-4" ]
        [ input
            [ type_ "checkbox"
            , checked (List.length settings.carrierContracts == List.length allCarriers)
            , onCheck ToggleAllCarriers
            , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
            ]
            []
        , span [ class "text-gray-700" ] [ text "Select All Carriers" ]
        ]


viewCarrierCheckbox : String -> LicensingSettings -> Html Msg
viewCarrierCheckbox carrier settings =
    let
        isChecked =
            List.member carrier settings.carrierContracts
    in
    label [ class "flex items-center space-x-2 cursor-pointer p-2 border rounded hover:bg-gray-50" ]
        [ input
            [ class "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            , type_ "checkbox"
            , checked isChecked
            , onClick
                (if isChecked then
                    RemoveCarrierContract carrier

                 else
                    AddCarrierContract carrier
                )
            ]
            []
        , span [ class "text-sm font-medium text-gray-700" ] [ text carrier ]
        ]


viewAddAgents : Model -> Html Msg
viewAddAgents model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Add Team Members" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Add your team members to get started" ]
            ]
        , if model.isLoading then
            viewLoading

          else
            div [ class "space-y-6" ]
                [ div [ class "mb-8 bg-white shadow rounded-lg overflow-hidden" ]
                    [ if List.isEmpty model.addAgents.agents then
                        div [ class "p-6 text-center text-gray-500" ]
                            [ text "No team members added yet. Use the form below to add your first team member." ]

                      else
                        div []
                            [ table [ class "min-w-full divide-y divide-gray-200" ]
                                [ thead [ class "bg-gray-50" ]
                                    [ tr []
                                        [ th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ] [ text "Name" ]
                                        , th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ] [ text "Email" ]
                                        , th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ] [ text "Phone" ]
                                        , th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ] [ text "Role" ]
                                        ]
                                    ]
                                , tbody [ class "bg-white divide-y divide-gray-200" ]
                                    (List.map viewAgentRow model.addAgents.agents)
                                ]
                            ]
                    ]
                , div [ class "bg-white shadow rounded-lg p-6" ]
                    [ h3 [ class "text-lg font-medium mb-4" ] [ text "Add New Team Member" ]
                    , div [ class "space-y-4" ]
                        [ div [ class "grid grid-cols-1 md:grid-cols-2 gap-4" ]
                            [ div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "agentFirstName" ] [ text "First Name" ]
                                , input
                                    [ class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                    , id "agentFirstName"
                                    , type_ "text"
                                    , placeholder "First Name"
                                    , value model.addAgents.newAgent.firstName
                                    , onInput UpdateAgentFirstName
                                    ]
                                    []
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "agentLastName" ] [ text "Last Name" ]
                                , input
                                    [ class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                    , id "agentLastName"
                                    , type_ "text"
                                    , placeholder "Last Name"
                                    , value model.addAgents.newAgent.lastName
                                    , onInput UpdateAgentLastName
                                    ]
                                    []
                                ]
                            ]
                        , div []
                            [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "agentEmail" ] [ text "Email" ]
                            , input
                                [ class
                                    ("w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 "
                                        ++ (case model.addAgents.agentEmailStatus of
                                                Valid ->
                                                    "border-green-500"

                                                Invalid _ ->
                                                    "border-red-500"

                                                _ ->
                                                    "border-gray-300"
                                           )
                                    )
                                , id "agentEmail"
                                , type_ "email"
                                , placeholder "Email"
                                , value model.addAgents.newAgent.email
                                , onInput UpdateAgentEmail
                                , onBlur AgentEmailBlurred
                                , onFocus AgentEmailFocused
                                ]
                                []
                            , viewEmailStatus model.addAgents.agentEmailStatus
                            ]
                        , div []
                            [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "agentPhone" ] [ text "Phone" ]
                            , input
                                [ class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                , id "agentPhone"
                                , type_ "tel"
                                , placeholder "Phone Number"
                                , value (formatPhoneNumber model.addAgents.newAgent.phone)
                                , onInput UpdateAgentPhone
                                ]
                                []
                            ]
                        , div [ class "flex items-center mt-4" ]
                            [ input
                                [ class "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                                , id "adminRole"
                                , type_ "checkbox"
                                , checked model.addAgents.newAgent.isAdmin
                                , onCheck UpdateAgentCheckbox
                                ]
                                []
                            , label [ class "ml-2 block text-sm text-gray-900", for "adminRole" ] [ text "Admin access" ]
                            ]
                        , div [ class "flex space-x-4 mt-6" ]
                            [ button
                                [ class "flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                                , onClick AddAgent
                                ]
                                [ text "Add Team Member" ]
                            , button
                                [ class "flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
                                , onClick CancelAddAgent
                                ]
                                [ text "Clear Form" ]
                            ]
                        ]
                    ]
                , if model.error /= Nothing then
                    div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , div [ class "flex justify-center" ]
                    [ button
                        [ class "px-4 py-2 sm:px-6 sm:py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        , onClick SkipStep
                        ]
                        [ text "Continue" ]
                    ]
                ]
        ]


viewAgentRow : Agent -> Html Msg
viewAgentRow agent =
    tr []
        [ td [ class "px-6 py-4 whitespace-nowrap" ]
            [ div [ class "text-sm font-medium text-gray-900" ] [ text (agent.firstName ++ " " ++ agent.lastName) ] ]
        , td [ class "px-6 py-4 whitespace-nowrap" ]
            [ div [ class "text-sm text-gray-900" ] [ text agent.email ] ]
        , td [ class "px-6 py-4 whitespace-nowrap" ]
            [ div [ class "text-sm text-gray-900" ] [ text (formatPhoneNumber agent.phone) ] ]
        , td [ class "px-6 py-4 whitespace-nowrap" ]
            [ if agent.isAdmin then
                span [ class "px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800" ] [ text "Admin" ]

              else
                span [ class "px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800" ] [ text "Agent" ]
            ]
        ]


viewCompanyDetails : Model -> Html Msg
viewCompanyDetails model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Company Details" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Tell us about your company" ]
            ]
        , if model.isLoading then
            viewLoading

          else
            div [ class "space-y-6" ]
                [ div [ class "bg-white shadow rounded-lg p-6" ]
                    [ div [ class "space-y-6" ]
                        [ div []
                            [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "agencyName" ]
                                [ text "Agency Name" ]
                            , input
                                [ class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                , id "agencyName"
                                , type_ "text"
                                , placeholder "Enter your agency name"
                                , value model.companyDetails.agencyName
                                , onInput UpdateAgencyName
                                ]
                                []
                            ]
                        , div []
                            [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "website" ]
                                [ text "Website" ]
                            , input
                                [ class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                , id "website"
                                , type_ "text"
                                , placeholder "https://example.com"
                                , value model.companyDetails.website
                                , onInput UpdateWebsite
                                ]
                                []
                            ]
                        , div []
                            [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "companyPhone" ]
                                [ text "Company Phone" ]
                            , input
                                [ class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                , id "companyPhone"
                                , type_ "tel"
                                , placeholder "(555) 555-5555"
                                , value (formatPhoneNumber model.companyDetails.phone)
                                , onInput UpdatePhone
                                ]
                                []
                            ]
                        , div [ class "mt-6" ]
                            [ h3 [ class "text-lg font-medium mb-3" ] [ text "Brand Colors" ]
                            , div [ class "grid grid-cols-1 sm:grid-cols-2 gap-4" ]
                                [ div []
                                    [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "primaryColor" ]
                                        [ text "Primary Color" ]
                                    , input
                                        [ class "h-10 w-full cursor-pointer"
                                        , id "primaryColor"
                                        , type_ "color"
                                        , value
                                            (if String.isEmpty model.companyDetails.primaryColor then
                                                "#2563EB"

                                             else
                                                model.companyDetails.primaryColor
                                            )
                                        , onInput UpdatePrimaryColor
                                        ]
                                        []
                                    ]
                                , div []
                                    [ label [ class "block text-sm font-medium text-gray-700 mb-1", for "secondaryColor" ]
                                        [ text "Secondary Color" ]
                                    , input
                                        [ class "h-10 w-full cursor-pointer"
                                        , id "secondaryColor"
                                        , type_ "color"
                                        , value
                                            (if String.isEmpty model.companyDetails.secondaryColor then
                                                "#10B981"

                                             else
                                                model.companyDetails.secondaryColor
                                            )
                                        , onInput UpdateSecondaryColor
                                        ]
                                        []
                                    ]
                                ]
                            ]
                        ]
                    ]
                , if model.error /= Nothing then
                    div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , div [ class "flex justify-center" ]
                    [ button
                        [ class "px-4 py-2 sm:px-6 sm:py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        , onClick SaveCompanyDetails
                        ]
                        [ text "Continue" ]
                    ]
                ]
        ]


viewPayment : Model -> Html Msg
viewPayment model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Complete Your Subscription" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Enter your payment information to complete registration" ]
            ]
        , if model.isLoading then
            viewLoading

          else
            div [ class "space-y-6" ]
                [ div [ class "bg-white shadow rounded-lg overflow-hidden" ]
                    [ div [ class "md:flex" ]
                        [ div [ class "p-6 bg-gray-50 md:w-1/3" ]
                            [ h3 [ class "text-lg font-semibold mb-4" ] [ text "Order Summary" ]
                            , div [ class "space-y-3" ]
                                [ div [ class "flex justify-between" ]
                                    [ span [ class "text-gray-600" ] [ text "Plan Type" ]
                                    , span [ class "font-medium" ]
                                        [ text
                                            (if model.isBasicPlan then
                                                "Basic"

                                             else
                                                "Pro"
                                            )
                                        ]
                                    ]
                                , div [ class "flex justify-between" ]
                                    [ span [ class "text-gray-600" ] [ text "Base Price" ]
                                    , span [ class "font-medium" ]
                                        [ text
                                            (if model.isBasicPlan then
                                                "$29/month"

                                             else
                                                "$99/month"
                                            )
                                        ]
                                    ]
                                , if model.payment.extraAgents > 0 then
                                    div [ class "flex justify-between" ]
                                        [ span [ class "text-gray-600" ]
                                            [ text ("Extra Agents (" ++ String.fromInt model.payment.extraAgents ++ ")") ]
                                        , span [ class "font-medium" ]
                                            [ text ("$" ++ String.fromInt (model.payment.extraAgents * 20) ++ "/month") ]
                                        ]

                                  else
                                    text ""
                                , if model.payment.extraContacts > 0 then
                                    div [ class "flex justify-between" ]
                                        [ span [ class "text-gray-600" ]
                                            [ text ("Extra Clients (" ++ String.fromInt model.payment.extraContacts ++ ")") ]
                                        , span [ class "font-medium" ]
                                            [ text ("$" ++ String.fromInt (model.payment.extraContacts // 5000 * 50) ++ "/month") ]
                                        ]

                                  else
                                    text ""
                                , div [ class "pt-3 mt-3 border-t border-gray-200" ]
                                    [ div [ class "flex justify-between" ]
                                        [ span [ class "font-medium text-gray-900" ] [ text "Total" ]
                                        , span [ class "font-bold text-blue-600" ]
                                            [ text
                                                ("$"
                                                    ++ String.fromInt
                                                        ((if model.isBasicPlan then
                                                            29

                                                          else
                                                            99
                                                         )
                                                            + (model.payment.extraAgents * 20)
                                                            + (model.payment.extraContacts // 5000 * 50)
                                                        )
                                                    ++ "/month"
                                                )
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                        , div [ class "p-6 md:w-2/3" ]
                            [ h3 [ class "text-lg font-semibold mb-4" ] [ text "Payment Information" ]
                            , div [ class "space-y-4" ]
                                [ div [ class "mb-4" ]
                                    [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                        [ text "Credit Card" ]
                                    , div [ class "p-4 bg-gray-100 text-center rounded-md" ]
                                        [ text "Credit card form will be displayed here" ]
                                    ]
                                , div [ class "flex items-center mt-6" ]
                                    [ input
                                        [ class "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                                        , id "agreeTerms"
                                        , type_ "checkbox"
                                        , checked False -- Simplified for now, without using the missing field
                                        ]
                                        []
                                    , label [ class "ml-2 block text-sm text-gray-900", for "agreeTerms" ]
                                        [ text "I agree to the "
                                        , a [ class "text-blue-600 hover:underline" ] [ text "Terms of Service" ]
                                        , text " and "
                                        , a [ class "text-blue-600 hover:underline" ] [ text "Privacy Policy" ]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ]
                , if model.error /= Nothing then
                    div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                        [ text (Maybe.withDefault "" model.error) ]

                  else
                    text ""
                , div [ class "flex justify-center" ]
                    [ button
                        [ class "px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        , onClick CompletePayment
                        , Html.Attributes.disabled False
                        ]
                        [ text "Complete Registration" ]
                    ]
                ]
        ]



-- Helper functions for checking plan types


isPlanBasic : Model -> Bool
isPlanBasic model =
    model.isBasicPlan


isPlanPro : Model -> Bool
isPlanPro model =
    not model.isBasicPlan && not (model.step == EnterpriseFormStep)


isPlanEnterprise : Model -> Bool
isPlanEnterprise model =
    model.step == EnterpriseFormStep


canAddMoreResources : Model -> Bool
canAddMoreResources model =
    not model.isBasicPlan && model.step /= EnterpriseFormStep



-- CONSTANTS


allCarriers : List String
allCarriers =
    [ "Aetna"
    , "Humana"
    , "UnitedHealthcare"
    , "Cigna"
    , "BlueCross BlueShield"
    , "Kaiser Permanente"
    , "Anthem"
    , "Molina Healthcare"
    ]

================
File: frontend/src/Components/AccountStatusBanner.elm
================
module Components.AccountStatusBanner exposing (AccountStatusDetails, view)

import Html exposing (Html, a, button, div, h3, p, span, text)
import Html.Attributes exposing (attribute, class, href)
import Html.Events exposing (onClick)
import Json.Decode as Decode exposing (Decoder, bool, int, string)
import Json.Decode.Pipeline as Pipeline
import Svg exposing (path, svg)
import Svg.Attributes as SvgAttr exposing (clipRule, d, fill, fillRule, viewBox)



-- Account status types


type alias AccountStatus =
    String


type alias AccountStatusDetails =
    { status : AccountStatus
    , message : String
    , organizationId : Int
    , organizationName : String
    , organizationSlug : String
    , subscriptionTier : String
    , subscriptionStatus : String
    , agentLimit : Int
    , contactLimit : Int
    , currentAgentCount : Int
    , currentContactCount : Int
    , billingCycleEnd : Maybe String
    , paymentFailureCount : Int
    , paymentCompleted : Bool
    }



-- Decoder for account status details


accountStatusDetailsDecoder : Decoder AccountStatusDetails
accountStatusDetailsDecoder =
    Decode.succeed AccountStatusDetails
        |> Pipeline.required "status" string
        |> Pipeline.required "message" string
        |> Pipeline.required "organizationId" int
        |> Pipeline.required "organizationName" string
        |> Pipeline.required "organizationSlug" string
        |> Pipeline.required "subscriptionTier" string
        |> Pipeline.required "subscriptionStatus" string
        |> Pipeline.required "agentLimit" int
        |> Pipeline.required "contactLimit" int
        |> Pipeline.required "currentAgentCount" int
        |> Pipeline.required "currentContactCount" int
        |> Pipeline.optional "billingCycleEnd" (Decode.nullable string) Nothing
        |> Pipeline.required "paymentFailureCount" int
        |> Pipeline.required "paymentCompleted" bool



-- Function to determine banner color class based on status


getBannerColorClass : AccountStatus -> String
getBannerColorClass status =
    case status of
        "warning" ->
            "bg-yellow-50 border-yellow-200 text-yellow-800"

        "error" ->
            "bg-red-50 border-red-200 text-red-800"

        "success" ->
            "bg-green-50 border-green-200 text-green-800"

        "info" ->
            "bg-blue-50 border-blue-200 text-blue-800"

        _ ->
            "bg-gray-50 border-gray-200 text-gray-800"



-- Function to determine icon color class based on status


getIconColorClass : AccountStatus -> String
getIconColorClass status =
    case status of
        "warning" ->
            "text-yellow-600"

        "error" ->
            "text-red-600"

        "success" ->
            "text-green-600"

        "info" ->
            "text-blue-600"

        _ ->
            "text-gray-600"



-- Function to determine button color class based on status


getButtonColorClass : AccountStatus -> String
getButtonColorClass status =
    case status of
        "warning" ->
            "bg-yellow-100 hover:bg-yellow-200 text-yellow-700"

        "error" ->
            "bg-red-100 hover:bg-red-200 text-red-700"

        "success" ->
            "bg-green-100 hover:bg-green-200 text-green-700"

        "info" ->
            "bg-blue-100 hover:bg-blue-200 text-blue-700"

        _ ->
            "bg-gray-100 hover:bg-gray-200 text-gray-700"



-- Main view function for the account status banner


view : Maybe AccountStatusDetails -> msg -> Html msg
view maybeStatus closeMsg =
    case maybeStatus of
        Just status ->
            div
                [ class ("p-3 sm:p-4 mb-3 sm:mb-4 border rounded-lg flex flex-col sm:flex-row sm:items-start sm:justify-between " ++ getBannerColorClass status.status)
                , attribute "role" "alert"
                ]
                [ div [ class "flex items-start" ]
                    [ div [ class "flex-shrink-0" ]
                        [ div [ class ("p-1 rounded-full mr-2 sm:mr-3 " ++ getIconColorClass status.status) ]
                            [ svg
                                [ SvgAttr.class "w-4 h-4 sm:w-5 sm:h-5"
                                , SvgAttr.fill "currentColor"
                                , SvgAttr.viewBox "0 0 20 20"
                                ]
                                [ path
                                    [ SvgAttr.fillRule "evenodd"
                                    , SvgAttr.d "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
                                    , SvgAttr.clipRule "evenodd"
                                    ]
                                    []
                                ]
                            ]
                        ]
                    , div [ class "flex-grow pr-8 sm:pr-0" ]
                        [ div [ class "font-medium text-sm sm:text-base" ] [ text (getStatusTitle status.status) ]
                        , p [ class "text-xs sm:text-sm" ] [ text status.message ]
                        , viewLimitsInfo status
                        ]
                    ]
                , button
                    [ class ("p-1.5 rounded-lg absolute top-2 right-2 sm:static " ++ getButtonColorClass status.status)
                    , onClick closeMsg
                    ]
                    [ svg
                        [ SvgAttr.class "w-4 h-4"
                        , SvgAttr.fill "currentColor"
                        , SvgAttr.viewBox "0 0 20 20"
                        ]
                        [ path
                            [ SvgAttr.fillRule "evenodd"
                            , SvgAttr.d "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            , SvgAttr.clipRule "evenodd"
                            ]
                            []
                        ]
                    ]
                ]

        Nothing ->
            div [] []



-- Helper function to display resource limits information


viewLimitsInfo : AccountStatusDetails -> Html msg
viewLimitsInfo status =
    if status.currentAgentCount >= status.agentLimit || status.currentContactCount >= status.contactLimit then
        div [ class "mt-1 sm:mt-2 text-xs sm:text-sm" ]
            [ if status.currentAgentCount >= status.agentLimit then
                div [ class "mb-1" ]
                    [ text ("Agents: " ++ String.fromInt status.currentAgentCount ++ "/" ++ String.fromInt status.agentLimit ++ " ")
                    , a [ href "/change-plan", class "underline" ] [ text "Upgrade" ]
                    ]

              else
                text ""
            , if status.currentContactCount >= status.contactLimit then
                div []
                    [ text ("Contacts: " ++ String.fromInt status.currentContactCount ++ "/" ++ String.fromInt status.contactLimit ++ " ")
                    , a [ href "/change-plan", class "underline" ] [ text "Upgrade" ]
                    ]

              else
                text ""
            ]

    else
        text ""



-- Helper function to get a human-readable status title


getStatusTitle : AccountStatus -> String
getStatusTitle status =
    case status of
        "warning" ->
            "Warning"

        "error" ->
            "Error"

        "success" ->
            "Success"

        "info" ->
            "Information"

        "limit_reached" ->
            "Resource Limit Reached"

        "payment_failed" ->
            "Payment Failed"

        "subscription_expiring" ->
            "Subscription Expiring"

        _ ->
            "Notice"

================
File: frontend/src/Components/LimitBanner.elm
================
module Components.LimitBanner exposing (LimitWarning(..), Model, Msg, init, update, view, viewLimitBanner)

import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick)
import Http
import Json.Decode as Decode exposing (Decoder, int, string)
import Json.Decode.Pipeline as Pipeline
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, viewBox)


type LimitWarning
    = AgentLimit Int Int -- currentCount, maxAllowed
    | ContactLimit Int Int -- currentCount, maxAllowed
    | TrialEnding String -- date when trial ends
    | CustomWarning String String -- title, message


type alias Model =
    { warning : Maybe LimitWarning
    , limits : Maybe LimitInfo
    , error : Maybe String
    }


type alias LimitInfo =
    { tierId : String
    , tierName : String
    , agentLimit : Int
    , contactLimit : Int
    }


type Msg
    = GotLimits (Result Http.Error LimitInfo)
    | CloseBanner


init : ( Model, Cmd Msg )
init =
    ( { warning = Nothing
      , limits = Nothing
      , error = Nothing
      }
    , fetchLimits GotLimits
    )


fetchLimits : (Result Http.Error LimitInfo -> msg) -> Cmd msg
fetchLimits toMsg =
    Http.request
        { method = "GET"
        , url = "/api/organizations/my-subscription"
        , headers = []
        , body = Http.emptyBody
        , expect = Http.expectJson toMsg limitInfoDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


limitInfoDecoder : Decoder LimitInfo
limitInfoDecoder =
    Decode.succeed LimitInfo
        |> Pipeline.required "tierId" string
        |> Pipeline.required "tierName" string
        |> Pipeline.required "agentLimit" int
        |> Pipeline.required "contactLimit" int


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotLimits (Ok limitInfo) ->
            ( { model | limits = Just limitInfo }, Cmd.none )

        GotLimits (Err error) ->
            ( { model | error = Just (httpErrorToString error) }, Cmd.none )

        CloseBanner ->
            ( { model | warning = Nothing }, Cmd.none )


httpErrorToString : Http.Error -> String
httpErrorToString error =
    case error of
        Http.BadUrl url ->
            "Bad URL: " ++ url

        Http.Timeout ->
            "Request timed out"

        Http.NetworkError ->
            "Network error"

        Http.BadStatus statusCode ->
            "Bad status: " ++ String.fromInt statusCode

        Http.BadBody message ->
            "Bad body: " ++ message


view : Model -> Html Msg
view model =
    case model.warning of
        Nothing ->
            text ""

        Just warning ->
            viewLimitBanner warning CloseBanner


viewLimitBanner : LimitWarning -> msg -> Html msg
viewLimitBanner warning closeMsg =
    let
        ( title, message, upgradeText ) =
            case warning of
                AgentLimit current max ->
                    ( "Notice"
                    , "Your account has " ++ String.fromInt current ++ " agents, but your plan only allows for " ++ String.fromInt max ++ ". Please remove some agents or upgrade your plan."
                    , "Upgrade"
                    )

                ContactLimit current max ->
                    ( "Notice"
                    , "Your account has " ++ String.fromInt current ++ " contacts, but your plan only allows for " ++ String.fromInt max ++ ". Please upgrade your plan to add more contacts."
                    , "Upgrade"
                    )

                TrialEnding date ->
                    ( "Trial Ending Soon"
                    , "Your trial will end on " ++ date ++ ". Please upgrade your plan to continue using all features."
                    , "Upgrade"
                    )

                CustomWarning customTitle customMessage ->
                    ( customTitle
                    , customMessage
                    , "Upgrade"
                    )
    in
    div [ class "bg-amber-50 border-l-4 border-amber-400 p-4 mb-6" ]
        [ div [ class "flex justify-between" ]
            [ div [ class "flex" ]
                [ div [ class "flex-shrink-0" ]
                    [ div [ class "h-5 w-5 text-amber-400" ]
                        [ svg [ viewBox "0 0 20 20", fill "currentColor" ]
                            [ path [ fillRule "evenodd", d "M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z", clipRule "evenodd" ] []
                            ]
                        ]
                    ]
                , div [ class "ml-3" ]
                    [ p [ class "text-sm text-amber-700 font-medium" ]
                        [ text title ]
                    , p [ class "text-sm text-amber-700 mt-1" ]
                        [ text message ]
                    ]
                ]
            , div [ class "flex items-center" ]
                [ a [ href "/change-plan", class "mr-4 text-sm font-medium text-amber-700 underline hover:text-amber-600" ]
                    [ text upgradeText ]
                , button
                    [ class "rounded-md text-amber-500 hover:bg-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500"
                    , onClick closeMsg
                    ]
                    [ span [ class "sr-only" ] [ text "Dismiss" ]
                    , div [ class "h-5 w-5" ]
                        [ svg [ viewBox "0 0 20 20", fill "currentColor" ]
                            [ path [ fillRule "evenodd", d "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z", clipRule "evenodd" ] []
                            ]
                        ]
                    ]
                ]
            ]
        ]

================
File: frontend/src/Components/ProgressIndicator.elm
================
module Components.ProgressIndicator exposing (Step, view)

import Html exposing (..)
import Html.Attributes exposing (..)


type alias Step =
    { icon : String
    , title : String
    , description : String
    , isCompleted : Bool
    , isActive : Bool
    }


view : List Step -> Html msg
view steps =
    div 
        [ class "md:fixed hidden md:block left-0 top-0 bottom-0 w-[280px] bg-white border-r border-[#eaecf0] overflow-y-auto" ]
        [ div [ class "flex flex-col h-full px-4 sm:px-8 py-6 sm:py-8" ]
            [ -- Logo
              div [ class "mb-6 sm:mb-14" ]
                [ div [ class "flex items-center" ]
                    [ a
                        [ href "/"
                        , class "cursor-pointer"
                        ]
                        [ img
                            [ src "/images/medicare-max-logo.png"
                            , class "h-6 sm:h-8 w-auto"
                            , alt "Medicare Max logo"
                            ]
                            []
                        ]
                    ]
                ]

            -- Steps
            , div [ class "flex-1" ]
                [ div [ class "space-y-4 sm:space-y-7" ] (List.map viewStep steps)
                ]

            -- Help email
            , div [ class "text-xs sm:text-sm text-[#667085] flex items-center mt-6 sm:mt-8" ]
                [ span [ class "mr-2" ] [ text "✉️" ]
                , text "help@medicaremax.com"
                ]
            ]
        ]


viewStep : Step -> Html msg
viewStep step =
    div
        [ class "flex items-start"
        , classList [ ( "opacity-60", not step.isActive && not step.isCompleted ) ]
        ]
        [ div
            [ class "shrink-0 w-8 h-8 rounded-full flex items-center justify-center mr-3 transition-all duration-300"
            , classList
                [ ( "bg-[#03045e] text-white", step.isActive )
                , ( "bg-[#03045e]/90 text-white", step.isCompleted )
                , ( "bg-[#f9fafb] text-[#667085] border border-[#eaecf0]", not step.isActive && not step.isCompleted )
                ]
            ]
            [ span [ class "text-base" ] [ text step.icon ]
            ]
        , div [ class "flex-1" ]
            [ h3
                [ class "text-sm font-medium transition-colors duration-300"
                , classList
                    [ ( "text-[#101828]", step.isActive )
                    , ( "text-[#101828]/90", step.isCompleted )
                    , ( "text-[#667085]", not step.isActive && not step.isCompleted )
                    ]
                ]
                [ text step.title ]
            , p [ class "text-sm text-[#667085] mt-1 leading-relaxed" ]
                [ text step.description ]
            ]
        ]

================
File: frontend/src/Components/SetupLayout.elm
================
module Components.SetupLayout exposing (SetupStep(..), view)

import Components.ProgressIndicator as ProgressIndicator
import Html exposing (..)
import Html.Attributes exposing (alt, class, src, style)


type SetupStep
    = PlanSelection
    | OrganizationSetup
    | AgentSetup


type alias StepInfo =
    { step : SetupStep
    , icon : String
    , title : String
    , description : String
    }


view : SetupStep -> Bool -> Int -> List (Html msg) -> Html msg
view currentStep isBasicPlan stepNumber content =
    div [ class "min-h-screen bg-gray-50 flex" ]
        [ viewProgressIndicator currentStep isBasicPlan stepNumber
        , div [ class "flex-1 md:ml-[280px] pb-16 sm:pb-24" ]
            [ div [ class "max-w-3xl mx-auto py-4 sm:py-6 px-4 sm:px-6 lg:px-8" ]
                (viewMobileProgressSteps currentStep isBasicPlan stepNumber :: content)
            ]
        ]

-- Mobile progress steps shown at the top of the content area on small screens
viewMobileProgressSteps : SetupStep -> Bool -> Int -> Html msg
viewMobileProgressSteps currentStep isBasicPlan stepNumber =
    let
        steps = 
            if isBasicPlan then
                5 -- Basic plan has 5 steps
            else
                6 -- Multi-agent plan has 6 steps
                
        currentStepIndex =
            case currentStep of
                PlanSelection ->
                    0
                    
                OrganizationSetup ->
                    stepNumber
                    
                AgentSetup ->
                    stepNumber
                    
        -- Calculate progress percentage
        progressPercentage =
            String.fromInt (min 100 (ceiling (toFloat (currentStepIndex * 100) / toFloat (steps - 1))))
            
        -- Get current step number and title
        stepTitle =
            case (currentStep, stepNumber) of
                (PlanSelection, _) ->
                    "Choose Plan"
                    
                (OrganizationSetup, 2) ->
                    "Personal Details"
                    
                (OrganizationSetup, 3) ->
                    "Company Details"
                    
                (OrganizationSetup, 4) ->
                    "Licensing Settings"
                    
                (AgentSetup, 5) ->
                    "Add Team Members"
                    
                (OrganizationSetup, 5) ->
                    if isBasicPlan then
                        "Payment"
                    else
                        "Licensing Settings"
                    
                (OrganizationSetup, 6) ->
                    "Payment"
                    
                _ ->
                    "Setup"
    in
    div [ class "md:hidden mb-6 pb-4 border-b border-gray-200" ]
        [ div [ class "flex justify-between items-center mb-4" ]
            [ img
                [ src "/images/medicare-max-logo.png"
                , class "h-6 w-auto"
                , alt "Medicare Max logo"
                ]
                []
            , div [ class "text-xs text-gray-500" ]
                [ text "Step "
                , text (String.fromInt (currentStepIndex + 1))
                , text " of "
                , text (String.fromInt steps)
                ]
            ]
        , h1 [ class "text-xl font-semibold text-gray-900 mb-2" ]
            [ text stepTitle ]
        , div [ class "h-1 w-full bg-gray-200 rounded overflow-hidden" ]
            [ div
                [ class "h-full bg-[#03045e] transition-all duration-300"
                , style "width" (progressPercentage ++ "%")
                ]
                []
            ]
        ]


viewProgressIndicator : SetupStep -> Bool -> Int -> Html msg
viewProgressIndicator currentStep isBasicPlan stepNumber =
    let
        basicSteps =
            [ { step = PlanSelection
              , icon = "1"
              , title = "Choose Plan"
              , description = "Select your subscription"
              }
            , { step = OrganizationSetup
              , icon = "2"
              , title = "Personal Details"
              , description = "Enter your information"
              }
            , { step = OrganizationSetup
              , icon = "3"
              , title = "Company Details"
              , description = "Agency information"
              }
            , { step = OrganizationSetup
              , icon = "4"
              , title = "Licensing Settings"
              , description = "States and carriers"
              }
            , { step = OrganizationSetup
              , icon = "5"
              , title = "Payment"
              , description = "Complete setup"
              }
            ]

        multiAgentSteps =
            [ { step = PlanSelection
              , icon = "1"
              , title = "Choose Plan"
              , description = "Select your subscription"
              }
            , { step = OrganizationSetup
              , icon = "2"
              , title = "Personal Details"
              , description = "Enter your information"
              }
            , { step = OrganizationSetup
              , icon = "3"
              , title = "Company Details"
              , description = "Agency information"
              }
            , { step = OrganizationSetup
              , icon = "4"
              , title = "Licensing Settings"
              , description = "States and carriers"
              }
            , { step = AgentSetup
              , icon = "5"
              , title = "Add Team Members"
              , description = "Invite your team"
              }
            , { step = OrganizationSetup
              , icon = "6"
              , title = "Payment"
              , description = "Complete setup"
              }
            ]

        steps =
            if isBasicPlan then
                basicSteps

            else
                multiAgentSteps

        makeStep index info =
            { icon = info.icon
            , title = info.title
            , description = info.description
            , isCompleted = isStepComplete currentStep info.step index stepNumber
            , isActive = info.step == currentStep && index == stepNumber
            }

        -- Calculate progress percentage for the progress bar
        totalSteps =
            List.length steps

        currentStepIndex =
            case currentStep of
                PlanSelection ->
                    0

                OrganizationSetup ->
                    stepNumber

                AgentSetup ->
                    stepNumber

        progressPercentage =
            String.fromInt (min 100 (ceiling (toFloat (currentStepIndex * 100) / toFloat (totalSteps - 1))))

        progressBar =
            div [ class "px-8 mt-4" ]
                [ div [ class "h-1 w-full bg-gray-200 rounded overflow-hidden" ]
                    [ div
                        [ class "h-full bg-[#03045e] transition-all duration-300"
                        , style "width" (progressPercentage ++ "%")
                        ]
                        []
                    ]
                , div [ class "mt-2 text-xs text-gray-500 flex justify-between" ]
                    [ span [] [ text "Setup Progress" ]
                    , span [] [ text (progressPercentage ++ "%") ]
                    ]
                ]
    in
    div []
        [ ProgressIndicator.view (List.indexedMap makeStep steps)
        , progressBar
        ]


isStepComplete : SetupStep -> SetupStep -> Int -> Int -> Bool
isStepComplete currentStep step stepIndex currentStepNumber =
    case ( currentStep, step ) of
        ( PlanSelection, _ ) ->
            -- When on plan selection, no steps are completed
            False

        ( OrganizationSetup, PlanSelection ) ->
            -- When on org settings, plan selection is completed
            True

        ( OrganizationSetup, OrganizationSetup ) ->
            -- For org setup steps, complete those before the current one
            stepIndex < currentStepNumber

        ( OrganizationSetup, _ ) ->
            -- Other steps aren't completed yet
            False

        ( AgentSetup, AgentSetup ) ->
            -- The current step isn't completed
            False

        ( AgentSetup, _ ) ->
            -- When on agent setup, all previous steps are completed
            True

================
File: frontend/src/Utils/DiscountDescription.elm
================
module Utils.DiscountDescription exposing (..)

import CarrierNaic exposing (Carrier(..))
import Csv.Decode as Decode exposing (Decoder)


isAchieve : Carrier -> String -> String -> Bool
isAchieve carrier naic state =
    case carrier of
        Humana ->
            case naic of
                "60052" ->
                    List.member state [ "CA", "NJ", "SC" ]

                "60219" ->
                    List.member state [ "PA", "TX" ]

                "88595" ->
                    List.member state [ "DE", "MT", "NH", "SD", "WY", "WI" ]

                "73288" ->
                    List.member state [ "GA" ]

                "60984" ->
                    List.member state stateListMost

                _ ->
                    False

        _ ->
            False


stateListMost : List String
stateListMost =
    [ "AL"
    , "AZ"
    , "AR"
    , "FL"
    , "IL"
    , "IA"
    , "IN"
    , "KS"
    , "KY"
    , "LA"
    , "MI"
    , "MS"
    , "NE"
    , "NC"
    , "ND"
    , "OH"
    , "OK"
    , "PA"
    , "TN"
    , "WV"
    ]


type alias DiscountInfo =
    { state : String
    , aceChubb : Maybe String
    , aetna : Maybe String
    , aflac : Maybe String
    , allstate : Maybe String
    , anthem : Maybe String
    , cigna : Maybe String
    , mutualOfOmaha : Maybe String
    , humana : Maybe String
    , humanaAchieve : Maybe String
    , uhc : Maybe String
    }


discountInfoDecoder : Decoder DiscountInfo
discountInfoDecoder =
    Decode.into DiscountInfo
        |> Decode.pipeline (Decode.column 0 Decode.string)
        |> Decode.pipeline (Decode.optionalColumn 1 Decode.string)
        |> Decode.pipeline (Decode.optionalColumn 2 Decode.string)
        |> Decode.pipeline (Decode.optionalColumn 3 Decode.string)
        |> Decode.pipeline (Decode.optionalColumn 4 Decode.string)
        |> Decode.pipeline (Decode.optionalColumn 5 Decode.string)
        |> Decode.pipeline (Decode.optionalColumn 6 Decode.string)
        |> Decode.pipeline (Decode.optionalColumn 7 Decode.string)
        |> Decode.pipeline (Decode.optionalColumn 8 Decode.string)
        |> Decode.pipeline (Decode.optionalColumn 9 Decode.string)
        |> Decode.pipeline (Decode.optionalColumn 10 Decode.string)



{--| In a real application, this would load the CSV file using HTTP or ports.
For now, we'll use a hardcoded string since Elm doesn't directly support
file system operations. In a production app, this would be loaded from
a file during build time or fetched via HTTP.
--}
{--| Parse the CSV data and convert it to a list of DiscountInfo records.
In a real application, error handling would be more robust.
--}


getDiscountInfos : String -> Result String (List DiscountInfo)
getDiscountInfos csvData =
    Decode.decodeCsv Decode.NoFieldNames discountInfoDecoder csvData
        |> Result.mapError Decode.errorToString



{--| Get the household discount description for a specific carrier, NAIC, and state.
Returns a Maybe String wrapped in a Result to handle both the case of successful
parsing with no discount (Nothing) and the case of parsing errors (Err).
--}


discountDescription : String -> Carrier -> String -> String -> Result String (Maybe String)
discountDescription csvString carrier naic state =
    getDiscountInfos csvString
        |> Result.andThen
            (\discountInfos ->
                -- Find the discount info for the given state
                case List.filter (\info -> info.state == state) discountInfos of
                    [] ->
                        Err ("No discount information found for state: " ++ state)

                    stateInfo :: _ ->
                        -- Clean up "NA" values to be Nothing
                        let
                            cleanNA : Maybe String -> Maybe String
                            cleanNA maybeStr =
                                maybeStr
                                    |> Maybe.andThen
                                        (\str ->
                                            if str == "NA" then
                                                Nothing

                                            else
                                                Just str
                                        )
                        in
                        case carrier of
                            AceChubb ->
                                Ok (cleanNA stateInfo.aceChubb)

                            Aetna ->
                                Ok (cleanNA stateInfo.aetna)

                            Aflac ->
                                Ok (cleanNA stateInfo.aflac)

                            Allstate ->
                                Ok (cleanNA stateInfo.allstate)

                            Cigna ->
                                Ok (cleanNA stateInfo.cigna)

                            MutualOfOmaha ->
                                Ok (cleanNA stateInfo.mutualOfOmaha)

                            UnitedHealthcare ->
                                Ok (cleanNA stateInfo.uhc)

                            Humana ->
                                if isAchieve carrier naic state then
                                    Ok (cleanNA stateInfo.humanaAchieve)

                                else
                                    Ok (cleanNA stateInfo.humana)
            )

================
File: frontend/src/Utils/Formatters.elm
================
module Utils.Formatters exposing (formatPhoneNumber)


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    if String.isEmpty phone then
        ""

    else
        let
            digits =
                String.filter Char.isDigit phone

            len =
                String.length digits
        in
        if len == 0 then
            ""

        else if len == 11 && String.left 1 digits == "1" then
            let
                area =
                    String.slice 1 4 digits

                prefix =
                    String.slice 4 7 digits

                line =
                    String.slice 7 11 digits
            in
            "+1 (" ++ area ++ ") " ++ prefix ++ "-" ++ line

        else if len <= 3 then
            "(" ++ String.left len digits

        else if len <= 6 then
            "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

        else
            "(" ++ String.left 3 digits ++ ") " ++ String.slice 3 6 digits ++ "-" ++ String.dropLeft 6 digits

================
File: frontend/src/Utils/MyDate.elm
================
module Utils.MyDate exposing (dateFromMonthDayYear)

import Date exposing (Date)
import List.Extra


dateFromMonthDayYear : String -> Result String Date
dateFromMonthDayYear dateString =
    let
        monthDayYear =
            String.split "/" dateString

        has3 =
            List.length monthDayYear == 3

        year =
            List.Extra.last monthDayYear

        month =
            List.head monthDayYear

        day =
            List.tail monthDayYear
                |> Maybe.withDefault []
                |> List.head
    in
    if has3 then
        case ( year, month, day ) of
            ( Just y, Just m, Just d ) ->
                let
                    mm =
                        if String.length m == 1 then
                            "0" ++ m

                        else
                            m

                    dd =
                        if String.length d == 1 then
                            "0" ++ d

                        else
                            d
                in
                Date.fromIsoString (String.join "-" [ y, mm, dd ])

            _ ->
                Err "Invalid date format 1"

    else
        Err "Invalid date format 2"

================
File: frontend/src/Utils/QuoteHeader.elm
================
module Utils.QuoteHeader exposing (..)

import Html exposing (..)
import Html.Attributes exposing (..)


viewHeader : Maybe String -> Maybe String -> Html msg
viewHeader maybeImage maybeName =
    div [ class "flex justify-center items-center mt-4 mb-6" ]
        [ case ( maybeImage, maybeName ) of
            ( Just logo, _ ) ->
                img [ src logo, alt "Organization Logo", class "h-16 max-w-[240px] md:max-w-[300px] object-contain px-4" ] []

            ( _, Just name ) ->
                div [ class "text-4xl font-bold text-[#101828] leading-[1.2]" ] [ text name ]

            _ ->
                text ""
        ]

================
File: frontend/src/Utils/RandomOrgName.elm
================
module Utils.RandomOrgName exposing (generateOrgName)

import Random


chars : List Char
chars =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890"
        |> String.toList


generateOrgName : Random.Generator String
generateOrgName =
    Random.list 10 (Random.int 0 (List.length chars - 1))
        |> Random.map
            (\indices ->
                indices
                    |> List.map
                        (\i ->
                            chars
                                |> List.drop i
                                |> List.head
                                |> Maybe.withDefault ' '
                        )
                    |> String.fromList
            )

================
File: frontend/src/Utils/UrlStuff.elm
================
module Utils.UrlStuff exposing (getQueryParams)

import Dict exposing (Dict)
import Url exposing (Url)


getQueryParams : Url -> Dict String String
getQueryParams url =
    url.query
        |> Maybe.map (\q -> String.split "&" q)
        |> Maybe.withDefault []
        |> List.filterMap
            (\param ->
                case String.split "=" param of
                    key :: value :: [] ->
                        Just ( key, value )

                    _ ->
                        Nothing
            )
        |> Dict.fromList

================
File: frontend/src/Accept.elm
================
module Accept exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onInput, onSubmit)
import Http
import Json.Decode as D
import Json.Encode as E
import Url.Parser.Query as Query


type alias Model =
    { name : String
    , email : String
    , isSubmitting : Bool
    , error : Maybe String
    , success : Bool
    , quoteId : Maybe String
    , key : Nav.Key
    }


type Msg
    = UpdateName String
    | UpdateEmail String
    | SubmitForm
    | GotSubmitResponse (Result Http.Error ())
    | GotContactInfo (Result Http.Error ContactInfo)


type alias ContactInfo =
    { email : String
    , firstName : String
    , lastName : String
    }


init : Nav.Key -> Maybe String -> ( Model, Cmd Msg )
init key maybeQuoteId =
    ( { name = ""
      , email = ""
      , isSubmitting = False
      , error = Nothing
      , success = False
      , quoteId = maybeQuoteId
      , key = key
      }
    , case maybeQuoteId of
        Just quoteId ->
            Http.get
                { url = "/api/quotes/decode/" ++ quoteId
                , expect = Http.expectJson GotContactInfo contactInfoDecoder
                }

        Nothing ->
            Cmd.none
    )


contactInfoDecoder : D.Decoder ContactInfo
contactInfoDecoder =
    D.field "contact"
        (D.map3 ContactInfo
            (D.field "email" D.string)
            (D.field "firstName" D.string)
            (D.field "lastName" D.string)
        )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateName name ->
            ( { model | name = name }, Cmd.none )

        UpdateEmail email ->
            ( { model | email = email }, Cmd.none )

        SubmitForm ->
            ( { model | isSubmitting = True }
            , Http.post
                { url = "/api/contact-request"
                , body = Http.jsonBody (encodeForm model)
                , expect = Http.expectWhatever GotSubmitResponse
                }
            )

        GotSubmitResponse result ->
            case result of
                Ok _ ->
                    ( { model | isSubmitting = False, success = True }, Cmd.none )

                Err _ ->
                    ( { model | isSubmitting = False, error = Just "Failed to submit form. Please try again." }, Cmd.none )

        GotContactInfo result ->
            case result of
                Ok info ->
                    ( { model
                        | email = info.email
                        , name = info.firstName ++ " " ++ info.lastName
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( model, Cmd.none )


encodeForm : Model -> E.Value
encodeForm model =
    E.object
        [ ( "name", E.string model.name )
        , ( "email", E.string model.email )
        , ( "type", E.string "accept" )
        , ( "quoteId", Maybe.map E.string model.quoteId |> Maybe.withDefault E.null )
        ]


view : Model -> Browser.Document Msg
view model =
    { title = "Good News! - Medicare Max"
    , body =
        [ div [ class "min-h-screen bg-white" ]
            [ nav [ class "bg-white border-b border-gray-200" ]
                [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" ]
                    [ div [ class "flex justify-between h-16 items-center" ]
                        [ div [ class "flex-shrink-0" ]
                            [ img [ src "/images/medicare-max-logo.png", class "h-8 w-auto", alt "Medicare Max" ] [] ]
                        ]
                    ]
                ]
            , div [ class "max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12" ]
                [ if model.success then
                    div [ class "text-center" ]
                        [ h1 [ class "text-3xl font-bold text-gray-900 mb-4" ]
                            [ text "Thank You" ]
                        , p [ class "text-gray-600" ]
                            [ text "We'll be in touch soon to schedule your follow-up." ]
                        ]

                  else
                    div []
                        [ h1 [ class "text-3xl font-bold text-center text-gray-900 mb-4" ]
                            [ text "Great News!" ]
                        , p [ class "text-gray-600 text-center mb-8" ]
                            [ text "Based on your answers, you look like a good candidate to switch plans. Let's schedule a follow-up to discuss your options." ]
                        , case model.error of
                            Just error ->
                                div [ class "bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" ]
                                    [ text error ]

                            Nothing ->
                                text ""
                        , Html.form [ onSubmit SubmitForm, class "space-y-6 max-w-lg mx-auto" ]
                            [ div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                    [ text "Name" ]
                                , input
                                    [ type_ "text"
                                    , class "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
                                    , value model.name
                                    , onInput UpdateName
                                    , required True
                                    ]
                                    []
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                    [ text "Email" ]
                                , input
                                    [ type_ "email"
                                    , class "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
                                    , value model.email
                                    , onInput UpdateEmail
                                    , required True
                                    ]
                                    []
                                ]
                            , button
                                [ class "w-full bg-purple-600 text-white py-3 px-4 rounded-lg hover:bg-purple-700 transition-colors duration-200 disabled:opacity-50"
                                , type_ "submit"
                                , disabled model.isSubmitting
                                ]
                                [ if model.isSubmitting then
                                    text "Submitting..."

                                  else
                                    text "Schedule Follow-up"
                                ]
                            ]
                        ]
                ]
            ]
        ]
    }


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/src/AddAgent.elm
================
module AddAgent exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Components.ProgressIndicator
import Components.SetupLayout as SetupLayout
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Parser exposing ((|.), (|=), Parser, chompIf, chompWhile, end, succeed, symbol)
import StateRegions exposing (Region(..), getRegionStates, regionToString)
import Svg exposing (path, svg)
import Svg.Attributes exposing (d, fill, stroke, strokeLinecap, strokeLinejoin, strokeWidth, viewBox)
import Time
import Url



-- Constants


allStates : List String
allStates =
    [ "AL"
    , "AK"
    , "AZ"
    , "AR"
    , "CA"
    , "CO"
    , "CT"
    , "DE"
    , "FL"
    , "GA"
    , "HI"
    , "ID"
    , "IL"
    , "IN"
    , "IA"
    , "KS"
    , "KY"
    , "LA"
    , "ME"
    , "MD"
    , "MA"
    , "MI"
    , "MN"
    , "MS"
    , "MO"
    , "MT"
    , "NE"
    , "NV"
    , "NH"
    , "NJ"
    , "NM"
    , "NY"
    , "NC"
    , "ND"
    , "OH"
    , "OK"
    , "OR"
    , "PA"
    , "RI"
    , "SC"
    , "SD"
    , "TN"
    , "TX"
    , "UT"
    , "VT"
    , "VA"
    , "WA"
    , "WV"
    , "WI"
    , "WY"
    , "DC"
    ]


allCarriers : List String
allCarriers =
    [ "Aetna"
    , "Humana"
    , "UnitedHealthcare"
    , "Cigna"
    , "Aflac"
    , "Allstate"
    , "Mutual of Omaha"
    , "Ace Chubb"
    ]


type alias Settings =
    { carrierContracts : List String
    , stateLicenses : List String
    }


settingsObjectDecoder : Decoder Settings
settingsObjectDecoder =
    Decode.map2 Settings
        (Decode.field "carrierContracts" (Decode.list Decode.string))
        (Decode.field "stateLicenses" (Decode.list Decode.string))


type alias Model =
    { email : String
    , firstName : String
    , lastName : String
    , rawPhone : String
    , displayPhone : String
    , carriers : List String
    , stateLicenses : List String
    , error : Maybe String
    , isSetup : Bool
    , key : Nav.Key
    , isLoading : Bool
    , agents : List Agent
    , showAddForm : Bool
    , currentUser : Maybe CurrentUser
    , isLoadingForAgent : Maybe String
    , orgSettings : Maybe Settings
    , pendingSave : Maybe String
    , planType : String
    , showDeleteConfirm : Maybe String
    , reassignAgentId : Maybe String
    , contacts : List ContactSummary
    , emailStatus : EmailStatus
    , defaultAgentId : Maybe String
    }


type alias User =
    { id : String
    , email : String
    , firstName : String
    , lastName : String
    , phone : String
    }


type alias Agent =
    { id : String
    , firstName : String
    , lastName : String
    , email : String
    , phone : String
    , carriers : List String
    , stateLicenses : List String
    , expanded : Bool
    }


type alias CurrentUser =
    { id : String
    , email : String
    , firstName : String
    , lastName : String
    , phone : String
    }


type alias ContactSummary =
    { id : Int
    , agentId : Maybe String
    }


type EmailStatus
    = NotChecked
    | Checking
    | Valid
    | Invalid String


type Msg
    = NoOp
    | UpdateEmail String
    | UpdateFirstName String
    | UpdateLastName String
    | UpdatePhone String
    | UpdateField String String
    | SaveAgent
    | AgentSaved (Result Http.Error ())
    | NavigateTo String
    | CloseModal
    | ShowModal
    | ToggleCarrier String Bool
    | ToggleState String Bool
    | SelectAllCarriers Bool
    | SelectAllStates Bool
    | DeleteAgent String
    | ConfirmDeleteAgent String (Maybe String)
    | CloseDeleteConfirmModal
    | AgentDeleted (Result Http.Error ())
    | FinishSetup
    | SelectCommonStates Region
    | LoadFromOrg
    | GotOrgSettings (Result Http.Error Settings)
    | AddAnotherAgent
    | CancelAddAgent
    | RemoveAgent String
    | FetchAgents
    | GotAgents (Result Http.Error AgentsResponse)
    | GotCurrentUser (Result Http.Error CurrentUserResponse)
    | UpdateAgentField String String String
    | ToggleAgentExpanded String
    | UpdateAgentCarrier String String Bool
    | UpdateAgentState String String Bool
    | SelectAllStatesForAgent String Bool
    | SelectCommonStatesForAgent String Region
    | LoadFromOrgForAgent String
    | GotOrgSettingsForAgent String (Result Http.Error Settings)
    | SelectAllCarriersForAgent String Bool
    | SaveAgentDetails String
    | AgentDetailsSaved String (Result Http.Error ())
    | DebounceSaveAgent String
    | EditAgent Agent
    | CheckAgentEmail
    | GotEmailResponse (Result Http.Error EmailResponse)
    | SetDefaultAgent String
    | SetDefaultAgentResult (Result Http.Error ())


type alias CurrentUserResponse =
    { success : Bool
    , user : Maybe User
    }


type alias EmailResponse =
    { available : Bool
    , message : String
    }


type alias AgentsResponse =
    { agents : List Agent
    , defaultAgentId : Maybe String
    }


init : Bool -> Nav.Key -> Maybe { id : String, email : String, firstName : String, lastName : String, phone : String, isAdmin : Bool, isAgent : Bool } -> String -> ( Model, Cmd Msg )
init isSetup key currentUser planType =
    let
        initialAgents =
            case currentUser of
                Just user ->
                    -- Create an initial agent from the current user for setup mode
                    let
                        initialAgent =
                            { id = user.id
                            , firstName = user.firstName
                            , lastName = user.lastName
                            , email = user.email
                            , phone = user.phone
                            , carriers = []
                            , stateLicenses = []
                            , expanded = False
                            }

                        -- Convert old user type to new CurrentUser type
                        convertedUser =
                            { id = user.id
                            , email = user.email
                            , firstName = user.firstName
                            , lastName = user.lastName
                            , phone = user.phone
                            }
                    in
                    if isSetup then
                        [ initialAgent ]

                    else
                        []

                Nothing ->
                    []

        -- Convert old user type to new CurrentUser type
        convertedCurrentUser =
            currentUser
                |> Maybe.map
                    (\user ->
                        { id = user.id
                        , email = user.email
                        , firstName = user.firstName
                        , lastName = user.lastName
                        , phone = user.phone
                        }
                    )
    in
    ( { email = ""
      , firstName = ""
      , lastName = ""
      , rawPhone = ""
      , displayPhone = ""
      , carriers = []
      , stateLicenses = []
      , error = Nothing
      , isSetup = isSetup
      , key = key
      , isLoading = True
      , agents = initialAgents
      , showAddForm = False
      , currentUser = convertedCurrentUser
      , isLoadingForAgent = Nothing
      , orgSettings = Nothing
      , pendingSave = Nothing
      , planType = planType
      , showDeleteConfirm = Nothing
      , reassignAgentId = Nothing
      , contacts = []
      , emailStatus = NotChecked
      , defaultAgentId = Nothing
      }
    , fetchAgents
    )


view : Model -> Browser.Document Msg
view model =
    { title =
        if model.isSetup then
            "Add Team Members"

        else
            "Manage Agents"
    , body =
        [ if model.isSetup then
            -- Show setup UI with sidebar
            SetupLayout.view SetupLayout.AgentSetup
                (model.planType == "basic")
                4
                -- Using 4 for AddAgent as it's typically the 5th step (0-indexed)
                [ div [ class "max-w-3xl mx-auto pb-24" ]
                    [ viewSetupHeader model
                    , viewAgentsList model
                    ]
                , viewBottomBar model
                ]

          else
            -- Show regular UI without sidebar
            div [ class "min-h-screen bg-gray-50 pb-24" ]
                [ div [ class "max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8" ]
                    [ viewNormalHeader
                    , div [ class "bg-white shadow rounded-lg p-6" ]
                        [ viewAgentsList model
                        ]
                    ]
                , text "" -- No bottom bar in regular mode
                ]
        , viewDeleteConfirmationModal model
        ]
    }


viewSetupHeader : Model -> Html Msg
viewSetupHeader model =
    div [ class "mb-8 flex justify-between items-center" ]
        [ div []
            [ h1 [ class "text-3xl font-bold text-gray-900" ]
                [ text "Add Your First Agent" ]
            , p [ class "mt-2 text-gray-600" ]
                [ text "Set up your first agent to get started" ]
            ]
        , if not model.showAddForm then
            button
                [ class "inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
                , onClick AddAnotherAgent
                ]
                [ span [ class "mr-2" ] [ text "+" ]
                , text "Add Agent"
                ]

          else
            text ""
        ]


viewNormalHeader : Html Msg
viewNormalHeader =
    div [ class "mb-8 flex justify-left items-center" ]
        [ h1 [ class "text-2xl font-semibold text-gray-900" ]
            [ text "Manage Agents" ]
        ]


viewBasicInfo : Model -> Html Msg
viewBasicInfo model =
    div [ class "space-y-4" ]
        [ div [ class "grid grid-cols-2 gap-4" ]
            [ div []
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "First Name" ]
                , input
                    ([ type_ "text"
                     , class "mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500 text-base"
                     , value
                        (if isAdminBecomingAgent model then
                            case model.currentUser of
                                Just user ->
                                    user.firstName

                                Nothing ->
                                    model.firstName

                         else
                            model.firstName
                        )
                     , placeholder "Enter first name"
                     ]
                        ++ (if isAdminBecomingAgent model then
                                [ disabled True ]

                            else
                                [ onInput UpdateFirstName ]
                           )
                    )
                    []
                ]
            , div []
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "Last Name" ]
                , input
                    ([ type_ "text"
                     , class "mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500 text-base"
                     , value
                        (if isAdminBecomingAgent model then
                            case model.currentUser of
                                Just user ->
                                    user.lastName

                                Nothing ->
                                    model.lastName

                         else
                            model.lastName
                        )
                     , placeholder "Enter last name"
                     ]
                        ++ (if isAdminBecomingAgent model then
                                [ disabled True ]

                            else
                                [ onInput UpdateLastName ]
                           )
                    )
                    []
                ]
            ]
        , div [ class "grid grid-cols-2 gap-4" ]
            [ div []
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "Email" ]
                , input
                    ([ type_ "email"
                     , class "mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500 text-base"
                     , value
                        (if isAdminBecomingAgent model then
                            Maybe.map .email model.currentUser |> Maybe.withDefault ""

                         else
                            model.email
                        )
                     , placeholder "name@example.com"
                     ]
                        ++ (if isAdminBecomingAgent model then
                                [ disabled True ]

                            else
                                [ onInput UpdateEmail, onBlur CheckAgentEmail ]
                           )
                    )
                    []
                , viewEmailStatus model.emailStatus
                ]
            , div []
                [ label [ class "block text-sm font-medium text-gray-700" ]
                    [ text "Phone" ]
                , input
                    [ type_ "tel"
                    , class "mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-base"
                    , value model.displayPhone
                    , onInput UpdatePhone
                    , placeholder "(555) 555-5555"
                    ]
                    []
                ]
            ]
        ]


viewAgentsList : Model -> Html Msg
viewAgentsList model =
    div [ class "space-y-6" ]
        [ if model.error /= Nothing then
            div [ class "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6" ]
                [ text (Maybe.withDefault "" model.error) ]

          else
            text ""
        , div [ class "bg-blue-50 border border-blue-200 text-blue-700 px-4 py-3 rounded mb-6" ]
            [ div [ class "font-medium" ] [ text "Default Agent" ]
            , p [ class "text-sm mt-1" ]
                [ text "The default agent is automatically assigned to contacts who don't have an agent assigned. They also become the fallback when an agent is deleted, if another agent is not selected." ]
            ]
        , if model.isLoading then
            div [ class "flex justify-center items-center py-12" ]
                [ div [ class "animate-spin rounded-full h-12 w-12 border-4 border-blue-500 border-t-transparent" ] []
                , p [ class "ml-4 text-gray-500" ] [ text "Loading agents..." ]
                ]

          else
            div [ class "grid grid-cols-1 gap-6" ]
                (List.map
                    (\agent ->
                        let
                            isSelfUser =
                                case model.currentUser of
                                    Just user ->
                                        user.id == agent.id

                                    Nothing ->
                                        False

                            isDefault =
                                model.defaultAgentId == Just agent.id

                            cardBackgroundClass =
                                if isDefault then
                                    "bg-blue-50"

                                else
                                    "bg-white"
                        in
                        div [ class (cardBackgroundClass ++ " shadow rounded-lg p-6") ]
                            [ div [ class "flex items-center justify-between" ]
                                [ div [ class "flex items-center" ]
                                    [ div [ class "ml-4" ]
                                        [ div [ class "text-lg font-medium text-gray-900" ]
                                            [ text (agent.firstName ++ " " ++ agent.lastName) ]
                                        , div [ class "text-sm text-gray-500" ]
                                            [ text agent.email ]
                                        ]
                                    ]
                                , div [ class "flex items-center space-x-4" ]
                                    [ if not isDefault then
                                        button
                                            [ class "px-3 py-1 text-sm text-blue-600 hover:text-blue-800 font-medium border border-blue-600 rounded-md hover:bg-blue-50"
                                            , onClick (SetDefaultAgent agent.id)
                                            ]
                                            [ text "Set as Default" ]

                                      else
                                        div [ class "px-3 py-1 text-sm text-blue-600 font-medium" ]
                                            [ text "Default Agent" ]
                                    , button
                                        [ class "text-blue-600 hover:text-blue-800 font-medium"
                                        , onClick (ToggleAgentExpanded agent.id)
                                        ]
                                        [ text "Edit" ]
                                    , button
                                        [ class
                                            ("text-red-400 "
                                                ++ (if isSelfUser || isDefault then
                                                        "opacity-50 cursor-not-allowed"

                                                    else
                                                        "hover:text-red-500"
                                                   )
                                            )
                                        , onClick (DeleteAgent agent.id)
                                        , disabled (isSelfUser || isDefault)
                                        , title
                                            (if isSelfUser then
                                                "You cannot delete your own account"

                                             else if isDefault then
                                                "You cannot delete the default agent"

                                             else
                                                "Delete"
                                            )
                                        ]
                                        [ text "Delete" ]
                                    ]
                                ]
                            , if agent.expanded then
                                div [ class "border-t border-gray-200 mt-4 pt-4" ]
                                    [ viewAgentDetails model agent ]

                              else
                                text ""
                            ]
                    )
                    model.agents
                )
        , div [ class "mt-8 bg-white shadow rounded-lg p-6" ]
            [ if model.showAddForm then
                div [ class "space-y-6" ]
                    [ div [ class "border-b border-gray-200 pb-4" ]
                        [ h2 [ class "text-lg font-medium text-gray-900" ]
                            [ text "Add New Agent" ]
                        , p [ class "mt-1 text-sm text-gray-500" ]
                            [ text "Fill in the agent's information below" ]
                        ]
                    , viewBasicInfo model
                    , div [ class "flex justify-end space-x-4 mt-6" ]
                        [ button
                            [ class "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                            , onClick CancelAddAgent
                            ]
                            [ text "Cancel" ]
                        , button
                            [ class "px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                            , onClick SaveAgent
                            , disabled (not (isFormValid model))
                            ]
                            [ text "Add Agent" ]
                        ]
                    ]

              else
                div [ class "flex justify-between items-center" ]
                    [ div []
                        [ h3 [ class "text-lg font-medium text-gray-900" ]
                            [ text "Add New Agent" ]
                        , p [ class "text-sm text-gray-500" ]
                            [ text "Add a team member to your organization" ]
                        ]
                    , button
                        [ class "inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
                        , onClick AddAnotherAgent
                        ]
                        [ span [ class "mr-2" ] [ text "+" ]
                        , text "Add Agent"
                        ]
                    ]
            ]
        ]


viewAgentDetails : Model -> Agent -> Html Msg
viewAgentDetails model agent =
    let
        orgCarriers =
            model.orgSettings
                |> Maybe.map .carrierContracts
                |> Maybe.withDefault []

        orgStates =
            model.orgSettings
                |> Maybe.map .stateLicenses
                |> Maybe.withDefault []

        fieldError field =
            case field of
                "phone" ->
                    String.isEmpty agent.phone

                "firstName" ->
                    String.isEmpty agent.firstName

                "lastName" ->
                    String.isEmpty agent.lastName

                "email" ->
                    String.isEmpty agent.email

                _ ->
                    False

        errorIndicator field =
            if fieldError field then
                span [ class "text-red-500 ml-1" ] [ text "*" ]

            else
                text ""

        isCurrentUserAgent =
            case model.currentUser of
                Just user ->
                    user.id == agent.id

                Nothing ->
                    False

        formattedPhone =
            formatPhoneNumber (String.filter Char.isDigit agent.phone)

        isLoading =
            model.isLoadingForAgent == Just agent.id

        canEdit =
            canModifySettings model agent.id

        -- Allow current user to edit their own details
        canEditField =
            isCurrentUserAgent || canEdit

        hasChanges =
            model.pendingSave == Just agent.id

        isSaving =
            model.isLoadingForAgent == Just agent.id

        onFieldInput : String -> String -> Msg
        onFieldInput field value =
            UpdateAgentField agent.id field value

        onSelectAllCarriers : Bool -> Msg
        onSelectAllCarriers isSelected =
            SelectAllCarriersForAgent agent.id isSelected
    in
    div [ class "space-y-6" ]
        [ div [ class "space-y-4" ]
            [ div [ class "grid grid-cols-2 gap-4" ]
                [ div []
                    [ label [ class "block text-sm font-medium text-gray-700" ]
                        [ text "First Name"
                        , errorIndicator "firstName"
                        ]
                    , input
                        [ type_ "text"
                        , class "mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500 text-base"
                        , value agent.firstName
                        , onInput (onFieldInput "firstName")
                        , disabled (not canEditField)
                        ]
                        []
                    ]
                , div []
                    [ label [ class "block text-sm font-medium text-gray-700" ]
                        [ text "Last Name"
                        , errorIndicator "lastName"
                        ]
                    , input
                        [ type_ "text"
                        , class "mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500 text-base"
                        , value agent.lastName
                        , onInput (onFieldInput "lastName")
                        , disabled (not canEditField)
                        ]
                        []
                    ]
                ]
            , div [ class "grid grid-cols-2 gap-4" ]
                [ div []
                    [ label [ class "block text-sm font-medium text-gray-700" ]
                        [ text "Email"
                        , errorIndicator "email"
                        ]
                    , input
                        [ type_ "email"
                        , class "mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500 text-base"
                        , value agent.email
                        , onInput (onFieldInput "email")
                        , disabled (not canEditField)
                        ]
                        []
                    ]
                , div []
                    [ label [ class "block text-sm font-medium text-gray-700" ]
                        [ text "Phone"
                        , errorIndicator "phone"
                        ]
                    , input
                        [ type_ "tel"
                        , class "mt-1 px-3 py-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-base"
                        , value formattedPhone
                        , onInput (onFieldInput "phone")
                        , placeholder "(555) 555-5555"
                        , disabled (not canEditField)
                        ]
                        []
                    ]
                ]
            ]
        , div [ class "mt-6" ]
            [ p [ class "text-sm text-gray-500" ]
                [ text "This agent will automatically use the carriers and state licenses from your organization settings." ]
            ]
        , if hasChanges then
            div [ class "mt-4 flex justify-end" ]
                [ button
                    [ class "px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                    , onClick (SaveAgentDetails agent.id)
                    , disabled isSaving
                    ]
                    [ if isSaving then
                        text "Saving..."

                      else
                        text "Save Changes"
                    ]
                ]

          else
            text ""
        ]


viewAddAgentButton : Html Msg
viewAddAgentButton =
    div [ class "text-center mt-8" ]
        [ button
            [ class "inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
            , onClick AddAnotherAgent
            ]
            [ span [ class "mr-2" ] [ text "+" ]
            , text "Add Agent"
            ]
        ]


viewBottomBar : Model -> Html Msg
viewBottomBar model =
    let
        allAgentsValid =
            List.all
                (\agent ->
                    not (String.isEmpty agent.phone)
                        && not (String.isEmpty agent.firstName)
                        && not (String.isEmpty agent.lastName)
                        && not (String.isEmpty agent.email)
                )
                model.agents

        canAdd =
            not (String.isEmpty (String.trim model.firstName))
                && not (String.isEmpty (String.trim model.lastName))
                && model.emailStatus
                == Valid
                && isValidPhone model.displayPhone
    in
    div [ class "fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-4 sm:px-6 z-10" ]
        [ div [ class "max-w-3xl mx-auto" ]
            [ if model.error /= Nothing then
                div [ class "mb-4" ]
                    [ p [ class "text-red-600" ]
                        [ text (Maybe.withDefault "" model.error) ]
                    ]

              else
                text ""
            , if model.isSetup then
                div [ class "flex justify-center" ]
                    [ button
                        [ class "px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
                        , onClick FinishSetup
                        , disabled (not allAgentsValid || List.isEmpty model.agents)
                        ]
                        [ text "Continue to Dashboard" ]
                    ]

              else
                text ""
            ]
        ]


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )

        UpdateEmail email ->
            ( { model | email = email, emailStatus = NotChecked }, Cmd.none )

        UpdateFirstName name ->
            ( { model | firstName = name }, Cmd.none )

        UpdateLastName name ->
            ( { model | lastName = name }, Cmd.none )

        UpdatePhone input ->
            let
                rawDigits =
                    String.filter Char.isDigit input
                        |> String.left 10

                formattedPhone =
                    formatPhoneNumber rawDigits
            in
            ( { model
                | rawPhone = rawDigits
                , displayPhone = formattedPhone
                , pendingSave = Just "main" -- Add pending save for main agent
              }
            , Cmd.none
            )

        UpdateField field value ->
            case model.currentUser of
                Just user ->
                    let
                        updatedUser =
                            case field of
                                "firstName" ->
                                    { user | firstName = value }

                                "lastName" ->
                                    { user | lastName = value }

                                "phone" ->
                                    { user | phone = String.filter Char.isDigit value }

                                _ ->
                                    user
                    in
                    ( { model | currentUser = Just updatedUser }
                    , Cmd.none
                    )

                Nothing ->
                    ( model, Cmd.none )

        SaveAgent ->
            if isFormValid model then
                ( { model | isLoading = True }
                , submitNewAgent model
                )

            else
                ( { model | error = Just "Please fill out all fields, ensure email is valid, and select at least one role (admin or agent)" }
                , Cmd.none
                )

        AgentSaved (Ok ()) ->
            if model.isSetup then
                ( { model
                    | showAddForm = False
                    , firstName = ""
                    , lastName = ""
                    , email = ""
                    , rawPhone = ""
                    , displayPhone = ""
                    , carriers = []
                    , stateLicenses = []
                  }
                , Cmd.batch
                    [ fetchAgents -- Refresh the agents list
                    , fetchCurrentUser -- Refresh current user to get updated role
                    ]
                )

            else
                ( { model | error = Nothing }
                , Cmd.batch
                    [ Nav.pushUrl model.key "/add-agents"
                    , fetchAgents -- Also refresh agents list when not in setup mode
                    ]
                )

        AgentSaved (Err _) ->
            ( { model | error = Just "Failed to save agent" }
            , Cmd.none
            )

        CheckAgentEmail ->
            if String.isEmpty (String.trim model.email) then
                ( { model | emailStatus = NotChecked }
                , Cmd.none
                )

            else if model.emailStatus == Checking then
                ( model, Cmd.none )

            else
                ( { model | emailStatus = Checking }
                , checkAgentEmail model.email
                )

        FinishSetup ->
            ( model
            , Nav.pushUrl model.key "/dashboard"
            )

        LoadFromOrg ->
            ( { model | isLoading = True }
            , Http.get
                { url = "/api/settings"
                , expect = Http.expectJson GotOrgSettings settingsObjectDecoder
                }
            )

        GotOrgSettings (Ok settings) ->
            ( { model
                | carriers = settings.carrierContracts
                , stateLicenses = settings.stateLicenses
                , isLoading = False
                , orgSettings = Just settings
              }
            , Cmd.none
            )

        GotOrgSettings (Err _) ->
            ( { model
                | error = Just "Failed to load organization settings"
                , isLoading = False
              }
            , Cmd.none
            )

        AddAnotherAgent ->
            ( { model
                | showAddForm = True
                , firstName = ""
                , lastName = ""
                , email = ""
                , rawPhone = ""
                , displayPhone = ""
                , carriers = []
                , stateLicenses = []
              }
            , Cmd.none
            )

        CancelAddAgent ->
            ( { model | showAddForm = False }, Cmd.none )

        RemoveAgent id ->
            ( { model | agents = List.filter (\agent -> agent.id /= id) model.agents }, Cmd.none )

        FetchAgents ->
            ( model, fetchAgents )

        GotAgents result ->
            case result of
                Ok response ->
                    let
                        agents =
                            response.agents

                        finalAgents =
                            if model.isSetup then
                                -- In setup mode, make sure we have at least the current user as an agent
                                case model.currentUser of
                                    Just user ->
                                        -- Check if the current user is already in the agents list
                                        if List.any (\a -> a.id == user.id) agents then
                                            -- Current user is already in the list, use the API result
                                            agents

                                        else
                                            -- Add the current user to the agents list
                                            { id = user.id
                                            , firstName = user.firstName
                                            , lastName = user.lastName
                                            , email = user.email
                                            , phone = user.phone
                                            , carriers = []
                                            , stateLicenses = []
                                            , expanded = False
                                            }
                                                :: agents

                                    Nothing ->
                                        agents

                            else
                                -- In normal mode, use the API result
                                agents
                    in
                    ( { model
                        | agents = finalAgents
                        , defaultAgentId = response.defaultAgentId
                        , isLoading = False
                      }
                    , Cmd.none
                    )

                Err error ->
                    case error of
                        Http.BadStatus 403 ->
                            -- For 403, keep the current user in the agents list
                            -- Don't show an error since this is expected for non-admin users
                            ( { model | isLoading = False }, Cmd.none )

                        _ ->
                            let
                                errorMessage =
                                    case error of
                                        Http.BadUrl url ->
                                            "Invalid URL: " ++ url

                                        Http.Timeout ->
                                            "Request timed out"

                                        Http.NetworkError ->
                                            "Network error occurred"

                                        Http.BadStatus status ->
                                            "Server error: " ++ String.fromInt status

                                        Http.BadBody message ->
                                            "Data error: " ++ message
                            in
                            ( { model | error = Just errorMessage, isLoading = False }, Cmd.none )

        GotCurrentUser result ->
            case result of
                Ok response ->
                    case response.user of
                        Just user ->
                            let
                                -- Create agent from current user
                                initialAgent =
                                    { id = user.id
                                    , firstName = user.firstName
                                    , lastName = user.lastName
                                    , email = user.email
                                    , phone = user.phone
                                    , carriers = []
                                    , stateLicenses = []
                                    , expanded = False
                                    }

                                -- Include the current user in agents list for setup mode
                                updatedAgents =
                                    if model.isSetup then
                                        -- In setup mode, always have current user as the first agent
                                        if List.any (\a -> a.id == user.id) model.agents then
                                            -- If current user is already in the list, keep existing agents
                                            model.agents

                                        else
                                            -- Add current user to the list
                                            initialAgent :: model.agents

                                    else
                                        -- In normal mode, keep the existing agents
                                        model.agents
                            in
                            ( { model
                                | currentUser = Just user
                                , agents = updatedAgents
                                , error = Nothing -- Clear any previous errors
                              }
                            , Cmd.none
                            )

                        Nothing ->
                            ( { model | currentUser = Nothing }, Cmd.none )

                Err _ ->
                    ( { model | error = Just "Failed to load current user" }
                    , Cmd.none
                    )

        ToggleAgentExpanded agentId ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent | expanded = not agent.expanded }

                    else
                        agent
            in
            ( { model | agents = List.map updateAgent model.agents }, Cmd.none )

        UpdateAgentCarrier agentId carrier isSelected ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | carriers =
                                if isSelected then
                                    agent.carriers ++ [ carrier ]

                                else
                                    List.filter ((/=) carrier) agent.carriers
                        }

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )

        UpdateAgentState agentId state isSelected ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | stateLicenses =
                                if isSelected then
                                    agent.stateLicenses ++ [ state ]

                                else
                                    List.filter ((/=) state) agent.stateLicenses
                        }

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )

        SelectAllStatesForAgent agentId isSelected ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | stateLicenses =
                                if isSelected then
                                    allStates

                                else
                                    []
                        }

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )

        SelectCommonStatesForAgent agentId region ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | stateLicenses = agent.stateLicenses ++ getRegionStates region
                        }

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )

        LoadFromOrgForAgent agentId ->
            ( { model | isLoadingForAgent = Just agentId }
            , Http.get
                { url = "/api/settings"
                , expect = Http.expectJson (GotOrgSettingsForAgent agentId) settingsObjectDecoder
                }
            )

        GotOrgSettingsForAgent agentId (Ok settings) ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | carriers = settings.carrierContracts
                            , stateLicenses = settings.stateLicenses
                        }

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , isLoadingForAgent = Nothing -- Clear the Loading state
              }
            , Cmd.none
            )

        GotOrgSettingsForAgent agentId (Err _) ->
            ( { model
                | error = Just "Failed to load organization settings"
                , isLoadingForAgent = Nothing -- Clear the Loading state
              }
            , Cmd.none
            )

        SelectAllCarriers isSelected ->
            ( { model
                | carriers =
                    if isSelected then
                        allCarriers

                    else
                        []
              }
            , Cmd.none
            )

        SelectAllStates isSelected ->
            ( { model
                | stateLicenses =
                    if isSelected then
                        allStates

                    else
                        []
              }
            , Cmd.none
            )

        DeleteAgent agentId ->
            ( { model | showDeleteConfirm = Just agentId, reassignAgentId = Nothing }, Cmd.none )

        ConfirmDeleteAgent agentId reassignToAgentId ->
            ( { model | showDeleteConfirm = Nothing, reassignAgentId = reassignToAgentId, isLoading = True }
            , deleteAgent agentId reassignToAgentId
            )

        CloseDeleteConfirmModal ->
            ( { model | showDeleteConfirm = Nothing, error = Nothing }, Cmd.none )

        SelectCommonStates region ->
            ( { model | stateLicenses = model.stateLicenses ++ getRegionStates region }
            , Cmd.none
            )

        NavigateTo path ->
            ( model, Nav.pushUrl model.key path )

        ShowModal ->
            ( { model | showAddForm = True }, Cmd.none )

        CloseModal ->
            ( { model | showAddForm = False }, Cmd.none )

        ToggleCarrier agentId isSelected ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | carriers =
                                if isSelected then
                                    agent.carriers ++ [ agentId ]

                                else
                                    List.filter ((/=) agentId) agent.carriers
                        }

                    else
                        agent
            in
            ( { model | agents = List.map updateAgent model.agents }
            , Cmd.none
            )

        ToggleState agentId isSelected ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | stateLicenses =
                                if isSelected then
                                    agent.stateLicenses ++ [ agentId ]

                                else
                                    List.filter ((/=) agentId) agent.stateLicenses
                        }

                    else
                        agent
            in
            ( { model | agents = List.map updateAgent model.agents }
            , Cmd.none
            )

        SelectAllCarriersForAgent agentId isSelected ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        { agent
                            | carriers =
                                if isSelected then
                                    allCarriers

                                else
                                    []
                        }

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )

        SaveAgentDetails agentId ->
            ( { model
                | pendingSave = Nothing
                , isLoadingForAgent = Just agentId
              }
            , case List.filter (\a -> a.id == agentId) model.agents of
                agent :: _ ->
                    saveAgentDetails agent

                [] ->
                    Cmd.none
            )

        AgentDetailsSaved agentId result ->
            case result of
                Ok _ ->
                    let
                        updateAgent agent =
                            if agent.id == agentId then
                                { agent | expanded = False }

                            else
                                agent
                    in
                    ( { model
                        | agents = List.map updateAgent model.agents
                        , isLoadingForAgent = Nothing
                        , error = Nothing
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to save agent details"
                        , isLoadingForAgent = Nothing
                      }
                    , Cmd.none
                    )

        AgentDeleted result ->
            case result of
                Ok _ ->
                    ( { model | isLoading = False, error = Nothing }
                    , fetchAgents
                    )

                Err _ ->
                    ( { model
                        | error = Just "Failed to delete agent -- cannot delete default agent or current user"
                        , isLoading = False
                      }
                    , Cmd.none
                    )

        DebounceSaveAgent agentId ->
            if agentId == "main" then
                -- Handle main agent save
                case model.currentUser of
                    Just user ->
                        let
                            agent =
                                { id = user.id
                                , firstName = user.firstName
                                , lastName = user.lastName
                                , email = user.email
                                , phone = user.phone
                                , carriers = []
                                , stateLicenses = []
                                , expanded = False
                                }
                        in
                        ( { model | pendingSave = Nothing }
                        , saveAgentDetails agent
                        )

                    Nothing ->
                        ( model, Cmd.none )

            else
                -- Handle sub-agent save
                ( { model | pendingSave = Nothing }
                , case List.filter (\a -> a.id == agentId) model.agents of
                    agent :: _ ->
                        saveAgentDetails agent

                    [] ->
                        Cmd.none
                )

        EditAgent agent ->
            ( { model
                | agents =
                    List.map
                        (\a ->
                            if a.id == agent.id then
                                { a | expanded = not a.expanded }

                            else
                                a
                        )
                        model.agents
              }
            , Cmd.none
            )

        GotEmailResponse result ->
            case result of
                Ok response ->
                    ( { model
                        | emailStatus =
                            if response.available then
                                Valid

                            else
                                Invalid response.message
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model
                        | emailStatus = Invalid "Failed to check email availability"
                      }
                    , Cmd.none
                    )

        UpdateAgentField agentId field value ->
            let
                updateAgent agent =
                    if agent.id == agentId then
                        case field of
                            "firstName" ->
                                { agent | firstName = value }

                            "lastName" ->
                                { agent | lastName = value }

                            "phone" ->
                                { agent | phone = formatPhoneNumber (String.filter Char.isDigit value) }

                            _ ->
                                agent

                    else
                        agent
            in
            ( { model
                | agents = List.map updateAgent model.agents
                , pendingSave = Just agentId
              }
            , Cmd.none
            )

        SetDefaultAgent agentId ->
            ( { model
                | defaultAgentId = Just agentId
                , isLoading = True
              }
            , Http.request
                { method = "POST"
                , url = "/api/agents/set_default_agent"
                , body = Http.jsonBody (Encode.object [ ( "agentId", Encode.string agentId ) ])
                , expect = Http.expectWhatever SetDefaultAgentResult
                , timeout = Nothing
                , tracker = Nothing
                , headers = []
                }
            )

        SetDefaultAgentResult result ->
            case result of
                Ok _ ->
                    ( { model | isLoading = False }, fetchAgents )

                Err _ ->
                    ( { model | isLoading = False, error = Just "Failed to set default agent" }, Cmd.none )



-- Helper functions


formatPhoneNumber : String -> String
formatPhoneNumber rawPhone =
    let
        digits =
            String.filter Char.isDigit rawPhone
                |> String.left 10

        len =
            String.length digits
    in
    if len == 0 then
        ""

    else if len <= 3 then
        "(" ++ digits

    else if len <= 6 then
        "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

    else
        "("
            ++ String.left 3 digits
            ++ ") "
            ++ String.slice 3 6 digits
            ++ "-"
            ++ String.dropLeft 6 digits


subscriptions : Model -> Sub Msg
subscriptions model =
    case model.pendingSave of
        Just agentId ->
            Time.every 2000 (\_ -> DebounceSaveAgent agentId)

        Nothing ->
            Sub.none


isValidEmail : String -> Bool
isValidEmail email =
    let
        containsAtSign =
            String.contains "@" email

        containsDot =
            String.contains "." email

        hasValidLength =
            String.length email >= 5
    in
    containsAtSign && containsDot && hasValidLength


isValidPhone : String -> Bool
isValidPhone phone =
    let
        -- Remove all non-digit characters
        digits =
            String.filter Char.isDigit phone
    in
    String.length digits == 10


fetchAgents : Cmd Msg
fetchAgents =
    Http.get
        { url = "/api/agents"
        , expect =
            Http.expectStringResponse GotAgents
                (\response ->
                    case response of
                        Http.BadUrl_ url ->
                            Err (Http.BadUrl url)

                        Http.Timeout_ ->
                            Err Http.Timeout

                        Http.NetworkError_ ->
                            Err Http.NetworkError

                        Http.BadStatus_ metadata body ->
                            Err (Http.BadStatus metadata.statusCode)

                        Http.GoodStatus_ metadata body ->
                            case Decode.decodeString agentsResponseDecoder body of
                                Ok value ->
                                    Ok value

                                Err err ->
                                    Err (Http.BadBody (Decode.errorToString err))
                )
        }


agentsResponseDecoder : Decoder AgentsResponse
agentsResponseDecoder =
    Decode.map2 AgentsResponse
        (Decode.field "agents" (Decode.list agentDecoder))
        (Decode.field "defaultAgentId" (Decode.nullable Decode.string))


agentDecoder : Decoder Agent
agentDecoder =
    Decode.succeed Agent
        |> Pipeline.required "id" Decode.string
        |> Pipeline.required "firstName" Decode.string
        |> Pipeline.required "lastName" Decode.string
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "phone" Decode.string
        |> Pipeline.required "carriers" (Decode.list Decode.string)
        |> Pipeline.required "stateLicenses" (Decode.list Decode.string)
        |> Pipeline.hardcoded False


encodeAgent : Agent -> Encode.Value
encodeAgent agent =
    Encode.object
        [ ( "firstName", Encode.string agent.firstName )
        , ( "lastName", Encode.string agent.lastName )
        , ( "email", Encode.string agent.email )
        , ( "phone", Encode.string agent.phone )
        , ( "carriers", Encode.list Encode.string agent.carriers )
        , ( "stateLicenses", Encode.list Encode.string agent.stateLicenses )
        ]


isAdminBecomingAgent : Model -> Bool
isAdminBecomingAgent model =
    False



-- This check is no longer needed since all users are both admin and agent


fetchCurrentUser : Cmd Msg
fetchCurrentUser =
    Http.get
        { url = "/api/me"
        , expect = Http.expectJson GotCurrentUser currentUserResponseDecoder
        }


currentUserResponseDecoder : Decoder CurrentUserResponse
currentUserResponseDecoder =
    Decode.map2 CurrentUserResponse
        (Decode.field "success" Decode.bool)
        (Decode.maybe (Decode.field "user" userDecoder))


userDecoder : Decoder User
userDecoder =
    let
        idDecoder =
            Decode.oneOf
                [ Decode.field "id" Decode.string
                , Decode.field "id" (Decode.map String.fromInt Decode.int)
                ]
    in
    Decode.map5 User
        idDecoder
        (Decode.field "email" Decode.string)
        (Decode.field "firstName" Decode.string)
        (Decode.field "lastName" Decode.string)
        (Decode.oneOf
            [ Decode.field "phone" Decode.string
            , Decode.succeed ""
            ]
        )


saveAgentDetails : Agent -> Cmd Msg
saveAgentDetails agent =
    Http.request
        { method = "PUT"
        , headers = []
        , url = "/api/agents/" ++ agent.id
        , body = Http.jsonBody (encodeAgent agent)
        , expect = Http.expectWhatever (AgentDetailsSaved agent.id)
        , timeout = Nothing
        , tracker = Nothing
        }


isCurrentUser : Agent -> Model -> Bool
isCurrentUser agent model =
    case model.currentUser of
        Just user ->
            user.id == agent.id

        Nothing ->
            False


canModifySettings : Model -> String -> Bool
canModifySettings model agentId =
    case model.currentUser of
        Just user ->
            True

        -- All users can modify settings now
        Nothing ->
            False


deleteAgent : String -> Maybe String -> Cmd Msg
deleteAgent agentId maybeReassignToAgentId =
    let
        url =
            case maybeReassignToAgentId of
                Just reassignToAgentId ->
                    "/api/agents/" ++ agentId ++ "?reassignTo=" ++ reassignToAgentId

                Nothing ->
                    "/api/agents/" ++ agentId
    in
    Http.request
        { method = "DELETE"
        , headers = []
        , url = url
        , body = Http.emptyBody
        , expect = Http.expectWhatever AgentDeleted
        , timeout = Nothing
        , tracker = Nothing
        }


viewDeleteConfirmationModal : Model -> Html Msg
viewDeleteConfirmationModal model =
    case model.showDeleteConfirm of
        Just agentId ->
            let
                targetAgent =
                    List.filter (\a -> a.id == agentId) model.agents
                        |> List.head

                otherAgents =
                    List.filter (\a -> a.id /= agentId) model.agents

                agentName =
                    case targetAgent of
                        Just agent ->
                            agent.firstName ++ " " ++ agent.lastName

                        Nothing ->
                            "this agent"

                errorMessageBlock =
                    if model.error /= Nothing && model.showDeleteConfirm /= Nothing then
                        div [ class "mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" ]
                            [ text (Maybe.withDefault "" model.error) ]

                    else
                        text ""
            in
            div [ class "fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50" ]
                [ div [ class "bg-white rounded-lg max-w-lg w-full p-6" ]
                    [ h3 [ class "text-lg font-medium text-gray-900 mb-4" ]
                        [ text ("Delete " ++ agentName ++ "?") ]
                    , p [ class "text-sm text-gray-500 mb-4" ]
                        [ text "This will permanently remove this agent from your organization and cannot be undone." ]
                    , errorMessageBlock
                    , if not (List.isEmpty model.contacts) then
                        div [ class "mb-6" ]
                            [ p [ class "text-sm text-gray-500 mb-2" ]
                                [ text "This agent has contacts assigned to them. What would you like to do with these contacts?" ]
                            , div [ class "mt-4" ]
                                [ select
                                    [ class "mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
                                    , onInput
                                        (\val ->
                                            if val == "" then
                                                NoOp

                                            else
                                                ConfirmDeleteAgent agentId (Just val)
                                        )
                                    ]
                                    (option [ value "" ] [ text "Select an agent to reassign contacts" ]
                                        :: List.map
                                            (\agent ->
                                                option [ value agent.id ]
                                                    [ text (agent.firstName ++ " " ++ agent.lastName) ]
                                            )
                                            otherAgents
                                    )
                                ]
                            ]

                      else
                        text ""
                    , div [ class "flex justify-end space-x-3" ]
                        [ button
                            [ class "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                            , onClick (ConfirmDeleteAgent agentId Nothing)
                            ]
                            [ text "Delete Without Reassigning" ]
                        , button
                            [ class "px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700"
                            , onClick (ConfirmDeleteAgent agentId model.reassignAgentId)
                            ]
                            [ text "Delete" ]
                        , button
                            [ class "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                            , onClick CloseDeleteConfirmModal
                            ]
                            [ text "Cancel" ]
                        ]
                    ]
                ]

        Nothing ->
            text ""


viewEmailStatus : EmailStatus -> Html Msg
viewEmailStatus status =
    div [ class "mt-1 transition-all duration-200" ]
        [ case status of
            NotChecked ->
                text ""

            Checking ->
                div [ class "text-blue-600 text-sm flex items-center" ]
                    [ div [ class "animate-spin h-4 w-4 mr-2 border-2 border-blue-600 border-t-transparent rounded-full" ] []
                    , text "Checking availability..."
                    ]

            Valid ->
                div [ class "text-green-600 text-sm flex items-center" ]
                    [ -- Checkmark icon
                      svg
                        [ Svg.Attributes.class "h-4 w-4 mr-1"
                        , Svg.Attributes.fill "none"
                        , Svg.Attributes.viewBox "0 0 24 24"
                        , Svg.Attributes.stroke "currentColor"
                        ]
                        [ path
                            [ Svg.Attributes.strokeLinecap "round"
                            , Svg.Attributes.strokeLinejoin "round"
                            , Svg.Attributes.strokeWidth "2"
                            , Svg.Attributes.d "M5 13l4 4L19 7"
                            ]
                            []
                        ]
                    , text "Email is available"
                    ]

            Invalid message ->
                div [ class "text-red-600 text-sm flex items-center" ]
                    [ -- X icon
                      svg
                        [ Svg.Attributes.class "h-4 w-4 mr-1"
                        , Svg.Attributes.fill "none"
                        , Svg.Attributes.viewBox "0 0 24 24"
                        , Svg.Attributes.stroke "currentColor"
                        ]
                        [ path
                            [ Svg.Attributes.strokeLinecap "round"
                            , Svg.Attributes.strokeLinejoin "round"
                            , Svg.Attributes.strokeWidth "2"
                            , Svg.Attributes.d "M6 18L18 6M6 6l12 12"
                            ]
                            []
                        ]
                    , text message
                    ]
        ]


checkAgentEmail : String -> Cmd Msg
checkAgentEmail email =
    Http.get
        { url = "/api/organizations/check-email/" ++ Url.percentEncode email
        , expect = Http.expectJson GotEmailResponse emailResponseDecoder
        }


emailResponseDecoder : Decode.Decoder EmailResponse
emailResponseDecoder =
    Decode.map2 EmailResponse
        (Decode.field "available" Decode.bool)
        (Decode.field "message" Decode.string)


isFormValid : Model -> Bool
isFormValid model =
    let
        isEmailValid =
            model.emailStatus == Valid

        areNamesValid =
            not (String.isEmpty (String.trim model.firstName))
                && not (String.isEmpty (String.trim model.lastName))

        isPhoneValid =
            not (String.isEmpty (String.trim model.displayPhone))
    in
    isEmailValid && areNamesValid && isPhoneValid


submitNewAgent : Model -> Cmd Msg
submitNewAgent model =
    Http.post
        { url = "/api/agents/create"
        , body =
            Http.jsonBody
                (Encode.object
                    [ ( "firstName", Encode.string model.firstName )
                    , ( "lastName", Encode.string model.lastName )
                    , ( "email", Encode.string model.email )
                    , ( "phone", Encode.string model.rawPhone )
                    , ( "carriers", Encode.list Encode.string model.carriers )
                    , ( "stateLicenses", Encode.list Encode.string model.stateLicenses )
                    ]
                )
        , expect = Http.expectWhatever AgentSaved
        }

================
File: frontend/src/AgeCalc.elm
================
module AgeCalc exposing (getAgeNextMonth)

import Date exposing (Date, Interval(..), Unit(..), add, fromIsoString, toIsoString)
import Time exposing (Month(..))


getAgeNextMonth : String -> Date -> Int
getAgeNextMonth birthDateStr currentDate =
    case fromIsoString birthDateStr of
        Ok birthDate ->
            let
                -- Get first of next month
                nextMonth =
                    currentDate
                        |> add Months 1
                        |> Date.floor Month

                -- Calculate years between birth date and first of next month
                years =
                    Date.diff Years birthDate nextMonth
            in
            years

        Err _ ->
            0

================
File: frontend/src/BirthdayRules.elm
================
module BirthdayRules exposing
    ( BirthdayRuleType(..)
    , StateRule
    , canPresentDifferentPlanOnly
    , getDelayedEmailDate
    , getStateRule
    , isInBirthdayRuleWindow
    , isInContinuousOpenEnrollment
    )

{-| This module handles birthday rules for different states.
It provides functionality to check if a contact is in a birthday rule window,
if they are in a continuous open enrollment state, and if they can only be
presented with different plan types during their birthday window.
-}

import Date exposing (Date)
import Time exposing (Month(..))


{-| Represents the type of birthday rule for a state.
-}
type BirthdayRuleType
    = BirthdayRule
    | AnniversaryRule
    | ContinuousOpenEnrollment
    | NoSpecialRule


{-| Represents a state's birthday rule configuration.
-}
type alias StateRule =
    { state : String
    , ruleType : BirthdayRuleType
    , daysBeforeBirthday : Int
    , totalDays : Int
    , canPresentDifferentPlan : Bool
    , notes : String
    }


{-| List of states with their birthday rules.
-}
stateRules : List StateRule
stateRules =
    [ { state = "CA"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 30
      , totalDays = 60
      , canPresentDifferentPlan = False
      , notes = "60-day period starting 30 days before your birthday"
      }
    , { state = "ID"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 63
      , canPresentDifferentPlan = False
      , notes = "63-day period starting on your birthday"
      }
    , { state = "IL"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 45
      , canPresentDifferentPlan = False
      , notes = "45-day period starting on your birthday; 76+ no special GI right"
      }
    , { state = "KY"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 60
      , canPresentDifferentPlan = True
      , notes = "60-day period following your birthday; Can switch sideways and get GI right; Only present different plans."
      }
    , { state = "LA"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 30
      , totalDays = 93
      , canPresentDifferentPlan = False
      , notes = "93-day period starting 30 days before your birthday"
      }
    , { state = "MD"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 31
      , canPresentDifferentPlan = False
      , notes = "31-day period starting on your birthday"
      }
    , { state = "NV"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 60
      , canPresentDifferentPlan = False
      , notes = "60-day period starting on the first day of your birth month"
      }
    , { state = "OK"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 60
      , canPresentDifferentPlan = False
      , notes = "60-day period starting on your birthday"
      }
    , { state = "OR"
      , ruleType = BirthdayRule
      , daysBeforeBirthday = 0
      , totalDays = 31
      , canPresentDifferentPlan = False
      , notes = "31-day period starting on your birthday"
      }
    , { state = "MO"
      , ruleType = AnniversaryRule
      , daysBeforeBirthday = 30
      , totalDays = 63
      , canPresentDifferentPlan = True
      , notes = "63-day period starting 30 days before your policy anniversary date; Can switch sideways and get GI right; Only present different plans."
      }
    , { state = "CT"
      , ruleType = ContinuousOpenEnrollment
      , daysBeforeBirthday = 0
      , totalDays = 0
      , canPresentDifferentPlan = False
      , notes = "Continuous"
      }
    , { state = "MA"
      , ruleType = ContinuousOpenEnrollment
      , daysBeforeBirthday = 0
      , totalDays = 0
      , canPresentDifferentPlan = False
      , notes = "Continuous"
      }
    , { state = "NY"
      , ruleType = ContinuousOpenEnrollment
      , daysBeforeBirthday = 0
      , totalDays = 0
      , canPresentDifferentPlan = False
      , notes = "Continuous"
      }
    , { state = "WA"
      , ruleType = ContinuousOpenEnrollment
      , daysBeforeBirthday = 0
      , totalDays = 0
      , canPresentDifferentPlan = False
      , notes = "Continuous"
      }
    ]


{-| Get the birthday rule for a specific state.
-}
getStateRule : String -> Maybe StateRule
getStateRule state =
    let
        normalizedState =
            String.toUpper state
    in
    List.filter (\rule -> rule.state == normalizedState) stateRules
        |> List.head


{-| Check if a state has continuous open enrollment.
-}
isInContinuousOpenEnrollment : String -> Bool
isInContinuousOpenEnrollment state =
    case getStateRule state of
        Just rule ->
            rule.ruleType == ContinuousOpenEnrollment

        Nothing ->
            False


{-| Check if a contact can only be presented with different plan types during their birthday window.
-}
canPresentDifferentPlanOnly : String -> Bool
canPresentDifferentPlanOnly state =
    case getStateRule state of
        Just rule ->
            rule.canPresentDifferentPlan

        Nothing ->
            False


{-| Calculate the start date of a birthday rule window.
-}
getBirthdayRuleStartDate : StateRule -> Date -> Date
getBirthdayRuleStartDate rule birthDate =
    let
        currentYear =
            Date.year (Date.fromCalendarDate 2024 Jan 1)

        -- This is just a placeholder, will be replaced with actual current date
        -- For Nevada, the window starts on the first day of the birth month
        startDate =
            if rule.state == "NV" then
                Date.fromCalendarDate currentYear (Date.month birthDate) 1

            else
                -- For other states, subtract the days before birthday from the birthday
                Date.add Date.Days -rule.daysBeforeBirthday (Date.fromCalendarDate currentYear (Date.month birthDate) (Date.day birthDate))
    in
    startDate


{-| Calculate the end date of a birthday rule window.
-}
getBirthdayRuleEndDate : StateRule -> Date -> Date
getBirthdayRuleEndDate rule birthDate =
    let
        startDate =
            getBirthdayRuleStartDate rule birthDate
    in
    Date.add Date.Days rule.totalDays startDate


{-| Check if a date is within a birthday rule window.
For Anniversary rules (Missouri), pass the effectiveDate as the second parameter.
For Birthday rules, pass the birthDate as the second parameter.
-}
isInBirthdayRuleWindow : String -> Date -> Date -> Bool
isInBirthdayRuleWindow state baseDate currentDate =
    case getStateRule state of
        Just rule ->
            let
                currentYear =
                    Date.year currentDate

                -- Adjust base date to current year
                adjustedBaseDate =
                    Date.fromCalendarDate currentYear (Date.month baseDate) (Date.day baseDate)

                startDate =
                    getBirthdayRuleStartDate rule adjustedBaseDate

                endDate =
                    getBirthdayRuleEndDate rule adjustedBaseDate
            in
            -- Only check window for Birthday and Anniversary rules
            case rule.ruleType of
                BirthdayRule ->
                    Date.compare currentDate startDate /= LT && Date.compare currentDate endDate /= GT

                AnniversaryRule ->
                    Date.compare currentDate startDate /= LT && Date.compare currentDate endDate /= GT

                ContinuousOpenEnrollment ->
                    -- For continuous open enrollment states, they're always in an "open enrollment window"
                    True

                NoSpecialRule ->
                    False

        Nothing ->
            False


{-| Calculate the date when an email should be sent after a birthday rule window.
For Anniversary rules (Missouri), pass the effectiveDate as the second parameter.
For Birthday rules, pass the birthDate as the second parameter.
The third parameter should be the scheduled date that needs to be delayed.
-}
getDelayedEmailDate : String -> Date -> Date -> Date
getDelayedEmailDate state baseDate scheduledDate =
    case getStateRule state of
        Just rule ->
            let
                -- Use the year from the scheduled date
                scheduledYear =
                    Date.year scheduledDate

                -- Adjust base date to scheduled year
                adjustedBaseDate =
                    Date.fromCalendarDate scheduledYear (Date.month baseDate) (Date.day baseDate)

                -- For Nevada, the window starts on the first day of the birth month
                windowStartDate =
                    if rule.state == "NV" then
                        Date.fromCalendarDate scheduledYear (Date.month baseDate) 1

                    else
                        -- For other states, subtract the days before birthday from the birthday
                        Date.add Date.Days -rule.daysBeforeBirthday adjustedBaseDate

                -- Calculate the end date of the window
                windowEndDate =
                    Date.add Date.Days rule.totalDays windowStartDate

                -- Add one month to the end date
                delayedDate =
                    Date.add Date.Months 1 windowEndDate
            in
            delayedDate

        Nothing ->
            -- If no rule exists, just return the scheduled date
            scheduledDate

================
File: frontend/src/Calculator.elm
================
module Calculator exposing (main)

import Browser
import Html exposing (Html, div, h3, input, li, p, text, ul)
import Html.Attributes exposing (max, min, step, type_, value)
import Html.Events exposing (onInput)



-- Model Definition


type alias Model =
    { totalContacts : String -- Total book of business size as string input
    , yearWeights : List Float -- Weights for distribution over 6 years
    , responseRate : String -- Response rate as percentage (e.g., "5" for 5%)
    }



-- Initial State


init : Model
init =
    { totalContacts = ""
    , yearWeights = [ 10.0, 20.0, 30.0, 40.0, 50.0, 60.0 ] -- Initial weights, heavier toward recent years
    , responseRate = "5" -- Default response rate of 5%
    }



-- Messages


type Msg
    = SetTotalContacts String -- Update total contacts
    | SetYearWeight Int String -- Update weight for a specific year (index, value)
    | SetResponseRate String -- Update response rate



-- Update Function


update : Msg -> Model -> Model
update msg model =
    case msg of
        SetTotalContacts s ->
            { model | totalContacts = s }

        SetYearWeight i s ->
            case String.toFloat s of
                Just f ->
                    let
                        yearWeights =
                            List.indexedMap
                                (\j w ->
                                    if j == i then
                                        f

                                    else
                                        w
                                )
                                model.yearWeights
                    in
                    { model | yearWeights = yearWeights }

                Nothing ->
                    model

        -- Ignore invalid slider input (shouldn’t happen with range)
        SetResponseRate s ->
            { model | responseRate = s }



-- View Function


view : Model -> Html Msg
view model =
    div []
        [ -- Input for Total Contacts
          p [] [ text "Total Book of Business Size:" ]
        , input [ type_ "text", value model.totalContacts, onInput SetTotalContacts ] []

        -- Sliders for Year Distribution
        , h3 [] [ text "Adjust Distribution Over Years:" ]
        , div []
            (List.indexedMap
                (\i weight ->
                    div []
                        [ text ("Policies started " ++ String.fromInt (5 - i) ++ " years ago: ")
                        , input
                            [ type_ "range"
                            , min "0"
                            , max "100"
                            , step "1"
                            , value (String.fromFloat weight)
                            , onInput (SetYearWeight i)
                            ]
                            []
                        ]
                )
                model.yearWeights
            )

        -- Input for Response Rate
        , p [] [ text "Response Rate (%):" ]
        , input [ type_ "text", value model.responseRate, onInput SetResponseRate ] []

        -- Calculated Outputs
        , case ( String.toFloat model.totalContacts, String.toFloat model.responseRate ) of
            ( Ok n, Ok r ) ->
                let
                    -- Distribution Calculation
                    sumWeights =
                        List.sum model.yearWeights

                    contactsPerYear =
                        if sumWeights > 0 then
                            List.map (\w -> (w / sumWeights) * n) model.yearWeights

                        else
                            List.repeat 6 0.0

                    -- Core Calculations
                    weeklyCalls =
                        (n / 52) * (r / 100)

                    -- Calls based on one event per contact per year
                    monthlyCost =
                        (n / 10000) * 100

                    -- $100 per 10,000 contacts
                    annualCost =
                        12 * monthlyCost

                    -- Yearly cost
                    totalCallsPerYear =
                        n * (r / 100)

                    -- Total calls in a year
                    numberOfSales =
                        totalCallsPerYear * 0.5

                    -- 50% close rate
                    totalRevenue =
                        numberOfSales * 500

                    -- $500 increased LTV
                    roi =
                        if annualCost > 0 then
                            ((totalRevenue - annualCost) / annualCost) * 100
                            -- ROI as percentage

                        else
                            0
                in
                div []
                    [ -- Distribution Display (Placeholder for Chart)
                      h3 [] [ text "Distribution of Contacts:" ]
                    , ul []
                        (List.indexedMap
                            (\i c ->
                                li [] [ text ("Year -" ++ String.fromInt (5 - i) ++ ": " ++ String.fromFloat c ++ " contacts") ]
                            )
                            contactsPerYear
                        )

                    -- Calculated Metrics
                    , h3 [] [ text "Results:" ]
                    , p [] [ text ("Weekly Calls: " ++ String.fromFloat weeklyCalls) ]
                    , p [] [ text ("Monthly Cost: $" ++ String.fromFloat monthlyCost) ]
                    , p [] [ text ("Annual Cost: $" ++ String.fromFloat annualCost) ]
                    , p [] [ text ("Total Calls per Year: " ++ String.fromFloat totalCallsPerYear) ]
                    , p [] [ text ("Number of Sales: " ++ String.fromFloat numberOfSales) ]
                    , p [] [ text ("Total Revenue: $" ++ String.fromFloat totalRevenue) ]
                    , p [] [ text ("ROI: " ++ String.fromFloat roi ++ "%") ]
                    ]

            _ ->
                p [] [ text "Please enter valid numbers for total contacts and response rate." ]
        ]



-- Main Program


main : Program () Model Msg
main =
    Browser.sandbox { init = init, update = update, view = view }

================
File: frontend/src/CarrierNaic.elm
================
module CarrierNaic exposing
    ( Carrier(..)
    , allCarriers
    , carrierDecoder
    , carrierToNaics
    , carrierToString
    , naicToCarrier
    , stringToCarrier
    )

import Json.Decode as Decode exposing (Decoder)


type Carrier
    = Aetna
    | Humana
    | UnitedHealthcare
    | Cigna
    | Aflac
    | Allstate
    | MutualOfOmaha
    | AceChubb


allCarriers : List Carrier
allCarriers =
    [ Aetna
    , Humana
    , UnitedHealthcare
    , Cigna
    , Aflac
    , Allstate
    , MutualOfOmaha
    , AceChubb
    ]


carrierToString : Carrier -> String
carrierToString carrier =
    case carrier of
        Aetna ->
            "Aetna"

        Humana ->
            "Humana"

        UnitedHealthcare ->
            "UnitedHealthcare"

        Cigna ->
            "Cigna"

        Aflac ->
            "Aflac"

        Allstate ->
            "Allstate"

        MutualOfOmaha ->
            "Mutual of Omaha"

        AceChubb ->
            "Ace Chubb"


stringToCarrier : String -> Maybe Carrier
stringToCarrier str =
    case String.toLower str of
        "aetna" ->
            Just Aetna

        "humana" ->
            Just Humana

        "unitedhealthcare" ->
            Just UnitedHealthcare

        "uhc" ->
            Just UnitedHealthcare

        "united healthcare" ->
            Just UnitedHealthcare

        "cigna" ->
            Just Cigna

        "aflac" ->
            Just Aflac

        "allstate" ->
            Just Allstate

        "mutual of omaha" ->
            Just MutualOfOmaha

        "ace chubb" ->
            Just AceChubb

        "ace" ->
            Just AceChubb

        "chubb" ->
            Just AceChubb

        _ ->
            Nothing


carrierToNaics : Carrier -> List String
carrierToNaics carrier =
    case carrier of
        Aetna ->
            [ "72052" -- Aetna Hlth Ins Co
            , "78700" -- Aetna Hlth & Life Ins Co
            , "68500" -- Continental Life Ins Co Brentwood
            ]

        Humana ->
            [ "12634" -- Humana Ins Co of NY
            , "60052" -- Humana Insurance Company -- Achieve in CA, NJ, SC
            , "60219" -- Humana Insurance Company -- Achieve in PA, TX
            , "60984" -- Humana Insurance Company -- Achieve in many states
            , "69671" -- Humana Insurance Company
            , "70580" -- Humana Insurance Company -- Value in AR, ID, MT, NJ
            , "73288" -- Humana Ins Co -- Achieve in GA
            , "88595" -- Humana Insurance Company -- Achieve in DE, MT, NH, SD, WY, WI
            , "95158" -- Humana Insurance Company
            ]

        UnitedHealthcare ->
            [ "60093" -- United Hlthcare Ins Co Of NY
            , "79413" -- UnitedHealthcare Ins Co
            ]

        Cigna ->
            [ "61727" -- Cigna National Health Ins Co
            , "65269" -- Cigna Ins Co
            , "65722" -- Loyal Amer Life Ins Co (CIGNA)
            , "67369" -- Cigna Hlth & Life Ins Co
            , "88366" -- American Retirement Life Ins Co (CIGNA)
            ]

        Aflac ->
            [ "60380" -- AFLAC
            ]

        Allstate ->
            [ "60534" -- Allstate Health Solutions (AHL)
            , "82538" -- Allstate Health Solutions
            ]

        MutualOfOmaha ->
            [ "13100" -- Omaha Ins Co
            , "71412" -- Mutual Of Omaha Ins Co
            , "72850" -- United World Life Ins Co
            ]

        AceChubb ->
            [ "20699" -- Ace Prop & Cas Ins Co
            ]


naicToCarrier : String -> Maybe Carrier
naicToCarrier naic =
    case naic of
        -- Aetna
        "72052" ->
            Just Aetna

        "78700" ->
            Just Aetna

        "68500" ->
            Just Aetna

        -- Humana
        "12634" ->
            Just Humana

        "60052" ->
            Just Humana

        "60219" ->
            Just Humana

        "60984" ->
            Just Humana

        "69671" ->
            Just Humana

        "70580" ->
            Just Humana

        "73288" ->
            Just Humana

        "88595" ->
            Just Humana

        "95158" ->
            Just Humana

        -- UnitedHealthcare
        "60093" ->
            Just UnitedHealthcare

        "79413" ->
            Just UnitedHealthcare

        -- Cigna
        "61727" ->
            Just Cigna

        "65269" ->
            Just Cigna

        "65722" ->
            Just Cigna

        "67369" ->
            Just Cigna

        "88366" ->
            Just Cigna

        -- Aflac
        "60380" ->
            Just Aflac

        -- Allstate
        "60534" ->
            Just Allstate

        "82538" ->
            Just Allstate

        -- Mutual of Omaha
        "13100" ->
            Just MutualOfOmaha

        "71412" ->
            Just MutualOfOmaha

        "72850" ->
            Just MutualOfOmaha

        -- Ace Chubb
        "20699" ->
            Just AceChubb

        _ ->
            Nothing


carrierDecoder : Decoder Carrier
carrierDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case stringToCarrier str of
                    Just carrier ->
                        Decode.succeed carrier

                    Nothing ->
                        Decode.fail "Invalid carrier"
            )

================
File: frontend/src/ChangePlan.elm
================
module ChangePlan exposing (Model, Msg, init, subscriptions, update, view)

import Browser exposing (Document)
import Browser.Navigation as Nav
import ChoosePlan
import Components.LimitBanner as LimitBanner
import Html exposing (Html, div, text)
import Html.Attributes exposing (class)
import Json.Decode as Decode


type alias Model =
    { choosePlanModel : ChoosePlan.Model
    , limitBanner : LimitBanner.Model
    }


type Msg
    = ChoosePlanMsg ChoosePlan.Msg
    | ChooseBannerMsg LimitBanner.Msg


init : { key : Nav.Key, session : String, orgSlug : String } -> ( Model, Cmd Msg )
init { key, session, orgSlug } =
    let
        ( choosePlanModel, choosePlanCmd ) =
            ChoosePlan.init orgSlug session key True

        ( limitBannerModel, limitBannerCmd ) =
            LimitBanner.init
    in
    ( { choosePlanModel = choosePlanModel
      , limitBanner = limitBannerModel
      }
    , Cmd.batch
        [ Cmd.map ChoosePlanMsg choosePlanCmd
        , Cmd.map ChooseBannerMsg limitBannerCmd
        ]
    )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        ChoosePlanMsg choosePlanMsg ->
            let
                ( updatedChoosePlanModel, choosePlanCmd ) =
                    ChoosePlan.update choosePlanMsg model.choosePlanModel
            in
            ( { model | choosePlanModel = updatedChoosePlanModel }
            , Cmd.map ChoosePlanMsg choosePlanCmd
            )

        ChooseBannerMsg chooseBannerMsg ->
            let
                ( updatedChooseBannerModel, chooseBannerCmd ) =
                    LimitBanner.update chooseBannerMsg model.limitBanner
            in
            ( { model | limitBanner = updatedChooseBannerModel }
            , Cmd.map ChooseBannerMsg chooseBannerCmd
            )


view : Model -> Document Msg
view model =
    { title = "Change Plan - Medicare Max"
    , body =
        [ LimitBanner.view model.limitBanner
            |> Html.map ChooseBannerMsg
        , ChoosePlan.viewChangePlan model.choosePlanModel
            |> Html.map ChoosePlanMsg
        ]
    }


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.map ChoosePlanMsg (ChoosePlan.subscriptions model.choosePlanModel)

================
File: frontend/src/chart-animations.ts
================
/**
 * Adds animation to charts
 * This module contains functions to animate different chart types
 */

/**
 * Configure animations for line charts
 * @param chart - The Chartist.js line chart instance
 */
export function setupLineChartAnimations(chart: any) {
  if (!chart || typeof chart.on !== 'function') {
    console.error('Invalid chart instance provided to setupLineChartAnimations');
    return;
  }

  // Define a simpler animation approach
  chart.on('draw', function(data: any) {
    if (!data || !data.element) return;

    try {
      if (data.type === 'line') {
        // Simple fade in and slide for lines
        data.element.animate({
          opacity: {
            begin: 0,
            dur: 1000,
            from: 0,
            to: 1,
            easing: 'ease'
          }
        });
      } else if (data.type === 'point') {
        // Simple fade in for points with slight delay based on index
        data.element.animate({
          opacity: {
            begin: data.index * 80,
            dur: 500,
            from: 0,
            to: 1,
            easing: 'ease'
          }
        });
      }
    } catch (error) {
      console.error('Error in line chart animation:', error);
    }
  });
}

/**
 * Configure animations for bar charts
 * @param chart - The Chartist.js bar chart instance
 */
export function setupBarChartAnimations(chart: any) {
  if (!chart || typeof chart.on !== 'function') {
    console.error('Invalid chart instance provided to setupBarChartAnimations');
    return;
  }

  // Apply animations on draw
  chart.on('draw', function(data: any) {
    if (!data || !data.element) return;
    
    try {
      if (data.type === 'bar') {
        // Animate the bar with a simple grow from bottom effect
        data.element.animate({
          opacity: {
            begin: data.index * 80,
            dur: 500,
            from: 0,
            to: 1,
            easing: 'ease'
          },
          y1: {
            begin: data.index * 80,
            dur: 500,
            from: data.y2,
            to: data.y1,
            easing: 'ease'
          }
        });
      } else if (data.type === 'label') {
        // Fade in labels
        data.element.animate({
          opacity: {
            begin: 0,
            dur: 400,
            from: 0,
            to: 1
          }
        });
      }
    } catch (error) {
      console.error('Error in bar chart animation:', error);
    }
  });
}

/**
 * Configure animations for funnel charts
 * @param element - The DOM element containing the funnel chart
 */
export function animateFunnelChart(element: HTMLElement) {
  // Select all bars in the funnel chart
  const bars = element.querySelectorAll<HTMLElement>('.funnel-bar');
  const labels = element.querySelectorAll<HTMLElement>('.funnel-bar-label');
  const values = element.querySelectorAll<HTMLElement>('.funnel-bar-value');
  
  // Animate each bar with proper staggering
  bars.forEach((bar: HTMLElement, index: number) => {
    const targetWidth = bar.getAttribute('data-original-width') || '0%';
    
    setTimeout(() => {
      bar.style.transition = 'width 0.8s cubic-bezier(0.22, 0.61, 0.36, 1), opacity 0.6s ease';
      bar.style.width = targetWidth;
      bar.style.opacity = '1';
    }, 150 * index);
  });
  
  // Animate labels with a slight delay after bars
  labels.forEach((label: HTMLElement, index: number) => {
    label.style.opacity = '0';
    label.style.transform = 'translateY(10px)';
    
    setTimeout(() => {
      label.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
      label.style.opacity = '1';
      label.style.transform = 'translateY(0)';
    }, 300 + 80 * index);
  });
  
  // Animate values with a slightly longer delay than labels
  values.forEach((value: HTMLElement, index: number) => {
    value.style.opacity = '0';
    value.style.transform = 'translateY(10px)';
    
    setTimeout(() => {
      value.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
      value.style.opacity = '1';
      value.style.transform = 'translateY(0)';
    }, 450 + 80 * index);
  });
  
  // Add a subtle pulse animation to the largest bar (last one)
  setTimeout(() => {
    if (bars.length > 0) {
      const largestBar = bars[bars.length - 1];
      largestBar.style.animation = 'pulse 2s infinite';
      
      // Add keyframes for pulse animation if not already present
      if (!document.querySelector('#pulse-animation')) {
        const style = document.createElement('style');
        style.id = 'pulse-animation';
        style.textContent = `
          @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(3, 4, 94, 0.4); }
            70% { box-shadow: 0 0 0 6px rgba(3, 4, 94, 0); }
            100% { box-shadow: 0 0 0 0 rgba(3, 4, 94, 0); }
          }
        `;
        document.head.appendChild(style);
      }
    }
  }, 1500);
}

================
File: frontend/src/ChoosePlan.elm
================
port module ChoosePlan exposing (Model, Msg(..), init, subscriptions, update, view, viewChangePlan)

import Browser exposing (Document)
import Browser.Navigation as Nav
import Components.LimitBanner as LimitBanner exposing (LimitWarning(..))
import Components.SetupLayout as SetupLayout
import Html exposing (Html, button, div, h1, h2, h3, h4, input, label, li, node, p, span, text, ul)
import Html.Attributes exposing (attribute, class, disabled, type_, value)
import Html.Events exposing (onClick, onInput)
import Http
import Json.Decode as Decode exposing (Decoder, field, int, list, string)
import Json.Encode as Encode
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, viewBox)


type SetupStep
    = PlanSelection
    | Payment
    | Complete


type alias SubscriptionTier =
    { id : String
    , name : String
    , price : String
    , agentLimit : Int
    , contactLimit : Int
    , features : List String
    }


type alias CustomTierPricing =
    { price : String
    , agentLimit : Int
    , tierName : String
    , contactLimit : Int
    , features : List String
    }


type alias Model =
    { session : Maybe String
    , orgSlug : String
    , currentStep : SetupStep
    , selectedPlan : Maybe String
    , extraAgents : Int
    , extraContacts : Int
    , error : Maybe String
    , tiers : List SubscriptionTier
    , isLoading : Bool
    , key : Nav.Key
    , isProcessingPayment : Bool
    , showChangePlan : Bool
    , currentTier : Maybe String
    , currentAgentLimit : Int
    , currentContactLimit : Int
    , showTrialBanner : Bool
    , customContactCount : String
    , isLoadingCustomTier : Bool
    , customTierPricing : Maybe CustomTierPricing
    }


type Msg
    = NextStep
    | SelectPlan String
    | SubmitPayment
    | CompleteSetup
    | GotTiers (Result Http.Error (List SubscriptionTier))
    | SubscriptionSaved (Result Http.Error ())
    | NavigateToTempLanding
    | GotSaveResponse (Result Http.Error ())
    | SetExtraAgents String
    | SetExtraContacts String
    | StripeCheckoutReady (Result Http.Error String)
    | ProcessPayment
    | CancelPayment
    | GotCurrentSubscription (Result Http.Error { tierId : String, agentLimit : Int, contactLimit : Int })
    | ConfirmPlan
    | GotConfirmation (Result Http.Error { success : Bool, redirectUrl : String })
    | NoOp
    | NavigateTo String
    | CloseBanner
    | SetCustomContactCount String
    | CalculateCustomTier
    | GotCustomTierPricing (Result Http.Error CustomTierPricing)
    | SelectCustomTier
    | StripeTableSelection String


init : String -> String -> Nav.Key -> Bool -> ( Model, Cmd Msg )
init orgSlug session key showChangePlan =
    ( { session = Just session
      , orgSlug = orgSlug
      , currentStep = PlanSelection
      , selectedPlan = Nothing
      , extraAgents = 0
      , extraContacts = 0
      , error = Nothing
      , tiers = []
      , isLoading = True
      , key = key
      , isProcessingPayment = False
      , showChangePlan = showChangePlan
      , currentTier = Nothing
      , currentAgentLimit = 0
      , currentContactLimit = 0
      , showTrialBanner = True
      , customContactCount = ""
      , isLoadingCustomTier = False
      , customTierPricing = Nothing
      }
    , Cmd.batch
        [ fetchSubscriptionTiers
        , if showChangePlan then
            fetchCurrentSubscription orgSlug

          else
            Cmd.none
        ]
    )


fetchCurrentSubscription : String -> Cmd Msg
fetchCurrentSubscription orgSlug =
    let
        url =
            "/api/organizations/" ++ orgSlug ++ "/subscription"
    in
    Http.get
        { url = url
        , expect = Http.expectJson GotCurrentSubscription currentSubscriptionDecoder
        }


fetchSubscriptionTiers : Cmd Msg
fetchSubscriptionTiers =
    Http.get
        { url = "/api/organizations/subscription-tiers"
        , expect = Http.expectJson GotTiers subscriptionTiersDecoder
        }


saveSubscription : String -> String -> Int -> Int -> Cmd Msg
saveSubscription orgSlug tierId extraAgents extraContacts =
    let
        url =
            "/api/organizations/" ++ orgSlug ++ "/subscription"
    in
    Http.post
        { url = url
        , body = Http.jsonBody (encodeSubscriptionUpdate tierId extraAgents extraContacts)
        , expect = Http.expectWhatever SubscriptionSaved
        }


createStripeCheckoutSession : String -> String -> Int -> Int -> Cmd Msg
createStripeCheckoutSession orgSlug tierId extraAgents extraContacts =
    let
        url =
            "/api/stripe/create-checkout-session"
    in
    Http.post
        { url = url
        , body = Http.jsonBody (encodeStripeCheckoutRequest orgSlug tierId extraAgents extraContacts)
        , expect = Http.expectJson StripeCheckoutReady (field "sessionId" string)
        }


redirectToStripeCheckout : String -> Cmd Msg
redirectToStripeCheckout sessionId =
    -- Use the session ID to redirect to Stripe Checkout
    -- In a real implementation, this would likely be a port to JavaScript
    -- For this demo, we're just simulating with a navigation
    Nav.load ("/api/stripe/redirect-to-checkout?session_id=" ++ sessionId)


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        SubscriptionSaved result ->
            case result of
                Ok _ ->
                    ( { model | error = Nothing }
                    , if model.showChangePlan then
                        -- For change plan, just reload the current page to show updated info
                        Nav.reload

                      else
                        -- For initial setup, continue to next step
                        case model.selectedPlan of
                            Just planId ->
                                Nav.pushUrl model.key ("/setup/settings?plan=" ++ planId)

                            Nothing ->
                                Nav.pushUrl model.key "/setup/settings"
                    )

                Err error ->
                    ( { model | error = Just "Failed to save subscription", isProcessingPayment = False }
                    , Cmd.none
                    )

        NextStep ->
            case model.currentStep of
                PlanSelection ->
                    case model.selectedPlan of
                        Just planId ->
                            if model.showChangePlan then
                                -- For change plan, we go directly to payment
                                ( { model | currentStep = Payment, isProcessingPayment = True }
                                , createStripeCheckoutSession model.orgSlug planId model.extraAgents model.extraContacts
                                )

                            else
                                -- For initial setup, save subscription then go to next page
                                ( { model | currentStep = Payment }
                                , saveSubscription model.orgSlug planId model.extraAgents model.extraContacts
                                )

                        Nothing ->
                            ( { model | error = Just "Please select a plan" }
                            , Cmd.none
                            )

                Payment ->
                    ( { model | currentStep = Complete }
                    , if model.showChangePlan then
                        Nav.pushUrl model.key "/dashboard"

                      else
                        Nav.pushUrl model.key "/templanding"
                    )

                Complete ->
                    ( model
                    , if model.showChangePlan then
                        Nav.pushUrl model.key "/dashboard"

                      else
                        Nav.pushUrl model.key "/templanding"
                    )

        SelectPlan plan ->
            ( { model | selectedPlan = Just plan }
            , Cmd.none
            )

        SetExtraAgents value ->
            let
                extraAgents =
                    String.toInt value |> Maybe.withDefault 0
            in
            ( { model | extraAgents = extraAgents }, Cmd.none )

        SetExtraContacts value ->
            let
                extraContacts =
                    String.toInt value |> Maybe.withDefault 0
            in
            ( { model | extraContacts = extraContacts }, Cmd.none )

        GotTiers result ->
            case result of
                Ok tiers ->
                    let
                        -- Look for Pro plans specifically
                        proPlans =
                            List.filter (\t -> t.id == "pro") tiers

                        -- Look for $99 Pro plan
                        proPlans99 =
                            List.filter (\t -> t.id == "pro" && t.price == "$99/mo") tiers

                        -- Apply filter
                        filteredTiers =
                            filterTiers tiers
                    in
                    ( { model
                        | tiers = filteredTiers
                        , isLoading = False
                      }
                    , Cmd.none
                    )

                Err error ->
                    let
                        errorString =
                            case error of
                                Http.BadUrl url ->
                                    "Bad URL: " ++ url

                                Http.Timeout ->
                                    "Request timed out"

                                Http.NetworkError ->
                                    "Network error"

                                Http.BadStatus statusCode ->
                                    "Bad status: " ++ String.fromInt statusCode

                                Http.BadBody message ->
                                    "Bad body: " ++ message
                    in
                    ( { model | error = Just "Failed to load subscription tiers", isLoading = False }
                    , Cmd.none
                    )

        GotCurrentSubscription result ->
            case result of
                Ok subscription ->
                    ( { model
                        | currentTier = Just subscription.tierId
                        , currentAgentLimit = subscription.agentLimit
                        , currentContactLimit = subscription.contactLimit
                        , isLoading = False
                      }
                    , Cmd.none
                    )

                Err error ->
                    -- Log the error in console using Debug.log
                    let
                        errorString =
                            case error of
                                Http.BadUrl url ->
                                    "Bad URL: " ++ url

                                Http.Timeout ->
                                    "Request timed out"

                                Http.NetworkError ->
                                    "Network error"

                                Http.BadStatus statusCode ->
                                    "Bad status: " ++ String.fromInt statusCode

                                Http.BadBody message ->
                                    "Bad body: " ++ message
                    in
                    ( { model | error = Just "Failed to load current subscription", isLoading = False }
                    , Cmd.none
                    )

        StripeCheckoutReady result ->
            case result of
                Ok sessionId ->
                    ( model
                    , redirectToStripeCheckout sessionId
                    )

                Err error ->
                    ( { model | error = Just "Failed to create payment session", isProcessingPayment = False }
                    , Cmd.none
                    )

        ProcessPayment ->
            case model.selectedPlan of
                Just planId ->
                    if model.showChangePlan && not (hasChanges model) then
                        -- No changes, show an error
                        ( { model | error = Just "No changes made to your subscription." }
                        , Cmd.none
                        )

                    else
                        -- Process payment for changes
                        ( { model | isProcessingPayment = True }
                        , createStripeCheckoutSession model.orgSlug planId model.extraAgents model.extraContacts
                        )

                Nothing ->
                    ( { model | error = Just "Please select a plan" }
                    , Cmd.none
                    )

        CancelPayment ->
            ( { model | isProcessingPayment = False }
            , Cmd.none
            )

        GotSaveResponse result ->
            case result of
                Ok _ ->
                    ( { model | error = Nothing }
                    , Nav.pushUrl model.key "/brand-settings"
                    )

                Err error ->
                    ( { model
                        | error = Just "Failed to save subscription. Please try again."
                        , isLoading = False
                      }
                    , Cmd.none
                    )

        ConfirmPlan ->
            let
                plan =
                    model.selectedPlan |> Maybe.withDefault "basic"
            in
            ( { model | isLoading = True }
            , Http.post
                { url = "/api/choose-plan"
                , body =
                    Http.jsonBody
                        (Encode.object
                            [ ( "plan", Encode.string plan )
                            , ( "orgSlug", Encode.string model.orgSlug )
                            ]
                        )
                , expect = Http.expectJson GotConfirmation confirmationDecoder
                }
            )

        GotConfirmation (Ok response) ->
            if response.success then
                ( model
                , Nav.pushUrl model.key response.redirectUrl
                )

            else
                ( { model | isLoading = False, error = Just "Failed to update plan. Please try again." }
                , Cmd.none
                )

        GotConfirmation (Err _) ->
            ( { model | isLoading = False, error = Just "Failed to connect to server. Please try again." }
            , Cmd.none
            )

        NavigateTo url ->
            ( model
            , Nav.pushUrl model.key url
            )

        CloseBanner ->
            ( { model | showTrialBanner = False }, Cmd.none )

        SetCustomContactCount value ->
            ( { model | customContactCount = value }, Cmd.none )

        CalculateCustomTier ->
            ( { model | isLoadingCustomTier = True }, calculateCustomTier model )

        GotCustomTierPricing result ->
            case result of
                Ok pricing ->
                    ( { model | customTierPricing = Just pricing, isLoadingCustomTier = False }, Cmd.none )

                Err error ->
                    ( { model | error = Just "Failed to calculate custom tier pricing", isLoadingCustomTier = False }, Cmd.none )

        SelectCustomTier ->
            ( model, selectCustomTier model )

        StripeTableSelection priceId ->
            ( { model | selectedPlan = Just priceId, error = Nothing }
            , Cmd.none
            )

        _ ->
            ( model, Cmd.none )


view : Model -> Browser.Document Msg
view model =
    { title =
        if model.showChangePlan then
            "Change Plan - Medicare Max"

        else
            "Choose Plan - Medicare Max"
    , body =
        [ if model.showTrialBanner then
            getPlanLimitBanner model

          else
            text ""
        , if model.showChangePlan then
            -- Change Plan is not part of setup flow, but a standalone page
            -- Return just the content portion which will be wrapped by Main.elm
            viewChangePlan model

          else
            -- This is the setup flow which uses a different layout
            SetupLayout.view SetupLayout.PlanSelection
                -- For plan selection, we determine basic vs pro based on what the user has selected
                (case model.selectedPlan of
                    Just "basic" ->
                        True

                    _ ->
                        False
                )
                0
                -- Using 0 for PlanSelection as it's the first step
                [ if model.isLoading then
                    viewLoading

                  else
                    viewPlanSelection model
                ]
        ]
    }


viewChangePlan : Model -> Html Msg
viewChangePlan model =
    div [ class "container mx-auto py-8 px-4" ]
        [ div [ class "space-y-8" ]
            [ div [ class "mb-8" ]
                [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                    [ text "Change Your Plan" ]
                , p [ class "text-gray-600 mt-2" ]
                    [ text "Modify your subscription to better fit your organization's needs" ]
                ]
            , case model.currentTier of
                Just currentTierId ->
                    div [ class "p-4 bg-blue-50 rounded-lg border border-blue-200 mb-8" ]
                        [ h3 [ class "text-lg font-semibold text-gray-900" ]
                            [ text "Current Plan" ]
                        , p [ class "text-sm text-gray-600" ]
                            [ text
                                ("You are currently on the "
                                    ++ (model.tiers
                                            |> List.filter (\t -> t.id == currentTierId)
                                            |> List.head
                                            |> Maybe.map .name
                                            |> Maybe.withDefault currentTierId
                                       )
                                    ++ " plan with "
                                    ++ String.fromInt model.currentAgentLimit
                                    ++ " agent seats and "
                                    ++ String.fromInt model.currentContactLimit
                                    ++ " clients."
                                )
                            ]
                        ]

                Nothing ->
                    text ""
            , if model.isProcessingPayment then
                div [ class "text-center py-8" ]
                    [ div [ class "animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
                    , p [ class "mt-4 text-gray-500" ]
                        [ text "Preparing payment session..." ]
                    , button
                        [ class "mt-4 px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded"
                        , onClick CancelPayment
                        ]
                        [ text "Cancel" ]
                    ]

              else
                div []
                    [ div [ class "grid grid-cols-1 md:grid-cols-3 gap-4" ]
                        (List.map
                            (\tier ->
                                viewPlanOption
                                    tier.id
                                    tier.name
                                    tier.price
                                    tier.features
                                    tier.agentLimit
                                    tier.contactLimit
                                    model.selectedPlan
                            )
                            model.tiers
                        )

                    -- Add custom tier calculator section
                    , div [ class "mt-8 p-6 bg-gray-50 rounded-lg border border-gray-200" ]
                        [ h3 [ class "text-lg font-semibold text-gray-900 mb-4" ]
                            [ text "Need a custom plan?" ]
                        , p [ class "text-gray-600 mb-4" ]
                            [ text "Enter your expected number of contacts to calculate a custom tier." ]
                        , div [ class "flex items-end space-x-4" ]
                            [ div [ class "flex-grow" ]
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                    [ text "Number of Contacts" ]
                                , input
                                    [ type_ "number"
                                    , class "w-full px-4 py-2 border border-gray-300 rounded-md"
                                    , value model.customContactCount
                                    , onInput SetCustomContactCount
                                    , Html.Attributes.placeholder "Enter contact count (e.g. 15000)"
                                    ]
                                    []
                                ]
                            , button
                                [ class "px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700"
                                , onClick CalculateCustomTier
                                ]
                                [ if model.isLoadingCustomTier then
                                    text "Calculating..."

                                  else
                                    text "Calculate"
                                ]
                            ]

                        -- Display custom tier result if available
                        , case model.customTierPricing of
                            Just pricing ->
                                div [ class "mt-6 p-4 bg-white rounded-lg border border-blue-200" ]
                                    [ div [ class "flex items-center justify-between mb-3" ]
                                        [ h4 [ class "text-lg font-semibold text-gray-900" ]
                                            [ text pricing.tierName ]
                                        , div [ class "rounded-full px-3 py-1 text-sm font-medium bg-blue-50 text-blue-700" ]
                                            [ text pricing.price ]
                                        ]
                                    , p [ class "text-gray-600 mb-3" ]
                                        [ text ("Up to " ++ String.fromInt pricing.contactLimit ++ " contacts with " ++ String.fromInt pricing.agentLimit ++ " agent accounts") ]
                                    , div [ class "mt-3" ]
                                        [ ul [ class "space-y-2" ]
                                            (List.map viewFeature pricing.features)
                                        ]
                                    , div [ class "mt-4" ]
                                        [ button
                                            [ class "px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 w-full"
                                            , onClick (SelectPlan ("tier-custom-" ++ String.fromInt pricing.contactLimit))
                                            ]
                                            [ text "Select This Plan" ]
                                        ]
                                    ]

                            Nothing ->
                                text ""
                        ]
                    , if canAddExtraResources model.selectedPlan then
                        div [ class "mt-8 p-4 bg-gray-50 rounded-lg border border-gray-200" ]
                            [ h3 [ class "text-lg font-semibold text-gray-900 mb-4" ]
                                [ text "Additional Resources" ]
                            , div [ class "grid grid-cols-1 md:grid-cols-2 gap-6" ]
                                [ div [ class "space-y-2" ]
                                    [ label [ class "block text-sm font-medium text-gray-700" ]
                                        [ text "Extra Agents" ]
                                    , p [ class "text-xs text-gray-500" ]
                                        [ text "Add more agent seats beyond your plan's included limit ($20/agent seat/month)" ]
                                    , div [ class "flex items-center" ]
                                        [ button
                                            [ class "bg-gray-200 px-3 py-1 rounded-l-md hover:bg-gray-300"
                                            , onClick (SetExtraAgents (String.fromInt (max 0 (model.extraAgents - 1))))
                                            ]
                                            [ text "-" ]
                                        , input
                                            [ type_ "number"
                                            , class "w-16 text-center border-y border-gray-200 py-1"
                                            , value (String.fromInt model.extraAgents)
                                            , onInput SetExtraAgents
                                            ]
                                            []
                                        , button
                                            [ class "bg-gray-200 px-3 py-1 rounded-r-md hover:bg-gray-300"
                                            , onClick (SetExtraAgents (String.fromInt (model.extraAgents + 1)))
                                            ]
                                            [ text "+" ]
                                        , span [ class "ml-2 text-sm font-medium" ]
                                            [ text ("$" ++ String.fromInt (model.extraAgents * 20) ++ "/mo") ]
                                        ]
                                    ]
                                , div [ class "space-y-2" ]
                                    [ label [ class "block text-sm font-medium text-gray-700" ]
                                        [ text "Extra Clients" ]
                                    , p [ class "text-xs text-gray-500" ]
                                        [ text "Add more clients beyond your plan's included limit ($50/5,000 clients/month)" ]
                                    , div [ class "flex items-center" ]
                                        [ button
                                            [ class "bg-gray-200 px-3 py-1 rounded-l-md hover:bg-gray-300"
                                            , onClick (SetExtraContacts (String.fromInt (max 0 (model.extraContacts - 5000))))
                                            ]
                                            [ text "-" ]
                                        , input
                                            [ type_ "number"
                                            , class "w-20 text-center border-y border-gray-200 py-1"
                                            , value (String.fromInt model.extraContacts)
                                            , onInput SetExtraContacts
                                            , Html.Attributes.step "5000"
                                            ]
                                            []
                                        , button
                                            [ class "bg-gray-200 px-3 py-1 rounded-r-md hover:bg-gray-300"
                                            , onClick (SetExtraContacts (String.fromInt (model.extraContacts + 5000)))
                                            ]
                                            [ text "+" ]
                                        , span [ class "ml-2 text-sm font-medium" ]
                                            [ text ("$" ++ String.fromInt (model.extraContacts // 5000 * 50) ++ "/mo") ]
                                        ]
                                    ]
                                ]
                            ]

                      else
                        text ""
                    , if model.error /= Nothing then
                        div [ class "mt-4 text-red-500" ]
                            [ text (Maybe.withDefault "" model.error) ]

                      else
                        text ""
                    , div [ class "mt-8 flex justify-center space-x-4" ]
                        [ button
                            [ class
                                ("px-6 py-3 rounded-lg transition-colors duration-200 "
                                    ++ (if model.selectedPlan == Nothing || (model.showChangePlan && not (hasChanges model)) then
                                            "bg-[#2563EB]/50 cursor-not-allowed text-white"

                                        else
                                            "bg-[#2563EB] hover:bg-[#1D4ED8] text-white"
                                       )
                                )
                            , onClick
                                (if model.showChangePlan then
                                    ProcessPayment

                                 else
                                    NextStep
                                )
                            , Html.Attributes.disabled (model.selectedPlan == Nothing || (model.showChangePlan && not (hasChanges model)))
                            ]
                            [ text
                                (if model.showChangePlan then
                                    "Change Plan"

                                 else
                                    "Select"
                                )
                            ]
                        , if model.showChangePlan then
                            button
                                [ class "px-6 py-3 rounded-lg bg-gray-200 hover:bg-gray-300 text-gray-800"
                                , onClick NavigateToTempLanding
                                ]
                                [ text "Cancel" ]

                          else
                            text ""
                        ]
                    ]
            ]
        ]


viewLoading : Html Msg
viewLoading =
    div [ class "text-center" ]
        [ div [ class "animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mx-auto" ] []
        , p [ class "mt-4 text-gray-500" ]
            [ text "Loading subscription tiers..." ]
        ]


viewPlanSelection : Model -> Html Msg
viewPlanSelection model =
    div [ class "space-y-8" ]
        [ div [ class "mb-8" ]
            [ h1 [ class "text-2xl font-semibold text-gray-900" ]
                [ text "Choose your plan" ]
            , p [ class "text-gray-600 mt-2" ]
                [ text "Select a plan that fits your organization's needs" ]
            ]
        , div [ class "w-full" ]
            [ -- Embedded Stripe pricing table
              node "stripe-pricing-table"
                [ attribute "pricing-table-id" "prctbl_1RAfz9CBUPXAZKNG0EyV8bRU"
                , attribute "publishable-key" "pk_test_51Qyh7RCBUPXAZKNGAvsWikdxCCaV1R9Vc79IgPqCul8AJsln69ABDQZE0zzOtOlH5rqrlw2maRebndvPl8xDaIVl00Nn2OOBCX"
                ]
                []
            , div [ class "mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200" ]
                [ h3 [ class "text-lg font-semibold text-gray-900 mb-2" ]
                    [ text "Usage-Based Pricing" ]
                , p [ class "text-gray-600" ]
                    [ text "Our subscription includes the following:" ]
                , ul [ class "list-disc list-inside mt-2 space-y-1 text-gray-600" ]
                    [ li [] [ text "Base plan includes 500 contacts" ]
                    , li [] [ text "$40 for each additional 500 contacts used" ]
                    , li [] [ text "You will only be billed for the contacts you actually have" ]
                    , li [] [ text "We'll automatically adjust your billing as your contact count changes" ]
                    ]
                ]
            ]

        -- Add a button to continue after selection
        , div [ class "mt-8 flex justify-center" ]
            [ button
                [ class
                    ("px-6 py-3 rounded-lg transition-colors duration-200 "
                        ++ (if model.selectedPlan == Nothing then
                                "bg-blue-400 cursor-not-allowed text-white"

                            else
                                "bg-blue-600 hover:bg-blue-700 text-white"
                           )
                    )
                , onClick NextStep
                , disabled (model.selectedPlan == Nothing)
                ]
                [ text "Continue" ]
            ]
        ]


viewPlanOption : String -> String -> String -> List String -> Int -> Int -> Maybe String -> Html Msg
viewPlanOption id name price features agentLimit contactLimit selectedPlan =
    div
        [ class
            ("p-6 rounded-lg cursor-pointer transition-all "
                ++ (if Just id == selectedPlan then
                        "bg-[#2563EB]/10 ring-2 ring-[#2563EB]"

                    else
                        "bg-gray-50 hover:bg-gray-100"
                   )
            )
        , onClick (SelectPlan id)
        ]
        [ div [ class "space-y-4" ]
            [ div []
                [ h3 [ class "text-xl font-semibold text-gray-900" ] [ text name ]
                , p [ class "text-3xl font-bold text-gray-900 mt-2" ]
                    [ text
                        (if id == "enterprise" then
                            "Contact Us"

                         else
                            price
                        )
                    ]
                ]
            , div [ class "space-y-2 py-4 border-t border-b border-gray-200" ]
                [ if id /= "enterprise" then
                    div [ class "text-gray-600" ]
                        [ text
                            (if id == "pro" then
                                "Starts with up to " ++ String.fromInt agentLimit ++ " agent seats"

                             else if agentLimit == -1 then
                                "Unlimited agent seats"

                             else
                                "Up to " ++ String.fromInt agentLimit ++ " agent seats"
                            )
                        ]

                  else
                    text ""
                , if id /= "enterprise" then
                    div [ class "text-gray-600" ]
                        [ text
                            (if id == "pro" then
                                "Starts with up to " ++ String.fromInt contactLimit ++ " clients"

                             else if contactLimit == -1 then
                                "Unlimited clients"

                             else
                                "Up to " ++ String.fromInt contactLimit ++ " clients"
                            )
                        ]

                  else
                    text ""
                ]
            , div [ class "mt-4" ]
                [ p [ class "text-sm font-medium text-gray-900 mb-2" ] [ text "Features:" ]
                , ul [ class "space-y-2" ]
                    (List.map
                        (\feature ->
                            li [ class "flex items-start" ]
                                [ span [ class "text-[#059669] mr-2" ] [ text "✓" ]
                                , text feature
                                ]
                        )
                        features
                    )
                ]
            ]
        ]


viewFeature : String -> Html Msg
viewFeature feature =
    li [ class "flex items-start" ]
        [ div [ class "flex-shrink-0 h-5 w-5 text-green-500" ]
            [ viewSmallCheckIcon ]
        , div [ class "ml-3 text-sm text-gray-500" ]
            [ text feature ]
        ]


viewCheckIcon : Html Msg
viewCheckIcon =
    svg
        [ Svg.Attributes.class "h-5 w-5"
        , viewBox "0 0 20 20"
        , fill "currentColor"
        ]
        [ path
            [ fillRule "evenodd"
            , clipRule "evenodd"
            , d "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
            ]
            []
        ]


viewSmallCheckIcon : Html Msg
viewSmallCheckIcon =
    svg
        [ Svg.Attributes.class "h-4 w-4"
        , viewBox "0 0 20 20"
        , fill "currentColor"
        ]
        [ path
            [ fillRule "evenodd"
            , clipRule "evenodd"
            , d "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
            ]
            []
        ]


calculateCustomTier : Model -> Cmd Msg
calculateCustomTier model =
    case String.toInt model.customContactCount of
        Just contactCount ->
            if contactCount > 0 then
                Http.get
                    { url = "/api/subscription/calculate-tier/" ++ String.fromInt contactCount
                    , expect = Http.expectJson GotCustomTierPricing customTierPricingDecoder
                    }

            else
                Cmd.none

        Nothing ->
            Cmd.none


customTierPricingDecoder : Decoder CustomTierPricing
customTierPricingDecoder =
    field "success" Decode.bool
        |> Decode.andThen
            (\success ->
                if success then
                    field "pricing"
                        (Decode.map5 CustomTierPricing
                            (field "price" string)
                            (field "agentLimit" int)
                            (field "tierName" string)
                            (field "contactLimit" int)
                            (field "features" (list string))
                        )

                else
                    Decode.fail "API returned error"
            )


selectCustomTier : Model -> Cmd Msg
selectCustomTier model =
    case model.customTierPricing of
        Just pricing ->
            -- Create a custom tier ID based on the contact limit
            let
                customTierId =
                    "tier-custom-" ++ String.fromInt pricing.contactLimit
            in
            -- Simulate selecting this plan
            Cmd.none

        Nothing ->
            Cmd.none


subscriptions : Model -> Sub Msg
subscriptions _ =
    stripeTableSelected StripeTableSelection


subscriptionTiersDecoder : Decoder (List SubscriptionTier)
subscriptionTiersDecoder =
    field "tiers"
        (list
            (Decode.map6 SubscriptionTier
                (field "id" string)
                (field "name" string)
                (field "price" string)
                (field "agentLimit" int)
                (field "contactLimit" int)
                (field "features" (list string))
            )
        )


currentSubscriptionDecoder : Decoder { tierId : String, agentLimit : Int, contactLimit : Int }
currentSubscriptionDecoder =
    let
        -- Try to decode from a success field first (for API format consistency)
        successDecoder =
            field "success" Decode.bool
                |> Decode.andThen
                    (\success ->
                        if success then
                            -- If success is true, look for the fields at the top level
                            Decode.map3
                                (\tierId agentLimit contactLimit ->
                                    { tierId = tierId
                                    , agentLimit = agentLimit
                                    , contactLimit = contactLimit
                                    }
                                )
                                (field "tierId" string)
                                (field "agentLimit" int)
                                (field "contactLimit" int)

                        else
                            -- If success is false, fail with the error message
                            field "error" string
                                |> Decode.andThen (\err -> Decode.fail err)
                    )

        -- Try the direct decoder as a fallback
        directDecoder =
            Decode.map3
                (\tierId agentLimit contactLimit ->
                    { tierId = tierId
                    , agentLimit = agentLimit
                    , contactLimit = contactLimit
                    }
                )
                (field "tierId" string)
                (field "agentLimit" int)
                (field "contactLimit" int)
    in
    -- Try to use the success wrapper first, fall back to direct decoder
    Decode.oneOf [ successDecoder, directDecoder ]


encodeSubscriptionUpdate : String -> Int -> Int -> Encode.Value
encodeSubscriptionUpdate tierId extraAgents extraContacts =
    Encode.object
        [ ( "tierId", Encode.string tierId )
        , ( "extraAgents", Encode.int extraAgents )
        , ( "extraContacts", Encode.int extraContacts )
        ]


encodeStripeCheckoutRequest : String -> String -> Int -> Int -> Encode.Value
encodeStripeCheckoutRequest orgSlug tierId extraAgents extraContacts =
    Encode.object
        [ ( "orgSlug", Encode.string orgSlug )
        , ( "tierId", Encode.string tierId )
        , ( "extraAgents", Encode.int extraAgents )
        , ( "extraContacts", Encode.int extraContacts )
        ]


filterTiers : List SubscriptionTier -> List SubscriptionTier
filterTiers tiers =
    -- No need to filter out enterprise options with the new contact-based pricing model
    tiers


canAddExtraResources : Maybe String -> Bool
canAddExtraResources selectedPlan =
    case selectedPlan of
        Just plan ->
            plan == "pro"

        -- Only Pro plan can add extra resources
        Nothing ->
            False


hasChanges : Model -> Bool
hasChanges model =
    let
        -- Check if the plan has changed
        planChanged =
            case ( model.currentTier, model.selectedPlan ) of
                ( Just currentTier, Just selectedTier ) ->
                    currentTier /= selectedTier

                _ ->
                    False

        -- Check if resources have changed
        resourcesChanged =
            model.extraAgents > 0 || model.extraContacts > 0
    in
    planChanged || resourcesChanged


confirmationDecoder : Decoder { success : Bool, redirectUrl : String }
confirmationDecoder =
    Decode.map2 (\success redirectUrl -> { success = success, redirectUrl = redirectUrl })
        (Decode.field "success" Decode.bool)
        (Decode.field "redirectUrl" Decode.string)


getPlanLimitBanner : Model -> Html Msg
getPlanLimitBanner model =
    -- When user is on trial plan
    if model.currentAgentLimit > 0 && model.extraAgents > model.currentAgentLimit then
        LimitBanner.viewLimitBanner
            (AgentLimit (model.currentAgentLimit + model.extraAgents) model.currentAgentLimit)
            CloseBanner
        -- When user is on basic plan (which only allows 1 agent)

    else if model.currentTier == Just "basic" then
        LimitBanner.viewLimitBanner
            (CustomWarning
                "Basic Plan Limitations"
                "Your current Basic plan only supports 1 agent. Please upgrade to a higher tier plan to add more agents."
            )
            CloseBanner
        -- When approaching contact limit (subscription data from API)

    else if model.currentContactLimit > 0 && model.extraContacts >= (model.currentContactLimit * 1 // 10) then
        LimitBanner.viewLimitBanner
            (ContactLimit (model.currentContactLimit + model.extraContacts) model.currentContactLimit)
            CloseBanner
        -- Default for new users or when no specific warning is needed

    else
        LimitBanner.viewLimitBanner
            (TrialEnding "June 15, 2024")
            CloseBanner


viewPlan : Maybe String -> SubscriptionTier -> Html Msg
viewPlan selectedPlan tier =
    let
        isSelected =
            selectedPlan == Just tier.id

        selectedClass =
            if isSelected then
                "border-[#03045E] ring-2 ring-[#03045E]"

            else
                "border-gray-200 hover:border-gray-300"
    in
    div
        [ class ("border rounded-lg p-6 cursor-pointer " ++ selectedClass)
        , onClick (SelectPlan tier.id)
        ]
        [ -- Plan header with tier name
          div [ class "flex items-center justify-between" ]
            [ div [ class "flex items-center" ]
                [ h3 [ class "text-lg font-semibold text-gray-900" ]
                    [ text tier.name ]
                , if isSelected then
                    -- Checkmark for selected plan
                    div [ class "ml-2 text-[#03045E]" ]
                        [ viewCheckIcon ]

                  else
                    text ""
                ]
            , div [ class "rounded-full px-3 py-1 text-sm font-medium bg-blue-50 text-blue-700" ]
                [ text tier.price ]
            ]

        -- Limits
        , div [ class "mt-4 space-y-3" ]
            [ div [ class "flex items-start" ]
                [ div [ class "flex-shrink-0 h-5 w-5 text-green-500" ]
                    [ viewSmallCheckIcon ]
                , div [ class "ml-3 text-sm text-gray-500" ]
                    [ text ("Up to " ++ String.fromInt tier.contactLimit ++ " contacts") ]
                ]
            , div [ class "flex items-start" ]
                [ div [ class "flex-shrink-0 h-5 w-5 text-green-500" ]
                    [ viewSmallCheckIcon ]
                , div [ class "ml-3 text-sm text-gray-500" ]
                    [ text ("Up to " ++ String.fromInt tier.agentLimit ++ " agents") ]
                ]
            ]

        -- Features
        , div [ class "mt-6" ]
            [ h4 [ class "text-sm font-medium text-gray-900" ]
                [ text "Includes:" ]
            , ul [ class "mt-2 space-y-2" ]
                (List.map viewFeature tier.features)
            ]
        ]



-- Add this port for the embedded Stripe pricing table


port stripeTableSelected : (String -> msg) -> Sub msg

================
File: frontend/src/Compare.elm
================
module Compare exposing
    ( CompareParams
    , Model
    , Msg(..)
    , PlanType(..)
    , fetchPlans
    , init
    , subscriptions
    , update
    , view
    )

import BirthdayRules exposing (isInBirthdayRuleWindow)
import Browser
import Browser.Dom as Dom
import Browser.Events
import Browser.Navigation as Nav
import CarrierNaic exposing (Carrier(..), carrierDecoder, carrierToNaics, carrierToString, naicToCarrier, stringToCarrier)
import Date exposing (Date)
import Dict
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onInput)
import Http
import Json.Decode as D exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as E
import List.Extra
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, height, stroke, strokeLinecap, viewBox, width)
import Task
import Time
import Url exposing (Url)
import Url.Parser as UrlParser
import Url.Parser.Query as Query
import Utils.DiscountDescription exposing (discountDescription)
import Utils.QuoteHeader exposing (viewHeader)



-- TYPES


type PlanType
    = PlanG
    | PlanN


type alias CompareParams =
    { quoteId : Maybe String
    , orgId : Maybe String
    , tid : Maybe String
    }


type alias ContactResponse =
    { contact : Maybe Contact
    , agent : Agent
    , orgSlug : String
    , orgName : String
    , orgLogo : Maybe String
    , orgPhone : Maybe String
    , orgSignature : Bool
    , orgSignatureText : Maybe String
    , carrierContracts : List Carrier
    }


type alias Agent =
    { firstName : String
    , lastName : String
    , email : String
    , phone : String
    }


type alias Contact =
    { id : Int
    , firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    , age : Int
    , gender : String
    , tobacco : Bool
    , state : String
    , zipCode : String
    , county : Maybe String
    , currentCarrier : Maybe String
    , planType : Maybe String
    }


type alias CoverageItem =
    { name : String
    , percentageCovered : Int
    , note : Maybe String
    }


type alias CoverageList =
    List CoverageItem


type alias Plan =
    { price : Float
    , priceDiscount : Float
    , flag : Maybe String
    , age : Int
    , description : String
    , gender : String
    , id : Int
    , image : String
    , naic : String
    , name : String
    , planType : String
    , premiumStability : String
    , ratingCategory : String
    , score : Int
    , select : Bool
    , state : String
    , tobacco : Bool
    , coverageSummary : CoverageList
    , discountDescription : Maybe String
    }


isPlanExcluded : Plan -> Bool
isPlanExcluded plan =
    case plan.naic of
        "60380" ->
            case plan.state of
                "CA" ->
                    True

                "OR" ->
                    True

                "WA" ->
                    True

                "OK" ->
                    True

                "ID" ->
                    True

                "MD" ->
                    True

                "VA" ->
                    True

                "NV" ->
                    True

                "MO" ->
                    True

                _ ->
                    False

        _ ->
            False


type alias Plans =
    { planG : List Plan
    , planN : List Plan
    }


type alias LocationUpdateResponse =
    { success : Bool
    , zipCode : String
    , state : String
    , counties : List String
    }


type alias Model =
    { isLoading : Bool
    , error : Maybe String
    , plans : Plans
    , state : Maybe String
    , county : Maybe String
    , zip : Maybe String
    , age : Maybe Int
    , gender : Maybe String
    , tobacco : Maybe Bool
    , selectedPlanType : PlanType
    , selectedPlan : Maybe Plan
    , showReviewVideo : Bool
    , showQualificationVideo : Bool
    , showGvsNVideo : Bool
    , showFAQ : Bool
    , currentCardIndex : Int
    , showRatesVideo : Bool
    , key : Nav.Key
    , showDiscount : Bool
    , currentCarrier : Maybe String
    , planType : Maybe String
    , dateOfBirth : Maybe String
    , quoteId : Maybe String
    , carrierContracts : List Carrier
    , currentDate : Maybe Date
    , effectiveDate : Maybe Date
    , orgId : Maybe String
    , orgName : Maybe String
    , orgLogo : Maybe String
    , orgPhone : Maybe String
    , useOrg : Bool
    , orgSignatureText : Maybe String
    , name : Maybe String
    , contact : Maybe Contact
    , agent : Maybe Agent
    , orgSlug : Maybe String
    , loadingContact : Bool
    , showDiscountInfo : Bool
    , showLocationModal : Bool
    , editingZipCode : Maybe String
    , editingCounty : Maybe String
    , availableCounties : List String
    , locationUpdateError : Maybe String
    , submittingLocation : Bool
    , editingEffectiveDate : Maybe String
    , fetchNewPlans : Bool
    , discountCsvString : Maybe String
    , activeTooltipPlan : Maybe Plan
    }


type Msg
    = GotPlans (Result Http.Error Plans)
    | GotDiscountCsvString (Result Http.Error String)
    | TogglePlanType
    | SelectPlan Plan
    | SelectPlanCard Plan
    | ScrollDown Dom.Viewport
    | CloseReviewVideo
    | OpenGvsNVideo
    | CloseGvsNVideo
    | ShowQualificationVideo
    | CloseQualificationVideo
    | ShowFAQ
    | CloseFAQ
    | NextCard
    | PreviousCard
    | CloseRatesVideo
    | NavigateTo String
    | ToggleDiscount
    | ToggleDiscountInfo
    | GotCarrierContracts (Result Http.Error (List Carrier))
    | GotCurrentDate Date
    | GotContactData (Result Http.Error ContactResponse)
    | ShowLocationModal
    | CloseEditModal
    | CloseEditModalAndFetchPlans
    | UpdateZipCode String
    | UpdateCounty String
    | UpdateEffectiveDate String
    | SubmitLocationUpdate
    | GotLocationUpdate (Result Http.Error LocationUpdateResponse)
    | ToggleMobileTooltip (Maybe Plan)
    | NoOp
    | LogTrackingClickResult (Result Http.Error ())


type alias Flags =
    { state : String
    , zip : String
    , county : String
    , gender : String
    , tobacco : Bool
    , age : Int
    , planType : String
    , currentCarrier : Maybe String
    , dateOfBirth : String
    , quoteId : Maybe String
    }



-- INIT


logTrackingClick : CompareParams -> Cmd Msg
logTrackingClick params =
    let
        ss =
            case params.quoteId of
                Just quoteId ->
                    String.split "-" quoteId

                Nothing ->
                    []

        orgId =
            List.head ss |> Maybe.withDefault ""

        contactId =
            case List.tail ss of
                Just ssTail ->
                    List.head ssTail |> Maybe.withDefault ""

                Nothing ->
                    ""
    in
    case ( params.tid, params.quoteId ) of
        ( Just tid, Just quoteId ) ->
            Http.post
                { url = "/api/tracking/log-tracking-click"
                , body =
                    Http.jsonBody
                        (E.object
                            [ ( "tid", E.string (Maybe.withDefault "" params.tid) )
                            , ( "quoteId", E.string quoteId )
                            , ( "orgId", E.string orgId )
                            , ( "contactId", E.string contactId )
                            ]
                        )
                , expect = Http.expectJson (\result -> LogTrackingClickResult result) (D.succeed ())
                }

        _ ->
            Cmd.none


init : Nav.Key -> Maybe CompareParams -> ( Model, Cmd Msg )
init key maybeParams =
    let
        -- Empty model with loading state
        emptyModel =
            { isLoading = True
            , error = Nothing
            , plans = { planG = [], planN = [] }
            , state = Nothing
            , county = Nothing
            , zip = Nothing
            , age = Nothing
            , gender = Nothing
            , tobacco = Nothing
            , selectedPlanType = PlanG
            , selectedPlan = Nothing
            , showReviewVideo = False
            , showQualificationVideo = False
            , showGvsNVideo = False
            , showFAQ = False
            , currentCardIndex = 0
            , showRatesVideo = False
            , key = key
            , showDiscount = False
            , currentCarrier = Nothing
            , planType = Nothing
            , dateOfBirth = Nothing
            , quoteId = Nothing
            , carrierContracts = []
            , currentDate = Nothing
            , effectiveDate = Nothing
            , discountCsvString = Nothing
            , orgId = Nothing
            , orgName = Nothing
            , orgLogo = Nothing
            , orgPhone = Nothing
            , useOrg = False
            , orgSignatureText = Nothing
            , name = Nothing
            , contact = Nothing
            , agent = Nothing
            , orgSlug = Nothing
            , loadingContact = True
            , showDiscountInfo = False
            , showLocationModal = False
            , editingZipCode = Nothing
            , editingCounty = Nothing
            , availableCounties = []
            , locationUpdateError = Nothing
            , submittingLocation = False
            , editingEffectiveDate = Nothing
            , fetchNewPlans = False
            , activeTooltipPlan = Nothing
            }
    in
    case maybeParams of
        Just params ->
            case params.quoteId of
                Just quoteId ->
                    -- We have a quote ID, fetch contact data
                    ( { emptyModel | quoteId = Just quoteId, orgId = params.orgId }
                    , Cmd.batch
                        [ fetchContactData quoteId
                        , Task.perform GotCurrentDate Date.today
                        , fetchDiscountCsvString
                        , logTrackingClick params
                        ]
                    )

                Nothing ->
                    -- No quote ID, check if we have an org ID
                    case params.orgId of
                        Just orgId ->
                            -- Redirect to self-service onboarding
                            ( emptyModel
                            , Nav.pushUrl key ("/self-onboarding/" ++ orgId)
                            )

                        Nothing ->
                            -- No valid parameters
                            ( { emptyModel
                                | isLoading = False
                                , error = Just "Missing required parameters. Please provide either a quote ID or organization ID."
                              }
                            , Cmd.none
                            )

        Nothing ->
            -- No parameters provided
            ( { emptyModel
                | isLoading = False
                , error = Just "No parameters provided. Please provide either a quote ID or organization ID."
              }
            , Cmd.none
            )



-- HTTP


fetchContactData : String -> Cmd Msg
fetchContactData quoteId =
    Http.get
        { url = "/api/quotes/decode/" ++ quoteId
        , expect = Http.expectJson GotContactData contactResponseDecoder
        }


fetchDiscountCsvString : Cmd Msg
fetchDiscountCsvString =
    Http.get
        { url = "/api/data/public/hhd.csv"
        , expect = Http.expectString GotDiscountCsvString
        }


fetchPlans : Model -> Cmd Msg
fetchPlans model =
    case model.contact of
        Just contact ->
            Http.request
                { method = "POST"
                , headers = []
                , url = "/api/quotes"
                , body = Http.jsonBody (buildPlansBody contact model.effectiveDate)
                , expect = Http.expectJson GotPlans (plansDecoder model)
                , timeout = Nothing
                , tracker = Nothing
                }

        Nothing ->
            -- Don't fetch plans until we have contact data
            Cmd.none


getEffectiveDate : Date -> String
getEffectiveDate date =
    date
        |> Date.add Date.Months 1
        |> Date.floor Date.Month
        |> Date.toIsoString


buildPlansBody : Contact -> Maybe Date -> E.Value
buildPlansBody contact currentDate =
    let
        ed =
            case currentDate of
                Just date ->
                    [ ( "effective_date", E.string (Date.toIsoString date) ) ]

                Nothing ->
                    []
    in
    [ ( "zip_code", E.string contact.zipCode )
    , ( "state", E.string contact.state )
    , ( "county", E.string (Maybe.withDefault "" contact.county) )
    , ( "age", E.int contact.age )
    , ( "gender"
      , E.string
            (if String.contains "f" (String.toLower contact.gender) then
                "F"

             else
                "M"
            )
      )
    , ( "tobacco", E.bool contact.tobacco )
    , ( "plans", E.list E.string [ "G", "N" ] )
    , ( "carriers", E.string "supported" )
    ]
        ++ ed
        |> E.object



-- DECODERS


plansDecoder : Model -> Decoder Plans
plansDecoder model =
    D.oneOf
        [ D.list quoteResponseDecoder
            |> D.map (\responses -> groupQuotesByPlan responses model)
        , D.succeed { planG = [], planN = [] }
        ]


type alias QuoteResponse =
    { naic : String
    , group : Int
    , companyName : String
    , quotes : List QuoteData
    }


type alias QuoteData =
    { rate : Float
    , discountRate : Float
    , discountCategory : Maybe String
    , age : Int
    , gender : String
    , plan : String
    , tobacco : Int
    }


quoteResponseDecoder : Decoder QuoteResponse
quoteResponseDecoder =
    D.map4 QuoteResponse
        (D.field "naic" D.string)
        (D.field "group" D.int)
        (D.field "company_name" D.string)
        (D.field "quotes" (D.list quoteDataDecoder))


quoteDataDecoder : Decoder QuoteData
quoteDataDecoder =
    D.map7 QuoteData
        (D.field "rate" D.float)
        (D.field "discount_rate" D.float)
        (D.field "discount_category" (D.nullable D.string))
        (D.field "age" D.int)
        (D.field "gender" D.string)
        (D.field "plan" D.string)
        (D.field "tobacco" D.int)


isCarrierSupported : String -> List Carrier -> Bool
isCarrierSupported naic carrierContracts =
    case naicToCarrier naic of
        Just carrierName ->
            List.member carrierName carrierContracts

        Nothing ->
            False


filterPlansByCarrier : Plans -> List Carrier -> Plans
filterPlansByCarrier plans carrierContracts =
    { planG = List.filter (\plan -> isCarrierSupported plan.naic carrierContracts) plans.planG |> List.Extra.unique
    , planN = List.filter (\plan -> isCarrierSupported plan.naic carrierContracts) plans.planN |> List.Extra.unique
    }


groupQuotesByPlan : List QuoteResponse -> Model -> Plans
groupQuotesByPlan responses model =
    let
        convertToPlan : QuoteResponse -> QuoteData -> Plan
        convertToPlan response quote =
            let
                carrierImagePath =
                    case naicToCarrier response.naic of
                        Just carrier ->
                            "/images/" ++ (carrier |> carrierToString |> String.filter (\c -> c /= ' ')) ++ ".svg"

                        Nothing ->
                            -- Fallback to png if we can't match the carrier
                            "/images/medicare-max-logo.png"
            in
            { price = quote.rate / 100
            , priceDiscount = quote.discountRate / 100
            , flag = quote.discountCategory
            , age = quote.age
            , description = ""
            , gender = quote.gender
            , id = 0
            , image = carrierImagePath
            , naic = response.naic
            , name = response.companyName
            , planType = quote.plan
            , premiumStability = ""
            , ratingCategory = ""
            , score = 0
            , select = False
            , state = Maybe.withDefault "" model.state
            , tobacco = quote.tobacco == 1
            , coverageSummary =
                if String.toUpper quote.plan == "G" then
                    planGCoverageList

                else
                    planNCoverageList
            , discountDescription = Nothing
            }

        allQuotes =
            List.concatMap
                (\response ->
                    List.concatMap
                        (\quote ->
                            let
                                upperPlan =
                                    String.toUpper quote.plan
                            in
                            if List.member upperPlan [ "G", "N" ] then
                                [ convertToPlan response quote ]

                            else
                                []
                        )
                        response.quotes
                )
                responses

        planG =
            List.filter (\q -> String.toUpper q.planType == "G") allQuotes
                |> List.sortBy .price

        planN =
            List.filter (\q -> String.toUpper q.planType == "N") allQuotes
                |> List.sortBy .price

        result =
            { planG = planG
            , planN = planN
            }
    in
    result



-- COVERAGE LISTS


planGCoverageList : CoverageList
planGCoverageList =
    [ { name = "Part A Deductible", percentageCovered = 100, note = Nothing }
    , { name = "Hospital Co-Pays", percentageCovered = 100, note = Nothing }
    , { name = "Skilled Nursing Facility Co-Pays", percentageCovered = 100, note = Nothing }
    , { name = "Part B Annual Deductible", percentageCovered = 0, note = Just "$240 annual deductible" }
    , { name = "Part B Coinsurance", percentageCovered = 100, note = Nothing }
    , { name = "Excess Charges", percentageCovered = 100, note = Nothing }
    , { name = "Foreign Travel Emergency", percentageCovered = 80, note = Nothing }
    ]


planNCoverageList : CoverageList
planNCoverageList =
    [ { name = "Part A Deductible", percentageCovered = 100, note = Nothing }
    , { name = "Hospital Co-Pays", percentageCovered = 100, note = Nothing }
    , { name = "Skilled Nursing Facility Co-Pays", percentageCovered = 100, note = Nothing }
    , { name = "Part B Annual Deductible", percentageCovered = 0, note = Just "$240 annual deductible" }
    , { name = "Part B Coinsurance", percentageCovered = 100, note = Just "w/ some copayments" }
    , { name = "Excess Charges", percentageCovered = 0, note = Nothing }
    , { name = "Foreign Travel Emergency", percentageCovered = 80, note = Nothing }
    ]



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        LogTrackingClickResult result ->
            case result of
                Ok _ ->
                    ( model, Cmd.none )

                Err _ ->
                    ( model, Cmd.none )

        GotDiscountCsvString (Ok discountCsvString) ->
            ( { model | discountCsvString = Just discountCsvString }
            , Cmd.none
            )

        GotDiscountCsvString (Err _) ->
            ( { model | error = Just "Failed to load discount CSV" }
            , Cmd.none
            )

        GotCarrierContracts (Ok carrierContracts) ->
            let
                updatedModel =
                    { model | carrierContracts = carrierContracts }
            in
            ( updatedModel
            , fetchPlans updatedModel
            )

        GotCarrierContracts (Err _) ->
            ( { model | error = Just "Failed to load organization settings" }
            , Cmd.none
            )

        ToggleDiscount ->
            ( { model | showDiscount = not model.showDiscount }
            , Cmd.none
            )

        ToggleDiscountInfo ->
            ( { model | showDiscountInfo = not model.showDiscountInfo }
            , Cmd.none
            )

        GotPlans result ->
            case result of
                Ok plansRaw ->
                    let
                        plans0 =
                            filterPlansByCarrier plansRaw model.carrierContracts

                        addDiscountDescriptions : Plan -> Plan
                        addDiscountDescriptions plan =
                            case ( model.discountCsvString, naicToCarrier plan.naic ) of
                                ( Just discountCsvString, Just carrier ) ->
                                    { plan
                                        | discountDescription =
                                            discountDescription
                                                discountCsvString
                                                carrier
                                                plan.naic
                                                plan.state
                                                |> Result.toMaybe
                                                |> Maybe.withDefault Nothing
                                    }

                                _ ->
                                    plan

                        plans =
                            { planG =
                                plans0.planG
                                    |> List.map addDiscountDescriptions
                                    |> List.filter (\plan -> not (isPlanExcluded plan))
                            , planN =
                                plans0.planN
                                    |> List.map addDiscountDescriptions
                                    |> List.filter (\plan -> not (isPlanExcluded plan))
                            }

                        hasPlans =
                            not (List.isEmpty plans.planG && List.isEmpty plans.planN)

                        errorMsg =
                            if not hasPlans then
                                Just "No plans available for the selected criteria. Please try different parameters."

                            else
                                Nothing
                    in
                    ( { model
                        | plans = plans
                        , isLoading = False
                        , error = errorMsg
                      }
                    , Cmd.none
                    )

                Err error ->
                    let
                        detailedError =
                            case error of
                                Http.BadStatus 401 ->
                                    "Authentication error: Please check your session and try again."

                                Http.BadStatus 403 ->
                                    "Access forbidden: You don't have permission to access these quotes."

                                Http.BadStatus 500 ->
                                    "Server error: The quote service is experiencing issues. Please try again later."

                                Http.NetworkError ->
                                    "Network error: Please check your internet connection and try again."

                                Http.Timeout ->
                                    "Request timed out: The quote service took too long to respond. Please try again."

                                Http.BadUrl url ->
                                    "Invalid URL: " ++ url

                                Http.BadBody message ->
                                    "Invalid response format: " ++ message

                                _ ->
                                    httpErrorToString error
                    in
                    ( { model
                        | error = Just detailedError
                        , isLoading = False
                      }
                    , Cmd.none
                    )

        TogglePlanType ->
            ( { model
                | selectedPlanType = togglePlanType model.selectedPlanType
                , currentCardIndex = 0
                , selectedPlan = Nothing
              }
            , Cmd.none
            )

        SelectPlan plan ->
            ( { model | showQualificationVideo = True }
            , Cmd.batch
                [ Nav.pushUrl model.key
                    (case model.quoteId of
                        Just id ->
                            let
                                orgIdParam =
                                    case model.orgId of
                                        Just orgId ->
                                            "&orgId=" ++ orgId

                                        Nothing ->
                                            -- Try to extract orgId from the quoteId as a fallback
                                            case String.split "-" id |> List.head of
                                                Just extractedOrgId ->
                                                    "&orgId=" ++ extractedOrgId

                                                Nothing ->
                                                    ""
                            in
                            "/eligibility?id=" ++ id ++ orgIdParam

                        Nothing ->
                            let
                                orgIdParam =
                                    case model.orgId of
                                        Just orgId ->
                                            "?orgId=" ++ orgId

                                        Nothing ->
                                            ""
                            in
                            "/eligibility" ++ orgIdParam
                    )
                , Task.perform (\_ -> NoOp) (Dom.setViewport 0 0)
                ]
            )

        SelectPlanCard plan ->
            ( { model
                | selectedPlan =
                    if Just plan == model.selectedPlan then
                        Nothing
                        -- Deselect if clicking the same plan again

                    else
                        Just plan

                -- Otherwise select the new plan
              }
            , Cmd.none
            )

        ScrollDown viewport ->
            ( model, Cmd.none )

        CloseReviewVideo ->
            ( { model | showReviewVideo = False }
            , Cmd.none
            )

        OpenGvsNVideo ->
            ( { model | showGvsNVideo = True }, Cmd.none )

        CloseGvsNVideo ->
            ( { model | showGvsNVideo = False }, Cmd.none )

        ShowQualificationVideo ->
            ( { model | showQualificationVideo = True }
            , Cmd.none
            )

        CloseQualificationVideo ->
            ( { model | showQualificationVideo = False }
            , Nav.pushUrl model.key
                (let
                    orgIdParam =
                        case model.orgId of
                            Just orgId ->
                                "?orgId=" ++ orgId

                            Nothing ->
                                -- Try to extract orgId from the quoteId as a fallback
                                case model.quoteId of
                                    Just id ->
                                        case String.split "-" id |> List.head of
                                            Just extractedOrgId ->
                                                "?orgId=" ++ extractedOrgId

                                            Nothing ->
                                                ""

                                    Nothing ->
                                        ""
                 in
                 "/eligibility" ++ orgIdParam
                )
            )

        ShowFAQ ->
            ( { model | showFAQ = True }
            , Cmd.none
            )

        CloseFAQ ->
            ( { model | showFAQ = False }
            , Cmd.none
            )

        NextCard ->
            ( { model | currentCardIndex = Basics.min (model.currentCardIndex + 1) (List.length (getSelectedPlans model) - 1) }
            , Cmd.none
            )

        PreviousCard ->
            ( { model | currentCardIndex = Basics.max (model.currentCardIndex - 1) 0 }
            , Cmd.none
            )

        CloseRatesVideo ->
            ( { model | showRatesVideo = False }, Cmd.none )

        NavigateTo path ->
            ( model, Nav.pushUrl model.key path )

        GotCurrentDate date ->
            let
                effectiveDate =
                    date
                        |> Date.add Date.Months 1
                        |> Date.floor Date.Month
            in
            ( { model
                | currentDate = Just date
                , effectiveDate = Just effectiveDate
              }
            , Cmd.none
            )

        GotContactData (Ok response) ->
            let
                -- Update model with contact data
                updatedModel0 =
                    { model
                        | contact = response.contact
                        , agent = Just response.agent
                        , orgSlug = Just response.orgSlug
                        , orgName = Just response.orgName
                        , orgLogo = response.orgLogo
                        , orgPhone = response.orgPhone
                        , useOrg = response.orgSignature
                        , orgSignatureText = response.orgSignatureText
                        , carrierContracts = response.carrierContracts
                        , loadingContact = False
                    }

                updatedModel =
                    case response.contact of
                        Just contact ->
                            { updatedModel0
                                | name = Just (contact.firstName ++ " " ++ contact.lastName)
                                , gender = Just contact.gender
                                , tobacco = Just contact.tobacco
                                , state = Just contact.state
                                , zip = Just contact.zipCode
                                , age = Just contact.age
                                , currentCarrier = contact.currentCarrier
                                , planType = contact.planType
                            }

                        Nothing ->
                            updatedModel0

                cmd =
                    case response.contact of
                        Just _ ->
                            fetchPlans updatedModel

                        Nothing ->
                            Nav.pushUrl
                                model.key
                                ("/self-onboarding/"
                                    ++ response.orgSlug
                                    ++ "?quoteId="
                                    ++ Maybe.withDefault "" model.quoteId
                                )
            in
            ( updatedModel
            , cmd
            )

        GotContactData (Err _) ->
            ( { model
                | error = Just "This quote link appears to be invalid or has expired. Please get a new quote to continue."
                , loadingContact = False
                , isLoading = False
              }
            , Nav.pushUrl model.key "/error?message=This%20quote%20link%20appears%20to%20be%20invalid%20or%20has%20expired.%20Please%20get%20a%20new%20quote%20to%20continue."
            )

        ShowLocationModal ->
            ( { model
                | showLocationModal = True
                , editingZipCode = model.zip
                , editingCounty = Nothing
                , availableCounties = []
                , locationUpdateError = Nothing
                , fetchNewPlans = False
              }
            , Cmd.none
            )

        CloseEditModal ->
            ( { model
                | showLocationModal = False
                , editingZipCode = Nothing
                , editingCounty = Nothing
                , availableCounties = []
                , locationUpdateError = Nothing
                , isLoading = False
                , fetchNewPlans = False
              }
            , Cmd.none
            )

        CloseEditModalAndFetchPlans ->
            let
                maybeEffectiveDate =
                    case model.editingEffectiveDate of
                        Just effectiveDateString ->
                            Date.fromIsoString effectiveDateString
                                |> Result.toMaybe

                        Nothing ->
                            model.effectiveDate

                updatedModel =
                    { model
                        | showLocationModal = False
                        , editingZipCode = Nothing
                        , editingCounty = Nothing
                        , availableCounties = []
                        , locationUpdateError = Nothing
                        , fetchNewPlans = False
                        , effectiveDate = maybeEffectiveDate
                    }
            in
            if model.fetchNewPlans then
                ( { updatedModel
                    | fetchNewPlans = False
                    , isLoading = True
                  }
                , fetchPlans updatedModel
                )

            else
                ( updatedModel
                , Cmd.none
                )

        UpdateZipCode newZip ->
            ( { model | editingZipCode = Just newZip }
            , Cmd.none
            )

        UpdateCounty county ->
            ( { model | editingCounty = Just county }
            , Cmd.none
            )

        UpdateEffectiveDate dateString ->
            let
                updatedModel =
                    { model
                        | effectiveDate = Date.fromIsoString dateString |> Result.toMaybe
                        , editingEffectiveDate = Just dateString
                        , fetchNewPlans = True
                    }
            in
            ( updatedModel
            , Cmd.none
            )

        SubmitLocationUpdate ->
            case model.contact of
                Just contact ->
                    case model.orgSlug of
                        Just orgSlug ->
                            ( { model | submittingLocation = True, locationUpdateError = Nothing }
                            , Http.post
                                { url = "/api/self-service/update-location"
                                , body =
                                    Http.jsonBody
                                        (E.object
                                            [ ( "orgSlug", E.string orgSlug )
                                            , ( "contactId", E.string (String.fromInt contact.id) )
                                            , ( "zipCode", E.string (Maybe.withDefault "" model.editingZipCode) )
                                            , ( "county", E.string (Maybe.withDefault "" model.editingCounty) )
                                            ]
                                        )
                                , expect = Http.expectJson GotLocationUpdate locationUpdateResponseDecoder
                                }
                            )

                        Nothing ->
                            ( { model | locationUpdateError = Just "Organization ID not found" }
                            , Cmd.none
                            )

                Nothing ->
                    ( { model | locationUpdateError = Just "Contact information not found" }
                    , Cmd.none
                    )

        GotLocationUpdate result ->
            case result of
                Ok response ->
                    if response.success then
                        case response.counties of
                            [] ->
                                -- No counties returned, show error
                                ( { model
                                    | locationUpdateError = Just "No counties found for this ZIP code"
                                    , submittingLocation = False
                                  }
                                , Cmd.none
                                )

                            [ singleCounty ] ->
                                -- Only one county, use it and close modal
                                let
                                    -- Update contact with new location info
                                    updatedContact =
                                        model.contact
                                            |> Maybe.map
                                                (\contact ->
                                                    { contact
                                                        | zipCode = response.zipCode
                                                        , state = response.state
                                                        , county = Just singleCounty
                                                    }
                                                )

                                    updatedModel =
                                        { model
                                            | zip = Just response.zipCode
                                            , state = Just response.state
                                            , county = Just singleCounty
                                            , contact = updatedContact
                                            , showLocationModal = False
                                            , editingZipCode = Nothing
                                            , editingCounty = Nothing
                                            , availableCounties = []
                                            , locationUpdateError = Nothing
                                            , submittingLocation = False
                                        }
                                in
                                -- Reload the page to refresh everything
                                ( updatedModel
                                , Nav.reload
                                )

                            multipleCounties ->
                                -- Multiple counties, show dropdown
                                ( { model
                                    | availableCounties = multipleCounties
                                    , zip = Just response.zipCode
                                    , state = Just response.state
                                    , editingCounty = Nothing
                                    , submittingLocation = False
                                  }
                                , Cmd.none
                                )

                    else
                        ( { model
                            | locationUpdateError = Just "Failed to update location"
                            , submittingLocation = False
                          }
                        , Cmd.none
                        )

                Err error ->
                    ( { model
                        | locationUpdateError = Just (httpErrorToString error)
                        , submittingLocation = False
                      }
                    , Cmd.none
                    )

        ToggleMobileTooltip plan ->
            ( { model | activeTooltipPlan = plan }
            , Cmd.none
            )

        NoOp ->
            ( model, Cmd.none )



-- HELPERS


togglePlanType : PlanType -> PlanType
togglePlanType planType =
    case planType of
        PlanG ->
            PlanN

        PlanN ->
            PlanG


getSelectedPlans : Model -> List Plan
getSelectedPlans model =
    let
        plans =
            case model.selectedPlan of
                Just plan ->
                    [ plan ]

                Nothing ->
                    case model.selectedPlanType of
                        PlanG ->
                            model.plans.planG

                        PlanN ->
                            model.plans.planN

        carrierNaics =
            model.currentCarrier
                |> Maybe.andThen stringToCarrier
                |> Maybe.map carrierToNaics

        filteredPlans =
            case carrierNaics of
                Just naicList ->
                    List.filter
                        (\plan ->
                            not (List.member plan.naic naicList)
                        )
                        plans

                Nothing ->
                    plans

        sortedAndLimited =
            List.sortBy .price filteredPlans
                |> List.take 3
    in
    sortedAndLimited



-- Get the top N cheapest plans for a specific plan type


getTopPlans : Model -> List Plan -> Int -> List Plan
getTopPlans model plans count =
    let
        carrierNaics =
            model.currentCarrier
                |> Maybe.andThen stringToCarrier
                |> Maybe.map carrierToNaics

        filteredPlans =
            case carrierNaics of
                Just naicList ->
                    List.filter
                        (\plan ->
                            not (List.member plan.naic naicList)
                        )
                        plans

                Nothing ->
                    plans
    in
    List.sortBy
        (\plan ->
            {--
            if model.showDiscount then
                plan.priceDiscount

            else
            --}
            plan.price
        )
        filteredPlans
        |> List.take count


httpErrorToString : Http.Error -> String
httpErrorToString error =
    case error of
        Http.BadUrl url ->
            "Bad URL: " ++ url ++ ". Please check the URL and try again."

        Http.Timeout ->
            "Request timed out. The server took too long to respond. Please try again later or check your internet connection."

        Http.NetworkError ->
            "Network error. Unable to connect to the server. Please check your internet connection and try again."

        Http.BadStatus statusCode ->
            "Bad status: " ++ String.fromInt statusCode ++ ". The server returned an unexpected status code. Please try again later or contact support if the issue persists."

        Http.BadBody message ->
            "Bad body: " ++ message ++ ". The server response was not in the expected format. Please try again or contact support if the issue persists."



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    let
        closeModalOnEscape : String -> Msg
        closeModalOnEscape key =
            if key == "Escape" then
                case model of
                    _ ->
                        if model.showLocationModal then
                            CloseEditModal

                        else if model.showGvsNVideo then
                            CloseGvsNVideo

                        else if model.showQualificationVideo then
                            CloseQualificationVideo

                        else if model.showRatesVideo then
                            CloseRatesVideo

                        else if model.showFAQ then
                            CloseFAQ

                        else
                            NoOp

            else
                NoOp

        shouldListenForEscape =
            model.showLocationModal
                || model.showGvsNVideo
                || model.showQualificationVideo
                || model.showRatesVideo
                || model.showFAQ
    in
    if shouldListenForEscape then
        Browser.Events.onKeyDown
            (D.map closeModalOnEscape (D.field "key" D.string))

    else
        Sub.none



-- VIEW


viewPersonalInfo : Model -> Html Msg
viewPersonalInfo model =
    div [ class "flex flex-col gap-4 sm:gap-10" ]
        [ div [ class "bg-white rounded-[10px] border border-[#DCE2E5] shadow-[0_1px_2px_rgba(16,24,40,0.05)]" ]
            [ -- Personal Quote Header
              div [ class "border-b border-[#DCE2E5] bg-[#F9F5FF] px-4 sm:px-6 py-4 rounded-t-[10px]" ]
                [ h2 [ class "text-2xl font-extrabold -tracking-[0.04em] text-[#101828] leading-[1.2]" ] [ text "Personal Quote" ]
                ]
            , div
                [ class "p-4 sm:p-6 flex flex-col sm:flex-row sm:justify-between sm:items-start gap-4 sm:gap-6 bg-white rounded-b-[10px]" ]
                [ div [ class "flex flex-col sm:flex-row gap-4 sm:gap-12" ]
                    [ -- Quote For section
                      div [ class "flex flex-col" ]
                        [ div [ class "mb-2" ]
                            [ p [ class "text-sm text-[#667085] mb-1" ] [ text "Quote For" ]
                            , p [ class "text-[16px] font-medium" ] [ text (Maybe.withDefault "Loading..." model.name) ]
                            , p [ class "text-[12px] text-[#667085]" ]
                                [ text
                                    (if String.contains "F" (model.gender |> Maybe.withDefault "" |> String.toUpper) then
                                        "F"

                                     else
                                        "M"
                                    )
                                , span [ class "text-[#475569] mx-2 font-medium" ] [ text "│" ]
                                , text
                                    (if Maybe.withDefault False model.tobacco then
                                        "Tobacco"

                                     else
                                        "Non-Tobacco"
                                    )
                                , span [ class "text-[#475569] mx-2 font-medium" ] [ text "│" ]
                                , text (String.fromInt (Maybe.withDefault 0 model.age))
                                , text " years"
                                , span [ class "text-[#475569] mx-2 font-medium" ] [ text "│" ]
                                , text (Maybe.withDefault "" model.state)
                                , text " "
                                , text (Maybe.withDefault "" model.zip)
                                ]
                            ]
                        , div [ class "flex flex-col gap-2" ]
                            [ div [ class "flex gap-2" ]
                                [ case model.effectiveDate of
                                    Just date ->
                                        p [ class "text-xs text-[#667085]" ]
                                            [ span [ class "font-medium" ] [ text "Effective Date: " ]
                                            , text (date |> Date.toIsoString |> formatEffectiveDate)
                                            ]

                                    Nothing ->
                                        text ""
                                , button [ class "text-xs text-[#2563EB] underline text-left", onClick ShowLocationModal ] [ text "Change" ]
                                ]
                            , div [ class "hidden sm:block" ]
                                [ div [ class "flex flex-col mt-4 gap-1" ]
                                    [ p [ class "text-xs text-[#667085]" ] [ text "Need a Quote for Someone else?" ]
                                    , a [ href ("/self-onboarding/" ++ Maybe.withDefault "" model.orgSlug), class "text-xs text-[#667085] underline" ] [ text "Start Here" ]
                                    ]
                                ]
                            ]
                        ]

                    -- Mobile divider
                    , div [ class "block sm:hidden h-[1px] bg-[#DCE2E5] my-4" ] []

                    -- Desktop divider
                    , div [ class "hidden sm:block w-[1px] bg-[#DCE2E5]" ] []

                    -- Quote From section
                    , div [ class "flex flex-col min-w-[200px]" ]
                        [ p [ class "text-sm text-[#667085] mb-1" ] [ text "Quote From" ]
                        , if model.useOrg then
                            -- Organization information
                            div []
                                [ case model.orgSignatureText of
                                    Just signature ->
                                        div [ class "mb-2" ]
                                            [ text signature ]

                                    Nothing ->
                                        p [ class "text-[16px] font-medium mb-2" ]
                                            [ text (Maybe.withDefault "Organization" model.orgName) ]
                                , case model.orgPhone of
                                    Just phone ->
                                        div [ class "flex flex-col gap-3" ]
                                            [ a
                                                [ href ("tel:" ++ String.filter (\c -> c >= '0' && c <= '9') phone)
                                                , class "flex items-center gap-1.5 bg-[#F9F5FF] px-2.5 py-2 rounded hover:bg-[#F4EBFF] transition-colors min-w-[200px] w-fit"
                                                ]
                                                [ svg [ Svg.Attributes.width "16", Svg.Attributes.height "16", Svg.Attributes.viewBox "0 0 12 12", Svg.Attributes.fill "none" ]
                                                    [ path
                                                        [ Svg.Attributes.fillRule "evenodd"
                                                        , Svg.Attributes.clipRule "evenodd"
                                                        , Svg.Attributes.d "M1.75442 1.13022C2.80442 0.0802194 4.57692 0.160219 5.30817 1.47022L5.7138 2.19709C6.19067 3.05209 5.98755 4.13147 5.2888 4.83897C5.24752 4.90156 5.22497 4.97463 5.2238 5.04959C5.21567 5.20959 5.27255 5.58022 5.84692 6.15397C6.42067 6.72772 6.79067 6.78522 6.9513 6.77709C7.02626 6.77592 7.09934 6.75337 7.16192 6.71209C7.8688 6.01334 8.9488 5.81022 9.8038 6.28709L10.5307 6.69334C11.8407 7.42459 11.9207 9.19584 10.8707 10.2465C10.3088 10.8077 9.56255 11.3071 8.68442 11.3402C7.38442 11.3896 5.22442 11.0533 3.08567 8.91522C0.947548 6.77647 0.611298 4.61709 0.660673 3.31647C0.693798 2.43834 1.19317 1.69147 1.75442 1.13022ZM4.48942 1.92709C4.11442 1.25584 3.10817 1.10209 2.41755 1.79334C1.93317 2.27772 1.61755 2.81209 1.59755 3.35147C1.5563 4.43647 1.82442 6.32772 3.7488 8.25147C5.6738 10.1765 7.56442 10.4446 8.6488 10.4033C9.18817 10.3827 9.7238 10.0677 10.2075 9.58334C10.8988 8.89209 10.745 7.88584 10.0738 7.51147L9.34692 7.10584C8.89505 6.85397 8.25942 6.93959 7.8138 7.38584C7.77005 7.42959 7.4913 7.68959 6.99692 7.71334C6.49067 7.73834 5.87755 7.51084 5.18442 6.81709C4.49005 6.12334 4.26255 5.51022 4.28755 5.00334C4.3113 4.50897 4.57192 4.23022 4.61505 4.18647C5.0613 3.74084 5.14692 3.10584 4.89505 2.65397L4.48942 1.92709Z"
                                                        , Svg.Attributes.fill "#03045E"
                                                        ]
                                                        []
                                                    ]
                                                , span [ class "text-sm text-[#03045E]" ]
                                                    [ text (formatPhoneNumber phone) ]
                                                ]
                                            ]

                                    Nothing ->
                                        text ""
                                ]

                          else
                            -- Agent information
                            div []
                                [ p [ class "text-[16px] font-medium mb-2" ]
                                    [ text
                                        (case model.agent of
                                            Just agent ->
                                                agent.firstName ++ " " ++ agent.lastName

                                            Nothing ->
                                                "Loading..."
                                        )
                                    ]
                                , div [ class "flex flex-col gap-3" ]
                                    [ a
                                        [ href
                                            (case model.agent of
                                                Just agent ->
                                                    "mailto:" ++ agent.email

                                                Nothing ->
                                                    "#"
                                            )
                                        , class "flex items-center gap-1.5 bg-[#F9F5FF] px-2.5 py-2 rounded hover:bg-[#F4EBFF] transition-colors min-w-[200px] w-fit"
                                        ]
                                        [ svg [ Svg.Attributes.width "16", Svg.Attributes.height "16", Svg.Attributes.viewBox "0 0 12 12", Svg.Attributes.fill "none" ]
                                            [ path [ Svg.Attributes.d "M1 6C1 4.1145 1 3.1715 1.586 2.586C2.1715 2 3.1145 2 5 2H7C8.8855 2 9.8285 2 10.414 2.586C11 3.1715 11 4.1145 11 6C11 7.8855 11 8.8285 10.414 9.414C9.8285 10 8.8855 10 7 10H5C3.1145 10 2.1715 10 1.586 9.414C1 8.8285 1 7.8855 1 6Z", Svg.Attributes.stroke "#03045E" ] []
                                            , path [ Svg.Attributes.d "M3 4L4.0795 4.9C4.998 5.665 5.457 6.0475 6 6.0475C6.543 6.0475 7.0025 5.665 7.9205 4.8995L9 4", Svg.Attributes.stroke "#03045E", Svg.Attributes.strokeLinecap "round", Svg.Attributes.strokeLinejoin "round" ] []
                                            ]
                                        , span [ class "text-sm text-[#03045E]" ]
                                            [ text
                                                (case model.agent of
                                                    Just agent ->
                                                        agent.email

                                                    Nothing ->
                                                        "Loading..."
                                                )
                                            ]
                                        ]
                                    , a
                                        [ href
                                            (case model.agent of
                                                Just agent ->
                                                    "tel:" ++ String.filter (\c -> c >= '0' && c <= '9') agent.phone

                                                Nothing ->
                                                    "#"
                                            )
                                        , class "flex items-center gap-1.5 bg-[#F9F5FF] px-2.5 py-2 rounded hover:bg-[#F4EBFF] transition-colors min-w-[200px] w-fit"
                                        ]
                                        [ svg [ Svg.Attributes.width "16", Svg.Attributes.height "16", Svg.Attributes.viewBox "0 0 12 12", Svg.Attributes.fill "none" ]
                                            [ path
                                                [ Svg.Attributes.fillRule "evenodd"
                                                , Svg.Attributes.clipRule "evenodd"
                                                , Svg.Attributes.d "M1.75442 1.13022C2.80442 0.0802194 4.57692 0.160219 5.30817 1.47022L5.7138 2.19709C6.19067 3.05209 5.98755 4.13147 5.2888 4.83897C5.24752 4.90156 5.22497 4.97463 5.2238 5.04959C5.21567 5.20959 5.27255 5.58022 5.84692 6.15397C6.42067 6.72772 6.79067 6.78522 6.9513 6.77709C7.02626 6.77592 7.09934 6.75337 7.16192 6.71209C7.8688 6.01334 8.9488 5.81022 9.8038 6.28709L10.5307 6.69334C11.8407 7.42459 11.9207 9.19584 10.8707 10.2465C10.3088 10.8077 9.56255 11.3071 8.68442 11.3402C7.38442 11.3896 5.22442 11.0533 3.08567 8.91522C0.947548 6.77647 0.611298 4.61709 0.660673 3.31647C0.693798 2.43834 1.19317 1.69147 1.75442 1.13022ZM4.48942 1.92709C4.11442 1.25584 3.10817 1.10209 2.41755 1.79334C1.93317 2.27772 1.61755 2.81209 1.59755 3.35147C1.5563 4.43647 1.82442 6.32772 3.7488 8.25147C5.6738 10.1765 7.56442 10.4446 8.6488 10.4033C9.18817 10.3827 9.7238 10.0677 10.2075 9.58334C10.8988 8.89209 10.745 7.88584 10.0738 7.51147L9.34692 7.10584C8.89505 6.85397 8.25942 6.93959 7.8138 7.38584C7.77005 7.42959 7.4913 7.68959 6.99692 7.71334C6.49067 7.73834 5.87755 7.51084 5.18442 6.81709C4.49005 6.12334 4.26255 5.51022 4.28755 5.00334C4.3113 4.50897 4.57192 4.23022 4.61505 4.18647C5.0613 3.74084 5.14692 3.10584 4.89505 2.65397L4.48942 1.92709Z"
                                                , Svg.Attributes.fill "#03045E"
                                                ]
                                                []
                                            ]
                                        , span [ class "text-sm text-[#03045E]" ]
                                            [ text
                                                (case model.agent of
                                                    Just agent ->
                                                        formatPhoneNumber agent.phone

                                                    Nothing ->
                                                        "Loading..."
                                                )
                                            ]
                                        ]
                                    ]
                                ]
                        ]

                    -- Desktop divider before video
                    , div [ class "hidden sm:block w-[1px] bg-[#DCE2E5]" ] []

                    -- Video button section
                    , div [ class "hidden sm:flex flex-col justify-center items-center cursor-pointer gap-2 bg-[#F9F5FF] rounded-[10px] p-4 border border-[#DCE2E5] min-w-[200px] min-h-[160px]", onClick OpenGvsNVideo ]
                        [ p [ class "text-base font-bold text-[#03045E] -tracking-[0.03em] leading-[1.21] text-center" ] [ text "Learn About Plan G vs Plan N" ]
                        , div [ class "w-[33px] h-[33px] rounded-full border border-[#03045E] flex items-center justify-center" ]
                            [ div [ class "w-0 h-0 border-t-[8px] border-t-transparent border-l-[12px] border-l-[#03045E] border-b-[8px] border-b-transparent ml-1" ] []
                            ]
                        , p [ class "text-xs text-[#667085] -tracking-[0.03em] leading-[1.21] text-center" ] [ text "Watch the Video" ]
                        ]
                    ]
                ]
            , div [ class "block sm:hidden mt-2 mb-6 justify-center flex items-center w-full" ]
                [ div [ class "text-sm text-[#667085] text-center flex flex-wrap justify-center items-center gap-1" ]
                    [ text "Need a Quote for Someone else? "
                    , a [ href ("/self-onboarding/" ++ Maybe.withDefault "" model.orgSlug), class " underline" ] [ text "Start Here" ]
                    ]
                ]
            ]
        ]


viewPlanCard : Model -> String -> Plan -> Html Msg
viewPlanCard model planTypeCode plan =
    let
        isSelected =
            model.selectedPlan == Just plan

        ( badgeTextColor, badgeBgColor ) =
            if planTypeCode == "G" then
                ( "text-[#363F72]", "bg-[#F8F9FC]" )

            else
                ( "text-[#363F72]", "bg-[#F8F9FC]" )

        borderClass =
            if isSelected then
                "border-2 border-[#2563EB]"

            else
                "border border-[#D4D4D4]"

        isTooltipActive =
            case model.activeTooltipPlan of
                Just activePlan ->
                    activePlan.id == plan.id

                Nothing ->
                    False
    in
    div [ class "flex flex-col" ]
        [ div
            [ class ("relative bg-white rounded-lg " ++ borderClass ++ " overflow-hidden cursor-pointer w-[calc(100vw-72px)] sm:w-[340px]")
            , onClick (SelectPlanCard plan)
            ]
            [ -- Top row with Plan type badge and radio
              div [ class "flex items-center justify-between p-2 sm:p-4" ]
                [ div [ class ("px-2.5 py-0.5 rounded-lg text-xs font-medium leading-5 " ++ badgeTextColor ++ " " ++ badgeBgColor) ]
                    [ text ("PLAN " ++ planTypeCode) ]
                , div [ class "flex items-center gap-1.5" ]
                    [ span [ class "text-sm sm:text-sm font-medium text-[#667085]" ] [ text "Select This Plan" ]
                    , if isSelected then
                        svg [ Svg.Attributes.width "18", Svg.Attributes.height "19", Svg.Attributes.viewBox "0 0 14 15", Svg.Attributes.fill "none" ]
                            [ Svg.rect [ Svg.Attributes.x "0.5", Svg.Attributes.y "1", Svg.Attributes.width "13", Svg.Attributes.height "13", Svg.Attributes.rx "6.5", Svg.Attributes.fill "#F9F5FF" ] []
                            , Svg.rect [ Svg.Attributes.x "0.5", Svg.Attributes.y "1", Svg.Attributes.width "13", Svg.Attributes.height "13", Svg.Attributes.rx "6.5", Svg.Attributes.stroke "#7F56D9" ] []
                            , Svg.path [ Svg.Attributes.d "M10.5 5.25L6 9.75L3.5 7.25", Svg.Attributes.stroke "#7F56D9", Svg.Attributes.strokeWidth "1.6666", Svg.Attributes.strokeLinecap "round", Svg.Attributes.strokeLinejoin "round" ] []
                            ]

                      else
                        svg [ Svg.Attributes.width "18", Svg.Attributes.height "19", Svg.Attributes.viewBox "0 0 14 15", Svg.Attributes.fill "none" ]
                            [ Svg.rect [ Svg.Attributes.x "0.5", Svg.Attributes.y "1", Svg.Attributes.width "13", Svg.Attributes.height "13", Svg.Attributes.rx "6.5", Svg.Attributes.fill "white" ] []
                            , Svg.rect [ Svg.Attributes.x "0.5", Svg.Attributes.y "1", Svg.Attributes.width "13", Svg.Attributes.height "13", Svg.Attributes.rx "6.5", Svg.Attributes.stroke "#D4D4D4" ] []
                            ]
                    ]
                ]

            -- Carrier Logo
            , div [ class "px-4 flex justify-center items-center min-h-[120px] py-4" ]
                [ img [ src plan.image, alt (plan.name ++ " logo"), class "h-20 max-w-[240px] object-contain" ] [] ]

            -- Rates
            , div [ class "flex justify-between items-center px-6 py-4 bg-[#F9FAFB]" ]
                [ div [ class "flex items-center" ]
                    [ span [ class "text-sm font-medium text-[#667085]" ] [ text "Standard:" ]
                    , span [ class "text-lg font-bold text-[#667085] ml-1" ] [ text ("$" ++ String.fromInt (floor plan.price)) ]
                    ]
                , div [ class "flex items-center" ]
                    [ div [ class "w-[1px] h-[24px] bg-[#DCE2E5] mx-4" ] [] ]
                , div [ class "flex items-center relative group" ]
                    [ span [ class "text-sm font-medium text-[#667085]" ] [ text "Discount:" ]
                    , span [ class "text-lg font-bold text-[#667085] ml-1" ] [ text ("$" ++ String.fromInt (floor plan.priceDiscount)) ]
                    , case plan.discountDescription of
                        Just description ->
                            div [ class "inline-flex ml-1 relative" ]
                                [ -- Desktop hover tooltip (hidden on mobile)
                                  div [ class "hidden sm:inline-flex text-blue-500 cursor-help" ]
                                    [ svg [ Svg.Attributes.width "16", Svg.Attributes.height "16", Svg.Attributes.viewBox "0 0 24 24", Svg.Attributes.fill "none" ]
                                        [ Svg.circle [ Svg.Attributes.cx "12", Svg.Attributes.cy "12", Svg.Attributes.r "10", Svg.Attributes.stroke "currentColor", Svg.Attributes.strokeWidth "2" ] []
                                        , Svg.path [ Svg.Attributes.d "M12 8v4", Svg.Attributes.stroke "currentColor", Svg.Attributes.strokeWidth "2", Svg.Attributes.strokeLinecap "round" ] []
                                        , Svg.path [ Svg.Attributes.d "M12 16h.01", Svg.Attributes.stroke "currentColor", Svg.Attributes.strokeWidth "2", Svg.Attributes.strokeLinecap "round" ] []
                                        ]
                                    , div [ class "absolute bottom-full mb-2 right-0 w-48 p-2 bg-gray-800 text-white text-xs rounded shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200" ]
                                        [ text description
                                        , div [ class "absolute right-3 top-full -mt-1 border-4 border-transparent border-t-gray-800" ] []
                                        ]
                                    ]

                                -- Mobile tap tooltip icon (hidden on desktop)
                                , div
                                    [ class "sm:hidden inline-flex text-blue-500 cursor-pointer z-10"
                                    , Html.Events.stopPropagationOn "click"
                                        (D.succeed ( ToggleMobileTooltip (Just plan), True ))
                                    ]
                                    [ svg [ Svg.Attributes.width "16", Svg.Attributes.height "16", Svg.Attributes.viewBox "0 0 24 24", Svg.Attributes.fill "none" ]
                                        [ Svg.circle [ Svg.Attributes.cx "12", Svg.Attributes.cy "12", Svg.Attributes.r "10", Svg.Attributes.stroke "currentColor", Svg.Attributes.strokeWidth "2" ] []
                                        , Svg.path [ Svg.Attributes.d "M12 8v4", Svg.Attributes.stroke "currentColor", Svg.Attributes.strokeWidth "2", Svg.Attributes.strokeLinecap "round" ] []
                                        , Svg.path [ Svg.Attributes.d "M12 16h.01", Svg.Attributes.stroke "currentColor", Svg.Attributes.strokeWidth "2", Svg.Attributes.strokeLinecap "round" ] []
                                        ]
                                    ]
                                ]

                        Nothing ->
                            text ""
                    ]
                ]
            ]
        , div
            [ class
                ("overflow-hidden transition-all duration-300 ease-in-out "
                    ++ (if isSelected then
                            "max-h-[100px] opacity-100 mt-8 mb-8"

                        else
                            "max-h-0 opacity-0 mt-0 mb-0"
                       )
                )
            ]
            [ div [ class "flex justify-center" ]
                [ button
                    [ class "w-[200px] bg-[#03045E] text-white text-sm font-medium px-4 py-4 rounded-lg hover:bg-[#02034D] transition-colors"
                    , onClick (SelectPlan plan)
                    ]
                    [ text "See if I Qualify" ]
                ]
            ]
        ]


viewPlansSection : Model -> Html Msg
viewPlansSection model =
    div [ class "flex flex-col gap-4 sm:gap-0" ]
        [ -- Plan G Section - Desktop and Mobile
          div [ class "bg-white rounded-[10px] border border-[#DCE2E5] shadow-[0_1px_2px_rgba(16,24,40,0.05)]" ]
            [ -- Header (desktop only)
              div [ class "hidden sm:flex px-4 sm:px-6 py-4 flex-row items-center justify-between border-b border-[#DCE2E5] bg-[#F9F5FF] rounded-t-[10px]" ]
                [ div [ class "flex items-end gap-3" ]
                    [ h2 [ class "text-2xl font-extrabold -tracking-[0.04em] text-[#101828] leading-[1.2]" ] [ text "Recommended Plans for You" ]
                    , p [ class "text-[16px] font-medium text-[#667085] -tracking-[0.04em] leading-[1.2] pb-[2px]" ] [ text "Select one to see if you qualify" ]
                    ]
                ]

            -- Mobile header
            , div [ class "block sm:hidden px-4 py-4 border-b border-[#DCE2E5] bg-[#F9F5FF] rounded-t-[10px]" ]
                [ h2 [ class "text-2xl font-extrabold -tracking-[0.04em] text-[#101828] leading-[1.2]" ] [ text "Recommended Plans" ]
                , p [ class "text-[16px] font-medium text-[#667085] -tracking-[0.04em] leading-[1.2]" ] [ text "Select one to continue" ]
                ]

            -- Plan G Section
            , div [ class "px-3 sm:px-4 py-6 bg-white" ]
                [ h3 [ class "text-xl font-extrabold -tracking-[0.02em] mb-6 text-[#101828]" ] [ text "Plan G Monthly Premiums" ]
                , div [ class "flex flex-wrap gap-8 justify-center sm:justify-start sm:pl-8" ]
                    (List.map (viewPlanCard model "G") (getTopPlans model model.plans.planG 3))
                ]
            ]

        -- Mobile video button (standalone between Plan G and Plan N)
        , div [ class "block sm:hidden py-4 px-3" ]
            [ div [ class "mx-auto max-w-[280px] bg-[#F9F5FF] rounded-[10px] p-4 flex flex-row items-center cursor-pointer gap-4", onClick OpenGvsNVideo ]
                [ div [ class "w-[33px] h-[33px] rounded-full border border-[#03045E] flex items-center justify-center flex-shrink-0" ]
                    [ div [ class "w-0 h-0 border-t-[8px] border-t-transparent border-l-[12px] border-l-[#03045E] border-b-[8px] border-b-transparent ml-1" ] []
                    ]
                , div [ class "flex flex-col items-start" ]
                    [ p [ class "text-[16px] font-bold text-[#03045E] -tracking-[0.03em] leading-[1.21] text-left" ] [ text "Learn About Plan G vs N" ]
                    , p [ class "text-[12px] text-[#667085] -tracking-[0.03em] leading-[1.21]" ] [ text "Watch the Video" ]
                    ]
                ]
            ]

        -- Plan N Section (separate container for mobile)
        , div [ class "bg-white rounded-[10px] border border-[#DCE2E5] shadow-[0_1px_2px_rgba(16,24,40,0.05)]" ]
            [ -- Plan N Section Header (Mobile only)
              div [ class "block sm:hidden px-4 py-4 border-b border-[#DCE2E5] bg-[#F9F5FF] rounded-t-[10px]" ]
                [ h2 [ class "text-2xl font-extrabold -tracking-[0.04em] text-[#101828] leading-[1.2]" ] [ text "Plan N Options" ]
                ]

            -- Plan N Content
            , div [ class "px-3 sm:px-4 py-6 bg-white" ]
                [ h3 [ class "text-xl font-extrabold -tracking-[0.02em] mb-6 text-[#101828]" ] [ text "Plan N Monthly Premiums" ]
                , div [ class "flex flex-wrap gap-8 justify-center sm:justify-start sm:pl-8" ]
                    (List.map (viewPlanCard model "N") (getTopPlans model model.plans.planN 3))
                ]
            ]

        -- Medicare Advantage Off Ramp Section
        , viewMedicareAdvantageOffRamp model
        ]



-- Medicare Advantage Off Ramp component


viewMedicareAdvantageOffRamp : Model -> Html Msg
viewMedicareAdvantageOffRamp model =
    div [ class "bg-white rounded-[10px] border border-[#DCE2E5] shadow-[0_1px_2px_rgba(16,24,40,0.05)] mt-6" ]
        [ div [ class "px-4 sm:px-6 py-4 sm:py-5 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 sm:gap-0" ]
            [ div [ class "flex items-start gap-4" ]
                [ -- Icon for the section
                  div [ class "w-12 h-12 rounded-full bg-[#F9F5FF] flex items-center justify-center flex-shrink-0" ]
                    [ svg [ Svg.Attributes.width "26", Svg.Attributes.height "26", Svg.Attributes.viewBox "0 0 24 24", Svg.Attributes.fill "none" ]
                        [ path
                            [ Svg.Attributes.d "M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"
                            , Svg.Attributes.stroke "#7F56D9"
                            , Svg.Attributes.strokeWidth "2"
                            , Svg.Attributes.strokeLinecap "round"
                            , Svg.Attributes.strokeLinejoin "round"
                            ]
                            []
                        , path
                            [ Svg.Attributes.d "M12 8V12"
                            , Svg.Attributes.stroke "#7F56D9"
                            , Svg.Attributes.strokeWidth "2"
                            , Svg.Attributes.strokeLinecap "round"
                            , Svg.Attributes.strokeLinejoin "round"
                            ]
                            []
                        , path
                            [ Svg.Attributes.d "M12 16H12.01"
                            , Svg.Attributes.stroke "#7F56D9"
                            , Svg.Attributes.strokeWidth "2"
                            , Svg.Attributes.strokeLinecap "round"
                            , Svg.Attributes.strokeLinejoin "round"
                            ]
                            []
                        ]
                    ]
                , div [ class "flex flex-col" ]
                    [ h3 [ class "text-lg sm:text-xl font-bold text-[#101828] -tracking-[0.02em]" ]
                        [ text "Looking to dramatically lower your monthly costs?" ]
                    , p [ class "text-sm sm:text-base text-[#667085]" ]
                        [ text "Medicare Advantage plans offer $0 monthly premiums with drug coverage included. These plans have improved a lot over recent years, with more benefits and flexibility than ever. If saving money is your priority, let's find the right plan for you." ]
                    ]
                ]
            , div [ class "sm:ml-4 flex justify-center sm:justify-start" ]
                [ a
                    [ href
                        (case model.quoteId of
                            Just id ->
                                let
                                    orgQ =
                                        String.split "-" id
                                            |> List.head
                                            |> Maybe.map
                                                (\org ->
                                                    "?org=" ++ org ++ "&"
                                                )
                                            |> Maybe.withDefault "?"
                                in
                                "/schedule" ++ orgQ ++ "id=" ++ id ++ "&status=decline"

                            Nothing ->
                                "/contact"
                        )
                    , class "whitespace-nowrap bg-[#03045E] text-white px-5 sm:px-4 py-3 sm:py-2 rounded-lg hover:bg-[#02034D] transition-colors text-sm sm:text-base w-full sm:w-auto text-center"
                    ]
                    [ text "Explore Options" ]
                ]
            ]
        ]


view : Model -> Browser.Document Msg
view model =
    { title = "Quote - Medicare Max"
    , body =
        [ viewHeader model.orgLogo model.orgName
        , div [ class "bg-white min-h-screen pb-12 scroll-smooth" ]
            [ if model.loadingContact || model.isLoading then
                viewLoading

              else
                div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3 space-y-8 sm:space-y-10" ]
                    [ -- Personal Quote Card
                      viewPersonalInfo model

                    -- Plans Section (mobile video button moved inside viewPlansSection)
                    , viewPlansSection model
                    ]
            ]
        , viewGvsNModal model
        , viewQualificationModal model
        , viewRatesModal model
        , viewLocationModal model
        , viewMobileTooltip model
        ]
    }


viewLoading : Html Msg
viewLoading =
    div [ class "fixed inset-0 bg-white flex flex-col items-center justify-center gap-4 text-center" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-4 border-purple-600 border-t-transparent" ] []
        , p [ class "text-center text-lg font-medium text-gray-600" ]
            [ text "Loading your personalized quote..." ]
        , div
            [ class "sm:hidden opacity-0 transition-opacity duration-500 delay-[10000ms] mt-6 px-4 max-w-xs text-center text-sm text-gray-500"
            , style "animation" "fadeIn 0.5s 5s forwards"
            ]
            [ text "If page fails to load, please try refreshing or opening in your device's default browser." ]
        , Html.node "style"
            []
            [ text """
                @keyframes fadeIn {
                    from { opacity: 0; }
                    to { opacity: 1; }
                }
              """
            ]
        ]


viewError : String -> Maybe String -> Html Msg
viewError error orgSlug =
    div [ class "fixed inset-0 bg-white flex flex-col items-center justify-center gap-6 text-center px-4" ]
        [ div [ class "max-w-lg" ]
            [ h1 [ class "text-2xl font-semibold text-[#1A1A1A] mb-4" ]
                [ text "Unable to Load Quote" ]
            , p [ class "text-lg text-gray-600 mb-8" ]
                [ text "This quote link appears to be invalid or has expired. Please get a new quote to continue." ]
            , case orgSlug of
                Just slug ->
                    a
                        [ href ("/self-onboarding/" ++ slug)
                        , class "inline-block bg-[#03045E] text-white text-sm font-medium px-6 py-3 rounded hover:bg-[#02034D] transition-colors"
                        ]
                        [ text "Get a New Quote" ]

                Nothing ->
                    text ""
            ]
        ]


viewGvsNModal : Model -> Html Msg
viewGvsNModal model =
    if model.showGvsNVideo then
        div [ class "fixed inset-0 bg-black/30 flex items-center justify-center z-50 p-4 backdrop-blur-sm" ]
            [ div [ class "bg-white rounded-lg p-4 pt-8 sm:p-8 w-[95%] h-auto max-w-5xl mx-auto shadow-lg relative" ]
                [ button
                    [ class "absolute top-4 right-4 text-gray-500 hover:text-gray-700 text-xl p-1"
                    , onClick CloseGvsNVideo
                    ]
                    [ text "×" ]
                , h2 [ class "text-xl sm:text-2xl font-bold mb-1 sm:mb-2 text-center" ] [ text "Plan G vs. Plan N" ]
                , p [ class "mb-2 text-center text-sm sm:text-base" ] [ text "Watch this video to learn about the key differences between plans" ]
                , div [ class "w-full mx-auto my-auto h-[450px] sm:h-[500px] mt-2 sm:mt-4 sm:max-w-[90%]" ]
                    [ div [ class "w-full h-full" ]
                        [ iframe
                            -- [ src "https://player.vimeo.com/video/1075091871?autoplay=0&title=0&byline=0&portrait=0&responsive=1" -- education example
                            [ src "https://player.vimeo.com/video/1018402330?autoplay=0&title=0&byline=0&portrait=0&responsive=1"
                            , class "w-full h-full"
                            , attribute "frameborder" "0"
                            , attribute "allow" "autoplay; fullscreen; picture-in-picture"
                            , attribute "allowfullscreen" ""
                            ]
                            []
                        ]
                    ]
                ]
            ]

    else
        text ""


viewQualificationModal : Model -> Html Msg
viewQualificationModal model =
    if model.showQualificationVideo then
        div [ class "fixed inset-0 bg-black/30 flex items-center justify-center z-50 p-4 backdrop-blur-sm" ]
            [ div [ class "bg-white rounded-lg p-4 sm:p-8 w-[95%] max-w-5xl mx-auto shadow-lg" ]
                [ button
                    [ class "absolute top-2 right-2 text-gray-500 hover:text-gray-700 text-xl p-1"
                    , onClick CloseQualificationVideo
                    ]
                    [ text "×" ]
                , h1 [ class "text-xl sm:text-2xl font-bold mb-2 sm:mb-4 text-center" ] [ text "Great Choice!" ]
                , h2 [ class "text-lg sm:text-xl font-bold mb-2 sm:mb-4 text-center" ] [ text "Now let's see if you qualify" ]
                , p [ class "mb-3 sm:mb-4 text-center text-sm sm:text-base" ] [ text "Watch this video to understand the process of qualifying for the plan you selected" ]
                , div [ class "w-full max-w-3xl mx-auto" ]
                    [ div [ class "relative", style "padding-top" "100%" ]
                        [ iframe
                            [ src "https://player.vimeo.com/video/1018421414?autoplay=0&title=0&byline=0&portrait=0&responsive=1"
                            , class "w-full h-full absolute top-0 left-0"
                            , attribute "frameborder" "0"
                            , attribute "allow" "autoplay; fullscreen; picture-in-picture"
                            , attribute "allowfullscreen" ""
                            ]
                            []
                        ]
                    ]
                , button
                    [ class "bg-purple-500 text-white px-4 sm:px-6 py-2 rounded hover:bg-purple-600 mt-4 w-full sm:w-auto"
                    , onClick CloseQualificationVideo
                    ]
                    [ text "Continue" ]
                ]
            ]

    else
        text ""


viewRatesModal : Model -> Html Msg
viewRatesModal model =
    if model.showRatesVideo then
        let
            rateText =
                case List.head (getSelectedPlans model) of
                    Just plan ->
                        "$" ++ String.fromFloat plan.price

                    Nothing ->
                        ""

            countyText =
                Maybe.withDefault "" model.county

            stateText =
                Maybe.withDefault "" model.state

            planTypeText =
                case model.selectedPlanType of
                    PlanG ->
                        "Plan G"

                    PlanN ->
                        "Plan N"
        in
        div [ class "fixed inset-0 bg-black/30 flex items-center justify-center z-50 p-4 backdrop-blur-sm" ]
            [ div [ class "bg-white rounded-lg p-4 sm:p-8 w-[95%] max-w-5xl mx-auto shadow-lg" ]
                [ button
                    [ class "absolute top-2 right-2 text-gray-500 hover:text-gray-700 text-xl p-1"
                    , onClick CloseRatesVideo
                    ]
                    [ text "×" ]
                , h1 [ class "text-xl sm:text-2xl font-bold mb-2 sm:mb-4 text-center" ] [ text "Good News!" ]
                , h2 [ class "text-base sm:text-xl font-bold mb-2 sm:mb-4 text-center leading-tight" ]
                    [ text ("We found " ++ planTypeText ++ " options as low as " ++ rateText ++ " in " ++ countyText ++ " County, " ++ stateText) ]
                , p [ class "mb-3 sm:mb-4 text-center text-sm sm:text-base" ] [ text "Watch this quick video for 3 things to consider while reviewing your quotes" ]
                , div [ class "w-full max-w-3xl mx-auto" ]
                    [ div [ class "relative", style "padding-top" "100%" ]
                        [ iframe
                            [ src "https://player.vimeo.com/video/1018421439?autoplay=0&title=0&byline=0&portrait=0&responsive=1"
                            , class "w-full h-full absolute top-0 left-0"
                            , attribute "frameborder" "0"
                            , attribute "allow" "autoplay; fullscreen; picture-in-picture"
                            , attribute "allowfullscreen" ""
                            ]
                            []
                        ]
                    ]
                , button
                    [ class "bg-purple-500 text-white px-4 sm:px-6 py-2 rounded hover:bg-purple-600 mt-4 w-full sm:w-auto"
                    , onClick CloseRatesVideo
                    ]
                    [ text "Continue" ]
                ]
            ]

    else
        text ""


viewLocationModal : Model -> Html Msg
viewLocationModal model =
    if model.showLocationModal then
        div [ class "fixed inset-0 bg-black/30 flex items-center justify-center z-50 p-4 backdrop-blur-sm" ]
            [ div [ class "bg-white rounded-lg p-6 w-[95%] max-w-md mx-auto shadow-lg" ]
                [ div [ class "flex justify-between items-center mb-4" ]
                    [ h2 [ class "text-xl font-extrabold -tracking-[0.04em] text-[#101828]" ] [ text "Update" ]
                    , button
                        [ class "text-[#667085] hover:text-[#101828] transition-colors"
                        , onClick CloseEditModal
                        ]
                        [ text "×" ]
                    ]
                , case ( model.effectiveDate, model.currentDate ) of
                    ( Just effectiveDate, Just currentDate ) ->
                        let
                            defaultEffectiveDate =
                                model.editingEffectiveDate
                                    |> Maybe.withDefault (Date.toIsoString effectiveDate)
                        in
                        div [ class "mb-4" ]
                            [ label [ class "block text-sm font-medium text-[#667085] mb-1" ]
                                [ text "Effective Date" ]
                            , select
                                [ class "w-full px-3 py-2 border border-[#DCE2E5] rounded-md focus:outline-none focus:ring-1 focus:ring-[#03045E] focus:border-[#03045E]"
                                , onInput UpdateEffectiveDate
                                , value defaultEffectiveDate
                                ]
                                (List.map
                                    (\date ->
                                        option
                                            [ value date, selected (date == defaultEffectiveDate) ]
                                            [ text (formatEffectiveDate date) ]
                                    )
                                    (getNextEffectiveDates currentDate 4)
                                )
                            ]

                    _ ->
                        text ""
                , if model.locationUpdateError /= Nothing then
                    div [ class "mb-4 text-red-600 text-sm" ]
                        [ text (Maybe.withDefault "" model.locationUpdateError) ]

                  else
                    text ""
                , div [ class "flex justify-center" ]
                    [ button
                        [ class "px-4 py-2 bg-[#03045E] text-white rounded hover:bg-[#02034D] transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center min-w-[80px]"
                        , onClick CloseEditModalAndFetchPlans
                        , disabled
                            (String.length (Maybe.withDefault "" model.editingZipCode)
                                /= 5
                                || (not (List.isEmpty model.availableCounties)
                                        && Maybe.withDefault "" model.editingCounty
                                        == ""
                                   )
                                || model.submittingLocation
                            )
                        ]
                        [ if model.submittingLocation then
                            div [ class "animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2" ] []

                          else
                            text ""
                        , text
                            (if model.submittingLocation then
                                "Updating..."

                             else
                                "Update"
                            )
                        ]
                    ]
                ]
            ]

    else
        text ""


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    let
        cleanPhone =
            String.filter (\c -> c >= '0' && c <= '9') phone
    in
    String.slice 0 3 cleanPhone ++ "-" ++ String.slice 3 6 cleanPhone ++ "-" ++ String.slice 6 10 cleanPhone


contactResponseDecoder : Decoder ContactResponse
contactResponseDecoder =
    D.succeed ContactResponse
        |> Pipeline.optional "contact" (D.oneOf [ D.map Just contactDecoder, D.succeed Nothing ]) Nothing
        |> Pipeline.required "agent" agentDecoder
        |> Pipeline.required "orgSlug" D.string
        |> Pipeline.required "orgName" D.string
        |> Pipeline.required "orgLogo" (D.nullable D.string)
        |> Pipeline.optional "orgPhone" (D.nullable D.string) Nothing
        |> Pipeline.required "orgSignature" D.bool
        |> Pipeline.optional "orgSignatureText" (D.nullable D.string) Nothing
        |> Pipeline.required "carrierContracts" (D.list carrierDecoder)


contactDecoder : Decoder Contact
contactDecoder =
    D.succeed Contact
        |> Pipeline.required "id" D.int
        |> Pipeline.required "firstName" D.string
        |> Pipeline.required "lastName" D.string
        |> Pipeline.required "email" D.string
        |> Pipeline.required "phoneNumber" D.string
        |> Pipeline.required "age" D.int
        |> Pipeline.required "gender" D.string
        |> Pipeline.required "tobacco" D.bool
        |> Pipeline.required "state" D.string
        |> Pipeline.required "zipCode" D.string
        |> Pipeline.optional "county" (D.nullable D.string) Nothing
        |> Pipeline.optional "currentCarrier" (D.nullable D.string) Nothing
        |> Pipeline.optional "planType" (D.nullable D.string) Nothing


agentDecoder : Decoder Agent
agentDecoder =
    D.map4 Agent
        (D.field "firstName" D.string)
        (D.field "lastName" D.string)
        (D.field "email" D.string)
        (D.field "phone" D.string)


locationUpdateResponseDecoder : Decoder LocationUpdateResponse
locationUpdateResponseDecoder =
    D.map4 LocationUpdateResponse
        (D.field "success" D.bool)
        (D.field "zipCode" D.string)
        (D.field "state" D.string)
        (D.field "counties" (D.list D.string))



-- Helper function to format the date in a more readable way


formatEffectiveDate : String -> String
formatEffectiveDate isoDate =
    case Date.fromIsoString isoDate of
        Ok date ->
            Date.format "MMMM 1, yyyy" date

        Err _ ->
            isoDate



-- Helper function to get next N months of effective dates


getNextEffectiveDates : Date -> Int -> List String
getNextEffectiveDates currentDate count =
    List.range 0 (count - 1)
        |> List.map
            (\n ->
                currentDate
                    |> Date.add Date.Months n
                    |> Date.add Date.Months 1
                    |> Date.floor Date.Month
                    |> Date.toIsoString
            )



-- Mobile tooltip overlay


viewMobileTooltip : Model -> Html Msg
viewMobileTooltip model =
    case model.activeTooltipPlan of
        Just tooltipPlan ->
            case tooltipPlan.discountDescription of
                Just description ->
                    div
                        [ class "sm:hidden fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4"
                        , onClick (ToggleMobileTooltip Nothing)
                        ]
                        [ div
                            [ class "bg-white rounded-lg p-4 max-w-xs w-full shadow-lg text-sm relative"
                            , Html.Events.stopPropagationOn "click" (D.succeed ( NoOp, True ))
                            ]
                            [ button
                                [ class "absolute top-2 right-2 text-gray-500"
                                , onClick (ToggleMobileTooltip Nothing)
                                ]
                                [ text "×" ]
                            , div [ class "font-bold text-gray-800 text-base pb-2" ] [ text (tooltipPlan.name ++ " Discount") ]

                            --, div [ class "text-sm text-gray-700" ] [ text ("Plan " ++ tooltipPlan.planType ++ " Discount") ]
                            , div [ class "pt-3" ] [ text description ]
                            ]
                        ]

                Nothing ->
                    -- If no description, close the tooltip
                    div [ onClick (ToggleMobileTooltip Nothing) ] []

        Nothing ->
            -- No active tooltip
            text ""

================
File: frontend/src/Contact.elm
================
module Contact exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Events
import Browser.Navigation as Nav
import Date exposing (Date)
import Dict exposing (Dict)
import EmailScheduler exposing (EmailSchedule, PlanType(..), ScheduledEmail, getScheduledEmails, init, viewFutureActivity)
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onBlur, onClick, onInput, onSubmit)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Process
import Task
import Time exposing (Month(..), Posix, Zone)
import Utils.Formatters exposing (formatPhoneNumber)
import Utils.MyDate exposing (dateFromMonthDayYear)



-- TYPES


type alias Contact =
    { id : Int
    , firstName : Maybe String
    , lastName : Maybe String
    , email : String
    , phoneNumber : Maybe String
    , state : Maybe String
    , contactOwnerId : Maybe Int
    , contactOwner : Maybe User
    , currentCarrier : Maybe String
    , effectiveDate : Maybe String
    , birthDate : Maybe String
    , tobaccoUser : Maybe Bool
    , gender : Maybe String
    , zipCode : Maybe String
    , planType : Maybe String
    , status : String
    , agentId : Maybe Int
    , lastEmailed : Maybe String
    }


type alias User =
    { id : Int
    , email : String
    , firstName : String
    , lastName : String
    , isAdmin : Bool
    , isAgent : Bool
    , organizationId : Int
    , isActive : Bool
    , phone : String
    }


type alias ContactForm =
    { id : Maybe Int
    , firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    , state : String
    , contactOwnerId : Maybe Int
    , currentCarrier : String
    , effectiveDate : String
    , birthDate : String
    , tobaccoUser : Bool
    , gender : String
    , zipCode : String
    , planType : String
    }


emptyForm : ContactForm
emptyForm =
    { id = Nothing
    , firstName = ""
    , lastName = ""
    , email = ""
    , phoneNumber = ""
    , state = ""
    , contactOwnerId = Nothing
    , currentCarrier = ""
    , effectiveDate = ""
    , birthDate = ""
    , tobaccoUser = False
    , gender = "M"
    , zipCode = ""
    , planType = ""
    }



-- MODEL


type alias Activity =
    { submissionDate : String
    , status : ActivityStatus
    , carrierSelected : Maybe String
    , planSelected : Maybe String
    , quoteAmount : Maybe Float
    }


type ActivityStatus
    = QuoteCreated
    | EmailOpened
    | EmailSent Int -- Int represents which email number (1, 2, etc.)


type QuestionType
    = MainQuestion
    | FollowUpQuestion Int -- Parent question ID


type alias EligibilityQuestion =
    { id : Int
    , text : String
    , questionType : QuestionType
    , answer : Maybe (Either Bool String)
    , followUpQuestions : List EligibilityFollowUp
    }


type alias EligibilityFollowUp =
    { id : Int
    , text : String
    , answer : Maybe (Either Bool String)
    }


type Either a b
    = Left a
    | Right b


type Modal
    = NoModal
    | EditModal
    | DeleteConfirmModal
    | HealthAssessmentModal


type alias EmailTrackingRecord =
    { emailType : String
    , scheduledDate : String
    , sendStatus : String
    , sendMode : String
    }


type alias Model =
    { key : Nav.Key
    , contact : Maybe Contact
    , showModal : Modal
    , editForm : ContactForm
    , isSubmittingForm : Bool
    , error : Maybe String
    , emailTrackingRecords : List EmailTrackingRecord
    , isCheckingEmail : Bool
    , emailExists : Bool
    , isDeletingContact : Bool
    , emailSchedule : EmailSchedule
    , quoteUrl : Maybe String
    , isGeneratingQuote : Bool
    , healthStatus : Maybe HealthStatus
    , eligibilityQuestions : List EligibilityQuestion
    , followUps : List FollowUpRequest
    , timeZone : Zone
    , showAllFollowUps : Bool
    , orgSettings : Maybe Settings
    , emailSendSuccess : Bool
    }


type alias HealthStatus =
    { status : String
    , answers : Maybe String
    }


type alias FollowUpRequest =
    { type_ : String
    , quoteId : String
    , createdAt : Posix
    }


type alias Settings =
    { stateLicenses : List String
    , carrierContracts : List String
    , stateCarrierSettings : List StateCarrierSetting
    , allowAgentSettings : Bool
    , emailSendBirthday : Bool
    , emailSendPolicyAnniversary : Bool
    , emailSendAep : Bool
    , smartSendEnabled : Bool
    }


type alias StateCarrierSetting =
    { state : String
    , carrier : String
    , active : Bool
    , targetGI : Bool
    }



-- DECODERS


contactDecoder : Decoder Contact
contactDecoder =
    Decode.succeed Contact
        |> Pipeline.required "id" Decode.int
        |> Pipeline.required "first_name" (Decode.nullable Decode.string)
        |> Pipeline.required "last_name" (Decode.nullable Decode.string)
        |> Pipeline.required "email" Decode.string
        |> Pipeline.optional "phone_number" (Decode.nullable Decode.string) Nothing
        |> Pipeline.required "state" (Decode.nullable Decode.string)
        |> Pipeline.optional "contact_owner_id" (Decode.nullable Decode.int) Nothing
        |> Pipeline.optional "contact_owner" (Decode.nullable userDecoder) Nothing
        |> Pipeline.optional "current_carrier" (Decode.nullable Decode.string) Nothing
        |> Pipeline.required "effective_date" (Decode.nullable Decode.string)
        |> Pipeline.required "birth_date" (Decode.nullable Decode.string)
        |> Pipeline.required "tobacco_user" (Decode.nullable Decode.bool)
        |> Pipeline.required "gender" (Decode.nullable Decode.string)
        |> Pipeline.required "zip_code" (Decode.nullable Decode.string)
        |> Pipeline.optional "plan_type" (Decode.nullable Decode.string) Nothing
        |> Pipeline.optional "status" Decode.string "New"
        |> Pipeline.required "agent_id" (Decode.nullable Decode.int)
        |> Pipeline.optional "last_emailed_date" (Decode.nullable Decode.string) Nothing


userDecoder : Decoder User
userDecoder =
    Decode.succeed User
        |> Pipeline.required "id" Decode.int
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "first_name" Decode.string
        |> Pipeline.required "last_name" Decode.string
        |> Pipeline.required "is_admin" Decode.bool
        |> Pipeline.required "is_agent" Decode.bool
        |> Pipeline.required "organization_id" Decode.int
        |> Pipeline.required "is_active" Decode.bool
        |> Pipeline.required "phone" Decode.string


healthStatusDecoder : Decoder HealthStatus
healthStatusDecoder =
    Decode.map2 HealthStatus
        (Decode.field "status" Decode.string)
        (Decode.field "answers" (Decode.nullable Decode.string))


settingsDecoder : Decoder Settings
settingsDecoder =
    Decode.field "success" Decode.bool
        |> Decode.andThen
            (\success ->
                if success then
                    Decode.field "orgSettings" settingsObjectDecoder

                else
                    Decode.fail "Settings request was not successful"
            )


settingsObjectDecoder : Decoder Settings
settingsObjectDecoder =
    Decode.map8 Settings
        (Decode.field "stateLicenses" (Decode.list Decode.string))
        (Decode.field "carrierContracts" (Decode.list Decode.string))
        (Decode.field "stateCarrierSettings" (Decode.list stateCarrierSettingDecoder))
        (Decode.field "allowAgentSettings" Decode.bool)
        (Decode.field "emailSendBirthday" Decode.bool)
        (Decode.field "emailSendPolicyAnniversary" Decode.bool)
        (Decode.field "emailSendAep" Decode.bool)
        (Decode.field "smartSendEnabled" Decode.bool)


stateCarrierSettingDecoder : Decoder StateCarrierSetting
stateCarrierSettingDecoder =
    Decode.succeed StateCarrierSetting
        |> Pipeline.optional "state" Decode.string ""
        |> Pipeline.required "carrier" Decode.string
        |> Pipeline.required "active" Decode.bool
        |> Pipeline.required "targetGI" Decode.bool


emailTrackingDecoder : Decoder EmailTrackingRecord
emailTrackingDecoder =
    Decode.succeed EmailTrackingRecord
        |> Pipeline.required "email_type" Decode.string
        |> Pipeline.required "scheduled_date" Decode.string
        |> Pipeline.required "send_status" Decode.string
        |> Pipeline.required "send_mode" Decode.string



-- INIT


type alias ZipInfo =
    { state : String
    , counties : List String
    , cities : List String
    }


init : Nav.Key -> String -> ( Model, Cmd Msg )
init key contactId =
    let
        initialSchedule =
            EmailScheduler.init
                (String.toInt contactId |> Maybe.withDefault 0)
                (Date.fromCalendarDate 2024 Jan 1)
                (Date.fromCalendarDate 2024 Jan 1)
                (Date.fromCalendarDate 2024 Jan 1)
                NoPlan
                ""
                []
                []
    in
    ( { key = key
      , contact = Nothing
      , showModal = NoModal
      , editForm = emptyForm
      , isSubmittingForm = False
      , error = Nothing
      , emailTrackingRecords = []
      , isCheckingEmail = False
      , emailExists = False
      , isDeletingContact = False
      , emailSchedule = initialSchedule
      , quoteUrl = Nothing
      , isGeneratingQuote = False
      , healthStatus = Nothing
      , eligibilityQuestions = []
      , followUps = []
      , timeZone = Time.utc
      , showAllFollowUps = False
      , orgSettings = Nothing
      , emailSendSuccess = False
      }
    , Cmd.batch
        [ Http.get
            { url = "/api/contacts/" ++ contactId
            , expect = Http.expectJson GotContact contactDecoder
            }
        , Http.get
            { url = "/api/contacts/email-tracking/" ++ contactId
            , expect =
                Http.expectJson GotEmailTracking
                    (Decode.map2 (\s r -> { success = s, trackingRecords = r })
                        (Decode.field "success" Decode.bool)
                        (Decode.field "trackingRecords" (Decode.list emailTrackingDecoder))
                    )
            }
        , Http.get
            { url = "/api/contacts/" ++ contactId ++ "/eligibility"
            , expect = Http.expectJson GotHealthStatus healthStatusDecoder
            }
        , Http.get
            { url = "/api/contacts/" ++ contactId ++ "/follow-ups"
            , expect = Http.expectJson GotFollowUps followUpsDecoder
            }
        , Task.perform GotCurrentTime Date.today
        , Task.perform GotTimeZone Time.here
        ]
    )



-- UPDATE


type Msg
    = NoOp
    | GotContact (Result Http.Error Contact)
    | GotCurrentTime Date
    | GotTimeZone Zone
    | ShowEditModal
    | CloseModal
    | BackToContacts
    | UpdateEditForm ContactFormField String
    | SubmitEditForm
    | ContactUpdated (Result Http.Error Contact)
    | CheckEmail String
    | EmailChecked (Result Http.Error { exists : Bool })
    | LookupZipCode String
    | GotZipLookup (Result Http.Error ZipInfo)
    | ShowDeleteConfirmModal
    | DeleteContact
    | ContactDeleted (Result Http.Error DeleteResponse)
    | GenerateQuoteLink
    | GotQuoteLink (Result Http.Error { quoteId : String, redirectUrl : String })
    | GotHealthStatus (Result Http.Error HealthStatus)
    | ShowHealthAssessmentModal
    | GotFollowUps (Result Http.Error (List FollowUpRequest))
    | ToggleFollowUps
    | GotOrgSettings (Result Http.Error Settings)
    | SendQuoteEmail
    | QuoteEmailSent (Result Http.Error { success : Bool, message : String, trackingRecord : Maybe EmailTrackingRecord })
    | GotEmailTracking (Result Http.Error { success : Bool, trackingRecords : List EmailTrackingRecord })
    | ResetEmailSendState


type ContactFormField
    = FirstName
    | LastName
    | Email
    | PhoneNumber
    | State
    | ContactOwnerId
    | CurrentCarrier
    | EffectiveDate
    | BirthDate
    | TobaccoUser
    | Gender
    | ZipCode
    | PlanType


safeStringToDate : String -> Result String Date
safeStringToDate dateString =
    case Date.fromIsoString dateString of
        Ok date ->
            Ok date

        Err error ->
            case dateFromMonthDayYear dateString of
                Ok date ->
                    Ok date

                Err _ ->
                    Err error


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )

        GotContact (Ok contact) ->
            let
                defaultDate =
                    Date.fromCalendarDate 1970 Jan 1

                effectiveDateResult =
                    case contact.effectiveDate of
                        Just date ->
                            if String.isEmpty date then
                                Ok defaultDate

                            else
                                safeStringToDate date

                        Nothing ->
                            Ok defaultDate

                birthDateResult =
                    case contact.birthDate of
                        Just date ->
                            if String.isEmpty date then
                                Ok defaultDate

                            else
                                safeStringToDate date

                        Nothing ->
                            Ok defaultDate
            in
            case effectiveDateResult of
                Ok effectiveDate ->
                    case birthDateResult of
                        Ok birthDate ->
                            let
                                planType =
                                    case contact.planType of
                                        Just s ->
                                            case String.toLower s of
                                                "plan n" ->
                                                    PlanN

                                                "n" ->
                                                    PlanN

                                                "plan g" ->
                                                    PlanG

                                                "g" ->
                                                    PlanG

                                                _ ->
                                                    NoPlan

                                        Nothing ->
                                            NoPlan

                                ( stateCarrierSettings, stateLicenses ) =
                                    case model.orgSettings of
                                        Just settings ->
                                            ( settings.stateCarrierSettings, settings.stateLicenses )

                                        Nothing ->
                                            ( [], [] )

                                newSchedule =
                                    EmailScheduler.init
                                        contact.id
                                        effectiveDate
                                        birthDate
                                        model.emailSchedule.currentDate
                                        planType
                                        (Maybe.withDefault "" contact.state)
                                        stateCarrierSettings
                                        stateLicenses
                            in
                            ( { model | contact = Just contact, emailSchedule = newSchedule }
                            , Cmd.batch
                                [ Http.get
                                    { url = "/api/quotes/generate/" ++ String.fromInt contact.id
                                    , expect = Http.expectJson GotQuoteLink quoteLinkDecoder
                                    }
                                , Http.get
                                    { url = "/api/settings"
                                    , expect = Http.expectJson GotOrgSettings settingsDecoder
                                    }
                                ]
                            )

                        Err _ ->
                            ( { model | contact = Just contact, error = Just "Invalid birth date format" }
                            , Cmd.none
                            )

                Err _ ->
                    ( { model | contact = Just contact, error = Just "Invalid effective date format" }
                    , Cmd.none
                    )

        GotContact (Err error) ->
            case error of
                Http.BadStatus 404 ->
                    ( { model | error = Just "Contact not found" }
                    , Cmd.none
                    )

                _ ->
                    ( { model | error = Just "Failed to load contact" }
                    , Cmd.none
                    )

        GotCurrentTime today ->
            let
                currentSchedule =
                    model.emailSchedule

                newSchedule =
                    { currentSchedule | currentDate = today }
            in
            ( { model | emailSchedule = newSchedule }
            , Cmd.none
            )

        GotTimeZone zone ->
            ( { model | timeZone = zone }, Cmd.none )

        ShowEditModal ->
            case model.contact of
                Just contact ->
                    ( { model
                        | showModal = EditModal
                        , editForm =
                            { id = Just contact.id
                            , firstName = Maybe.withDefault "" contact.firstName
                            , lastName = Maybe.withDefault "" contact.lastName
                            , email = contact.email
                            , phoneNumber = Maybe.withDefault "" contact.phoneNumber
                            , state = Maybe.withDefault "" contact.state
                            , contactOwnerId = contact.contactOwnerId
                            , currentCarrier = Maybe.withDefault "" contact.currentCarrier
                            , effectiveDate = Maybe.withDefault "" contact.effectiveDate
                            , birthDate = Maybe.withDefault "" contact.birthDate
                            , tobaccoUser = Maybe.withDefault False contact.tobaccoUser
                            , gender = Maybe.withDefault "" contact.gender
                            , zipCode = Maybe.withDefault "" contact.zipCode
                            , planType = contact.planType |> Maybe.withDefault ""
                            }
                      }
                    , Cmd.none
                    )

                Nothing ->
                    ( model, Cmd.none )

        CloseModal ->
            ( { model | showModal = NoModal }
            , case model.contact of
                Just contact ->
                    Nav.pushUrl model.key ("/contact/" ++ String.fromInt contact.id)

                Nothing ->
                    Cmd.none
            )

        BackToContacts ->
            ( model, Nav.pushUrl model.key "/contacts" )

        UpdateEditForm field value ->
            let
                form =
                    model.editForm

                updatedForm =
                    case field of
                        FirstName ->
                            { form | firstName = value }

                        LastName ->
                            { form | lastName = value }

                        Email ->
                            { form | email = value }

                        PhoneNumber ->
                            { form | phoneNumber = String.filter Char.isDigit value |> String.left 10 }

                        State ->
                            { form | state = value }

                        ContactOwnerId ->
                            { form | contactOwnerId = String.toInt value }

                        CurrentCarrier ->
                            { form | currentCarrier = value }

                        EffectiveDate ->
                            { form | effectiveDate = value }

                        BirthDate ->
                            { form | birthDate = value }

                        TobaccoUser ->
                            { form | tobaccoUser = value == "true" }

                        Gender ->
                            { form | gender = value }

                        ZipCode ->
                            { form | zipCode = value }

                        PlanType ->
                            { form | planType = value }

                cmd =
                    if field == ZipCode && String.length value == 5 then
                        LookupZipCode value
                            |> Task.succeed
                            |> Task.perform identity

                    else if field == Email && String.length value > 0 then
                        checkEmail value

                    else
                        Cmd.none
            in
            ( { model
                | editForm = updatedForm
                , isCheckingEmail = field == Email && String.length value > 0
                , emailExists = False
                , error = Nothing
              }
            , cmd
            )

        SubmitEditForm ->
            case model.editForm.id of
                Just id ->
                    ( { model | isSubmittingForm = True }
                    , Http.request
                        { method = "PUT"
                        , headers = []
                        , url = "/api/contacts/" ++ String.fromInt id
                        , body = Http.jsonBody (encodeContactForm model.editForm)
                        , expect = Http.expectJson ContactUpdated contactDecoder
                        , timeout = Nothing
                        , tracker = Nothing
                        }
                    )

                Nothing ->
                    ( model, Cmd.none )

        ContactUpdated (Ok contact) ->
            ( { model
                | contact = Just contact
                , showModal = NoModal
                , isSubmittingForm = False
                , error = Nothing
              }
            , Cmd.none
            )

        ContactUpdated (Err _) ->
            ( { model
                | isSubmittingForm = False
                , error = Just "Failed to update contact"
              }
            , Cmd.none
            )

        CheckEmail email ->
            ( { model | isCheckingEmail = True }
            , checkEmail email
            )

        EmailChecked (Ok response) ->
            ( { model
                | isCheckingEmail = False
                , emailExists = response.exists
                , error =
                    if response.exists then
                        Just "A contact with this email already exists"

                    else
                        Nothing
              }
            , Cmd.none
            )

        EmailChecked (Err _) ->
            ( { model
                | isCheckingEmail = False
                , error = Just "Failed to check email. Please try again."
              }
            , Cmd.none
            )

        LookupZipCode zipCode ->
            ( model
            , Http.get
                { url = "/api/zip-lookup/" ++ zipCode
                , expect = Http.expectJson GotZipLookup zipInfoDecoder
                }
            )

        GotZipLookup (Ok zipInfo) ->
            let
                form =
                    model.editForm

                updatedForm =
                    { form | state = zipInfo.state }
            in
            ( { model | editForm = updatedForm }
            , Cmd.none
            )

        GotZipLookup (Err _) ->
            ( model, Cmd.none )

        ShowDeleteConfirmModal ->
            ( { model | showModal = DeleteConfirmModal }, Cmd.none )

        DeleteContact ->
            case model.contact of
                Just contact ->
                    ( { model | isDeletingContact = True }
                    , deleteContact contact.id
                    )

                Nothing ->
                    ( model, Cmd.none )

        ContactDeleted (Ok response) ->
            if response.success then
                ( model, Nav.pushUrl model.key "/contacts" )

            else
                ( { model | isDeletingContact = False, error = Just "Failed to delete contact" }, Cmd.none )

        ContactDeleted (Err _) ->
            ( { model | isDeletingContact = False, error = Just "Failed to delete contact" }, Cmd.none )

        GenerateQuoteLink ->
            case model.contact of
                Just contact ->
                    ( { model | isGeneratingQuote = True }
                    , Http.get
                        { url = "/api/quotes/generate/" ++ String.fromInt contact.id
                        , expect = Http.expectJson GotQuoteLink quoteLinkDecoder
                        }
                    )

                Nothing ->
                    ( model, Cmd.none )

        GotQuoteLink (Ok response) ->
            ( { model
                | quoteUrl =
                    case model.contact of
                        Just contact ->
                            let
                                orgId : Maybe String
                                orgId =
                                    response.quoteId
                                        |> String.split "-"
                                        |> List.head

                                outStr : String
                                outStr =
                                    "/compare?id=" ++ response.quoteId
                            in
                            Just outStr

                        Nothing ->
                            Just ("/compare?id=" ++ response.quoteId)
                , isGeneratingQuote = False
              }
            , Cmd.none
            )

        GotQuoteLink (Err _) ->
            ( { model
                | error = Just "Failed to generate quote link"
                , isGeneratingQuote = False
              }
            , Cmd.none
            )

        GotHealthStatus (Ok status) ->
            let
                parsedQuestions =
                    case status.answers of
                        Just answersJson ->
                            parseEligibilityAnswers answersJson

                        Nothing ->
                            []
            in
            ( { model
                | healthStatus = Just status
                , eligibilityQuestions = parsedQuestions
              }
            , Cmd.none
            )

        GotHealthStatus (Err _) ->
            ( model, Cmd.none )

        ShowHealthAssessmentModal ->
            ( { model | showModal = HealthAssessmentModal }, Cmd.none )

        GotFollowUps (Ok followUps) ->
            ( { model | followUps = followUps }
            , Cmd.none
            )

        GotFollowUps (Err _) ->
            ( model, Cmd.none )

        ToggleFollowUps ->
            ( { model | showAllFollowUps = not model.showAllFollowUps }, Cmd.none )

        GotOrgSettings (Ok settings) ->
            let
                currentSchedule =
                    model.emailSchedule

                updatedSchedule =
                    { currentSchedule
                        | stateCarrierSettings = settings.stateCarrierSettings
                        , stateLicenses = settings.stateLicenses
                    }
            in
            ( { model | orgSettings = Just settings, emailSchedule = updatedSchedule }
            , Cmd.none
            )

        GotOrgSettings (Err _) ->
            ( { model | error = Just "Failed to load organization settings" }
            , Cmd.none
            )

        SendQuoteEmail ->
            case model.contact of
                Just contact ->
                    let
                        orgId =
                            contact.contactOwner
                                |> Maybe.map (\owner -> owner.organizationId)
                                |> Maybe.withDefault 0

                        encodedBody =
                            Encode.object
                                [ ( "orgId", Encode.int orgId ) ]
                    in
                    ( { model | isGeneratingQuote = True, emailSendSuccess = False }
                    , Http.post
                        { url = "/api/contacts/" ++ String.fromInt contact.id ++ "/send-quote-email"
                        , body = Http.jsonBody encodedBody
                        , expect =
                            Http.expectJson QuoteEmailSent
                                (Decode.succeed (\s m r -> { success = s, message = m, trackingRecord = r })
                                    |> Pipeline.required "success" Decode.bool
                                    |> Pipeline.required "message" Decode.string
                                    |> Pipeline.optional "trackingRecord" (Decode.nullable emailTrackingDecoder) Nothing
                                )
                        }
                    )

                Nothing ->
                    ( model, Cmd.none )

        QuoteEmailSent (Ok response) ->
            let
                updatedRecords =
                    case response.trackingRecord of
                        Just record ->
                            record :: model.emailTrackingRecords

                        Nothing ->
                            model.emailTrackingRecords
            in
            ( { model
                | isGeneratingQuote = False
                , emailSendSuccess = response.success
                , error =
                    if response.success then
                        Nothing

                    else
                        Just response.message
                , emailTrackingRecords = updatedRecords
              }
            , if response.success then
                Process.sleep 5000
                    |> Task.perform (\_ -> ResetEmailSendState)

              else
                Cmd.none
            )

        QuoteEmailSent (Err _) ->
            ( { model
                | isGeneratingQuote = False
                , emailSendSuccess = False
                , error = Just "Failed to send quote email"
              }
            , Cmd.none
            )

        GotEmailTracking (Ok response) ->
            ( { model | emailTrackingRecords = response.trackingRecords }, Cmd.none )

        GotEmailTracking (Err _) ->
            ( model, Cmd.none )

        ResetEmailSendState ->
            ( { model | emailSendSuccess = False }, Cmd.none )



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Contact Details"
    , body =
        [ div [ class "min-h-screen bg-white" ]
            [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" ]
                [ viewBackButton
                , case model.contact of
                    Just contact ->
                        div []
                            [ viewHeader contact model
                            , if model.error /= Nothing then
                                div [ class "mb-8 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700" ]
                                    [ text (Maybe.withDefault "An error occurred" model.error)
                                    , button [ class "ml-2 underline", onClick BackToContacts ] [ text "Back to Contacts" ]
                                    ]

                              else
                                text ""
                            , viewContactSummary contact model.quoteUrl model.isGeneratingQuote model.healthStatus model.eligibilityQuestions model.followUps model.timeZone model.showAllFollowUps
                            , if model.orgSettings /= Nothing && model.error == Nothing then
                                div [ class "bg-white rounded-lg border border-gray-200 p-6 mb-8" ]
                                    [ viewFutureActivity (getScheduledEmails model.emailSchedule) ]

                              else
                                div [ class "bg-white rounded-lg border border-gray-200 p-6 mb-8" ]
                                    [ h2 [ class "text-lg font-medium mb-4" ] [ text "Future Activity" ]
                                    , div [ class "flex justify-center items-center py-8" ]
                                        [ viewSpinner
                                        , span [ class "ml-3 text-gray-500" ] [ text "Loading future activities..." ]
                                        ]
                                    ]
                            , viewActivity model.emailTrackingRecords
                            ]

                    Nothing ->
                        case model.error of
                            Just errorMsg ->
                                div [ class "text-center py-12" ]
                                    [ div [ class "text-red-600 text-lg mb-4" ] [ text errorMsg ]
                                    , button
                                        [ class "px-4 py-2 text-sm font-medium text-blue-600 hover:text-blue-700 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors duration-200"
                                        , onClick BackToContacts
                                        ]
                                        [ text "Back to Contacts" ]
                                    ]

                            Nothing ->
                                viewLoading
                ]
            ]
        , viewModals model
        ]
    }


viewBackButton : Html Msg
viewBackButton =
    button
        [ class "mb-6 inline-flex items-center text-sm text-gray-600 hover:text-gray-900"
        , onClick BackToContacts
        ]
        [ span [ class "mr-2" ] [ text "←" ]
        , text "Back to Contacts"
        ]


viewHeader : Contact -> Model -> Html Msg
viewHeader contact model =
    div [ class "flex justify-between items-center mb-8" ]
        [ div [ class "flex items-center gap-4" ]
            [ h1 [ class "text-2xl font-semibold" ]
                [ text (Maybe.withDefault "" contact.firstName ++ " " ++ Maybe.withDefault "" contact.lastName) ]
            , viewEmailStatus contact.status
            ]
        , div [ class "flex gap-2" ]
            [ button
                [ class "px-4 py-2 text-sm font-medium text-blue-600 hover:text-blue-700 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors duration-200 flex items-center gap-2"
                , onClick
                    (if model.isGeneratingQuote || model.emailSendSuccess then
                        NoOp

                     else
                        SendQuoteEmail
                    )
                ]
                (if model.isGeneratingQuote then
                    [ viewSpinner
                    , text "Sending..."
                    ]

                 else if model.emailSendSuccess then
                    [ span [ class "text-green-600" ] [ text "✓" ]
                    , text "Email Sent"
                    ]

                 else
                    [ text "Send Quote Email" ]
                )
            , button
                [ class "px-4 py-2 text-sm font-medium text-purple-600 hover:text-purple-700 bg-purple-50 hover:bg-purple-100 rounded-lg transition-colors duration-200 flex items-center gap-2"
                , onClick ShowEditModal
                ]
                [ text "Edit" ]
            , button
                [ class "px-4 py-2 text-sm font-medium text-red-600 hover:text-red-700 bg-red-50 hover:bg-red-100 rounded-lg transition-colors duration-200 flex items-center gap-2"
                , onClick ShowDeleteConfirmModal
                ]
                [ text "Delete" ]
            ]
        ]


viewContactSummary : Contact -> Maybe String -> Bool -> Maybe HealthStatus -> List EligibilityQuestion -> List FollowUpRequest -> Zone -> Bool -> Html Msg
viewContactSummary contact quoteUrl isGeneratingQuote healthStatus eligibilityQuestions followUps zone showAllFollowUps =
    let
        followUpsSection =
            if not (List.isEmpty followUps) then
                div [ class "bg-white rounded-lg border border-gray-200 p-6 mb-8" ]
                    [ div [ class "flex justify-between items-center mb-6" ]
                        [ h2 [ class "text-lg font-medium" ] [ text "Follow-up Requests" ] ]
                    , div [ class "space-y-4" ]
                        (List.take
                            (if showAllFollowUps then
                                List.length followUps

                             else
                                2
                            )
                            followUps
                            |> List.map (viewFollowUpRequest zone)
                        )
                    , if not showAllFollowUps && List.length followUps > 2 then
                        div [ class "mt-4 text-center" ]
                            [ button
                                [ class "text-sm text-purple-600 hover:text-purple-800"
                                , onClick ToggleFollowUps
                                ]
                                [ text ("Show " ++ String.fromInt (List.length followUps - 2) ++ " More") ]
                            ]

                      else if showAllFollowUps then
                        div [ class "mt-4 text-center" ]
                            [ button
                                [ class "text-sm text-purple-600 hover:text-purple-800"
                                , onClick ToggleFollowUps
                                ]
                                [ text "Show Less" ]
                            ]

                      else
                        text ""
                    ]

            else
                text ""
    in
    div []
        [ div [ class "bg-white rounded-lg border border-gray-200 p-6 mb-8" ]
            [ h2 [ class "text-lg font-medium mb-6" ] [ text "Contact Summary" ]
            , div [ class "grid grid-cols-2 gap-x-8 gap-y-6" ]
                [ viewField "Date of Birth" (Maybe.withDefault "" contact.birthDate)
                , viewField "Contact Owner" (Maybe.map .firstName contact.contactOwner |> Maybe.withDefault "Default")
                , viewField "Phone Number" (formatPhoneNumber (Maybe.withDefault "" contact.phoneNumber))
                , viewField "Email" contact.email
                , viewField "Current Carrier" (Maybe.withDefault "" contact.currentCarrier)
                , viewField "Gender" (Maybe.withDefault "" contact.gender)
                , viewField "Tobacco Use"
                    (if Maybe.withDefault False contact.tobaccoUser then
                        "Yes"

                     else
                        "No"
                    )
                , viewField "State" (Maybe.withDefault "" contact.state)
                , viewField "Zip Code" (Maybe.withDefault "" contact.zipCode)
                , viewField "Effective Date" (Maybe.withDefault "" contact.effectiveDate)
                , viewField "Plan Type" (Maybe.withDefault "" contact.planType)
                , viewQuoteField quoteUrl isGeneratingQuote
                , viewHealthStatusField healthStatus eligibilityQuestions
                ]
            ]
        , followUpsSection
        ]


viewQuoteField : Maybe String -> Bool -> Html Msg
viewQuoteField quoteUrl isGeneratingQuote =
    div []
        [ div [ class "text-sm font-medium text-gray-500" ] [ text "Quote Link" ]
        , div [ class "mt-1" ]
            [ case quoteUrl of
                Just url ->
                    a
                        [ href url
                        , class "text-sm text-blue-600 hover:text-blue-800 underline"
                        , target "_blank"
                        ]
                        [ text "View Quote" ]

                Nothing ->
                    if isGeneratingQuote then
                        viewSpinner

                    else
                        text "-"
            ]
        ]


viewHealthStatusField : Maybe HealthStatus -> List EligibilityQuestion -> Html Msg
viewHealthStatusField maybeStatus questions =
    div []
        [ div [ class "text-sm font-medium text-gray-500" ] [ text "Health Status" ]
        , div [ class "mt-1" ]
            [ case maybeStatus of
                Just status ->
                    let
                        hasYesAnswers =
                            List.any
                                (\q ->
                                    case q.answer of
                                        Just (Left True) ->
                                            q.questionType == MainQuestion

                                        _ ->
                                            False
                                )
                                questions
                    in
                    div [ class "flex items-center" ]
                        [ if List.isEmpty questions then
                            -- No eligibility questions means not completed
                            div [ class "flex items-center text-gray-500 text-sm" ]
                                [ span [ class "mr-1" ] [ text "•" ]
                                , text "Not Completed"
                                ]

                          else if hasYesAnswers then
                            div [ class "flex items-center text-red-600 text-sm" ]
                                [ span [ class "mr-1" ] [ text "✕" ]
                                , text "Issue Flagged"
                                ]

                          else
                            div [ class "flex items-center text-green-600 text-sm" ]
                                [ span [ class "mr-1" ] [ text "✓" ]
                                , text "Pass"
                                ]
                        , button
                            [ class "ml-3 text-blue-600 text-sm hover:text-blue-800 underline"
                            , onClick ShowHealthAssessmentModal
                            ]
                            [ text "View Details" ]
                        ]

                Nothing ->
                    div [ class "text-gray-600 text-sm" ]
                        [ text "Loading..." ]
            ]
        ]


viewField : String -> String -> Html Msg
viewField label value =
    div []
        [ div [ class "text-sm font-medium text-gray-500" ] [ text label ]
        , div [ class "mt-1 text-sm text-gray-900" ] [ text value ]
        ]


viewActivity : List EmailTrackingRecord -> Html Msg
viewActivity records =
    div [ class "bg-white rounded-lg border border-gray-200 p-6" ]
        [ h2 [ class "text-lg font-medium mb-6" ] [ text "Email Activity" ]
        , table [ class "min-w-full" ]
            [ thead [ class "bg-gray-50" ]
                [ tr []
                    [ th [ class "px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase" ] [ text "Date" ]
                    , th [ class "px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase" ] [ text "Email Type" ]
                    , th [ class "px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase" ] [ text "Status" ]
                    , th [ class "px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase" ] [ text "Mode" ]
                    ]
                ]
            , tbody [ class "divide-y divide-gray-200" ]
                (List.map viewEmailTrackingRow records)
            ]
        ]


viewEmailTrackingRow : EmailTrackingRecord -> Html Msg
viewEmailTrackingRow record =
    tr [ class "hover:bg-gray-50" ]
        [ td [ class "px-3 py-2 text-sm text-gray-900" ] [ text record.scheduledDate ]
        , td [ class "px-3 py-2 text-sm text-gray-900" ] [ text (formatEmailType record.emailType) ]
        , td [ class "px-3 py-2 text-sm" ] [ viewEmailStatus record.sendStatus ]
        , td [ class "px-3 py-2 text-sm text-gray-900" ] [ text (formatSendMode record.sendMode) ]
        ]


formatEmailType : String -> String
formatEmailType emailType =
    case emailType of
        "quote_email" ->
            "Quote Email"

        "follow_up_1" ->
            "Follow-up #1"

        "follow_up_2" ->
            "Follow-up #2"

        "follow_up_3" ->
            "Follow-up #3"

        "birthday" ->
            "Birthday Email"

        "anniversary" ->
            "Anniversary Email"

        _ ->
            emailType


formatSendMode : String -> String
formatSendMode mode =
    case mode of
        "production" ->
            "Production"

        "test" ->
            "Test"

        _ ->
            mode


viewEmailStatus : String -> Html Msg
viewEmailStatus status =
    let
        ( bgColor, textColor, statusText ) =
            case status of
                "sent" ->
                    ( "bg-green-50", "text-green-700", "Sent" )

                "scheduled" ->
                    ( "bg-blue-50", "text-blue-700", "Scheduled" )

                "failed" ->
                    ( "bg-red-50", "text-red-700", "Failed" )

                "opened" ->
                    ( "bg-purple-50", "text-purple-700", "Opened" )

                _ ->
                    ( "bg-gray-50", "text-gray-700", status )
    in
    div [ class ("inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium " ++ bgColor ++ " " ++ textColor) ]
        [ text statusText ]


viewModals : Model -> Html Msg
viewModals model =
    case model.showModal of
        NoModal ->
            text ""

        EditModal ->
            viewEditModal model

        DeleteConfirmModal ->
            viewDeleteConfirmModal model

        HealthAssessmentModal ->
            viewHealthAssessmentModal model


viewEditModal : Model -> Html Msg
viewEditModal model =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-8" ]
        [ div [ class "bg-white rounded-xl p-10 max-w-5xl w-full mx-4 shadow-xl relative" ]
            [ button
                [ class "absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ text "×" ]
            , h2 [ class "text-2xl font-semibold text-gray-900 mb-8" ]
                [ text "Edit Contact" ]
            , viewContactForm model.editForm model.isSubmittingForm model
            ]
        ]


viewContactForm : ContactForm -> Bool -> Model -> Html Msg
viewContactForm form isSubmitting model =
    Html.form [ onSubmit SubmitEditForm ]
        [ div [ class "grid grid-cols-2 gap-x-8 gap-y-6" ]
            [ viewFormInput "First Name" "text" form.firstName FirstName True model
            , viewFormInput "Last Name" "text" form.lastName LastName True model
            , viewFormInput "Email" "email" form.email Email True model
            , viewFormInput "Phone Number" "text" (formatPhoneNumber form.phoneNumber) PhoneNumber True model
            , viewFormInput "Current Carrier" "text" form.currentCarrier CurrentCarrier True model
            , viewFormInput "Plan Type" "text" form.planType PlanType True model
            , viewFormInput "Effective Date" "date" form.effectiveDate EffectiveDate True model
            , viewFormInput "Birth Date" "date" form.birthDate BirthDate True model
            , viewFormRadioGroup "Tobacco User"
                (if form.tobaccoUser then
                    "true"

                 else
                    "false"
                )
                TobaccoUser
                [ ( "true", "Yes" ), ( "false", "No" ) ]
            , viewFormRadioGroup "Gender" form.gender Gender [ ( "M", "Male" ), ( "F", "Female" ) ]
            , div [ class "col-span-2 grid grid-cols-2 gap-x-8" ]
                [ viewFormInput "ZIP Code" "text" form.zipCode ZipCode True model
                , viewFormInput "State" "text" form.state State True model
                ]
            ]
        , div [ class "mt-10 flex justify-end space-x-4" ]
            [ button
                [ type_ "button"
                , onClick CloseModal
                , class "px-6 py-3 bg-white text-gray-700 text-sm font-medium rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200 focus:ring-4 focus:ring-purple-100"
                ]
                [ text "Cancel" ]
            , if isSubmitting then
                div [ class "px-6 py-3 flex items-center space-x-2" ] [ viewSpinner ]

              else
                button
                    [ type_ "submit"
                    , class "px-6 py-3 bg-purple-500 text-white text-sm font-medium rounded-lg hover:bg-purple-600 transition-colors duration-200 focus:ring-4 focus:ring-purple-200"
                    ]
                    [ text "Save Changes" ]
            ]
        ]


viewFormInput : String -> String -> String -> ContactFormField -> Bool -> Model -> Html Msg
viewFormInput labelText inputType inputValue field isRequired model =
    div [ class "form-group" ]
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text labelText ]
        , if field == Email then
            div [ class "relative" ]
                [ Html.input
                    [ type_ inputType
                    , class
                        ("w-full px-4 py-3 bg-white border-[2.5px] rounded-lg text-gray-700 placeholder-gray-400 shadow-sm transition-all duration-200 "
                            ++ (if model.emailExists then
                                    "border-red-300 hover:border-red-400 focus:border-red-500 focus:ring-2 focus:ring-red-200"

                                else
                                    "border-purple-300 hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200"
                               )
                        )
                    , Html.Attributes.value inputValue
                    , onInput (UpdateEditForm field)
                    , onBlur (CheckEmail inputValue)
                    , required isRequired
                    ]
                    []
                , if model.isCheckingEmail then
                    div [ class "absolute right-3 top-3" ]
                        [ viewSpinner ]

                  else if model.emailExists then
                    div [ class "absolute right-3 top-3 text-red-500" ]
                        [ text "✕" ]

                  else if String.length inputValue > 0 then
                    div [ class "absolute right-3 top-3 text-green-500" ]
                        [ text "✓" ]

                  else
                    text ""
                ]

          else if field == State then
            Html.input
                [ type_ inputType
                , class "w-full px-4 py-3 bg-white border-[2.5px] border-gray-200 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200"
                , Html.Attributes.value inputValue
                , Html.Attributes.disabled True
                , required isRequired
                ]
                []

          else
            Html.input
                [ type_ inputType
                , class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200"
                , Html.Attributes.value inputValue
                , onInput (UpdateEditForm field)
                , required isRequired
                ]
                []
        ]


viewFormRadioGroup : String -> String -> ContactFormField -> List ( String, String ) -> Html Msg
viewFormRadioGroup labelText selectedValue field options =
    div [ class "form-group" ]
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text labelText ]
        , div [ class "flex gap-4" ]
            (List.map
                (\( val, txt ) ->
                    label
                        [ class
                            ("flex items-center px-4 py-2 rounded-lg border-2 cursor-pointer transition-all duration-200 "
                                ++ (if selectedValue == val then
                                        "border-purple-500 bg-purple-50 text-purple-700"

                                    else
                                        "border-gray-200 hover:border-purple-200"
                                   )
                            )
                        ]
                        [ input
                            [ type_ "radio"
                            , value val
                            , checked (selectedValue == val)
                            , onInput (UpdateEditForm field)
                            , class "sr-only"
                            ]
                            []
                        , text txt
                        ]
                )
                options
            )
        ]


encodeContactForm : ContactForm -> Encode.Value
encodeContactForm form =
    Encode.object
        [ ( "first_name", Encode.string form.firstName )
        , ( "last_name", Encode.string form.lastName )
        , ( "email", Encode.string form.email )
        , ( "phone_number", Encode.string (String.filter Char.isDigit form.phoneNumber |> String.left 10) )
        , ( "state", Encode.string form.state )
        , ( "contact_owner_id", Maybe.map Encode.int form.contactOwnerId |> Maybe.withDefault Encode.null )
        , ( "current_carrier", Encode.string form.currentCarrier )
        , ( "effective_date", Encode.string form.effectiveDate )
        , ( "birth_date", Encode.string form.birthDate )
        , ( "tobacco_user", Encode.bool form.tobaccoUser )
        , ( "gender", Encode.string form.gender )
        , ( "zip_code", Encode.string form.zipCode )
        , ( "plan_type", Encode.string form.planType )
        ]


viewLoading : Html Msg
viewLoading =
    div [ class "flex justify-center items-center h-64" ]
        [ div [ class "animate-spin rounded-full h-8 w-8 border-2 border-purple-500 border-t-transparent" ] [] ]


viewSpinner : Html msg
viewSpinner =
    div [ class "animate-spin rounded-full h-5 w-5 border-2 border-purple-500 border-t-transparent" ] []



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    if model.showModal /= NoModal then
        Browser.Events.onKeyDown
            (Decode.map
                (\key ->
                    if key == "Escape" then
                        CloseModal

                    else
                        NoOp
                )
                (Decode.field "key" Decode.string)
            )

    else
        Sub.none


checkEmail : String -> Cmd Msg
checkEmail email =
    Http.get
        { url = "/api/contacts/check-email/" ++ email
        , expect = Http.expectJson EmailChecked (Decode.map (\exists -> { exists = exists }) (Decode.field "exists" Decode.bool))
        }


lookupZipCode : String -> Cmd Msg
lookupZipCode zipCode =
    Http.get
        { url = "/api/zip-lookup/" ++ zipCode
        , expect = Http.expectJson GotZipLookup zipInfoDecoder
        }


zipInfoDecoder : Decode.Decoder ZipInfo
zipInfoDecoder =
    Decode.succeed ZipInfo
        |> Pipeline.required "state" Decode.string
        |> Pipeline.required "counties" (Decode.list Decode.string)
        |> Pipeline.required "cities" (Decode.list Decode.string)


deleteContact : Int -> Cmd Msg
deleteContact contactId =
    Http.request
        { method = "DELETE"
        , headers = []
        , url = "/api/contacts"
        , body = Http.jsonBody (Encode.list Encode.int [ contactId ])
        , expect = Http.expectJson ContactDeleted deleteResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


type alias DeleteResponse =
    { success : Bool
    , deletedIds : List Int
    , message : String
    }


deleteResponseDecoder : Decode.Decoder DeleteResponse
deleteResponseDecoder =
    Decode.map3 DeleteResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "deleted_ids" (Decode.list Decode.int))
        (Decode.field "message" Decode.string)


viewDeleteConfirmModal : Model -> Html Msg
viewDeleteConfirmModal model =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-8" ]
        [ div [ class "bg-white rounded-xl p-8 max-w-md w-full mx-4 shadow-xl relative" ]
            [ button
                [ class "absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ text "×" ]
            , h2 [ class "text-xl font-semibold text-gray-900 mb-4" ]
                [ text "Delete Contact" ]
            , p [ class "text-sm text-gray-600 mb-6" ]
                [ text "Are you sure you want to delete this contact? This action cannot be undone." ]
            , div [ class "flex justify-end space-x-4" ]
                [ button
                    [ class "px-4 py-2 text-gray-700 text-sm font-medium rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200"
                    , onClick CloseModal
                    ]
                    [ text "Cancel" ]
                , if model.isDeletingContact then
                    div [ class "px-4 py-2 flex items-center" ]
                        [ viewSpinner ]

                  else
                    button
                        [ class "px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors duration-200"
                        , onClick DeleteContact
                        ]
                        [ text "Delete" ]
                ]
            ]
        ]


quoteLinkDecoder : Decode.Decoder { quoteId : String, redirectUrl : String }
quoteLinkDecoder =
    Decode.map2 (\id url -> { quoteId = id, redirectUrl = url })
        (Decode.field "quoteId" Decode.string)
        (Decode.field "redirectUrl" Decode.string)


followUpsDecoder : Decoder (List FollowUpRequest)
followUpsDecoder =
    Decode.list
        (Decode.map3 FollowUpRequest
            (Decode.field "type" Decode.string)
            (Decode.field "quoteId" Decode.string)
            (Decode.field "createdAt" posixDecoder)
        )


posixDecoder : Decoder Posix
posixDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                let
                    parts =
                        String.split " " str

                    datePart =
                        List.head parts |> Maybe.withDefault ""

                    timePart =
                        List.drop 1 parts |> List.head |> Maybe.withDefault ""

                    dateParts =
                        String.split "-" datePart

                    year =
                        List.head dateParts |> Maybe.andThen String.toInt |> Maybe.withDefault 1970

                    month =
                        List.drop 1 dateParts |> List.head |> Maybe.andThen String.toInt |> Maybe.withDefault 1

                    day =
                        List.drop 2 dateParts |> List.head |> Maybe.andThen String.toInt |> Maybe.withDefault 1

                    timeComponents =
                        String.split ":" timePart

                    hour =
                        List.head timeComponents |> Maybe.andThen String.toInt |> Maybe.withDefault 0

                    minute =
                        List.drop 1 timeComponents |> List.head |> Maybe.andThen String.toInt |> Maybe.withDefault 0

                    second =
                        List.drop 2 timeComponents |> List.head |> Maybe.andThen (String.split "." >> List.head) |> Maybe.andThen String.toInt |> Maybe.withDefault 0

                    -- Calculate milliseconds since epoch
                    msPerDay =
                        86400000

                    msPerHour =
                        3600000

                    msPerMinute =
                        60000

                    msPerSecond =
                        1000

                    -- Start with Unix epoch (1970-01-01) and add days
                    daysFromEpoch =
                        (year - 1970)
                            * 365
                            + ((year - 1969) // 4)
                            + (case month of
                                1 ->
                                    0

                                2 ->
                                    31

                                3 ->
                                    59

                                4 ->
                                    90

                                5 ->
                                    120

                                6 ->
                                    151

                                7 ->
                                    181

                                8 ->
                                    212

                                9 ->
                                    243

                                10 ->
                                    273

                                11 ->
                                    304

                                12 ->
                                    334

                                _ ->
                                    0
                              )
                            + day
                            - 1

                    timestamp =
                        daysFromEpoch
                            * msPerDay
                            + hour
                            * msPerHour
                            + minute
                            * msPerMinute
                            + second
                            * msPerSecond
                in
                Decode.succeed (Time.millisToPosix timestamp)
            )


viewFollowUpRequest : Zone -> FollowUpRequest -> Html Msg
viewFollowUpRequest zone followUp =
    div [ class "flex items-center justify-between py-3 border-b border-gray-100 last:border-0" ]
        [ div [ class "flex items-center space-x-4" ]
            [ div [ class "text-sm text-gray-600" ]
                [ text (formatDate zone followUp.createdAt) ]
            , div [ class "text-sm font-medium" ]
                [ text
                    (case followUp.type_ of
                        "accept" ->
                            "Accepted - Ready to Switch"

                        "decline" ->
                            "Declined - Looking for Alternatives"

                        _ ->
                            "General Follow-up Request"
                    )
                ]
            ]
        ]


formatDate : Zone -> Posix -> String
formatDate zone time =
    let
        year =
            String.fromInt (Time.toYear zone time)

        month =
            case Time.toMonth zone time of
                Jan ->
                    "01"

                Feb ->
                    "02"

                Mar ->
                    "03"

                Apr ->
                    "04"

                May ->
                    "05"

                Jun ->
                    "06"

                Jul ->
                    "07"

                Aug ->
                    "08"

                Sep ->
                    "09"

                Oct ->
                    "10"

                Nov ->
                    "11"

                Dec ->
                    "12"

        day =
            String.padLeft 2 '0' (String.fromInt (Time.toDay zone time))

        hour =
            Time.toHour zone time

        ( displayHour, amPm ) =
            if hour == 0 then
                ( "12", "AM" )

            else if hour < 12 then
                ( String.fromInt hour, "AM" )

            else if hour == 12 then
                ( "12", "PM" )

            else
                ( String.fromInt (hour - 12), "PM" )

        minute =
            String.padLeft 2 '0' (String.fromInt (Time.toMinute zone time))
    in
    year ++ "-" ++ month ++ "-" ++ day ++ " at " ++ displayHour ++ ":" ++ minute ++ " " ++ amPm



-- HELPERS


isStateActive : EmailSchedule -> Bool
isStateActive schedule =
    List.member schedule.state schedule.stateLicenses



-- Helper function to parse eligibility answers from JSON string


parseEligibilityAnswers : String -> List EligibilityQuestion
parseEligibilityAnswers jsonStr =
    let
        jsonResult =
            Decode.decodeString (Decode.dict eligibilityQuestionDecoder) jsonStr
    in
    case jsonResult of
        Ok dict ->
            Dict.toList dict
                |> List.map
                    (\( idStr, question ) ->
                        let
                            id =
                                String.toInt idStr |> Maybe.withDefault 0
                        in
                        { question | id = id }
                    )
                |> List.sortBy .id

        Err _ ->
            []


eligibilityQuestionDecoder : Decode.Decoder EligibilityQuestion
eligibilityQuestionDecoder =
    Decode.map5 EligibilityQuestion
        (Decode.succeed 0)
        -- Temporary ID that will be replaced
        (Decode.field "question_text" Decode.string)
        (Decode.field "question_type" questionTypeDecoder)
        (Decode.field "answer" answerDecoder)
        (Decode.oneOf
            [ Decode.field "follow_up_questions" (Decode.list followUpQuestionDecoder)
            , Decode.succeed [] -- Default to empty list if missing
            ]
        )


followUpQuestionDecoder : Decode.Decoder EligibilityFollowUp
followUpQuestionDecoder =
    Decode.map3 EligibilityFollowUp
        (Decode.field "id" Decode.int)
        (Decode.field "question_text" Decode.string)
        (Decode.field "answer" answerDecoder)


questionTypeDecoder : Decode.Decoder QuestionType
questionTypeDecoder =
    Decode.string
        |> Decode.andThen
            (\typeStr ->
                if typeStr == "main" then
                    Decode.succeed MainQuestion

                else if String.startsWith "followup_" typeStr then
                    let
                        parentIdStr =
                            String.dropLeft 9 typeStr

                        parentId =
                            String.toInt parentIdStr |> Maybe.withDefault 0
                    in
                    Decode.succeed (FollowUpQuestion parentId)

                else
                    -- Treat other question types as main questions instead of failing
                    Decode.succeed MainQuestion
            )


answerDecoder : Decode.Decoder (Maybe (Either Bool String))
answerDecoder =
    Decode.oneOf
        [ Decode.bool |> Decode.map (\b -> Just (Left b))
        , Decode.string |> Decode.map (\s -> Just (Right s))
        , Decode.null Nothing
        ]


viewHealthAssessmentModal : Model -> Html Msg
viewHealthAssessmentModal model =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-4 sm:p-8 z-50 overflow-auto" ]
        [ div [ class "bg-white rounded-xl shadow-xl w-full max-w-4xl max-h-[90vh] flex flex-col" ]
            [ div [ class "px-6 py-4 border-b border-gray-200 flex justify-between items-center" ]
                [ h2 [ class "text-xl font-semibold text-gray-900" ]
                    [ text "Health Assessment Results" ]
                , button
                    [ class "text-gray-400 hover:text-gray-600 focus:outline-none"
                    , onClick CloseModal
                    ]
                    [ text "×" ]
                ]
            , div [ class "p-6 overflow-auto flex-grow" ]
                [ viewHealthAssessmentContent model.eligibilityQuestions ]
            , div [ class "px-6 py-4 border-t border-gray-200 flex justify-end" ]
                [ button
                    [ class "px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 font-medium"
                    , onClick CloseModal
                    ]
                    [ text "Close" ]
                ]
            ]
        ]


viewHealthAssessmentContent : List EligibilityQuestion -> Html Msg
viewHealthAssessmentContent questions =
    if List.isEmpty questions then
        div [ class "text-center p-8" ]
            [ div [ class "inline-flex items-center justify-center w-12 h-12 rounded-full bg-gray-100 text-gray-500 mb-4" ]
                [ text "!" ]
            , h3 [ class "text-lg font-medium text-gray-700 mb-2" ]
                [ text "Health Assessment Not Completed" ]
            , p [ class "text-gray-600" ]
                [ text "This contact has not yet completed their health assessment questionnaire." ]
            ]

    else
        let
            mainQuestions =
                List.filter (\q -> q.questionType == MainQuestion) questions
                    |> List.sortBy .id

            hasAnyYes =
                List.any
                    (\q ->
                        case q.answer of
                            Just (Left True) ->
                                q.questionType == MainQuestion

                            _ ->
                                False
                    )
                    questions

            statusBorderClass =
                if hasAnyYes then
                    "border-red-200 bg-red-50"

                else
                    "border-green-200 bg-green-50"

            statusIconClass =
                if hasAnyYes then
                    "bg-red-100 text-red-600"

                else
                    "bg-green-100 text-green-600"

            statusTitleClass =
                if hasAnyYes then
                    "text-red-800"

                else
                    "text-green-800"

            statusTextClass =
                if hasAnyYes then
                    "text-red-700"

                else
                    "text-green-700"
        in
        div []
            [ div [ class ("mb-6 p-4 rounded-lg border " ++ statusBorderClass) ]
                [ div [ class "flex items-center" ]
                    [ span [ class ("inline-flex items-center justify-center w-8 h-8 rounded-full " ++ statusIconClass) ]
                        [ if hasAnyYes then
                            text "!"

                          else
                            text "✓"
                        ]
                    , div [ class "ml-3" ]
                        [ h3 [ class ("font-medium " ++ statusTitleClass) ]
                            [ if hasAnyYes then
                                text "Health Issues Identified"

                              else
                                text "All Health Checks Passed"
                            ]
                        , p [ class ("text-sm " ++ statusTextClass) ]
                            [ if hasAnyYes then
                                text "This contact has flagged health conditions that may affect their eligibility."

                              else
                                text "This contact has no health conditions that would affect their eligibility."
                            ]
                        ]
                    ]
                ]
            , div [ class "space-y-6" ]
                (List.map (viewMainQuestionWithFollowups questions) mainQuestions)
            ]


viewMainQuestionWithFollowups : List EligibilityQuestion -> EligibilityQuestion -> Html Msg
viewMainQuestionWithFollowups allQuestions mainQuestion =
    let
        isYes =
            case mainQuestion.answer of
                Just (Left True) ->
                    True

                _ ->
                    False

        borderClass =
            if isYes then
                "border-red-300"

            else
                "border-gray-200"
    in
    div [ class ("rounded-lg border " ++ borderClass ++ " overflow-hidden") ]
        [ div
            [ class
                ("p-4 "
                    ++ (if isYes then
                            "bg-red-50"

                        else
                            "bg-gray-50"
                       )
                )
            ]
            [ div [ class "flex items-start" ]
                [ div [ class "flex-grow" ]
                    [ div [ class "font-medium mb-1" ]
                        [ text mainQuestion.text ]
                    , div
                        [ class
                            ("text-sm font-medium "
                                ++ (if isYes then
                                        "text-red-700"

                                    else
                                        "text-green-700"
                                   )
                            )
                        ]
                        [ text
                            (if isYes then
                                "Yes"

                             else
                                "No"
                            )
                        ]
                    ]
                ]
            ]
        , if isYes && not (List.isEmpty mainQuestion.followUpQuestions) then
            div [ class "divide-y divide-gray-100" ]
                (List.map viewFollowUpQuestionAnswer mainQuestion.followUpQuestions)

          else
            text ""
        ]


viewFollowUpQuestionAnswer : EligibilityFollowUp -> Html Msg
viewFollowUpQuestionAnswer followUp =
    div [ class "p-4 bg-white" ]
        [ div [ class "font-medium text-sm text-gray-700 mb-1" ]
            [ text followUp.text ]
        , div [ class "text-sm" ]
            [ case followUp.answer of
                Just (Left isYes) ->
                    div
                        [ class
                            (if isYes then
                                "text-red-600 font-medium"

                             else
                                "text-green-600 font-medium"
                            )
                        ]
                        [ text
                            (if isYes then
                                "Yes"

                             else
                                "No"
                            )
                        ]

                Just (Right textAnswer) ->
                    if String.isEmpty textAnswer then
                        div [ class "text-gray-500 italic" ]
                            [ text "No answer provided" ]

                    else
                        div [ class "text-gray-900 bg-gray-50 p-2 rounded border border-gray-200" ]
                            [ text textAnswer ]

                Nothing ->
                    div [ class "text-gray-500 italic" ]
                        [ text "No answer" ]
            ]
        ]

================
File: frontend/src/Contacts.elm
================
module Contacts exposing
    ( Model
    , Msg(..)
    , init
    , subscriptions
    , update
    , view
    )

-- Proper imports for CSV parsing

import Browser
import Browser.Events
import Browser.Navigation as Nav
import Csv.Decode as CsvDecode
import Csv.Parser as CsvParser
import CsvProcessor exposing (CarrierMapping, ColumnMapping, extractHeaders, extractUniqueValues, processCsvToContacts, suggestCarrierMappings, suggestColumnMappings)
import Dict exposing (Dict)
import File exposing (File)
import File.Download
import File.Select as Select
import Html exposing (Html, button, col, colgroup, details, div, h1, h2, h3, input, label, nav, option, p, select, span, summary, table, tbody, td, text, th, thead, tr)
import Html.Attributes exposing (attribute, checked, class, disabled, placeholder, required, selected, title, type_, value)
import Html.Events exposing (on, onClick, onInput, onSubmit, preventDefaultOn, stopPropagationOn)
import Http
import Json.Decode as Decode exposing (Decoder, bool, int, nullable, string)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import List.Extra
import Process
import Svg exposing (path, svg)
import Svg.Attributes exposing (d, fill, stroke, viewBox)
import Task
import Time
import Url exposing (Url)
import Url.Builder as Url
import Utils.Formatters exposing (formatPhoneNumber)



-- MAIN


main : Program () Model Msg
main =
    Browser.application
        { init = \flags url key -> init key Nothing
        , view = \model -> { title = "Dashboard", body = [ view model ] }
        , update = update
        , subscriptions = subscriptions
        , onUrlChange = \_ -> NoOp
        , onUrlRequest = \_ -> NoOp
        }



-- MODEL


type alias Contact =
    { id : Int
    , firstName : Maybe String
    , lastName : Maybe String
    , email : String
    , phoneNumber : Maybe String
    , state : Maybe String
    , contactOwnerId : Maybe Int
    , contactOwner : Maybe User
    , currentCarrier : Maybe String
    , effectiveDate : Maybe String
    , birthDate : Maybe String
    , tobaccoUser : Maybe Bool
    , gender : Maybe String
    , zipCode : Maybe String
    , planType : Maybe String
    , status : String
    , agentId : Maybe Int
    , lastEmailed : Maybe String
    }


type Modal
    = NoModal
    | ContactChoiceModal
    | AddModal
    | EditModal Contact
    | CsvUploadModal UploadState
    | DeleteConfirmModal
    | ReassignAgentModal


type alias Model =
    { contacts : List Contact
    , selectedContacts : List Int
    , showModal : Modal
    , searchQuery : String
    , addForm : ContactForm
    , editForm : ContactForm
    , sortColumn : Maybe SortColumn
    , sortDirection : SortDirection
    , activeFilters : Filters
    , openFilter : Maybe FilterType
    , currentTime : Time.Posix
    , isLoadingContacts : Bool
    , isUploadingCsv : Bool
    , isDeletingContacts : Bool
    , isSubmittingForm : Bool
    , isCheckingEmail : Bool
    , emailExists : Bool
    , currentUser : Maybe User
    , showProfileMenu : Bool
    , error : Maybe String
    , saveOnUpdate : Bool
    , expandedContactId : Maybe Int
    , availableFilters : AvailableFilters
    , carriers : List String
    , agents : List User
    , key : Nav.Key
    , pagination : PaginationState
    , quotesSent : Int
    , manualQuotesSent : Int
    , quotesViewed : Int
    , healthQuestionsCompleted : Int
    , isLoadingDashboardStats : Bool
    , dashboardStatsError : Maybe String
    }


type alias ContactForm =
    { id : Maybe Int
    , firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    , state : String
    , contactOwnerId : Maybe Int
    , currentCarrier : Maybe String
    , effectiveDate : String
    , birthDate : String
    , tobaccoUser : Bool
    , gender : String
    , zipCode : String
    , planType : Maybe String
    }


type SortColumn
    = NameCol
    | StatusCol
    | EmailCol
    | PhoneNumberCol
    | StateCol
    | ContactOwnerCol
    | CurrentCarrierCol
    | EffectiveDateCol


type SortDirection
    = Ascending
    | Descending


type alias Filters =
    { carriers : List String
    , states : List String
    , ageRange : Maybe ( Int, Int )
    , agents : List Int
    }


type alias ZipInfo =
    { state : String
    , counties : List String
    , cities : List String
    }


type alias UploadState =
    { dragOver : Bool
    , file : Maybe File
    , error : Maybe String
    , errorCsv : Maybe String
    , converted_carriers_csv : Maybe String
    , stats : Maybe UploadStats
    , overwriteDuplicates : Bool
    , selectedAgentId : Maybe Int
    , columnMapping : Maybe ColumnMapping
    , carrierMapping : Maybe CarrierMapping
    , detectedCarriers : List String
    , csvHeaders : List String
    , processingHeaders : Bool
    , extractingCarriers : Bool
    , invalidEmails : List { email : String, reason : String }
    }


type alias UploadStats =
    { totalRows : Int
    , errorRows : Int
    , validRows : Int
    , converted_carrier_rows : Int
    , supported_carriers : List { name : String, aliases : List String }
    }


type alias DeleteResponse =
    { success : Bool
    , deletedIds : List Int
    , message : String
    }


type alias ReassignResponse =
    { success : Bool
    , updatedIds : List Int
    , message : String
    }


type alias User =
    { id : Int
    , email : String
    , firstName : String
    , lastName : String
    , isAdmin : Bool
    , isAgent : Bool
    , isDefault : Bool
    , organizationId : Int
    , isActive : Bool
    , phone : String
    , carriers : List String
    , stateLicenses : List String
    }


type alias AvailableFilters =
    { carriers : List String
    , states : List String
    }


type alias ContactsResponse =
    { contacts : List Contact
    , filterOptions : AvailableFilters
    , total : Int
    , page : Int
    , limit : Int
    }


type alias PaginationState =
    { currentPage : Int
    , totalPages : Int
    , totalItems : Int
    , itemsPerPage : Int
    }


type alias ColumnMapping =
    { firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    , currentCarrier : String
    , effectiveDate : String
    , birthDate : String
    , tobaccoUser : String
    , gender : String
    , zipCode : String
    , planType : String
    }


type alias CarrierMapping =
    { detectedCarriers : List String
    , mappings : Dict String String -- Original carrier name -> Standardized carrier name
    }


type alias SuggestedMappings =
    { columnMappings : ColumnMapping
    , carrierMappings : Dict String String
    }


emptyAvailableFilters : AvailableFilters
emptyAvailableFilters =
    { carriers = []
    , states = []
    }


init : Nav.Key -> Maybe User -> ( Model, Cmd Msg )
init key maybeUser =
    let
        model =
            { contacts = []
            , selectedContacts = []
            , showModal = NoModal
            , searchQuery = ""
            , addForm = emptyForm
            , editForm = emptyForm
            , sortColumn = Nothing
            , sortDirection = Ascending
            , activeFilters = emptyFilters
            , openFilter = Nothing
            , currentTime = Time.millisToPosix 0
            , isLoadingContacts = True
            , isUploadingCsv = False
            , isDeletingContacts = False
            , isSubmittingForm = False
            , isCheckingEmail = False
            , emailExists = False
            , currentUser = maybeUser
            , showProfileMenu = False
            , error = Nothing
            , saveOnUpdate = False
            , expandedContactId = Nothing
            , availableFilters = emptyAvailableFilters
            , carriers = []
            , agents = []
            , key = key
            , pagination = { currentPage = 1, totalPages = 1, totalItems = 0, itemsPerPage = 100 }
            , quotesSent = 0
            , manualQuotesSent = 0
            , quotesViewed = 0
            , healthQuestionsCompleted = 0
            , isLoadingDashboardStats = True
            , dashboardStatsError = Nothing
            }
    in
    ( model
    , Cmd.batch [ fetchContacts model, fetchDashboardStats ]
    )


emptyForm : ContactForm
emptyForm =
    { id = Nothing
    , firstName = ""
    , lastName = ""
    , email = ""
    , phoneNumber = ""
    , state = ""
    , contactOwnerId = Nothing
    , currentCarrier = Nothing
    , effectiveDate = ""
    , birthDate = ""
    , tobaccoUser = False
    , gender = ""
    , zipCode = ""
    , planType = Nothing
    }


emptyFilters : Filters
emptyFilters =
    { carriers = []
    , states = []
    , ageRange = Nothing
    , agents = []
    }


emptyUploadState : Model -> UploadState
emptyUploadState model =
    let
        selectedAgentId =
            case model.currentUser of
                Just user ->
                    if user.isAgent then
                        Just user.id

                    else
                        Nothing

                Nothing ->
                    Nothing

        overwriteOption =
            case model.currentUser of
                Just user ->
                    not (user.isAgent && not user.isAdmin)

                Nothing ->
                    True
    in
    { dragOver = False
    , file = Nothing
    , error = Nothing
    , errorCsv = Nothing
    , converted_carriers_csv = Nothing
    , stats = Nothing
    , overwriteDuplicates = overwriteOption
    , selectedAgentId = selectedAgentId
    , columnMapping = Nothing
    , carrierMapping = Nothing
    , detectedCarriers = []
    , csvHeaders = []
    , processingHeaders = False
    , extractingCarriers = False
    , invalidEmails = []
    }



-- UPDATE


type Msg
    = NoOp
    | ShowContactChoiceModal
    | ChooseSingleContact
    | ChooseMultipleContacts
    | ShowAddModal
    | ShowEditModal Contact
    | CloseModal
    | UpdateSearchQuery String
    | UpdateAddForm ContactFormField String
    | UpdateEditForm ContactFormField String
    | EmailBlur String -- New message for email blur events
    | SubmitAddForm
    | SubmitEditForm
    | CheckEmail String
    | EmailChecked (Result Http.Error { exists : Bool })
    | EmailCheckTimeout
    | GotContacts (Result Http.Error ContactsResponse)
    | ContactAdded (Result Http.Error Contact)
    | ContactUpdated (Result Http.Error Contact)
    | HandleKeyDown String
    | SetSort SortColumn
    | ToggleFilter FilterType String
    | SetAgeFilter Int Int
    | ClearFilters
    | LookupZipCode String
    | GotZipLookup (Result Http.Error ZipInfo)
    | Batch (List Msg)
    | ToggleFilterDropdown FilterType
    | SelectAllFilter FilterType Bool
    | CloseFilterDropdown
    | GotCurrentTime Time.Posix
    | ToggleSelectContact Int
    | SelectAllContacts
    | DeselectAllContacts
    | EmailSelectedCarriers
    | EmailSelectedContacts
    | ShowCsvUploadModal
    | DragEnter
    | DragLeave
    | FileDrop File
    | FileSelected File
    | ClickedSelectFile
    | UploadCsv
    | CsvUploaded (Result Http.Error UploadResponse)
    | DownloadErrorCsv String
    | DownloadCarrierConversionsCsv String
    | ShowDeleteConfirmModal
    | DeleteSelectedContacts
    | ContactsDeleted (Result Http.Error DeleteResponse)
    | ToggleOverwriteDuplicates Bool
    | GotCurrentUser (Result Http.Error User)
    | NavigateToContact Int
    | GotCarriers (Result Http.Error (List String))
    | GotAgents (Result Http.Error (List User))
    | SelectUploadAgent Int
    | ShowReassignAgentModal
    | SelectReassignAgent Int
    | ReassignSelectedContacts
    | ContactsReassigned (Result Http.Error ReassignResponse)
    | ChangePage Int
    | ChangeItemsPerPage Int
    | UpdateColumnMapping String String
    | ExtractCsvHeaders File
    | CsvHeadersExtracted (Result String (List String))
    | SuggestedMappingsReceived (Result Http.Error SuggestedMappings)
    | ExtractCarrierValues
    | CarrierValuesExtracted (List String)
    | UpdateCarrierMapping String String
    | GotCarriersForMapping (List String) (Result Http.Error (List { name : String, aliases : List String }))
    | EmailValidationCompleted (List { email : String, reason : String })
      -- Dashboard stats messages
    | FetchDashboardStats
    | GotDashboardStats (Result Http.Error { success : Bool, stats : { quotesSent : Int, quotesViewed : Int, followUpsRequested : Int, healthQuestionsCompleted : Int } })


type ContactFormField
    = FirstName
    | LastName
    | Email
    | PhoneNumber
    | State
    | ContactOwnerId
    | CurrentCarrier
    | EffectiveDate
    | BirthDate
    | TobaccoUser
    | Gender
    | ZipCode
    | PlanType


type FilterType
    = CarrierFilter
    | StateFilter
    | AgeFilter
    | AgentFilter


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )

        ShowContactChoiceModal ->
            ( { model | showModal = ContactChoiceModal }, Cmd.none )

        ChooseSingleContact ->
            ( { model | showModal = AddModal }, Cmd.none )

        ChooseMultipleContacts ->
            ( { model | showModal = CsvUploadModal (emptyUploadState model) }, Cmd.none )

        ShowAddModal ->
            ( { model | showModal = AddModal }, Cmd.none )

        ShowEditModal contact ->
            ( { model
                | showModal = EditModal contact
                , editForm =
                    { id = Just contact.id
                    , firstName = Maybe.withDefault "" contact.firstName
                    , lastName = Maybe.withDefault "" contact.lastName
                    , email = contact.email
                    , phoneNumber = Maybe.withDefault "" contact.phoneNumber
                    , state = Maybe.withDefault "" contact.state
                    , contactOwnerId = contact.contactOwnerId
                    , currentCarrier = contact.currentCarrier
                    , effectiveDate = Maybe.withDefault "" contact.effectiveDate
                    , birthDate = Maybe.withDefault "" contact.birthDate
                    , tobaccoUser = Maybe.withDefault False contact.tobaccoUser
                    , gender = Maybe.withDefault "" contact.gender
                    , zipCode = Maybe.withDefault "" contact.zipCode
                    , planType = contact.planType
                    }
              }
            , Cmd.none
            )

        CloseModal ->
            ( { model
                | showModal = NoModal
                , addForm = emptyForm
                , editForm = emptyForm
                , isCheckingEmail = False
                , emailExists = False
                , error = Nothing
                , isSubmittingForm = False
              }
            , Cmd.none
            )

        UpdateSearchQuery query ->
            let
                updatedModel =
                    { model | searchQuery = query, isLoadingContacts = True }
            in
            ( updatedModel, fetchContacts updatedModel )

        UpdateAddForm field value ->
            let
                form =
                    model.addForm

                updatedForm =
                    case field of
                        FirstName ->
                            { form | firstName = value }

                        LastName ->
                            { form | lastName = value }

                        Email ->
                            { form | email = value }

                        PhoneNumber ->
                            { form | phoneNumber = String.filter Char.isDigit value |> String.left 10 }

                        State ->
                            { form | state = value }

                        ContactOwnerId ->
                            { form | contactOwnerId = String.toInt value }

                        CurrentCarrier ->
                            { form | currentCarrier = Just value }

                        EffectiveDate ->
                            { form | effectiveDate = value }

                        BirthDate ->
                            { form | birthDate = value }

                        TobaccoUser ->
                            { form | tobaccoUser = value == "true" }

                        Gender ->
                            { form | gender = value }

                        ZipCode ->
                            { form | zipCode = value }

                        PlanType ->
                            { form | planType = Just value }

                -- Update the command logic to check emails properly
                cmd =
                    if field == ZipCode && String.length value == 5 then
                        submitEditFormWithFlag updatedForm True

                    else
                        Cmd.none
            in
            case model.showModal of
                ContactChoiceModal ->
                    ( model, Cmd.none )

                AddModal ->
                    ( { model
                        | addForm = updatedForm
                        , isCheckingEmail = field == Email && String.contains "@" value && String.length value > 5
                        , emailExists = False
                        , error = Nothing
                      }
                    , cmd
                    )

                EditModal _ ->
                    ( { model | editForm = updatedForm }, cmd )

                NoModal ->
                    ( model, Cmd.none )

                CsvUploadModal _ ->
                    ( model, Cmd.none )

                DeleteConfirmModal ->
                    ( model, Cmd.none )

                ReassignAgentModal ->
                    ( model, Cmd.none )

        UpdateEditForm field value ->
            let
                form =
                    model.editForm

                updatedForm =
                    case field of
                        FirstName ->
                            { form | firstName = value }

                        LastName ->
                            { form | lastName = value }

                        Email ->
                            { form | email = value }

                        PhoneNumber ->
                            { form | phoneNumber = String.filter Char.isDigit value |> String.left 10 }

                        State ->
                            { form | state = value }

                        ContactOwnerId ->
                            { form | contactOwnerId = String.toInt value }

                        CurrentCarrier ->
                            { form | currentCarrier = Just value }

                        EffectiveDate ->
                            { form | effectiveDate = value }

                        BirthDate ->
                            { form | birthDate = value }

                        TobaccoUser ->
                            { form | tobaccoUser = value == "true" }

                        Gender ->
                            { form | gender = value }

                        ZipCode ->
                            { form | zipCode = value }

                        PlanType ->
                            { form | planType = Just value }

                -- Update the command logic
                cmd =
                    if field == ZipCode && String.length value == 5 then
                        LookupZipCode value
                            |> Task.succeed
                            |> Task.perform identity

                    else
                        Cmd.none
            in
            case model.showModal of
                ContactChoiceModal ->
                    ( model, Cmd.none )

                AddModal ->
                    ( { model
                        | addForm = updatedForm
                        , isCheckingEmail = field == Email && String.contains "@" value && String.length value > 5
                        , emailExists = False
                        , error = Nothing
                      }
                    , cmd
                    )

                EditModal _ ->
                    ( { model
                        | editForm = updatedForm
                        , isCheckingEmail = field == Email && String.contains "@" value && String.length value > 5
                        , emailExists = False
                        , error = Nothing
                      }
                    , cmd
                    )

                NoModal ->
                    ( model, Cmd.none )

                CsvUploadModal _ ->
                    ( model, Cmd.none )

                DeleteConfirmModal ->
                    ( model, Cmd.none )

                ReassignAgentModal ->
                    ( model, Cmd.none )

        EmailBlur email ->
            if isValidEmail email then
                ( { model | isCheckingEmail = True }
                , checkEmail email
                )

            else
                ( model, Cmd.none )

        SubmitAddForm ->
            ( { model | isSubmittingForm = True }
            , submitAddForm model.addForm
            )

        SubmitEditForm ->
            ( { model
                | isSubmittingForm = True
                , saveOnUpdate = True
              }
            , submitEditFormWithFlag model.editForm False
            )

        CheckEmail email ->
            ( { model | isCheckingEmail = True }
            , checkEmail email
            )

        EmailChecked (Ok response) ->
            ( { model
                | isCheckingEmail = False
                , emailExists = response.exists
                , error =
                    if response.exists then
                        Just "A contact with this email already exists"

                    else
                        Nothing
              }
            , Cmd.none
            )

        EmailChecked (Err error) ->
            let
                errorMsg =
                    case error of
                        Http.BadUrl _ ->
                            "Invalid URL for email check"

                        Http.Timeout ->
                            "Email check timed out"

                        Http.NetworkError ->
                            "Network error during email check"

                        Http.BadStatus code ->
                            "Server error: " ++ String.fromInt code

                        Http.BadBody errBody ->
                            "Invalid response: " ++ errBody
            in
            ( { model
                | isCheckingEmail = False
                , error = Just ("Failed to check email: " ++ errorMsg)
              }
            , Cmd.none
            )

        EmailCheckTimeout ->
            ( { model
                | isCheckingEmail = False
                , error = Just "Email check timed out. Please continue."
              }
            , Cmd.none
            )

        GotContacts (Ok response) ->
            ( { model
                | contacts = response.contacts
                , isLoadingContacts = False
                , availableFilters = response.filterOptions
                , pagination =
                    { currentPage = response.page
                    , totalItems = response.total
                    , itemsPerPage = response.limit
                    , totalPages = ceiling (toFloat response.total / toFloat response.limit)
                    }
              }
            , Cmd.none
            )

        GotContacts (Err error) ->
            ( { model | error = Just "Failed to load contacts" }, Cmd.none )

        ContactAdded (Ok contact) ->
            ( { model
                | contacts = contact :: model.contacts
                , showModal = NoModal
                , addForm = emptyForm
                , isSubmittingForm = False
              }
            , Cmd.none
            )

        ContactAdded (Err _) ->
            ( { model | isSubmittingForm = False }
            , Cmd.none
            )

        ContactUpdated (Ok contact) ->
            let
                updatedContacts =
                    updateContact contact model.contacts

                updatedModel =
                    if model.saveOnUpdate then
                        -- Close the modal for a final save
                        { model
                            | contacts = updatedContacts
                            , showModal = NoModal
                            , editForm = emptyForm
                            , isSubmittingForm = False
                            , error = Nothing
                            , saveOnUpdate = False
                        }

                    else
                        -- Just update the state field in the form
                        { model
                            | contacts = updatedContacts
                            , editForm =
                                model.editForm
                                    |> (\form -> { form | state = Maybe.withDefault "" contact.state })
                            , isSubmittingForm = False
                            , error = Nothing
                        }
            in
            ( updatedModel, Cmd.none )

        ContactUpdated (Err error) ->
            ( { model
                | isSubmittingForm = False
                , error = Just "Failed to update contact. Please check the ZIP code is valid."
              }
            , Cmd.none
            )

        HandleKeyDown key ->
            if key == "Escape" then
                ( { model | showModal = NoModal }, Cmd.none )

            else
                ( model, Cmd.none )

        SetSort column ->
            let
                ( newColumn, newDirection ) =
                    case ( model.sortColumn, model.sortDirection ) of
                        ( Just currentColumn, direction ) ->
                            if currentColumn == column then
                                -- Toggle direction if same column
                                ( Just column
                                , if direction == Ascending then
                                    Descending

                                  else
                                    Ascending
                                )

                            else
                                -- New column, start with ascending
                                ( Just column, Ascending )

                        ( Nothing, _ ) ->
                            -- First time sorting, start with ascending
                            ( Just column, Ascending )
            in
            ( { model
                | sortColumn = newColumn
                , sortDirection = newDirection
              }
            , Cmd.none
            )

        ToggleFilter filterType value ->
            let
                updatedModel =
                    { model
                        | activeFilters = toggleFilter model.activeFilters filterType value
                        , isLoadingContacts = True
                    }
            in
            ( updatedModel, fetchContacts updatedModel )

        SetAgeFilter min max ->
            ( { model | activeFilters = setAgeFilter min max model.activeFilters }, Cmd.none )

        ClearFilters ->
            ( { model | activeFilters = emptyFilters }, Cmd.none )

        LookupZipCode zipCode ->
            ( model
            , Http.get
                { url = "/api/zip-lookup/" ++ zipCode
                , expect = Http.expectJson GotZipLookup zipInfoDecoder
                }
            )

        GotZipLookup (Ok zipInfo) ->
            let
                updateForm form =
                    { form | state = zipInfo.state }
            in
            case model.showModal of
                ContactChoiceModal ->
                    ( model, Cmd.none )

                AddModal ->
                    ( { model | addForm = updateForm model.addForm }, Cmd.none )

                EditModal _ ->
                    ( { model | editForm = updateForm model.editForm }, Cmd.none )

                NoModal ->
                    ( model, Cmd.none )

                CsvUploadModal _ ->
                    ( model, Cmd.none )

                DeleteConfirmModal ->
                    ( model, Cmd.none )

                ReassignAgentModal ->
                    ( model, Cmd.none )

        GotZipLookup (Err _) ->
            ( model, Cmd.none )

        Batch messages ->
            List.foldl
                (\msg_ ( model_, cmds ) ->
                    let
                        ( newModel, newCmd ) =
                            update msg_ model_
                    in
                    ( newModel, newCmd :: cmds )
                )
                ( model, [] )
                messages
                |> (\( m, cs ) -> ( m, Cmd.batch cs ))

        ToggleFilterDropdown filterType ->
            ( { model
                | openFilter =
                    if model.openFilter == Just filterType then
                        Nothing

                    else
                        Just filterType
              }
            , Cmd.none
            )

        SelectAllFilter filterType select ->
            let
                options =
                    case filterType of
                        CarrierFilter ->
                            model.availableFilters.carriers

                        StateFilter ->
                            model.availableFilters.states

                        AgentFilter ->
                            model.agents
                                |> List.filter (\agent -> agent.isAgent)
                                |> List.map (\agent -> agent.firstName ++ " " ++ agent.lastName)

                        _ ->
                            []

                updatedFilters =
                    case filterType of
                        CarrierFilter ->
                            { carriers =
                                if select then
                                    options

                                else
                                    []
                            , states = model.activeFilters.states
                            , ageRange = model.activeFilters.ageRange
                            , agents = model.activeFilters.agents
                            }

                        StateFilter ->
                            { carriers = model.activeFilters.carriers
                            , states =
                                if select then
                                    options

                                else
                                    []
                            , ageRange = model.activeFilters.ageRange
                            , agents = model.activeFilters.agents
                            }

                        AgentFilter ->
                            { carriers = model.activeFilters.carriers
                            , states = model.activeFilters.states
                            , ageRange = model.activeFilters.ageRange
                            , agents =
                                if select then
                                    model.agents
                                        |> List.filter (\agent -> agent.isAgent)
                                        |> List.map (\agent -> agent.id)

                                else
                                    []
                            }

                        _ ->
                            model.activeFilters

                updatedModel =
                    { model | activeFilters = updatedFilters }
            in
            ( updatedModel, fetchContacts updatedModel )

        CloseFilterDropdown ->
            -- Only close the dropdown, don't prevent further events
            ( { model | openFilter = Nothing }, Cmd.none )

        GotCurrentTime time ->
            ( { model | currentTime = time }, Cmd.none )

        ToggleSelectContact id ->
            ( { model
                | selectedContacts =
                    if List.member id model.selectedContacts then
                        List.filter (\x -> x /= id) model.selectedContacts

                    else
                        id :: model.selectedContacts
              }
            , Cmd.none
            )

        SelectAllContacts ->
            let
                visibleContacts =
                    model.contacts
                        |> filterContacts model.activeFilters model.searchQuery model.currentTime
                        |> List.map .id
            in
            ( { model | selectedContacts = visibleContacts }
            , Cmd.none
            )

        DeselectAllContacts ->
            ( { model | selectedContacts = [] }
            , Cmd.none
            )

        EmailSelectedCarriers ->
            -- For now, just a placeholder that does nothing
            ( model, Cmd.none )

        EmailSelectedContacts ->
            -- For now, just a placeholder that does nothing
            ( model, Cmd.none )

        ShowCsvUploadModal ->
            ( { model | showModal = CsvUploadModal (emptyUploadState model) }, Cmd.none )

        DragEnter ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | dragOver = True } }, Cmd.none )

                _ ->
                    ( model, Cmd.none )

        DragLeave ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | dragOver = False } }, Cmd.none )

                _ ->
                    ( model, Cmd.none )

        FileDrop file ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | file = Just file, dragOver = False, processingHeaders = True } }
                    , extractCsvHeaders file
                    )

                _ ->
                    ( model, Cmd.none )

        FileSelected file ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | file = Just file, processingHeaders = True } }
                    , extractCsvHeaders file
                    )

                _ ->
                    ( model, Cmd.none )

        ClickedSelectFile ->
            ( model
            , Select.file [ "text/csv" ] FileSelected
            )

        UploadCsv ->
            case model.showModal of
                CsvUploadModal state ->
                    case state.file of
                        Just file ->
                            ( { model
                                | showModal = CsvUploadModal { state | error = Nothing, errorCsv = Nothing, stats = Nothing }
                                , isUploadingCsv = True
                              }
                            , uploadCsv file state.overwriteDuplicates state.selectedAgentId model
                            )

                        Nothing ->
                            ( model, Cmd.none )

                _ ->
                    ( model, Cmd.none )

        CsvUploaded (Ok response) ->
            let
                currentModal =
                    case model.showModal of
                        CsvUploadModal state ->
                            if response.success then
                                NoModal

                            else
                                CsvUploadModal
                                    { state
                                        | error = Just response.message
                                    }

                        _ ->
                            model.showModal

                updatedModel =
                    { model
                        | showModal = currentModal
                        , isUploadingCsv = False
                    }
            in
            ( updatedModel
            , if response.success then
                fetchContacts updatedModel

              else
                Cmd.none
            )

        CsvUploaded (Err httpError) ->
            let
                errorMessage =
                    case httpError of
                        Http.BadUrl url ->
                            "Invalid URL: " ++ url

                        Http.BadStatus statusCode ->
                            if statusCode == 400 then
                                "The CSV format is invalid. Please check that all required columns are present and data is in the correct format."

                            else if statusCode == 413 then
                                "The file is too large. Please try a smaller file or split your data into multiple uploads."

                            else if statusCode == 403 then
                                "You don't have permission to upload contacts. Please contact your administrator."

                            else
                                "Server error (status " ++ String.fromInt statusCode ++ "). Please try again later."

                        Http.BadBody responseBody ->
                            "The server response was not in the expected format: " ++ responseBody

                        Http.NetworkError ->
                            "Network error. Please check your connection and try again."

                        Http.Timeout ->
                            "The upload timed out. Please try again."
            in
            case model.showModal of
                CsvUploadModal state ->
                    ( { model
                        | showModal = CsvUploadModal { state | error = Just errorMessage }
                        , isUploadingCsv = False
                      }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        DownloadErrorCsv csvContent ->
            ( model
            , File.Download.string "upload_errors.csv" "text/csv" csvContent
            )

        DownloadCarrierConversionsCsv csvContent ->
            ( model
            , File.Download.string "carrier_conversions.csv" "text/csv" csvContent
            )

        ShowDeleteConfirmModal ->
            ( { model | showModal = DeleteConfirmModal }, Cmd.none )

        DeleteSelectedContacts ->
            ( { model | isDeletingContacts = True, showModal = NoModal }
            , if List.isEmpty model.selectedContacts then
                Cmd.none

              else
                deleteContacts model.selectedContacts
            )

        ContactsDeleted (Ok response) ->
            if response.success then
                let
                    updatedModel =
                        { model
                            | contacts = List.filter (\c -> not (List.member c.id response.deletedIds)) model.contacts
                            , selectedContacts = []
                            , isDeletingContacts = False
                        }
                in
                ( updatedModel
                , fetchContacts updatedModel
                )

            else
                ( { model | isDeletingContacts = False }, Cmd.none )

        ContactsDeleted (Err _) ->
            ( model, Cmd.none )

        ToggleOverwriteDuplicates value ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | overwriteDuplicates = value } }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        GotCurrentUser (Ok user) ->
            ( { model | currentUser = Just user }, Cmd.none )

        GotCurrentUser (Err _) ->
            ( model, Cmd.none )

        NavigateToContact id ->
            ( model, Nav.pushUrl model.key ("/contact/" ++ String.fromInt id) )

        GotCarriers (Ok carriers) ->
            ( { model | carriers = carriers }
            , Cmd.none
            )

        GotCarriers (Err _) ->
            ( model, Cmd.none )

        GotAgents (Ok agents) ->
            ( { model | agents = agents }, Cmd.none )

        GotAgents (Err error) ->
            ( model, Cmd.none )

        SelectUploadAgent agentId ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | selectedAgentId = Just agentId } }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        ShowReassignAgentModal ->
            let
                -- Get the first agent ID as the default selected agent
                defaultAgentId =
                    model.agents
                        |> List.head
                        |> Maybe.map .id

                -- Update the edit form with the selected agent
                updatedForm =
                    model.editForm

                updatedFormWithAgent =
                    { updatedForm | contactOwnerId = defaultAgentId }
            in
            ( { model | showModal = ReassignAgentModal, editForm = updatedFormWithAgent }, Cmd.none )

        SelectReassignAgent agentId ->
            let
                updatedForm =
                    model.editForm

                updatedFormWithAgent =
                    { updatedForm | contactOwnerId = Just agentId }
            in
            ( { model | editForm = updatedFormWithAgent }
            , Cmd.none
            )

        ReassignSelectedContacts ->
            if List.isEmpty model.selectedContacts then
                ( model, Cmd.none )

            else
                case model.editForm.contactOwnerId of
                    Just agentId ->
                        if agentId == 0 then
                            -- If "Default" (0) is selected, pass null for agent_id
                            ( { model | showModal = NoModal }
                            , reassignContacts model.selectedContacts 0
                            )

                        else
                            -- Normal agent reassignment
                            ( { model | showModal = NoModal }
                            , reassignContacts model.selectedContacts agentId
                            )

                    Nothing ->
                        ( { model | error = Just "Please select an agent to reassign contacts to" }
                        , Cmd.none
                        )

        ContactsReassigned (Ok response) ->
            let
                updatedModel =
                    { model | showModal = NoModal, selectedContacts = [], editForm = emptyForm }
            in
            ( updatedModel, fetchContacts updatedModel )

        ContactsReassigned (Err _) ->
            ( { model | error = Just "Failed to reassign contacts", showModal = NoModal }, Cmd.none )

        ChangePage page ->
            let
                updatedModel =
                    { model
                        | pagination =
                            model.pagination
                                |> (\p -> { p | currentPage = page })
                        , isLoadingContacts = True
                    }
            in
            ( updatedModel
            , fetchContacts updatedModel
            )

        ChangeItemsPerPage limit ->
            let
                updatedModel =
                    { model
                        | pagination =
                            model.pagination
                                |> (\p -> { p | itemsPerPage = limit, currentPage = 1 })
                        , isLoadingContacts = True
                    }
            in
            ( updatedModel
            , fetchContacts updatedModel
            )

        UpdateColumnMapping field value ->
            case model.showModal of
                CsvUploadModal state ->
                    let
                        updatedMapping =
                            case state.columnMapping of
                                Just mapping ->
                                    Just
                                        (case field of
                                            "firstName" ->
                                                { mapping | firstName = value }

                                            "lastName" ->
                                                { mapping | lastName = value }

                                            "email" ->
                                                { mapping | email = value }

                                            "phoneNumber" ->
                                                { mapping | phoneNumber = value }

                                            "currentCarrier" ->
                                                { mapping | currentCarrier = value }

                                            "effectiveDate" ->
                                                { mapping | effectiveDate = value }

                                            "birthDate" ->
                                                { mapping | birthDate = value }

                                            "tobaccoUser" ->
                                                { mapping | tobaccoUser = value }

                                            "gender" ->
                                                { mapping | gender = value }

                                            "zipCode" ->
                                                { mapping | zipCode = value }

                                            "planType" ->
                                                { mapping | planType = value }

                                            _ ->
                                                mapping
                                        )

                                Nothing ->
                                    Just
                                        { firstName =
                                            if field == "firstName" then
                                                value

                                            else
                                                ""
                                        , lastName =
                                            if field == "lastName" then
                                                value

                                            else
                                                ""
                                        , email =
                                            if field == "email" then
                                                value

                                            else
                                                ""
                                        , phoneNumber =
                                            if field == "phoneNumber" then
                                                value

                                            else
                                                ""
                                        , currentCarrier =
                                            if field == "currentCarrier" then
                                                value

                                            else
                                                ""
                                        , effectiveDate =
                                            if field == "effectiveDate" then
                                                value

                                            else
                                                ""
                                        , birthDate =
                                            if field == "birthDate" then
                                                value

                                            else
                                                ""
                                        , tobaccoUser =
                                            if field == "tobaccoUser" then
                                                value

                                            else
                                                ""
                                        , gender =
                                            if field == "gender" then
                                                value

                                            else
                                                ""
                                        , zipCode =
                                            if field == "zipCode" then
                                                value

                                            else
                                                ""
                                        , planType =
                                            if field == "planType" then
                                                value

                                            else
                                                ""
                                        }
                    in
                    ( { model | showModal = CsvUploadModal { state | columnMapping = updatedMapping } }
                    , case ( field, state.file, updatedMapping ) of
                        ( "currentCarrier", Just file, Just mapping ) ->
                            if mapping.currentCarrier == "" then
                                Cmd.none

                            else
                                Task.perform
                                    (\content -> CarrierValuesExtracted (extractUniqueCarriers content mapping.currentCarrier))
                                    (File.toString file)

                        _ ->
                            Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        ExtractCsvHeaders file ->
            ( model
            , Task.perform
                (\content -> CsvHeadersExtracted (extractHeadersFromCsv content))
                (File.toString file)
            )

        CsvHeadersExtracted result ->
            case model.showModal of
                CsvUploadModal state ->
                    case result of
                        Ok headers ->
                            ( { model | showModal = CsvUploadModal { state | csvHeaders = headers, processingHeaders = False } }
                            , suggestMappings headers
                            )

                        Err error ->
                            ( { model | showModal = CsvUploadModal { state | error = Just ("Failed to parse CSV headers: " ++ error), processingHeaders = False } }
                            , Cmd.none
                            )

                _ ->
                    ( model, Cmd.none )

        SuggestedMappingsReceived result ->
            case model.showModal of
                CsvUploadModal state ->
                    case result of
                        Ok suggestions ->
                            let
                                hasCarrierColumn =
                                    case suggestions.columnMappings.currentCarrier of
                                        "" ->
                                            False

                                        _ ->
                                            True

                                updatedState =
                                    { state
                                        | columnMapping = Just suggestions.columnMappings
                                        , carrierMapping = Just { detectedCarriers = state.detectedCarriers, mappings = suggestions.carrierMappings }
                                        , extractingCarriers = hasCarrierColumn
                                    }

                                -- Create commands to run
                                commands =
                                    []

                                -- Add carrier extraction command if needed
                                commands1 =
                                    case ( hasCarrierColumn, state.file ) of
                                        ( True, Just file ) ->
                                            Task.perform
                                                (\content -> CarrierValuesExtracted (extractUniqueCarriers content suggestions.columnMappings.currentCarrier))
                                                (File.toString file)
                                                :: commands

                                        _ ->
                                            commands

                                -- Add email validation command
                                commands2 =
                                    case state.file of
                                        Just file ->
                                            if not (String.isEmpty suggestions.columnMappings.email) then
                                                let
                                                    dummyCarrierMapping =
                                                        { detectedCarriers = []
                                                        , mappings = Dict.empty
                                                        }
                                                in
                                                Task.perform
                                                    (\content ->
                                                        case CsvProcessor.processCsvToContacts content suggestions.columnMappings dummyCarrierMapping of
                                                            Ok result1 ->
                                                                EmailValidationCompleted (List.map (\contact -> { email = contact.email, reason = contact.reason }) result1.invalid)

                                                            Err _ ->
                                                                EmailValidationCompleted []
                                                    )
                                                    (File.toString file)
                                                    :: commands1

                                            else
                                                commands1

                                        Nothing ->
                                            commands1
                            in
                            ( { model | showModal = CsvUploadModal updatedState }
                            , Cmd.batch commands2
                            )

                        Err _ ->
                            ( { model | showModal = CsvUploadModal { state | error = Just "Failed to get column suggestions" } }
                            , Cmd.none
                            )

                _ ->
                    ( model, Cmd.none )

        ExtractCarrierValues ->
            case model.showModal of
                CsvUploadModal state ->
                    case state.file of
                        Just file ->
                            -- Get carrier column from the column mapping
                            let
                                carrierColumn =
                                    case state.columnMapping of
                                        Just mapping ->
                                            if String.isEmpty mapping.currentCarrier then
                                                Nothing

                                            else
                                                Just mapping.currentCarrier

                                        Nothing ->
                                            Nothing
                            in
                            case carrierColumn of
                                Just column ->
                                    ( { model | showModal = CsvUploadModal { state | extractingCarriers = True } }
                                    , Task.perform
                                        (\content -> CarrierValuesExtracted (extractUniqueCarriers content column))
                                        (File.toString file)
                                    )

                                Nothing ->
                                    ( model, Cmd.none )

                        Nothing ->
                            ( model, Cmd.none )

                _ ->
                    ( model, Cmd.none )

        CarrierValuesExtracted carrierValues ->
            case model.showModal of
                CsvUploadModal state ->
                    -- Instead of making a new API call, create a structure from the model's carriers list
                    let
                        -- Create a map of common carrier aliases for better matching
                        carrierAliases =
                            Dict.fromList
                                [ ( "Aetna", [ "aetna medicare", "aetna advantage", "aetna health", "aetna cvs" ] )
                                , ( "United Healthcare", [ "uhc", "united health", "united", "aarp", "aarp / uhc", "aarp/uhc" ] )
                                , ( "Humana", [ "humana gold", "humana gold plus", "humana choice", "humana value", "humana preferred" ] )
                                , ( "Cigna", [ "cigna healthspring", "cigna-healthspring", "cigna health", "connecticut general" ] )
                                , ( "Blue Cross Blue Shield", [ "bcbs", "blue cross", "blue shield", "anthem", "anthem bcbs" ] )
                                , ( "Wellcare", [ "wellcare by allwell", "allwell", "wellcare value", "wellcare essentials" ] )
                                , ( "Kaiser Permanente", [ "kaiser", "kp", "kaiser senior advantage" ] )
                                , ( "Anthem", [ "anthem blue", "anthem medicare", "anthem medigap" ] )
                                , ( "Molina", [ "molina healthcare", "molina advantage", "molina health" ] )
                                , ( "Ace Chubb", [ "ace / chubb", "ace/chubb", "ace chubb", "chubb" ] )
                                ]

                        -- Convert the simple carriers string list to the format expected by CsvProcessor
                        -- and enhance with known aliases
                        standardCarriers =
                            List.map
                                (\name ->
                                    { name = name
                                    , aliases = Dict.get name carrierAliases |> Maybe.withDefault []
                                    }
                                )
                                model.carriers

                        -- Use CsvProcessor to suggest carrier mappings
                        carrierMapping =
                            CsvProcessor.suggestCarrierMappings carrierValues standardCarriers

                        -- Add validation command if we have all necessary components
                        validateEmails =
                            case ( state.file, state.columnMapping ) of
                                ( Just file, Just colMapping ) ->
                                    if String.isEmpty colMapping.email then
                                        Cmd.none

                                    else
                                        Task.perform
                                            (\content ->
                                                case CsvProcessor.processCsvToContacts content colMapping carrierMapping of
                                                    Ok result ->
                                                        EmailValidationCompleted (List.map (\contact -> { email = contact.email, reason = contact.reason }) result.invalid)

                                                    Err _ ->
                                                        EmailValidationCompleted []
                                            )
                                            (File.toString file)

                                _ ->
                                    Cmd.none
                    in
                    ( { model
                        | showModal =
                            CsvUploadModal
                                { state
                                    | detectedCarriers = carrierValues
                                    , carrierMapping = Just carrierMapping
                                    , extractingCarriers = False
                                }
                      }
                    , validateEmails
                    )

                _ ->
                    ( model, Cmd.none )

        UpdateCarrierMapping original mapped ->
            case model.showModal of
                CsvUploadModal state ->
                    case state.carrierMapping of
                        Just mapping ->
                            let
                                updatedMappings =
                                    Dict.insert original mapped mapping.mappings

                                updatedMapping =
                                    { mapping | mappings = updatedMappings }
                            in
                            ( { model | showModal = CsvUploadModal { state | carrierMapping = Just updatedMapping } }
                            , case ( original, state.file ) of
                                ( "currentCarrier", Just file ) ->
                                    Task.perform
                                        (\content -> CarrierValuesExtracted (extractUniqueCarriers content mapped))
                                        (File.toString file)

                                _ ->
                                    Cmd.none
                            )

                        Nothing ->
                            ( model, Cmd.none )

                _ ->
                    ( model, Cmd.none )

        GotCarriersForMapping detectedCarriers (Ok carriers) ->
            let
                -- Use CsvProcessor to suggest carrier mappings with fuzzy matching
                carrierMapping =
                    CsvProcessor.suggestCarrierMappings detectedCarriers carriers
            in
            case model.showModal of
                CsvUploadModal state ->
                    ( { model
                        | showModal =
                            CsvUploadModal
                                { state
                                    | carrierMapping = Just carrierMapping
                                    , extractingCarriers = False
                                }
                      }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        GotCarriersForMapping _ (Err error) ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model
                        | showModal =
                            CsvUploadModal
                                { state
                                    | extractingCarriers = False
                                    , error = Just "Failed to fetch carrier data for matching"
                                }
                      }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        EmailValidationCompleted invalidEmails ->
            case model.showModal of
                CsvUploadModal state ->
                    ( { model | showModal = CsvUploadModal { state | invalidEmails = invalidEmails } }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        FetchDashboardStats ->
            ( { model | isLoadingDashboardStats = True, dashboardStatsError = Nothing }
            , fetchDashboardStats
            )

        GotDashboardStats result ->
            case result of
                Ok response ->
                    if response.success then
                        let
                            totalQuotesSent =
                                response.stats.quotesSent + response.stats.manualQuotesSent
                        in
                        ( { model
                            | isLoadingDashboardStats = False
                            , quotesSent = totalQuotesSent
                            , manualQuotesSent = response.stats.manualQuotesSent
                            , quotesViewed = response.stats.quotesViewed
                            , healthQuestionsCompleted = response.stats.healthQuestionsCompleted
                            , dashboardStatsError = Nothing
                          }
                        , Cmd.none
                        )

                    else
                        ( { model | isLoadingDashboardStats = False, dashboardStatsError = Just "Failed to load dashboard data." }
                        , Cmd.none
                        )

                Err httpError ->
                    ( { model | isLoadingDashboardStats = False, dashboardStatsError = Just "Error loading dashboard stats." }
                    , Cmd.none
                    )



-- TODO: Handle error
-- Add other update cases here...
-- VIEW


view : Model -> Html Msg
view model =
    div [ class "min-h-screen bg-white" ]
        [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" ]
            [ -- Stats Section - Make more compact with reduced margins
              div [ class "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6" ]
                [ if model.isLoadingContacts then
                    statsCardWithSpinner "Total Contacts"

                  else
                    statsCard "Total Contacts" (String.fromInt model.pagination.totalItems)
                , if model.isLoadingDashboardStats then
                    statsCardWithSpinner "Quotes Sent"

                  else if model.dashboardStatsError /= Nothing then
                    statsCard "Quotes Sent" "0"

                  else
                    statsCard "Quotes Sent" (String.fromInt model.quotesSent)
                , if model.isLoadingDashboardStats then
                    statsCardWithSpinner "Quotes Viewed"

                  else if model.dashboardStatsError /= Nothing then
                    statsCard "Quotes Viewed" "0"

                  else
                    statsCard "Quotes Viewed" (String.fromInt model.quotesViewed)
                , if model.isLoadingDashboardStats then
                    statsCardWithSpinner "Health Questions"

                  else if model.dashboardStatsError /= Nothing then
                    statsCard "Health Questions" "0"

                  else
                    statsCard "Health Questions" (String.fromInt model.healthQuestionsCompleted)
                ]
            , -- Table Container with overflow handling - reduced vertical spacing
              div [ class "overflow-x-auto max-w-7xl mx-auto" ]
                [ -- Add a container around both the header and the table to ensure they have the same width
                  div [ class "w-full" ]
                    [ -- Contacts header and filters - reduced margin bottom
                      div [ class "flex justify-between items-center mb-3 w-full" ]
                        [ div [ class "flex items-center gap-2" ]
                            [ h1 [ class "text-base font-semibold" ] [ text "Contacts " ]
                            , span [ class "text-sm text-gray-500" ]
                                [ text ("(" ++ String.fromInt model.pagination.totalItems ++ ")") ]
                            ]
                        , div [ class "flex items-center gap-2" ]
                            [ -- Only show Agent filter for admins
                              if isAdminOrAdminAgent model.currentUser then
                                div [ class "relative" ]
                                    [ button
                                        [ class "inline-flex items-center gap-1 px-2 py-1 border rounded-md text-sm text-gray-700 hover:bg-gray-50"
                                        , onClick (ToggleFilterDropdown AgentFilter)
                                        ]
                                        [ text "Agent"
                                        , viewIcon "M19 9l-7 7-7-7"
                                        ]
                                    , if model.openFilter == Just AgentFilter then
                                        viewFilterDropdown model AgentFilter

                                      else
                                        text ""
                                    ]

                              else
                                text ""
                            , div [ class "relative" ]
                                [ button
                                    [ class "inline-flex items-center gap-1 px-2 py-1 border rounded-md text-sm text-gray-700 hover:bg-gray-50"
                                    , onClick (ToggleFilterDropdown CarrierFilter)
                                    ]
                                    [ text "Carrier"
                                    , viewIcon "M19 9l-7 7-7-7"
                                    ]
                                , if model.openFilter == Just CarrierFilter then
                                    viewFilterDropdown model CarrierFilter

                                  else
                                    text ""
                                ]
                            , div [ class "relative" ]
                                [ button
                                    [ class "inline-flex items-center gap-1 px-2 py-1 border rounded-md text-sm text-gray-700 hover:bg-gray-50"
                                    , onClick (ToggleFilterDropdown StateFilter)
                                    ]
                                    [ text "State"
                                    , viewIcon "M19 9l-7 7-7-7"
                                    ]
                                , if model.openFilter == Just StateFilter then
                                    viewFilterDropdown model StateFilter

                                  else
                                    text ""
                                ]
                            , div [ class "relative" ]
                                [ input
                                    [ class "w-48 px-2 py-1 border rounded-md text-sm placeholder-gray-500 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500"
                                    , placeholder "Search contacts..."
                                    , value model.searchQuery
                                    , onInput UpdateSearchQuery
                                    ]
                                    []
                                ]
                            , -- Add the add contact button with a different style
                              button
                                [ class "px-2 py-1 bg-black text-white rounded-md text-sm hover:bg-gray-800 transition-colors"
                                , onClick ShowContactChoiceModal
                                ]
                                [ text "+ Add Contact" ]
                            ]
                        ]
                    , table [ class "w-full" ]
                        [ colgroup []
                            [ col [ class "w-12" ] [] -- Checkbox
                            , col [ class "w-48" ] [] -- Name
                            , col [ class "w-16" ] [] -- Contact Status (reduced from w-20)
                            , col [ class "w-48" ] [] -- Email
                            , col [ class "w-28" ] [] -- Phone Number
                            , col [ class "w-16" ] [] -- State
                            , col [ class "w-32" ] [] -- Assigned Agent
                            , col [ class "w-20" ] [] -- Current Carrier (reduced from w-24)
                            , col [ class "w-24" ] [] -- Effective Date
                            , col [ class "w-20" ] [] -- Actions
                            ]
                        , thead [ class "bg-gray-50" ]
                            [ tr []
                                [ th [ class "sticky top-0 px-2 py-1 border-b border-gray-200 bg-gray-50" ]
                                    [ input
                                        [ type_ "checkbox"
                                        , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                                        , checked (not (List.isEmpty model.contacts) && List.length model.selectedContacts == List.length model.contacts)
                                        , onClick
                                            (if not (List.isEmpty model.contacts) && List.length model.selectedContacts == List.length model.contacts then
                                                DeselectAllContacts

                                             else
                                                SelectAllContacts
                                            )
                                        ]
                                        []
                                    ]
                                , tableHeader "Name"

                                --, tableHeader "Status"
                                , tableHeader "Email"
                                , tableHeader "Phone"
                                , tableHeader "State"
                                , tableHeader "Agent"
                                , tableHeader "Carrier"
                                , tableHeader "Eff. Date"
                                , tableHeader "Actions"
                                ]
                            ]
                        , tbody [ class "bg-white" ]
                            (if model.isLoadingContacts then
                                [ tr []
                                    [ td
                                        [ class "px-3 py-8 text-sm text-gray-500 text-center border-t border-gray-200"
                                        , attribute "colspan" "10"
                                        ]
                                        [ div [ class "flex items-center justify-center gap-3" ]
                                            [ viewSpinner
                                            , text "Loading contacts..."
                                            ]
                                        ]
                                    ]
                                ]

                             else if List.isEmpty model.contacts then
                                [ tr []
                                    [ td
                                        [ class "px-3 py-2 text-sm text-gray-500 text-center border-t border-gray-200"
                                        , attribute "colspan" "10"
                                        ]
                                        [ text "No contacts found" ]
                                    ]
                                ]

                             else
                                List.concatMap (viewTableRow model) model.contacts
                            )
                        ]
                    ]
                ]
            ]
        , viewModals model
        , if not (List.isEmpty model.selectedContacts) then
            viewBulkActionBar model

          else
            text ""
        , viewPaginationControls model -- Add pagination controls
        ]


viewBulkActionBar : Model -> Html Msg
viewBulkActionBar model =
    let
        isAdmin =
            isAdminOrAdminAgent model.currentUser
    in
    div
        [ class "fixed bottom-0 inset-x-0 bg-white border-t border-gray-200 shadow-lg transform transition-all duration-200 z-50" ]
        [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4" ]
            [ div [ class "flex justify-between items-center" ]
                [ div [ class "flex items-center gap-4" ]
                    [ span [ class "text-sm text-gray-600" ]
                        [ text (String.fromInt (List.length model.selectedContacts) ++ " contacts selected") ]
                    ]
                , div [ class "flex items-center gap-3" ]
                    [ button
                        [ class "px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900"
                        , onClick DeselectAllContacts
                        ]
                        [ text "Cancel" ]
                    , if isAdmin then
                        -- Reassign button (only for admins)
                        button
                            [ class "px-4 py-2 bg-purple-600 text-white text-sm font-medium rounded-lg hover:bg-purple-700 transition-colors duration-200 mr-2"
                            , onClick ShowReassignAgentModal
                            ]
                            [ text "Reassign Agent" ]

                      else
                        text ""
                    , button
                        [ class "px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors duration-200"
                        , onClick ShowDeleteConfirmModal
                        ]
                        [ if model.isDeletingContacts then
                            viewSpinner

                          else
                            text "Delete Selected"
                        ]
                    ]
                ]
            ]
        ]


statsCard : String -> String -> Html Msg
statsCard title value =
    div [ class "bg-white rounded-lg shadow-xl p-4 sm:p-6" ]
        [ div [ class "text-gray-600 text-xs sm:text-sm" ] [ text title ]
        , div [ class "text-2xl sm:text-4xl font-bold mt-1 sm:mt-2 text-[#03045E]" ] [ text value ]
        ]


statsCardWithSpinner : String -> Html Msg
statsCardWithSpinner title =
    div [ class "bg-white rounded-lg shadow-xl p-4 sm:p-6" ]
        [ div [ class "text-gray-600 text-xs sm:text-sm" ] [ text title ]
        , div [ class "text-2xl sm:text-4xl font-bold mt-1 sm:mt-2 text-[#03045E] flex items-center justify-center" ]
            [ div [ class "animate-spin rounded-full h-8 w-8 border-t-2 border-l-2 border-purple-500" ] [] ]
        ]


tableHeader : String -> Html Msg
tableHeader headerText =
    th [ class "px-2 py-1 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-200 bg-gray-50" ]
        [ text headerText ]


viewTableRow : Model -> Contact -> List (Html Msg)
viewTableRow model contact =
    let
        cellClass =
            "px-2 py-1 text-sm border-t border-gray-200"

        phoneCellClass =
            cellClass ++ " text-xs"

        compactCellClass =
            "px-1 py-1 text-sm border-t border-gray-200"

        -- Reduced padding for compact cells
        -- Added smaller text for phone numbers
        initials =
            String.left 1 (Maybe.withDefault "" contact.firstName) ++ String.left 1 (Maybe.withDefault "" contact.lastName)

        agentName =
            case contact.contactOwner of
                Just owner ->
                    owner.firstName ++ " " ++ owner.lastName

                Nothing ->
                    case contact.agentId of
                        Just agentId ->
                            -- Try to find the agent in our agents list
                            let
                                matchingAgent =
                                    List.filter (\agent -> agent.id == agentId) model.agents
                                        |> List.head
                            in
                            case matchingAgent of
                                Just agent ->
                                    agent.firstName ++ " " ++ agent.lastName

                                Nothing ->
                                    -- Return empty string instead of showing agent ID
                                    ""

                        Nothing ->
                            -- Find the default agent
                            let
                                defaultAgent =
                                    List.filter (\agent -> agent.isDefault) model.agents
                                        |> List.head
                            in
                            case defaultAgent of
                                Just agent ->
                                    agent.firstName ++ " " ++ agent.lastName ++ " (Default)"

                                Nothing ->
                                    "Default"

        currentCarrier =
            Maybe.withDefault "" contact.currentCarrier
    in
    [ tr [ class "hover:bg-gray-50 transition-colors duration-200" ]
        [ td
            [ class (cellClass ++ " text-center")
            ]
            [ input
                [ type_ "checkbox"
                , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                , checked (List.member contact.id model.selectedContacts)
                , onClick (ToggleSelectContact contact.id)
                ]
                []
            ]
        , td [ class cellClass ]
            [ div [ class "flex items-center" ]
                [ div [ class "h-8 w-8 rounded-full bg-purple-100 flex items-center justify-center text-sm text-purple-700 font-medium uppercase" ]
                    [ text initials ]
                , div [ class "ml-3 text-sm text-gray-900" ]
                    [ button
                        [ class "text-left text-gray-900 hover:text-purple-600 transition-colors duration-200"
                        , onClick (NavigateToContact contact.id)
                        ]
                        [ text (Maybe.withDefault "" contact.firstName ++ " " ++ Maybe.withDefault "" contact.lastName) ]
                    ]
                ]
            ]

        {--
        , td [ class compactCellClass ]
            [ viewStatus contact.status ]
        --}
        , td [ class cellClass ]
            [ text contact.email ]
        , td [ class phoneCellClass ]
            [ text (formatPhoneNumber (Maybe.withDefault "" contact.phoneNumber)) ]
        , td [ class cellClass ]
            [ text (Maybe.withDefault "" contact.state) ]
        , td [ class cellClass ]
            [ text agentName ]
        , td [ class compactCellClass ]
            [ text currentCarrier ]
        , td [ class cellClass ]
            [ text (Maybe.withDefault "" contact.effectiveDate) ]
        , td [ class cellClass ]
            [ button
                [ class "text-purple-600 hover:text-purple-800 transition-colors duration-200"
                , onClick (NavigateToContact contact.id)
                ]
                [ viewIcon "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" ]
            ]
        ]
    ]


viewStatus : String -> Html Msg
viewStatus status =
    let
        ( bgColor, textColor, statusText ) =
            case status of
                "Quote Created" ->
                    ( "bg-green-50", "text-green-700", "Quote Created" )

                "Opened Email" ->
                    ( "bg-red-50", "text-red-700", "Opened Email" )

                "Email #2 Sent" ->
                    ( "bg-blue-50", "text-blue-700", "Email #2 Sent" )

                "Email #1 Sent" ->
                    ( "bg-blue-50", "text-blue-700", "Email #1 Sent" )

                "In Queue" ->
                    ( "bg-orange-50", "text-orange-700", "In Queue" )

                _ ->
                    ( "bg-gray-50", "text-gray-700", status )
    in
    div [ class ("inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium " ++ bgColor ++ " " ++ textColor) ]
        [ text statusText ]



-- HELPERS


updateContact : Contact -> List Contact -> List Contact
updateContact updated contacts =
    List.map
        (\contact ->
            if contact.id == updated.id then
                updated

            else
                contact
        )
        contacts



-- HTTP


submitAddForm : ContactForm -> Cmd Msg
submitAddForm form =
    Http.post
        { url = "/api/contacts"
        , body = Http.jsonBody (encodeContactForm form)
        , expect = Http.expectJson ContactAdded contactDecoder
        }


fetchDashboardStats : Cmd Msg
fetchDashboardStats =
    Http.get
        { url = "/api/dashboard/stats"
        , expect = Http.expectJson GotDashboardStats dashboardStatsResponseDecoder
        }


dashboardStatsResponseDecoder : Decode.Decoder { success : Bool, stats : { quotesSent : Int, quotesViewed : Int, followUpsRequested : Int, healthQuestionsCompleted : Int } }
dashboardStatsResponseDecoder =
    Decode.map2
        (\success stats ->
            { success = success
            , stats = stats
            }
        )
        (Decode.field "success" Decode.bool)
        (Decode.field "stats" dashboardStatsDecoder)


dashboardStatsDecoder : Decode.Decoder { quotesSent : Int, quotesViewed : Int, followUpsRequested : Int, healthQuestionsCompleted : Int }
dashboardStatsDecoder =
    Decode.map4
        (\quotesSent quotesViewed followUpsRequested healthQuestionsCompleted ->
            { quotesSent = quotesSent
            , quotesViewed = quotesViewed
            , followUpsRequested = followUpsRequested
            , healthQuestionsCompleted = healthQuestionsCompleted
            }
        )
        (Decode.field "quotesSent" Decode.int)
        (Decode.field "quotesViewed" Decode.int)
        (Decode.field "followUpsRequested" Decode.int)
        (Decode.field "healthQuestionsCompleted" Decode.int)


submitEditFormWithFlag : ContactForm -> Bool -> Cmd Msg
submitEditFormWithFlag form isZipUpdate =
    case form.id of
        Just id ->
            let
                url =
                    if isZipUpdate then
                        "/api/contacts/" ++ String.fromInt id ++ "?zip_update=true"

                    else
                        "/api/contacts/" ++ String.fromInt id
            in
            Http.request
                { method = "PUT"
                , headers = []
                , url = url
                , body = Http.jsonBody (encodeContactForm form)
                , expect = Http.expectJson ContactUpdated contactDecoder
                , timeout = Nothing
                , tracker = Nothing
                }

        Nothing ->
            Cmd.none



-- JSON


contactDecoder : Decode.Decoder Contact
contactDecoder =
    Decode.succeed Contact
        |> Pipeline.required "id" Decode.int
        |> Pipeline.optional "first_name" (Decode.nullable Decode.string) Nothing
        |> Pipeline.optional "last_name" (Decode.nullable Decode.string) Nothing
        |> Pipeline.required "email" Decode.string
        |> Pipeline.optional "phone_number"
            (Decode.string
                |> Decode.andThen
                    (\val -> Decode.succeed val)
                |> Decode.nullable
            )
            Nothing
        |> Pipeline.optional "state" (Decode.nullable Decode.string) Nothing
        |> Pipeline.optional "contact_owner_id" (Decode.nullable Decode.int) Nothing
        |> Pipeline.optional "contact_owner" (Decode.nullable userDecoder) Nothing
        |> Pipeline.optional "current_carrier" (Decode.nullable Decode.string) Nothing
        |> Pipeline.optional "effective_date" (Decode.nullable Decode.string) Nothing
        |> Pipeline.optional "birth_date" (Decode.nullable Decode.string) Nothing
        |> Pipeline.optional "tobacco_user" (Decode.nullable Decode.bool) Nothing
        |> Pipeline.optional "gender" (Decode.nullable Decode.string) Nothing
        |> Pipeline.optional "zip_code" (Decode.nullable Decode.string) Nothing
        |> Pipeline.optional "plan_type" (Decode.nullable Decode.string) Nothing
        |> Pipeline.optional "status" Decode.string "New"
        |> Pipeline.required "agent_id" (Decode.nullable Decode.int)
        |> Pipeline.required "last_emailed" (Decode.nullable Decode.string)


contactsDecoder : Decode.Decoder ContactsResponse
contactsDecoder =
    Decode.succeed ContactsResponse
        |> Pipeline.required "contacts" (Decode.list contactDecoder)
        |> Pipeline.required "filterOptions" filterOptionsDecoder
        |> Pipeline.required "total" Decode.int
        |> Pipeline.required "page" Decode.int
        |> Pipeline.required "limit" Decode.int


filterOptionsDecoder : Decode.Decoder AvailableFilters
filterOptionsDecoder =
    Decode.succeed AvailableFilters
        |> Pipeline.required "carriers" (Decode.list Decode.string)
        |> Pipeline.required "states" (Decode.list Decode.string)


encodeContactForm : ContactForm -> Encode.Value
encodeContactForm form =
    let
        planType =
            case form.planType of
                Just value ->
                    Encode.string value

                Nothing ->
                    Encode.null

        currentCarrier =
            case form.currentCarrier of
                Just value ->
                    Encode.string value

                Nothing ->
                    Encode.null
    in
    Encode.object
        [ ( "first_name", Encode.string form.firstName )
        , ( "last_name", Encode.string form.lastName )
        , ( "email", Encode.string form.email )
        , ( "phone_number", Encode.string (String.filter Char.isDigit form.phoneNumber |> String.left 10) )
        , ( "state", Encode.string form.state )
        , ( "contact_owner_id", Maybe.map Encode.int form.contactOwnerId |> Maybe.withDefault Encode.null )
        , ( "current_carrier", currentCarrier )
        , ( "effective_date", Encode.string form.effectiveDate )
        , ( "birth_date", Encode.string form.birthDate )
        , ( "tobacco_user", Encode.bool form.tobaccoUser )
        , ( "gender", Encode.string form.gender )
        , ( "zip_code", Encode.string form.zipCode )
        , ( "plan_type", planType )
        ]


viewModals : Model -> Html Msg
viewModals model =
    case model.showModal of
        NoModal ->
            text ""

        ContactChoiceModal ->
            viewContactChoiceModal

        AddModal ->
            viewAddModal model model.isSubmittingForm

        EditModal contact ->
            viewEditModal model model.isSubmittingForm

        CsvUploadModal state ->
            viewCsvUploadModal state model.isUploadingCsv model

        DeleteConfirmModal ->
            viewDeleteConfirmModal model

        ReassignAgentModal ->
            viewReassignAgentModal model


viewContactChoiceModal : Html Msg
viewContactChoiceModal =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-4" ]
        [ div [ class "bg-white rounded-md p-5 max-w-lg w-full mx-2 shadow-lg relative" ]
            [ button
                [ class "absolute top-2 right-2 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-xl font-semibold text-gray-900 mb-2" ]
                [ text "Add Contacts" ]
            , div [ class "text-xs text-gray-600 mb-4" ]
                [ text "Select how you want to add your new contacts." ]
            , div [ class "grid grid-cols-2 gap-3" ]
                [ div
                    [ class "p-3 border border-gray-200 rounded-md hover:border-[#03045E] hover:bg-[#03045E]/5 cursor-pointer transition-colors"
                    , onClick ChooseSingleContact
                    ]
                    [ div [ class "flex items-center mb-2" ]
                        [ div [ class "h-6 w-6 rounded-full bg-purple-100 flex items-center justify-center text-xs text-purple-700 font-medium" ]
                            [ viewIcon "M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" ]
                        ]
                    , h3 [ class "text-base font-medium text-gray-900 mb-1" ]
                        [ text "Single Contact" ]
                    , p [ class "text-xs text-gray-600" ]
                        [ text "Individual Form" ]
                    ]
                , div
                    [ class "p-3 border border-gray-200 rounded-md hover:border-[#03045E] hover:bg-[#03045E]/5 cursor-pointer transition-colors"
                    , onClick ChooseMultipleContacts
                    ]
                    [ div [ class "flex items-center mb-2" ]
                        [ div [ class "h-6 w-6 rounded-full bg-purple-100 flex items-center justify-center text-xs text-purple-700 font-medium" ]
                            [ viewIcon "M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" ]
                        ]
                    , h3 [ class "text-base font-medium text-gray-900 mb-1" ]
                        [ text "Multiple Contacts" ]
                    , p [ class "text-xs text-gray-600" ]
                        [ text "CSV Upload" ]
                    ]
                ]
            ]
        ]


viewAddModal : Model -> Bool -> Html Msg
viewAddModal model isSubmitting =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-4" ]
        [ div [ class "bg-white rounded-md p-5 max-w-lg w-full mx-2 shadow-lg relative max-h-[90vh] flex flex-col" ]
            [ button
                [ class "absolute top-2 right-2 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-xl font-semibold text-gray-900 mb-4" ]
                [ text "Add New Client" ]
            , div [ class "overflow-y-auto pr-1 flex-grow" ]
                [ viewContactForm model model.addForm UpdateAddForm SubmitAddForm "Add Client" isSubmitting ]
            ]
        ]


viewEditModal : Model -> Bool -> Html Msg
viewEditModal model isSubmitting =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-4" ]
        [ div [ class "bg-white rounded-md p-5 max-w-lg w-full mx-2 shadow-lg relative max-h-[90vh] flex flex-col" ]
            [ button
                [ class "absolute top-2 right-2 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-xl font-semibold text-gray-900 mb-4" ]
                [ text "Edit Client" ]
            , div [ class "overflow-y-auto pr-1 flex-grow" ]
                [ viewContactForm model model.editForm UpdateEditForm SubmitEditForm "Save Changes" isSubmitting ]
            ]
        ]


viewCsvUploadModal : UploadState -> Bool -> Model -> Html Msg
viewCsvUploadModal state isUploading model =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-8" ]
        [ div [ class "bg-white rounded-xl p-10 max-w-2xl w-full mx-4 shadow-xl relative max-h-[90vh] overflow-y-auto" ]
            [ button
                [ class "absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-2xl font-semibold text-gray-900 mb-8" ]
                [ text "Upload CSV" ]
            , div [ class "mb-6 text-sm text-gray-600" ]
                [ text "Need help formatting your CSV? "
                , Html.a
                    [ class "text-purple-600 hover:text-purple-800 hover:underline"
                    , Html.Attributes.href "/example.csv"
                    , Html.Attributes.download "example.csv"
                    ]
                    [ text "Download example CSV file" ]
                ]

            -- Error display
            , if state.error /= Nothing then
                div [ class "mb-6" ]
                    [ if state.stats /= Nothing then
                        let
                            stats =
                                Maybe.withDefault
                                    { totalRows = 0
                                    , errorRows = 0
                                    , validRows = 0
                                    , converted_carrier_rows = 0
                                    , supported_carriers = []
                                    }
                                    state.stats
                        in
                        div []
                            [ if stats.errorRows > 0 then
                                div [ class "p-4 mb-4 bg-red-50 border border-red-200 rounded-lg" ]
                                    [ div [ class "flex items-start" ]
                                        [ div [ class "flex-shrink-0" ]
                                            [ viewIcon "M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" ]
                                        , div [ class "ml-3" ]
                                            [ h3 [ class "text-sm font-medium text-red-800" ]
                                                [ text "Upload Errors" ]
                                            , div [ class "mt-2 text-sm text-red-700" ]
                                                [ text ("Found " ++ String.fromInt stats.errorRows ++ " rows with errors. Successfully imported " ++ String.fromInt stats.validRows ++ " rows.")
                                                , case state.errorCsv of
                                                    Just csvContent ->
                                                        div [ class "mt-2 font-medium" ]
                                                            [ button
                                                                [ class "text-purple-600 hover:text-purple-800 hover:underline"
                                                                , onClick (DownloadErrorCsv csvContent)
                                                                ]
                                                                [ text "Download and Fix Error Rows" ]
                                                            ]

                                                    Nothing ->
                                                        text ""
                                                ]
                                            ]
                                        ]
                                    ]

                              else
                                text ""
                            , if stats.converted_carrier_rows > 0 then
                                div [ class "p-4 bg-yellow-50 border border-yellow-200 rounded-lg" ]
                                    [ div [ class "flex items-start" ]
                                        [ div [ class "flex-shrink-0" ]
                                            [ viewIcon "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" ]
                                        , div [ class "ml-3" ]
                                            [ h3 [ class "text-sm font-medium text-yellow-800 mb-3" ]
                                                [ text "Carrier Conversions" ]
                                            , div [ class "space-y-4 text-sm text-yellow-700" ]
                                                [ p []
                                                    [ text (String.fromInt stats.converted_carrier_rows ++ " rows had carriers we do not currently recognize or provide quotes for. This is normal and expected -- we will still email these contacts with quotes from supported Carriers.") ]
                                                , p []
                                                    [ text "However, this can also happen if there is a misspelling of a supported carrier. Please review to ensure the data is correct." ]
                                                , case state.converted_carriers_csv of
                                                    Just csvContent ->
                                                        div [ class "pt-1" ]
                                                            [ button
                                                                [ class "text-purple-600 hover:text-purple-800 hover:underline font-medium"
                                                                , onClick (DownloadCarrierConversionsCsv csvContent)
                                                                ]
                                                                [ text "Download Unrecognized Carrier Rows" ]
                                                            ]

                                                    Nothing ->
                                                        text ""
                                                , div [ class "pt-2 border-t border-yellow-200" ]
                                                    [ details [ class "text-sm" ]
                                                        [ summary [ class "cursor-pointer text-purple-600 hover:text-purple-800 font-medium" ]
                                                            [ text "Click to see supported carriers" ]
                                                        , div [ class "mt-3 pl-4 space-y-2" ]
                                                            (List.map
                                                                (\carrier ->
                                                                    div [ class "flex items-baseline" ]
                                                                        [ span [ class "font-medium" ] [ text carrier.name ]
                                                                        , if not (List.isEmpty carrier.aliases) then
                                                                            span [ class "ml-4 text-yellow-800" ]
                                                                                [ text ("Also accepts: " ++ String.join ", " carrier.aliases) ]

                                                                          else
                                                                            text ""
                                                                        ]
                                                                )
                                                                stats.supported_carriers
                                                            )
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]

                              else
                                text ""
                            ]

                      else
                        div [ class "p-4 bg-red-50 border border-red-200 rounded-lg" ]
                            [ div [ class "flex items-start" ]
                                [ div [ class "flex-shrink-0" ]
                                    [ viewIcon "M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" ]
                                , div [ class "ml-3" ]
                                    [ h3 [ class "text-sm font-medium text-red-800" ]
                                        [ text "Error uploading CSV" ]
                                    , div [ class "mt-2 text-sm text-red-700" ]
                                        [ text (Maybe.withDefault "" state.error) ]
                                    ]
                                ]
                            ]
                    ]

              else
                text ""

            -- Display invalid emails section (if any)
            , if not (List.isEmpty state.invalidEmails) then
                div [ class "mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg" ]
                    [ div [ class "flex items-start" ]
                        [ div [ class "flex-shrink-0" ]
                            [ viewIcon "M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" ]
                        , div [ class "ml-3 w-full" ]
                            [ h3 [ class "text-sm font-medium text-yellow-800 mb-2" ]
                                [ text ("Invalid Emails (" ++ String.fromInt (List.length state.invalidEmails) ++ ")") ]
                            , p [ class "text-sm text-yellow-700 mb-3" ]
                                [ text "The following records have invalid email addresses and will be skipped during import:" ]
                            , div [ class "max-h-80 overflow-y-auto bg-white border border-yellow-200 rounded p-2" ]
                                [ Html.ul [ class "text-xs text-yellow-800 space-y-1" ]
                                    (List.indexedMap
                                        (\index inv ->
                                            Html.li [ class "flex" ]
                                                [ span [ class "text-gray-500 w-16 flex-shrink-0" ] [ text ("Row " ++ String.fromInt (index + 1) ++ ":") ]
                                                , span [ class "flex-grow" ]
                                                    [ if String.isEmpty inv.email then
                                                        text "(empty string)"

                                                      else
                                                        text inv.email
                                                    ]
                                                ]
                                        )
                                        state.invalidEmails
                                    )
                                ]
                            ]
                        ]
                    ]

              else
                text ""

            -- Form fields (agent selection, etc.)
            , div [ class "mb-4 space-y-4" ]
                [ case model.currentUser of
                    Just user ->
                        if user.isAdmin then
                            div [ class "flex items-center space-x-2" ]
                                [ input
                                    [ type_ "checkbox"
                                    , checked state.overwriteDuplicates
                                    , onInput (\val -> ToggleOverwriteDuplicates (val == "true"))
                                    , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                                    ]
                                    []
                                , label [ class "text-sm text-gray-600" ]
                                    [ text "Overwrite existing contacts (matched on email address)" ]
                                ]

                        else
                            text ""

                    Nothing ->
                        text ""
                , div [ class "form-group" ]
                    [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
                        [ text "Assign to Agent" ]
                    , div [ class "relative" ]
                        [ if List.isEmpty model.agents then
                            div [ class "p-2 text-gray-500 border rounded" ]
                                [ text "Loading agents..." ]

                          else
                            case model.currentUser of
                                Just user ->
                                    if user.isAgent && not user.isAdmin then
                                        -- For non-admin agents, show their name as fixed value
                                        let
                                            agentName =
                                                model.agents
                                                    |> List.filter (\agent -> agent.id == user.id)
                                                    |> List.head
                                                    |> Maybe.map (\agent -> agent.firstName ++ " " ++ agent.lastName)
                                                    |> Maybe.withDefault (user.firstName ++ " " ++ user.lastName)
                                        in
                                        div [ class "w-full px-4 py-3 bg-gray-100 border-[2.5px] border-gray-300 rounded-lg text-gray-700" ]
                                            [ text agentName ]

                                    else
                                        -- For admins, show dropdown with all agents
                                        let
                                            agentOptions =
                                                List.map
                                                    (\agent ->
                                                        ( String.fromInt agent.id
                                                        , agent.firstName ++ " " ++ agent.lastName
                                                        )
                                                    )
                                                    model.agents

                                            -- Get default agent ID - either from state.selectedAgentId if valid, or from current user
                                            defaultAgentId =
                                                user.id
                                        in
                                        Html.select
                                            [ class "w-full px-4 py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200 appearance-none"
                                            , value (String.fromInt defaultAgentId)
                                            , onInput (\val -> SelectUploadAgent (String.toInt val |> Maybe.withDefault 0))
                                            ]
                                            (List.map
                                                (\( val, label ) ->
                                                    option [ value val ] [ text label ]
                                                )
                                                agentOptions
                                            )

                                Nothing ->
                                    text ""
                        ]
                    ]
                ]

            -- File upload area
            , if state.processingHeaders then
                -- Show loading indicator while processing CSV headers
                div [ class "w-full h-64 border-2 border-gray-200 rounded-lg flex flex-col items-center justify-center p-8" ]
                    [ div [ class "animate-spin rounded-full h-12 w-12 border-4 border-purple-500 border-t-transparent mb-4" ] []
                    , div [ class "text-gray-600 text-center" ]
                        [ span [ class "block font-medium mb-1" ]
                            [ text "Processing your CSV file" ]
                        , span [ class "text-sm" ]
                            [ text "We're analyzing your file to map the columns automatically..." ]
                        ]
                    ]

              else
                div
                    [ class
                        ("w-full h-64 border-2 border-dashed rounded-lg flex flex-col items-center justify-center p-8 transition-colors "
                            ++ (if state.dragOver then
                                    "border-purple-500 bg-purple-50"

                                else
                                    "border-gray-300 hover:border-purple-400"
                               )
                        )
                    , preventDefaultOn "dragenter" (Decode.succeed ( DragEnter, True ))
                    , preventDefaultOn "dragover" (Decode.succeed ( NoOp, True ))
                    , preventDefaultOn "dragleave" (Decode.succeed ( DragLeave, True ))
                    , preventDefaultOn "drop" (dropDecoder FileDrop)
                    ]
                    [ div [ class "text-gray-500 text-center" ]
                        [ span [ class "block text-lg font-medium mb-2" ]
                            [ text "Drag and drop your CSV file here, or " ]
                        , button
                            [ class "text-purple-600 font-semibold hover:text-purple-700 focus:outline-none focus:underline"
                            , onClick ClickedSelectFile
                            ]
                            [ text "browse" ]
                        , if state.file /= Nothing then
                            div [ class "mt-4 text-sm bg-green-50 text-green-800 px-3 py-2 rounded-lg" ]
                                [ text ("File selected: " ++ (Maybe.map File.name state.file |> Maybe.withDefault "")) ]

                          else
                            text ""
                        ]
                    ]

            -- Column mapping section
            , if state.file /= Nothing && not state.processingHeaders && not (List.isEmpty state.csvHeaders) then
                div [ class "mt-8 space-y-6" ]
                    [ viewColumnMapping state
                    , viewCarrierMapping state model.carriers
                    , div [ class "mt-4" ]
                        [ h3 [ class "text-sm font-medium text-gray-700 mb-2" ]
                            [ text "Available CSV Columns" ]
                        , div [ class "bg-gray-50 p-3 rounded-md text-sm" ]
                            [ span [ class "text-gray-400 mr-2" ]
                                [ text "Headers:" ]
                            , span [ class "text-gray-600" ]
                                [ text (String.join ", " state.csvHeaders) ]
                            ]
                        ]
                    ]

              else
                text ""

            -- Buttons
            , div [ class "mt-8 flex justify-end space-x-4" ]
                [ button
                    [ class "px-6 py-3 bg-gray-100 text-gray-600 text-sm font-medium rounded-lg hover:bg-gray-200 transition-colors duration-200 focus:ring-4 focus:ring-gray-200"
                    , onClick CloseModal
                    ]
                    [ text "Cancel" ]
                , if isUploading then
                    div [ class "px-6 py-3 flex items-center space-x-2" ]
                        [ viewSpinner ]

                  else
                    let
                        isDisabled =
                            state.file
                                == Nothing
                                || state.processingHeaders
                                || state.extractingCarriers
                                || not (hasCarrierMappings state)
                                || List.isEmpty state.detectedCarriers
                    in
                    button
                        [ type_ "submit"
                        , class
                            (if isDisabled then
                                "px-6 py-3 bg-purple-400 text-white text-sm font-medium rounded-lg transition-colors duration-200 focus:ring-4 focus:ring-purple-200 cursor-not-allowed"

                             else
                                "px-6 py-3 bg-purple-500 text-white text-sm font-medium rounded-lg hover:bg-purple-600 transition-colors duration-200 focus:ring-4 focus:ring-purple-200"
                            )
                        , onClick UploadCsv
                        , Html.Attributes.disabled isDisabled
                        ]
                        [ text "Upload" ]
                ]
            ]
        ]


viewColumnMapping : UploadState -> Html Msg
viewColumnMapping state =
    div [ class "space-y-4" ]
        [ h3 [ class "text-sm font-medium text-gray-700 flex justify-between" ]
            [ text "Column Mapping"
            , span [ class "text-xs text-purple-600" ]
                [ text ("Detected " ++ String.fromInt (List.length state.csvHeaders) ++ " columns in your CSV") ]
            ]
        , p [ class "text-xs text-gray-500" ]
            [ text "Map your CSV columns to our required fields." ]
        , div [ class "grid grid-cols-2 gap-3" ]
            [ viewColumnMapField "First Name" "firstName" state
            , viewColumnMapField "Last Name" "lastName" state
            , viewColumnMapField "Email" "email" state
            , viewColumnMapField "Phone Number" "phoneNumber" state
            , viewColumnMapField "Current Carrier" "currentCarrier" state
            , viewColumnMapField "Effective Date" "effectiveDate" state
            , viewColumnMapField "Birth Date" "birthDate" state
            , viewColumnMapField "Tobacco User" "tobaccoUser" state
            , viewColumnMapField "Gender" "gender" state
            , viewColumnMapField "ZIP Code" "zipCode" state
            , viewColumnMapField "Plan Type" "planType" state
            ]
        ]


viewCarrierMapping : UploadState -> List String -> Html Msg
viewCarrierMapping state supportedCarriers =
    let
        carrierColumnName =
            case state.columnMapping of
                Just mapping ->
                    mapping.currentCarrier

                Nothing ->
                    ""

        hasCarrierColumn =
            not (String.isEmpty carrierColumnName)

        hasExtractedCarriers =
            not (List.isEmpty state.detectedCarriers)
    in
    div [ class "mt-6 space-y-4 border-t pt-6" ]
        [ h3 [ class "text-sm font-medium text-gray-700" ]
            [ text "Carrier Mapping" ]
        , p [ class "text-xs text-gray-500" ]
            [ text "Map carrier names in your CSV to standard carrier names in our system." ]

        -- Show which column is used for carrier data
        , div [ class "mb-4" ]
            [ if hasCarrierColumn then
                div [ class "flex space-x-2" ]
                    [ div [ class "text-xs font-medium text-gray-600 py-1" ]
                        [ text ("Using column \"" ++ carrierColumnName ++ "\" for carrier data") ]

                    {--
                    , button
                        [ class "px-3 py-1 bg-purple-500 text-white text-xs font-medium rounded hover:bg-purple-600 transition-colors"
                        , onClick ExtractCarrierValues
                        , disabled state.extractingCarriers
                        ]
                        [ if state.extractingCarriers then
                            div [ class "flex items-center" ]
                                [ viewSpinner
                                , span [ class "ml-2" ] [ text "Extracting..." ]
                                ]

                          else
                            text "Extract Carriers"
                        ]
                    --}
                    ]

              else
                div [ class "text-xs text-gray-500 italic" ]
                    [ text "Select a column for \"Current Carrier\" in the mapping above to continue." ]
            ]

        -- Show carrier mappings once extracted
        , if hasExtractedCarriers then
            div [ class "border rounded-md p-4 bg-gray-50" ]
                [ p [ class "text-xs text-gray-600 mb-3" ]
                    [ text ("Found " ++ String.fromInt (List.length state.detectedCarriers) ++ " unique carrier names in your CSV.") ]
                , if List.isEmpty state.detectedCarriers then
                    div [ class "text-sm text-gray-500 italic" ]
                        [ text "No carrier names found in the selected column." ]

                  else
                    div [ class "space-y-2 max-h-64 overflow-y-auto pr-2" ]
                        (List.map
                            (\carrier -> viewCarrierMappingRow carrier state supportedCarriers)
                            state.detectedCarriers
                        )
                ]

          else if hasCarrierColumn then
            div [ class "text-sm text-gray-500 italic" ]
                [ text "Click 'Extract Carriers' to analyze carrier names in your CSV." ]

          else
            div [ class "text-sm text-gray-500 italic" ]
                [ text "Select the \"Current Carrier\" column in the mapping above to begin." ]
        ]


viewCarrierMappingRow : String -> UploadState -> List String -> Html Msg
viewCarrierMappingRow carrier state supportedCarriers =
    let
        currentMapping =
            case state.carrierMapping of
                Just mapping ->
                    Dict.get carrier mapping.mappings
                        |> Maybe.withDefault "Other"

                Nothing ->
                    "Other"
    in
    div [ class "flex justify-between items-center py-1 border-b border-gray-200" ]
        [ div [ class "text-sm text-gray-700" ]
            [ text carrier ]
        , div [ class "w-1/2" ]
            [ select
                [ class "w-full px-2 py-1 text-sm border rounded"
                , value currentMapping
                , onInput (UpdateCarrierMapping carrier)
                ]
                (option [ value "Other" ] [ text "Other/Unsupported" ]
                    :: List.map
                        (\c ->
                            option
                                [ value c
                                , selected (currentMapping == c)
                                ]
                                [ text c ]
                        )
                        supportedCarriers
                )
            ]
        ]


viewColumnMapField : String -> String -> UploadState -> Html Msg
viewColumnMapField labelText field state =
    div [ class "flex flex-col gap-1" ]
        [ label [ class "text-xs font-medium text-gray-600" ]
            [ text labelText ]
        , select
            [ class "w-full px-2 py-1 text-sm border rounded"
            , value (getColumnMapping field state)
            , onInput (UpdateColumnMapping field)
            ]
            (option [ value "" ] [ text "Select a column" ]
                :: List.map
                    (\header ->
                        option
                            [ value header
                            , selected (getColumnMapping field state == header)
                            ]
                            [ text header ]
                    )
                    state.csvHeaders
            )
        ]


getColumnMapping : String -> UploadState -> String
getColumnMapping field state =
    case state.columnMapping of
        Just mapping ->
            case field of
                "firstName" ->
                    mapping.firstName

                "lastName" ->
                    mapping.lastName

                "email" ->
                    mapping.email

                "phoneNumber" ->
                    mapping.phoneNumber

                "currentCarrier" ->
                    mapping.currentCarrier

                "effectiveDate" ->
                    mapping.effectiveDate

                "birthDate" ->
                    mapping.birthDate

                "tobaccoUser" ->
                    mapping.tobaccoUser

                "gender" ->
                    mapping.gender

                "zipCode" ->
                    mapping.zipCode

                "planType" ->
                    mapping.planType

                _ ->
                    ""

        Nothing ->
            ""


dropDecoder : (File -> msg) -> Decoder ( msg, Bool )
dropDecoder toMsg =
    Decode.at [ "dataTransfer", "files" ] (Decode.index 0 File.decoder)
        |> Decode.map (\file -> ( toMsg file, True ))


uploadCsv : File -> Bool -> Maybe Int -> Model -> Cmd Msg
uploadCsv file overwriteDuplicates maybeAgentId model =
    let
        actualOverwriteValue =
            case model.currentUser of
                Just user ->
                    if user.isAgent && not user.isAdmin then
                        False

                    else
                        overwriteDuplicates

                Nothing ->
                    overwriteDuplicates
    in
    File.toString file
        |> Task.andThen
            (\csvContent ->
                case model.showModal of
                    CsvUploadModal state ->
                        case ( state.columnMapping, state.carrierMapping ) of
                            ( Just colMapping, Just carrierMapping ) ->
                                case CsvProcessor.processCsvToContacts csvContent colMapping carrierMapping of
                                    Ok { valid, invalid } ->
                                        if List.isEmpty valid then
                                            -- If there are no valid contacts, return an error
                                            Task.succeed
                                                (Err
                                                    (Http.BadBody
                                                        "No valid contacts found in CSV. Please check email formats."
                                                    )
                                                )

                                        else
                                            Http.task
                                                { method = "POST"
                                                , headers = []
                                                , url = "/api/contacts/bulk-import"
                                                , body =
                                                    Http.jsonBody
                                                        (Encode.object
                                                            [ ( "contacts", Encode.list encodeProcessedContact valid )
                                                            , ( "overwriteExisting", Encode.bool actualOverwriteValue )
                                                            , ( "agentId"
                                                              , case maybeAgentId of
                                                                    Just id ->
                                                                        Encode.int id

                                                                    Nothing ->
                                                                        Encode.null
                                                              )
                                                            ]
                                                        )
                                                , resolver =
                                                    Http.stringResolver <|
                                                        \response ->
                                                            case response of
                                                                Http.GoodStatus_ _ body ->
                                                                    case Decode.decodeString uploadResponseDecoder body of
                                                                        Ok value ->
                                                                            Ok value

                                                                        Err err ->
                                                                            Err (Http.BadBody (Decode.errorToString err))

                                                                Http.BadUrl_ url ->
                                                                    Err (Http.BadUrl url)

                                                                Http.Timeout_ ->
                                                                    Err Http.Timeout

                                                                Http.NetworkError_ ->
                                                                    Err Http.NetworkError

                                                                Http.BadStatus_ metadata _ ->
                                                                    Err (Http.BadStatus metadata.statusCode)
                                                , timeout = Nothing
                                                }
                                                |> Task.map Ok
                                                |> Task.onError (\err -> Task.succeed (Err err))

                                    Err err ->
                                        Task.succeed
                                            (Err
                                                (Http.BadBody
                                                    (case err of
                                                        CsvProcessor.ParseError msg ->
                                                            "Failed to parse CSV: " ++ msg

                                                        CsvProcessor.EmptyFile ->
                                                            "CSV file is empty"

                                                        CsvProcessor.NoHeaders ->
                                                            "CSV file has no headers"
                                                    )
                                                )
                                            )

                            _ ->
                                Task.succeed
                                    (Err
                                        (Http.BadBody "Column mapping or carrier mapping not configured")
                                    )

                    _ ->
                        Task.succeed
                            (Err
                                (Http.BadBody "Invalid modal state")
                            )
            )
        |> Task.perform CsvUploaded



-- Add encoder for processed contacts


encodeProcessedContact : CsvProcessor.ProcessedContact -> Encode.Value
encodeProcessedContact contact =
    Encode.object
        [ ( "first_name", Encode.string contact.firstName )
        , ( "last_name", Encode.string contact.lastName )
        , ( "email", Encode.string contact.email )
        , ( "phone_number", Encode.string contact.phoneNumber )
        , ( "current_carrier", Encode.string contact.currentCarrier )
        , ( "effective_date", Encode.string contact.effectiveDate )
        , ( "birth_date", Encode.string contact.birthDate )
        , ( "tobacco_user", Encode.bool contact.tobaccoUser )
        , ( "gender", Encode.string contact.gender )
        , ( "zip_code", Encode.string contact.zipCode )
        , ( "plan_type", Encode.string contact.planType )
        ]



-- Helper function to encode column mapping to JSON


encodeColumnMapping : ColumnMapping -> String
encodeColumnMapping mapping =
    Encode.encode 0
        (Encode.object
            [ ( "firstName", Encode.string mapping.firstName )
            , ( "lastName", Encode.string mapping.lastName )
            , ( "email", Encode.string mapping.email )
            , ( "phoneNumber", Encode.string mapping.phoneNumber )
            , ( "currentCarrier", Encode.string mapping.currentCarrier )
            , ( "effectiveDate", Encode.string mapping.effectiveDate )
            , ( "birthDate", Encode.string mapping.birthDate )
            , ( "tobaccoUser", Encode.string mapping.tobaccoUser )
            , ( "gender", Encode.string mapping.gender )
            , ( "zipCode", Encode.string mapping.zipCode )
            , ( "planType", Encode.string mapping.planType )
            ]
        )



-- Helper function to encode carrier mapping to JSON


encodeCarrierMapping : CarrierMapping -> String
encodeCarrierMapping mapping =
    Encode.encode 0
        (Encode.object
            [ ( "detectedCarriers", Encode.list Encode.string mapping.detectedCarriers )
            , ( "mappings", Encode.dict identity Encode.string mapping.mappings )
            ]
        )


uploadResponseDecoder : Decode.Decoder UploadResponse
uploadResponseDecoder =
    Decode.succeed UploadResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "message" Decode.string
        |> Pipeline.required "totalRows" Decode.int


type alias UploadResponse =
    { success : Bool
    , message : String
    , totalRows : Int
    }


formatUploadError : String -> String
formatUploadError message =
    if String.startsWith "Missing required columns:" message then
        let
            missingColumns =
                String.dropLeft (String.length "Missing required columns:") message
                    |> String.trim
                    |> String.split ","
                    |> List.map String.trim
                    |> String.join ", "
        in
        "Your CSV is missing the following required columns: " ++ missingColumns ++ ". Please add these columns and try again."

    else
        message



-- Add this new subscription function


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.batch
        [ case model.showModal of
            NoModal ->
                Sub.none

            ContactChoiceModal ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))

            AddModal ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))

            EditModal _ ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))

            CsvUploadModal _ ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))

            DeleteConfirmModal ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))

            ReassignAgentModal ->
                Browser.Events.onKeyDown (Decode.map HandleKeyDown (Decode.field "key" Decode.string))
        , if model.openFilter /= Nothing then
            -- Only listen for clicks outside when a dropdown is open
            Browser.Events.onMouseDown (Decode.succeed CloseFilterDropdown)

          else
            Sub.none
        ]


sortContacts : Maybe SortColumn -> SortDirection -> List Contact -> List Contact
sortContacts maybeColumn direction contacts =
    case maybeColumn of
        Nothing ->
            contacts

        Just column ->
            let
                comparator =
                    case column of
                        NameCol ->
                            \a b ->
                                compare
                                    (Maybe.withDefault "" a.firstName ++ " " ++ Maybe.withDefault "" a.lastName)
                                    (Maybe.withDefault "" b.firstName ++ " " ++ Maybe.withDefault "" b.lastName)

                        StatusCol ->
                            \a b -> compare a.status b.status

                        EmailCol ->
                            \a b -> compare a.email b.email

                        PhoneNumberCol ->
                            \a b -> compare (Maybe.withDefault "" a.phoneNumber) (Maybe.withDefault "" b.phoneNumber)

                        StateCol ->
                            \a b -> compare (Maybe.withDefault "" a.state) (Maybe.withDefault "" b.state)

                        ContactOwnerCol ->
                            \a b ->
                                let
                                    aName =
                                        getUserName a.contactOwner

                                    bName =
                                        getUserName b.contactOwner
                                in
                                compare aName bName

                        CurrentCarrierCol ->
                            \a b -> compare (Maybe.withDefault "" a.currentCarrier) (Maybe.withDefault "" b.currentCarrier)

                        EffectiveDateCol ->
                            \a b -> compare (Maybe.withDefault "" a.effectiveDate) (Maybe.withDefault "" b.effectiveDate)
            in
            List.sortWith
                (if direction == Ascending then
                    comparator

                 else
                    \a b -> comparator b a
                )
                contacts


filterContacts : Filters -> String -> Time.Posix -> List Contact -> List Contact
filterContacts filters searchQuery currentTime contacts =
    contacts
        |> filterBySearch searchQuery
        |> filterByCarriers filters.carriers
        |> filterByList (\c -> Maybe.withDefault "" c.state) filters.states
        |> filterByAge filters.ageRange
        |> filterByAgents filters.agents


filterByCarriers : List String -> List Contact -> List Contact
filterByCarriers carriers contacts =
    if List.isEmpty carriers then
        contacts

    else
        List.filter
            (\contact ->
                case contact.currentCarrier of
                    Just carrier ->
                        List.member carrier carriers

                    Nothing ->
                        False
            )
            contacts


filterBySearch : String -> List Contact -> List Contact
filterBySearch query contacts =
    if String.isEmpty query then
        contacts

    else
        let
            loweredQuery =
                String.toLower query
        in
        List.filter
            (\contact ->
                String.contains loweredQuery (String.toLower (Maybe.withDefault "" contact.firstName))
                    || String.contains loweredQuery (String.toLower (Maybe.withDefault "" contact.lastName))
                    || (case contact.currentCarrier of
                            Just carrier ->
                                String.contains loweredQuery (String.toLower carrier)

                            Nothing ->
                                False
                       )
            )
            contacts


filterByAge : Maybe ( Int, Int ) -> List Contact -> List Contact
filterByAge range contacts =
    case range of
        Nothing ->
            contacts

        Just ( min, max ) ->
            List.filter
                (\contact ->
                    let
                        age =
                            calculateAge (Maybe.withDefault "" contact.birthDate)
                    in
                    age >= min && age <= max
                )
                contacts


calculateAge : String -> Int
calculateAge birthDate =
    -- This is a simplified version. You might want to use a proper date library
    2024 - (String.left 4 birthDate |> String.toInt |> Maybe.withDefault 0)


toggleFilter : Filters -> FilterType -> String -> Filters
toggleFilter filters filterType value =
    case filterType of
        CarrierFilter ->
            { filters | carriers = toggleList filters.carriers value }

        StateFilter ->
            { filters | states = toggleList filters.states value }

        AgeFilter ->
            { filters | ageRange = toggleAgeRange filters.ageRange value }

        AgentFilter ->
            { filters | agents = toggleAgentList filters.agents (String.toInt value |> Maybe.withDefault 0) }


toggleList : List String -> String -> List String
toggleList list value =
    if List.member value list then
        List.filter (\v -> v /= value) list

    else
        value :: list


toggleAgeRange : Maybe ( Int, Int ) -> String -> Maybe ( Int, Int )
toggleAgeRange maybeRange value =
    case maybeRange of
        Nothing ->
            Just ( String.toInt value |> Maybe.withDefault 0, String.toInt value |> Maybe.withDefault 0 )

        Just ( min, max ) ->
            if min == (String.toInt value |> Maybe.withDefault 0) then
                Just ( String.toInt value |> Maybe.withDefault 0, max )

            else if max == (String.toInt value |> Maybe.withDefault 0) then
                Just ( min, String.toInt value |> Maybe.withDefault 0 )

            else
                Just ( min, max )


setAgeFilter : Int -> Int -> Filters -> Filters
setAgeFilter min max filters =
    if max < 1 then
        { filters | ageRange = Nothing }
        -- Don't apply filter if max is 0 or negative

    else
        { filters | ageRange = Just ( min, max ) }



-- Helper function to get unique values from contacts


getUniqueValues : (Contact -> String) -> List Contact -> List String
getUniqueValues getter contacts =
    contacts
        |> List.map getter
        |> List.sort
        |> List.Extra.unique


zipInfoDecoder : Decode.Decoder ZipInfo
zipInfoDecoder =
    Decode.succeed ZipInfo
        |> Pipeline.required "state" Decode.string
        |> Pipeline.required "counties" (Decode.list Decode.string)
        |> Pipeline.required "cities" (Decode.list Decode.string)


filterByList : (Contact -> String) -> List String -> List Contact -> List Contact
filterByList getter selectedValues contacts =
    if List.isEmpty selectedValues then
        contacts

    else
        List.filter
            (\contact ->
                List.member (getter contact) selectedValues
            )
            contacts


viewContactForm : Model -> ContactForm -> (ContactFormField -> String -> Msg) -> Msg -> String -> Bool -> Html Msg
viewContactForm model form updateMsg submitMsg buttonText isSubmitting =
    let
        carrierOptions =
            ( "", "Select a carrier" ) :: List.map (\c -> ( c, c )) model.carriers ++ [ ( "Other", "Other" ) ]

        planTypeOptions =
            [ ( "", "Select a plan type" ), ( "Plan N", "Plan N" ), ( "Plan G", "Plan G" ), ( "Other", "Other" ) ]

        -- Simple agent dropdown options - show all available agents
        agentOptions =
            if List.isEmpty model.agents then
                -- If no agents loaded, use current user as fallback if they're an agent
                case model.currentUser of
                    Just user ->
                        [ ( String.fromInt user.id, user.firstName ++ " " ++ user.lastName ) ]

                    Nothing ->
                        []

            else
                -- Just show all available agents
                List.map
                    (\agent ->
                        ( String.fromInt agent.id, agent.firstName ++ " " ++ agent.lastName )
                    )
                    model.agents

        -- Get the selected agent ID or default to first agent
        defaultAgentId =
            case List.head model.agents of
                Just agent ->
                    String.fromInt agent.id

                Nothing ->
                    -- Try current user as fallback
                    case model.currentUser of
                        Just user ->
                            String.fromInt user.id

                        Nothing ->
                            ""

        selectedAgentId =
            case form.contactOwnerId of
                Just id ->
                    String.fromInt id

                Nothing ->
                    defaultAgentId

        selectedCarrier =
            Maybe.withDefault "" form.currentCarrier

        emailField =
            div [ class "form-group mb-3 relative" ]
                [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
                    [ text "Email" ]
                , div [ class "relative" ]
                    [ Html.input
                        [ type_ "email"
                        , class
                            ("w-full px-2 py-1.5 bg-white border-[1.5px] rounded-md text-sm text-gray-700 placeholder-gray-400 shadow-sm transition-all duration-200 "
                                ++ (if model.emailExists then
                                        "border-red-300 hover:border-red-400 focus:border-red-500 focus:ring-1 focus:ring-red-200"

                                    else
                                        "border-purple-300 hover:border-purple-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-200"
                                   )
                            )
                        , value form.email
                        , onInput (updateMsg Email)
                        , on "blur" (Decode.succeed (EmailBlur form.email)) -- Add onBlur handler
                        , required True
                        ]
                        []
                    , if model.isCheckingEmail then
                        div [ class "absolute right-2 top-1.5" ]
                            [ viewSpinner ]

                      else if model.emailExists then
                        div
                            [ class "absolute right-2 top-1.5 text-red-500" ]
                            [ viewIcon "M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" ]

                      else if String.length form.email > 0 then
                        div
                            [ class "absolute right-2 top-1.5 text-green-500" ]
                            [ viewIcon "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" ]

                      else
                        text ""
                    ]
                , if model.emailExists then
                    div [ class "mt-1 text-xs text-red-600" ]
                        [ text "A contact with this email already exists" ]

                  else
                    text ""
                ]
    in
    Html.form [ onSubmit submitMsg ]
        [ div [ class "grid grid-cols-1 sm:grid-cols-2 gap-x-4 gap-y-3" ]
            [ viewFormInput "First Name" "text" form.firstName FirstName updateMsg True
            , viewFormInput "Last Name" "text" form.lastName LastName updateMsg True
            , emailField
            , viewFormInput "Phone Number" "text" form.phoneNumber PhoneNumber updateMsg False
            , viewFormSelect "Current Carrier" selectedCarrier CurrentCarrier updateMsg carrierOptions
            , viewFormSelect "Plan Type" (Maybe.withDefault "" form.planType) PlanType updateMsg planTypeOptions
            , viewFormSelectWithValue "Assigned Agent" selectedAgentId ContactOwnerId updateMsg agentOptions
            , viewFormInput "Effective Date" "date" form.effectiveDate EffectiveDate updateMsg False
            , viewFormInput "Birth Date" "date" form.birthDate BirthDate updateMsg False
            , viewFormRadioGroup "Tobacco User"
                (if form.tobaccoUser then
                    "true"

                 else
                    "false"
                )
                TobaccoUser
                updateMsg
                [ ( "true", "Yes" ), ( "false", "No" ) ]
            , viewFormRadioGroup "Gender" form.gender Gender updateMsg [ ( "M", "Male" ), ( "F", "Female" ) ]
            , div [ class "col-span-1 sm:col-span-2 grid grid-cols-1 sm:grid-cols-2 gap-x-4" ]
                [ viewZipCodeField model form
                , viewStateField form
                ]
            ]
        , if model.error /= Nothing && not model.emailExists then
            div [ class "mt-2 text-red-600 text-xs" ] [ text (Maybe.withDefault "" model.error) ]

          else
            text ""
        , div [ class "mt-4 flex justify-end space-x-2" ]
            [ button
                [ type_ "button"
                , onClick CloseModal
                , class "px-3 py-1.5 bg-white text-gray-700 text-sm font-medium rounded-md border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200 focus:ring-1 focus:ring-purple-100"
                ]
                [ text "Cancel" ]
            , if isSubmitting then
                div [ class "px-3 py-1.5 flex items-center" ] [ viewSpinner ]

              else
                let
                    isValid =
                        isContactFormValid form && not model.emailExists && not model.isCheckingEmail
                in
                button
                    [ type_ "submit"
                    , class
                        ("px-3 py-1.5 text-white text-sm font-medium rounded-md transition-colors duration-200 focus:ring-1 focus:ring-purple-200 "
                            ++ (if isValid then
                                    "bg-purple-500 hover:bg-purple-600"

                                else
                                    "bg-gray-300 cursor-not-allowed"
                               )
                        )
                    , Html.Attributes.disabled (not isValid)
                    ]
                    [ text buttonText ]
            ]
        ]


viewFormInput : String -> String -> String -> ContactFormField -> (ContactFormField -> String -> Msg) -> Bool -> Html Msg
viewFormInput labelText inputType inputValue field updateMsg isRequired =
    let
        displayValue =
            if field == PhoneNumber then
                formatPhoneNumber inputValue

            else
                inputValue

        inputHandler =
            if field == PhoneNumber then
                \val ->
                    let
                        digits =
                            String.filter Char.isDigit val |> String.left 10
                    in
                    updateMsg field digits

            else
                updateMsg field

        placeholderText =
            if field == PhoneNumber then
                "(555) 555-5555"

            else
                ""
    in
    div [ class "form-group mb-3" ]
        [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
            [ text labelText ]
        , Html.input
            [ type_ inputType
            , class "w-full px-2 py-1.5 bg-white border-[1.5px] border-purple-300 rounded-md text-sm text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-200 focus:bg-white transition-all duration-200"
            , value displayValue
            , onInput inputHandler
            , required isRequired
            , placeholder placeholderText
            ]
            []
        ]


viewFormSelect : String -> String -> ContactFormField -> (ContactFormField -> String -> Msg) -> List ( String, String ) -> Html Msg
viewFormSelect labelText selectedValue field updateMsg options =
    div [ class "form-group mb-3" ]
        [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
            [ text labelText ]
        , Html.select
            [ class "w-full px-2 py-1.5 bg-white border-[1.5px] border-purple-300 rounded-md text-sm text-gray-700 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-200 focus:bg-white transition-all duration-200"
            , value selectedValue
            , onInput (updateMsg field)
            , required False
            ]
            (List.map
                (\( val, label ) ->
                    Html.option
                        [ value val, selected (val == selectedValue) ]
                        [ text label ]
                )
                options
            )
        ]


viewFormRadioGroup : String -> String -> ContactFormField -> (ContactFormField -> String -> Msg) -> List ( String, String ) -> Html Msg
viewFormRadioGroup labelText selectedValue field updateMsg options =
    div [ class "form-group mb-3" ]
        [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
            [ text labelText ]
        , div [ class "flex gap-2" ]
            (List.map
                (\( val, txt ) ->
                    label
                        [ class
                            ("flex items-center px-2 py-1 rounded-md border text-sm cursor-pointer transition-all duration-200 "
                                ++ (if selectedValue == val then
                                        "border-purple-500 bg-purple-50 text-purple-700"

                                    else
                                        "border-gray-200 hover:border-purple-200"
                                   )
                            )
                        ]
                        [ input
                            [ type_ "radio"
                            , value val
                            , checked (selectedValue == val)
                            , onInput (\_ -> updateMsg field val)
                            , class "sr-only" -- Hide the actual radio button
                            ]
                            []
                        , text txt
                        ]
                )
                options
            )
        ]


viewZipCodeField : Model -> ContactForm -> Html Msg
viewZipCodeField model form =
    div [ class "form-group mb-3" ]
        [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
            [ text "ZIP Code" ]
        , Html.input
            [ type_ "text"
            , class "w-full px-2 py-1.5 bg-white border-[1.5px] border-purple-300 rounded-md text-sm text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-200 focus:bg-white transition-all duration-200"
            , value form.zipCode
            , onInput
                (\zip ->
                    Batch
                        [ case model.showModal of
                            AddModal ->
                                UpdateAddForm ZipCode zip

                            EditModal _ ->
                                UpdateEditForm ZipCode zip

                            _ ->
                                NoOp
                        , if String.length zip == 5 then
                            LookupZipCode zip

                          else
                            NoOp
                        ]
                )
            ]
            []
        ]


viewStateField : ContactForm -> Html Msg
viewStateField form =
    div [ class "form-group mb-3" ]
        [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
            [ text "State" ]
        , Html.input
            [ type_ "text"
            , class "w-full px-2 py-1.5 bg-white border-[1.5px] border-gray-200 rounded-md text-sm text-gray-700 placeholder-gray-400 shadow-sm focus:ring-1 focus:ring-purple-200 focus:bg-white transition-all duration-200"
            , value form.state
            , Html.Attributes.disabled True
            ]
            []
        ]


viewSpinner : Html msg
viewSpinner =
    div [ class "animate-spin rounded-full h-5 w-5 border-2 border-purple-500 border-t-transparent" ] []


onClickOutside : msg -> Html.Attribute msg
onClickOutside msg =
    on "click" (Decode.succeed msg)


userDecoder : Decode.Decoder User
userDecoder =
    Decode.succeed User
        |> Pipeline.required "id" Decode.int
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "first_name" Decode.string
        |> Pipeline.required "last_name" Decode.string
        |> Pipeline.required "is_admin" Decode.bool
        |> Pipeline.required "is_agent" Decode.bool
        |> Pipeline.required "is_default" Decode.bool
        |> Pipeline.required "organization_id" Decode.int
        |> Pipeline.required "is_active" Decode.bool
        |> Pipeline.required "phone" Decode.string
        |> Pipeline.optional "carriers" (Decode.list Decode.string) []
        |> Pipeline.optional "stateLicenses" (Decode.list Decode.string) []


deleteContacts : List Int -> Cmd Msg
deleteContacts contactIds =
    Http.request
        { method = "DELETE"
        , headers = []
        , url = "/api/contacts"
        , body = Http.jsonBody (encodeContactIds contactIds)
        , expect = Http.expectJson ContactsDeleted deleteResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


encodeContactIds : List Int -> Encode.Value
encodeContactIds ids =
    Encode.list Encode.int ids


deleteResponseDecoder : Decode.Decoder DeleteResponse
deleteResponseDecoder =
    Decode.map3 DeleteResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "deleted_ids" (Decode.list Decode.int))
        (Decode.field "message" Decode.string)



-- HELPER FUNCTIONS


isAdminOrAdminAgent : Maybe User -> Bool
isAdminOrAdminAgent maybeUser =
    case maybeUser of
        Just user ->
            let
                isAdmin =
                    user.isAdmin
            in
            isAdmin

        Nothing ->
            False


viewExpandedContent : Contact -> Html Msg
viewExpandedContent contact =
    div
        [ class "grid grid-cols-5 gap-4 py-2 px-4 transition-all duration-200 ease-in-out" ]
        [ viewExpandedField "Birth Date" (Maybe.withDefault "" contact.birthDate)
        , viewExpandedField "Tobacco User"
            (case contact.tobaccoUser of
                Just True ->
                    "Yes"

                Just False ->
                    "No"

                Nothing ->
                    ""
            )
        , viewExpandedField "Gender" (Maybe.withDefault "" contact.gender)
        , viewExpandedField "ZIP Code" (Maybe.withDefault "" contact.zipCode)
        , viewExpandedField "Plan Type" (Maybe.withDefault "" contact.planType)
        ]


viewExpandedField : String -> String -> Html Msg
viewExpandedField label value =
    div [ class "text-sm" ]
        [ span [ class "font-medium text-gray-500" ] [ text label ]
        , div [ class "mt-1 text-gray-900" ] [ text value ]
        ]


viewIcon : String -> Html Msg
viewIcon path =
    svg
        [ Svg.Attributes.class "w-4 h-4"
        , Svg.Attributes.fill "none"
        , Svg.Attributes.stroke "currentColor"
        , Svg.Attributes.viewBox "0 0 24 24"
        ]
        [ Svg.path [ Svg.Attributes.d path ] [] ]



-- HTTP FUNCTIONS


fetchContacts : Model -> Cmd Msg
fetchContacts model =
    let
        queryParams =
            [ ( "search", model.searchQuery )
            , ( "states", String.join "," model.activeFilters.states )
            , ( "carriers", String.join "," model.activeFilters.carriers )
            , ( "agents"
              , model.activeFilters.agents
                    |> List.map String.fromInt
                    |> String.join ","
              )
            , ( "page", String.fromInt model.pagination.currentPage )
            , ( "limit", String.fromInt model.pagination.itemsPerPage )
            ]
                |> List.filter (\( _, value ) -> not (String.isEmpty value))
                |> List.map (\( key, value ) -> Url.string key value)
    in
    Http.get
        { url = Url.absolute [ "api", "contacts" ] queryParams
        , expect = Http.expectJson GotContacts contactsDecoder
        }


fetchCurrentUser : Cmd Msg
fetchCurrentUser =
    Http.get
        { url = "/api/me"
        , expect = Http.expectJson GotCurrentUser userDecoder
        }


viewFilterDropdown : Model -> FilterType -> Html Msg
viewFilterDropdown model filterType =
    let
        options =
            case filterType of
                CarrierFilter ->
                    model.availableFilters.carriers

                StateFilter ->
                    model.availableFilters.states

                AgentFilter ->
                    -- Add "Default" option for unassigned contacts
                    "Default"
                        :: (model.agents
                                |> List.filter (\agent -> agent.isAgent)
                                |> List.map
                                    (\agent ->
                                        agent.firstName ++ " " ++ agent.lastName
                                    )
                           )

                _ ->
                    []

        activeFilters =
            case filterType of
                CarrierFilter ->
                    model.activeFilters.carriers

                StateFilter ->
                    model.activeFilters.states

                AgentFilter ->
                    model.activeFilters.agents
                        |> List.map String.fromInt

                _ ->
                    []

        hasActiveFilters =
            not (List.isEmpty activeFilters)
    in
    div
        [ class "absolute left-0 mt-2 w-60 sm:w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-10"

        -- IMPORTANT: This mousedown handler prevents the dropdown from closing when clicking inside it
        , Html.Events.stopPropagationOn "mousedown" (Decode.succeed ( NoOp, True ))
        ]
        [ div [ class "py-1" ]
            [ div [ class "p-2 border-b border-gray-200" ]
                [ button
                    [ class
                        ("w-full text-left text-sm font-medium "
                            ++ (if hasActiveFilters then
                                    "text-purple-600 hover:text-purple-800 cursor-pointer"

                                else
                                    "text-gray-400 cursor-not-allowed"
                               )
                        )
                    , onClick (SelectAllFilter filterType False)
                    , Html.Attributes.disabled (not hasActiveFilters)
                    ]
                    [ text "Clear Filters" ]
                ]
            , div [ class "max-h-56 sm:max-h-48 overflow-y-auto p-2" ]
                (case filterType of
                    AgentFilter ->
                        -- Special handling for agent filter since it's using IDs
                        -- First add the Default option (agentId = 0 means unassigned/default)
                        label
                            [ class "flex items-center space-x-2 py-1" ]
                            [ input
                                [ type_ "checkbox"
                                , checked (List.member 0 model.activeFilters.agents)
                                , onClick (ToggleFilter filterType (String.fromInt 0))
                                , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                                ]
                                []
                            , span [ class "text-sm text-gray-600" ]
                                [ text "Default" ]
                            ]
                            :: (model.agents
                                    |> List.filter (\agent -> agent.isAgent)
                                    |> List.map
                                        (\agent ->
                                            label
                                                [ class "flex items-center space-x-2 py-1" ]
                                                [ input
                                                    [ type_ "checkbox"
                                                    , checked (List.member agent.id model.activeFilters.agents)
                                                    , onClick (ToggleFilter filterType (String.fromInt agent.id))
                                                    , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                                                    ]
                                                    []
                                                , span [ class "text-sm text-gray-600" ]
                                                    [ text (agent.firstName ++ " " ++ agent.lastName) ]
                                                ]
                                        )
                               )

                    _ ->
                        -- Original handling for other filters
                        List.map
                            (\option ->
                                label
                                    [ class "flex items-center space-x-2 py-1" ]
                                    [ input
                                        [ type_ "checkbox"
                                        , checked (List.member option activeFilters)
                                        , onClick (ToggleFilter filterType option)
                                        , class "rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                                        ]
                                        []
                                    , span [ class "text-sm text-gray-600" ]
                                        [ text option ]
                                    ]
                            )
                            options
                )
            ]
        ]


isContactFormValid : ContactForm -> Bool
isContactFormValid form =
    String.length form.firstName
        > 0
        && String.length form.lastName
        > 0
        && String.length form.email
        > 0


isJust : Maybe a -> Bool
isJust maybeValue =
    case maybeValue of
        Just _ ->
            True

        Nothing ->
            False



-- Add the isValidEmail function here


isValidEmail : String -> Bool
isValidEmail email =
    String.contains "@" email
        && String.contains "." email
        && String.length email
        > 5


fetchCarriers : Cmd Msg
fetchCarriers =
    Http.get
        { url = "/api/settings/carriers"
        , expect = Http.expectJson GotCarriers (Decode.list (Decode.field "name" Decode.string))
        }


fetchAgents : Cmd Msg
fetchAgents =
    Http.get
        { url = "/api/agents"
        , expect = Http.expectJson GotAgents agentsResponseDecoder
        }



-- Add a decoder for the new response format


agentsResponseDecoder : Decoder (List User)
agentsResponseDecoder =
    Decode.oneOf
        [ -- First try the new format (response with agents and defaultAgentId)
          Decode.field "agents" (Decode.list agentDecoder)
        , -- Fall back to the old format (just a list of agents)
          Decode.list agentDecoder
        ]


checkEmail : String -> Cmd Msg
checkEmail email =
    Http.request
        { method = "GET"
        , headers = []
        , url = "/api/contacts/check-email/" ++ email
        , body = Http.emptyBody
        , expect = Http.expectJson EmailChecked emailCheckDecoder
        , timeout = Just 5000 -- 5 second timeout
        , tracker = Nothing
        }


emailCheckDecoder : Decode.Decoder { exists : Bool }
emailCheckDecoder =
    Decode.oneOf
        [ -- Try to decode the standard response
          Decode.map (\exists -> { exists = exists })
            (Decode.field "exists" Decode.bool)
        , -- Try to decode success response wrapper with exists field
          Decode.field "success" Decode.bool
            |> Decode.andThen
                (\_ ->
                    Decode.map (\exists -> { exists = exists })
                        (Decode.field "exists" Decode.bool)
                )
        , -- Fallback for any other structure
          Decode.succeed { exists = False }
        ]


carrierDecoder : Decode.Decoder { name : String, aliases : List String }
carrierDecoder =
    Decode.succeed (\name aliases -> { name = name, aliases = aliases })
        |> Pipeline.required "name" Decode.string
        |> Pipeline.required "aliases" (Decode.list Decode.string)


viewDeleteConfirmModal : Model -> Html Msg
viewDeleteConfirmModal model =
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-8" ]
        [ div [ class "bg-white rounded-xl p-8 max-w-md w-full mx-4 shadow-xl relative" ]
            [ button
                [ class "absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ text "×" ]
            , h2 [ class "text-xl font-semibold text-gray-900 mb-4" ]
                [ text "Delete Contacts" ]
            , p [ class "text-sm text-gray-600 mb-6" ]
                [ text ("Are you sure you want to delete " ++ String.fromInt (List.length model.selectedContacts) ++ " contacts? This action cannot be undone.") ]
            , div [ class "flex justify-end space-x-4" ]
                [ button
                    [ class "px-4 py-2 text-gray-700 text-sm font-medium rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200"
                    , onClick CloseModal
                    ]
                    [ text "Cancel" ]
                , if model.isDeletingContacts then
                    div [ class "px-4 py-2 flex items-center" ]
                        [ viewSpinner ]

                  else
                    button
                        [ class "px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors duration-200"
                        , onClick DeleteSelectedContacts
                        ]
                        [ text "Delete" ]
                ]
            ]
        ]



-- Add a new function to allow setting a custom selected value


viewFormSelectWithValue : String -> String -> ContactFormField -> (ContactFormField -> String -> Msg) -> List ( String, String ) -> Html Msg
viewFormSelectWithValue labelText selectedValue field updateMsg options =
    div [ class "form-group mb-3" ]
        [ Html.label [ class "block text-xs font-medium text-gray-700 mb-1" ]
            [ text labelText ]
        , div [ class "relative" ]
            [ Html.select
                [ class "w-full px-2 py-1.5 bg-white border-[1.5px] border-purple-300 rounded-md text-sm text-gray-700 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-200 focus:bg-white transition-all duration-200 appearance-none"
                , value selectedValue
                , onInput (updateMsg field)
                , required False
                ]
                (option [ value "", disabled True, selected (selectedValue == "") ] [ text "Select an Agent" ]
                    :: List.map (\( val, txt ) -> option [ value val, selected (val == selectedValue) ] [ text txt ]) options
                )
            , div [ class "absolute inset-y-0 right-0 flex items-center px-1 pointer-events-none text-gray-500" ]
                [ viewIcon "M19 9l-7 7-7-7" ]
            ]
        ]


agentDecoder : Decode.Decoder User
agentDecoder =
    Decode.succeed User
        |> Pipeline.required "id"
            (Decode.oneOf
                [ -- Try to decode as an integer directly
                  Decode.int
                , -- If that fails, try to decode as a string and convert to int
                  Decode.string
                    |> Decode.andThen
                        (\str ->
                            case String.toInt str of
                                Just intVal ->
                                    Decode.succeed intVal

                                Nothing ->
                                    Decode.fail ("Could not convert agent ID string to integer: " ++ str)
                        )
                ]
            )
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "firstName" Decode.string
        |> Pipeline.required "lastName" Decode.string
        |> Pipeline.required "isAdmin" Decode.bool
        |> Pipeline.required "isAgent" Decode.bool
        |> Pipeline.required "isDefault" Decode.bool
        |> Pipeline.optional "organizationId" Decode.int 0
        -- Add default value for isActive since it's not in the API response
        |> Pipeline.hardcoded True
        -- Assume agents are active
        |> Pipeline.optional "phone" Decode.string ""
        |> Pipeline.optional "carriers" (Decode.list Decode.string) []
        |> Pipeline.optional "stateLicenses" (Decode.list Decode.string) []


viewReassignAgentModal : Model -> Html Msg
viewReassignAgentModal model =
    let
        -- Use all users in the agents list
        agentList =
            model.agents

        -- Create list of agent options
        agentOptions =
            List.map
                (\agent ->
                    ( agent.id
                    , agent.firstName ++ " " ++ agent.lastName
                    )
                )
                agentList

        -- Get the first agent ID as the default value if no agent is currently selected
        defaultAgentId =
            case List.head agentList of
                Just agent ->
                    String.fromInt agent.id

                Nothing ->
                    "0"
    in
    div [ class "fixed inset-0 bg-gray-500/75 flex items-center justify-center p-4 sm:p-8" ]
        [ div [ class "bg-white rounded-xl p-5 sm:p-8 md:p-10 max-w-2xl w-full mx-4 shadow-xl relative overflow-y-auto max-h-[90vh]" ]
            [ button
                [ class "absolute top-2 sm:top-4 right-2 sm:right-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                , onClick CloseModal
                ]
                [ viewIcon "M6 18L18 6M6 6l12 12" ]
            , h2 [ class "text-2xl font-semibold text-gray-900 mb-8" ]
                [ text "Reassign Contacts" ]
            , div [ class "mb-6 text-sm text-gray-600" ]
                [ text "Select an agent to reassign the selected contacts to." ]
            , div [ class "form-group" ]
                [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
                    [ text "Select Agent" ]
                , div [ class "relative" ]
                    [ if List.isEmpty model.agents then
                        div [ class "p-2 text-gray-500 border rounded" ]
                            [ text "Loading agents..." ]

                      else
                        Html.select
                            [ class "w-full px-3 py-2 sm:px-4 sm:py-3 bg-white border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200 appearance-none"
                            , value defaultAgentId
                            , onInput (\val -> SelectReassignAgent (String.toInt val |> Maybe.withDefault 0))
                            ]
                            (List.map
                                (\( val, label ) ->
                                    option [ value (String.fromInt val) ] [ text label ]
                                )
                                agentOptions
                            )
                    , div [ class "absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none" ]
                        [ viewIcon "M19 9l-7 7-7-7" ]
                    ]
                ]
            , div [ class "mt-8 flex justify-end space-x-4" ]
                [ button
                    [ class "px-4 py-2 sm:px-6 sm:py-3 bg-white text-gray-700 text-sm font-medium rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors duration-200 focus:ring-4 focus:ring-purple-100"
                    , onClick CloseModal
                    ]
                    [ text "Cancel" ]
                , button
                    [ class "px-4 py-2 sm:px-6 sm:py-3 bg-purple-500 text-white text-sm font-medium rounded-lg hover:bg-purple-600 transition-colors duration-200 focus:ring-4 focus:ring-purple-200"
                    , onClick ReassignSelectedContacts
                    ]
                    [ text "Reassign" ]
                ]
            ]
        ]


reassignContacts : List Int -> Int -> Cmd Msg
reassignContacts contactIds agentId =
    Http.request
        { method = "PUT"
        , headers = []
        , url = "/api/contacts/reassign"
        , body =
            Http.jsonBody
                (Encode.object
                    [ ( "contact_ids", Encode.list Encode.int contactIds )
                    , ( "agent_id"
                      , if agentId == 0 then
                            -- Send null for Default option
                            Encode.null

                        else
                            Encode.int agentId
                      )
                    ]
                )
        , expect = Http.expectJson ContactsReassigned reassignResponseDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


reassignResponseDecoder : Decode.Decoder ReassignResponse
reassignResponseDecoder =
    Decode.succeed ReassignResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "updated_ids" (Decode.list Decode.int)
        |> Pipeline.required "message" Decode.string


toggleAgentList : List Int -> Int -> List Int
toggleAgentList list value =
    if List.member value list then
        List.filter (\v -> v /= value) list

    else
        value :: list



-- Add the filterByAgents function


filterByAgents : List Int -> List Contact -> List Contact
filterByAgents agentIds contacts =
    if List.isEmpty agentIds then
        contacts

    else
        List.filter
            (\contact ->
                case contact.agentId of
                    Just agentId ->
                        List.member agentId agentIds

                    Nothing ->
                        False
            )
            contacts



-- Replace the old contact limit banner functions with this more streamlined one


viewPaginationControls : Model -> Html Msg
viewPaginationControls model =
    let
        totalPages =
            model.pagination.totalPages

        currentPage =
            model.pagination.currentPage

        itemsPerPage =
            model.pagination.itemsPerPage

        totalItems =
            model.pagination.totalItems

        -- Calculate range of items being displayed
        startItem =
            (currentPage - 1) * itemsPerPage + 1

        endItem =
            min (currentPage * itemsPerPage) totalItems

        -- Create a list of page numbers to show
        pageNumbers =
            if totalPages <= 7 then
                List.range 1 totalPages

            else if currentPage <= 4 then
                List.range 1 5 ++ [ -1, totalPages ]

            else if currentPage >= totalPages - 3 then
                1 :: -1 :: List.range (totalPages - 4) totalPages

            else
                1 :: -1 :: List.range (currentPage - 1) (currentPage + 1) ++ [ -1, totalPages ]

        -- Helper function to render a page button
        pageButton page =
            if page == -1 then
                -- Render ellipsis for skipped pages
                span [ class "px-3 py-2 text-gray-400" ] [ text "..." ]

            else
                button
                    [ class
                        ("px-3 py-2 text-sm font-medium rounded-md transition-colors "
                            ++ (if page == currentPage then
                                    "bg-purple-50 text-purple-600 border-purple-500"

                                else
                                    "text-gray-500 hover:bg-gray-50 hover:text-gray-700"
                               )
                        )
                    , onClick (ChangePage page)
                    ]
                    [ text (String.fromInt page) ]
    in
    div [ class "max-w-7xl mx-auto pb-24" ]
        -- Added padding at bottom to prevent overlap with bulk action bar
        [ div [ class "mt-4 flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6" ]
            [ div [ class "flex flex-1 justify-between sm:hidden" ]
                [ button
                    [ class "relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
                    , onClick (ChangePage (currentPage - 1))
                    , Html.Attributes.disabled (currentPage == 1)
                    ]
                    [ text "Previous" ]
                , button
                    [ class "relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
                    , onClick (ChangePage (currentPage + 1))
                    , Html.Attributes.disabled (currentPage == totalPages)
                    ]
                    [ text "Next" ]
                ]
            , div [ class "hidden sm:flex sm:flex-1 sm:items-center sm:justify-between" ]
                [ div [ class "text-sm text-gray-700" ]
                    [ span [] [ text "Showing " ]
                    , span [ class "font-medium" ] [ text (String.fromInt startItem) ]
                    , span [] [ text " to " ]
                    , span [ class "font-medium" ] [ text (String.fromInt endItem) ]
                    , span [] [ text " of " ]
                    , span [ class "font-medium" ] [ text (String.fromInt totalItems) ]
                    , span [] [ text " results" ]
                    ]
                , div [ class "flex items-center space-x-4" ]
                    [ div [ class "relative" ]
                        [ select
                            [ class "block w-full rounded-md border-gray-300 py-1.5 pl-3 pr-10 text-base focus:border-purple-500 focus:outline-none focus:ring-purple-500 sm:text-sm"
                            , onInput (\val -> ChangeItemsPerPage (Maybe.withDefault 100 (String.toInt val)))
                            , value (String.fromInt itemsPerPage)
                            ]
                            [ option [ value "50" ] [ text "50 per page" ]
                            , option [ value "100" ] [ text "100 per page" ]
                            , option [ value "250" ] [ text "250 per page" ]
                            ]
                        ]
                    , nav
                        [ class "isolate inline-flex -space-x-px rounded-md shadow-sm"
                        , Html.Attributes.attribute "aria-label" "Pagination"
                        ]
                        (List.map pageButton pageNumbers)
                    ]
                ]
            ]
        ]


extractCsvHeaders : File -> Cmd Msg
extractCsvHeaders file =
    Task.perform
        (\content -> CsvHeadersExtracted (extractHeadersFromCsv content))
        (File.toString file)


extractHeadersFromCsv : String -> Result String (List String)
extractHeadersFromCsv csvContent =
    case CsvProcessor.extractHeaders csvContent of
        Ok headers ->
            Ok headers

        Err CsvProcessor.EmptyFile ->
            Err "CSV file appears to be empty"

        Err CsvProcessor.NoHeaders ->
            Err "CSV file has no headers"

        Err (CsvProcessor.ParseError msg) ->
            Err ("Failed to parse CSV file: " ++ msg)


suggestMappings : List String -> Cmd Msg
suggestMappings headers =
    let
        -- Use the CsvProcessor to find best matches for column mappings locally
        columnMappings =
            CsvProcessor.suggestColumnMappings headers

        -- Create an empty carrier mapping for now (will be populated later)
        carrierMappings =
            Dict.empty
    in
    -- Return the suggested mappings directly instead of making an HTTP request
    Task.perform
        (\_ ->
            SuggestedMappingsReceived
                (Ok
                    { columnMappings = columnMappings
                    , carrierMappings = carrierMappings
                    }
                )
        )
        (Task.succeed ())


extractUniqueCarriers : String -> String -> List String
extractUniqueCarriers csvContent carrierColumn =
    case CsvProcessor.extractUniqueValues csvContent carrierColumn of
        Ok values ->
            values

        Err _ ->
            []



-- Helper function to get an element at a specific index


getAt : Int -> List a -> Maybe a
getAt index list =
    if index < 0 then
        Nothing

    else
        List.head (List.drop index list)



-- Add a function to fetch carriers and create CsvProcessor.CarrierMapping compatible format


fetchAndProcessCarriers : List String -> Cmd Msg
fetchAndProcessCarriers detectedCarriers =
    -- Use a model function instead of an API call
    -- We'll use this from the GotCarriers handler
    Cmd.none



-- Add this helper function near other helper functions


hasCarrierMappings : UploadState -> Bool
hasCarrierMappings state =
    case state.carrierMapping of
        Just mapping ->
            not (List.isEmpty mapping.detectedCarriers)

        Nothing ->
            False


getUserName : Maybe User -> String
getUserName maybeUser =
    case maybeUser of
        Just user ->
            user.firstName ++ " " ++ user.lastName

        Nothing ->
            "Default"

================
File: frontend/src/CsvProcessor.elm
================
module CsvProcessor exposing
    ( CarrierMapping
    , ColumnMapping
    , Error(..)
    , ProcessedContact
    , extractHeaders
    , extractUniqueValues
    , findBestMatch
    , processCsvToContacts
    , suggestCarrierMappings
    , suggestColumnMappings
    , transformCsvData
    )

import Csv.Parser
import Dict exposing (Dict)
import Fuzzy
import List.Extra
import Set



-- TYPES


type Error
    = ParseError String
    | EmptyFile
    | NoHeaders


type alias ColumnMapping =
    { firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    , currentCarrier : String
    , effectiveDate : String
    , birthDate : String
    , tobaccoUser : String
    , gender : String
    , zipCode : String
    , planType : String
    }


type alias CarrierMapping =
    { detectedCarriers : List String
    , mappings : Dict String String -- Original carrier name -> Standardized carrier name
    }


type alias FieldVariations =
    Dict String (List String)


emptyColumnMapping : ColumnMapping
emptyColumnMapping =
    { firstName = ""
    , lastName = ""
    , email = ""
    , phoneNumber = ""
    , currentCarrier = ""
    , effectiveDate = ""
    , birthDate = ""
    , tobaccoUser = ""
    , gender = ""
    , zipCode = ""
    , planType = ""
    }


emptyCarrierMapping : CarrierMapping
emptyCarrierMapping =
    { detectedCarriers = []
    , mappings = Dict.empty
    }



-- Add new type for processed contact data


type alias ProcessedContact =
    { firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    , currentCarrier : String
    , effectiveDate : String
    , birthDate : String
    , tobaccoUser : Bool
    , gender : String
    , zipCode : String
    , planType : String
    }



-- EXTRACT CSV DATA


extractHeaders : String -> Result Error (List String)
extractHeaders csvContent =
    if String.isEmpty (String.trim csvContent) then
        Err EmptyFile

    else
        case Csv.Parser.parse { fieldSeparator = ',' } csvContent of
            Ok rows ->
                case List.head rows of
                    Just headerRow ->
                        Ok headerRow

                    Nothing ->
                        Err NoHeaders

            Err _ ->
                Err (ParseError "Failed to parse CSV file")


extractUniqueValues : String -> String -> Result Error (List String)
extractUniqueValues csvContent columnName =
    if String.isEmpty (String.trim csvContent) then
        Err EmptyFile

    else
        case Csv.Parser.parse { fieldSeparator = ',' } csvContent of
            Ok rows ->
                case List.head rows of
                    Just headerRow ->
                        -- Find the index of the column
                        let
                            columnIndex =
                                List.indexedMap (\i h -> ( i, h )) headerRow
                                    |> List.filter (\( _, h ) -> h == columnName)
                                    |> List.head
                                    |> Maybe.map Tuple.first
                        in
                        case columnIndex of
                            Just index ->
                                -- Get values from that column (skip header)
                                let
                                    values =
                                        List.drop 1 rows
                                            |> List.filterMap
                                                (\row ->
                                                    if index < List.length row then
                                                        Just (getAt index row |> Maybe.withDefault "")

                                                    else
                                                        Nothing
                                                )
                                            |> List.filter (not << String.isEmpty)
                                            |> List.map String.trim
                                            |> uniqueValues
                                in
                                Ok values

                            Nothing ->
                                Err (ParseError ("Column not found: " ++ columnName))

                    Nothing ->
                        Err NoHeaders

            Err _ ->
                Err (ParseError "Failed to parse CSV file")



-- FUZZY MATCHING AND SUGGESTIONS


suggestColumnMappings : List String -> ColumnMapping
suggestColumnMappings headers =
    let
        -- Field name variations
        fieldVariations =
            createFieldVariations

        -- For each field, find the best matching header
        findBestHeader : String -> List String -> List String -> String
        findBestHeader field variations allHeaders =
            let
                -- Try exact matches first
                exactMatches =
                    List.filter
                        (\h ->
                            List.member (String.toLower h) (List.map String.toLower (field :: variations))
                        )
                        allHeaders
            in
            case List.head exactMatches of
                Just match ->
                    match

                Nothing ->
                    -- Try fuzzy matching if no exact matches
                    findBestMatch field variations allHeaders
    in
    { firstName = findBestHeader "firstName" (Maybe.withDefault [] (Dict.get "firstName" fieldVariations)) headers
    , lastName = findBestHeader "lastName" (Maybe.withDefault [] (Dict.get "lastName" fieldVariations)) headers
    , email = findBestHeader "email" (Maybe.withDefault [] (Dict.get "email" fieldVariations)) headers
    , phoneNumber = findBestHeader "phoneNumber" (Maybe.withDefault [] (Dict.get "phoneNumber" fieldVariations)) headers
    , currentCarrier = findBestHeader "currentCarrier" (Maybe.withDefault [] (Dict.get "currentCarrier" fieldVariations)) headers
    , effectiveDate = findBestHeader "effectiveDate" (Maybe.withDefault [] (Dict.get "effectiveDate" fieldVariations)) headers
    , birthDate = findBestHeader "birthDate" (Maybe.withDefault [] (Dict.get "birthDate" fieldVariations)) headers
    , tobaccoUser = findBestHeader "tobaccoUser" (Maybe.withDefault [] (Dict.get "tobaccoUser" fieldVariations)) headers
    , gender = findBestHeader "gender" (Maybe.withDefault [] (Dict.get "gender" fieldVariations)) headers
    , zipCode = findBestHeader "zipCode" (Maybe.withDefault [] (Dict.get "zipCode" fieldVariations)) headers
    , planType = findBestHeader "planType" (Maybe.withDefault [] (Dict.get "planType" fieldVariations)) headers
    }


suggestCarrierMappings : List String -> List { name : String, aliases : List String } -> CarrierMapping
suggestCarrierMappings detectedCarriers standardCarriers =
    let
        mappings =
            List.foldl
                (\carrier dict ->
                    let
                        matchedCarrier =
                            findBestCarrierMatch carrier standardCarriers
                    in
                    Dict.insert carrier matchedCarrier dict
                )
                Dict.empty
                detectedCarriers
    in
    { detectedCarriers = detectedCarriers
    , mappings = mappings
    }


findBestCarrierMatch : String -> List { name : String, aliases : List String } -> String
findBestCarrierMatch carrierName standardCarriers =
    let
        normalizedCarrierName =
            String.toLower (String.trim carrierName)

        -- Add special case handling for common patterns
        specialCaseMatch =
            case normalizedCarrierName of
                "aarp" ->
                    Just "United Healthcare"

                "aarp / uhc" ->
                    Just "United Healthcare"

                "aarp/uhc" ->
                    Just "United Healthcare"

                "aarp / uhica" ->
                    Just "United Healthcare"

                "aarp/uhica" ->
                    Just "United Healthcare"

                "uhc" ->
                    Just "United Healthcare"

                "uhica" ->
                    Just "United Healthcare"

                "ace / chubb" ->
                    Just "Ace Chubb"

                "ace/chubb" ->
                    Just "Ace Chubb"

                "ace chubb" ->
                    Just "Ace Chubb"

                "cigna healthspring" ->
                    Just "Cigna"

                "cigna-healthspring" ->
                    Just "Cigna"

                "bcbs" ->
                    Just "Blue Cross Blue Shield"

                "blue cross" ->
                    Just "Blue Cross Blue Shield"

                "blue shield" ->
                    Just "Blue Cross Blue Shield"

                "humana gold" ->
                    Just "Humana"

                "humana gold plus" ->
                    Just "Humana"

                "wellcare by allwell" ->
                    Just "Wellcare"

                "allwell" ->
                    Just "Wellcare"

                _ ->
                    Nothing

        -- First check for special case matches
        -- Then check for exact matches
        -- Then try fuzzy matching
        exactMatches =
            List.filter
                (\carrier ->
                    String.toLower carrier.name
                        == normalizedCarrierName
                        || List.member normalizedCarrierName (List.map String.toLower carrier.aliases)
                )
                standardCarriers

        -- Try fuzzy matching if no exact match
        fuzzyMatches =
            if List.isEmpty exactMatches then
                List.map
                    (\carrier ->
                        let
                            -- Match against carrier name
                            nameScore =
                                Fuzzy.match [] [] normalizedCarrierName (String.toLower carrier.name)

                            -- Match against aliases and take best score
                            aliasScores =
                                List.map
                                    (\alias -> Fuzzy.match [] [] normalizedCarrierName (String.toLower alias))
                                    carrier.aliases

                            bestAliasScore =
                                List.sortBy .score aliasScores
                                    |> List.head
                                    |> Maybe.withDefault { score = 100000, matches = [] }

                            -- Take the better of the name or alias match
                            bestScore =
                                if nameScore.score <= bestAliasScore.score then
                                    nameScore.score

                                else
                                    bestAliasScore.score
                        in
                        ( carrier.name, bestScore )
                    )
                    standardCarriers
                    |> List.sortBy Tuple.second
                    |> List.head

            else
                Nothing
    in
    case specialCaseMatch of
        Just name ->
            name

        Nothing ->
            case exactMatches of
                carrier :: _ ->
                    carrier.name

                [] ->
                    case fuzzyMatches of
                        Just ( name, score ) ->
                            -- Only use fuzzy match if the score is good enough
                            if score < 10 then
                                name

                            else
                                "Other"

                        Nothing ->
                            "Other"



-- Default to "Other" if no good match found


findBestMatch : String -> List String -> List String -> String
findBestMatch field variations candidates =
    let
        -- Normalize everything for comparison
        normalize s =
            String.toLower (String.trim s)

        normalizedField =
            normalize field

        normalizedVariations =
            List.map normalize variations

        normalizedCandidates =
            List.map normalize candidates

        -- Get the candidate with the best fuzzy match score
        allQueries =
            normalizedField :: normalizedVariations

        scoredCandidates =
            List.map2
                (\normalizedCandidate originalCandidate ->
                    let
                        scores =
                            List.map
                                (\query ->
                                    Fuzzy.match [] [] query normalizedCandidate
                                )
                                allQueries

                        bestScore =
                            List.sortBy .score scores
                                |> List.head
                                |> Maybe.withDefault { score = 100000, matches = [] }
                    in
                    ( originalCandidate, bestScore.score )
                )
                normalizedCandidates
                candidates

        bestMatch =
            List.sortBy Tuple.second scoredCandidates
                |> List.head
                |> Maybe.map Tuple.first
                |> Maybe.withDefault ""
    in
    bestMatch



-- HELPERS


getAt : Int -> List a -> Maybe a
getAt index list =
    if index < 0 then
        Nothing

    else
        List.head (List.drop index list)


uniqueValues : List String -> List String
uniqueValues list =
    list
        |> Set.fromList
        |> Set.toList


createFieldVariations : FieldVariations
createFieldVariations =
    Dict.fromList
        [ ( "firstName", [ "first_name", "firstname", "first name", "fname", "first", "given name", "givenname" ] )
        , ( "lastName", [ "last_name", "lastname", "last name", "lname", "last", "surname", "family name", "familyname" ] )
        , ( "email", [ "email_address", "emailaddress", "email address", "e_mail", "e-mail" ] )
        , ( "phoneNumber", [ "phone_number", "phonenumber", "phone", "cell", "mobile", "telephone", "contact_number", "contact number", "phone number", "cell number", "mobile number" ] )
        , ( "currentCarrier", [ "current_carrier", "current carrier", "carrier", "insurance_provider", "insurance provider", "provider", "current_provider", "current provider", "insurance", "insurance carrier", "insurance_carrier", "insurancecarrier" ] )
        , ( "effectiveDate", [ "effective_date", "effectivedate", "effective date", "start_date", "startdate", "start date", "date_effective", "date effective", "coverage date", "plan start date" ] )
        , ( "birthDate", [ "birth_date", "birthdate", "birth date", "dob", "date_of_birth", "date of birth", "born", "birthday" ] )
        , ( "tobaccoUser", [ "tobacco_user", "tobaccouser", "tobacco user", "tobacco", "smoker", "tobacco_status", "tobacco status", "smokes", "is smoker", "smoking" ] )
        , ( "gender", [ "sex", "m/f", "male/female" ] )
        , ( "zipCode", [ "zip_code", "zipcode", "zip", "postal_code", "postalcode", "postal code", "postal", "zip code" ] )
        , ( "planType", [ "plan_type", "plantype", "plan type", "plan", "insurance_type", "insurancetype", "insurance type", "coverage type", "coverage" ] )
        ]



-- CSV TRANSFORMATION


transformCsvData : String -> ColumnMapping -> Result Error String
transformCsvData csvContent columnMapping =
    case Csv.Parser.parse { fieldSeparator = ',' } csvContent of
        Ok rows ->
            case List.head rows of
                Just headers ->
                    let
                        -- Create new standardized headers
                        standardHeaders =
                            [ "first_name"
                            , "last_name"
                            , "email"
                            , "phone_number"
                            , "current_carrier"
                            , "effective_date"
                            , "birth_date"
                            , "tobacco_user"
                            , "gender"
                            , "zip_code"
                            , "plan_type"
                            ]

                        -- Create mapping from old to new headers
                        headerMapping =
                            [ ( columnMapping.firstName, "first_name" )
                            , ( columnMapping.lastName, "last_name" )
                            , ( columnMapping.email, "email" )
                            , ( columnMapping.phoneNumber, "phone_number" )
                            , ( columnMapping.currentCarrier, "current_carrier" )
                            , ( columnMapping.effectiveDate, "effective_date" )
                            , ( columnMapping.birthDate, "birth_date" )
                            , ( columnMapping.tobaccoUser, "tobacco_user" )
                            , ( columnMapping.gender, "gender" )
                            , ( columnMapping.zipCode, "zip_code" )
                            , ( columnMapping.planType, "plan_type" )
                            ]
                                |> Dict.fromList

                        -- Get indices of columns we want to keep
                        columnIndices =
                            headers
                                |> List.indexedMap Tuple.pair
                                |> List.filter
                                    (\( _, h ) ->
                                        List.member h
                                            [ columnMapping.firstName
                                            , columnMapping.lastName
                                            , columnMapping.email
                                            , columnMapping.phoneNumber
                                            , columnMapping.currentCarrier
                                            , columnMapping.effectiveDate
                                            , columnMapping.birthDate
                                            , columnMapping.tobaccoUser
                                            , columnMapping.gender
                                            , columnMapping.zipCode
                                            , columnMapping.planType
                                            ]
                                    )
                                |> List.map Tuple.first

                        -- Transform each row
                        transformedRows =
                            List.map
                                (\row ->
                                    List.filterMap (\i -> getAt i row) columnIndices
                                )
                                (List.drop 1 rows)

                        -- Convert back to CSV string
                        toCsvRow : List String -> String
                        toCsvRow row =
                            row
                                |> List.map
                                    (\cell ->
                                        if String.contains "," cell then
                                            "\"" ++ cell ++ "\""

                                        else
                                            cell
                                    )
                                |> String.join ","
                    in
                    Ok (String.join "\n" (toCsvRow standardHeaders :: List.map toCsvRow transformedRows))

                Nothing ->
                    Err NoHeaders

        Err _ ->
            Err (ParseError "Failed to parse CSV file")



-- Add function to validate an email address


isValidEmail : String -> Bool
isValidEmail email =
    not (String.isEmpty (String.trim email))
        && String.contains "@" email
        && String.contains "." email
        && String.length email
        > 5



-- Add a type for invalid contacts with reason


type alias InvalidContact =
    { rowData : List String
    , email : String
    , reason : String
    , rowNumber : Int
    }



-- Update the return type to include both valid and invalid contacts


processCsvToContacts : String -> ColumnMapping -> CarrierMapping -> Result Error { valid : List ProcessedContact, invalid : List InvalidContact }
processCsvToContacts csvContent columnMapping carrierMapping =
    case Csv.Parser.parse { fieldSeparator = ',' } csvContent of
        Ok rows ->
            case List.head rows of
                Just headers ->
                    let
                        -- Get indices for each field
                        getColumnIndex : String -> Maybe Int
                        getColumnIndex columnName =
                            List.indexedMap Tuple.pair headers
                                |> List.filter (\( _, h ) -> h == columnName)
                                |> List.head
                                |> Maybe.map Tuple.first

                        -- Get indices for all required fields
                        indices =
                            { firstName = getColumnIndex columnMapping.firstName
                            , lastName = getColumnIndex columnMapping.lastName
                            , email = getColumnIndex columnMapping.email
                            , phoneNumber = getColumnIndex columnMapping.phoneNumber
                            , currentCarrier = getColumnIndex columnMapping.currentCarrier
                            , effectiveDate = getColumnIndex columnMapping.effectiveDate
                            , birthDate = getColumnIndex columnMapping.birthDate
                            , tobaccoUser = getColumnIndex columnMapping.tobaccoUser
                            , gender = getColumnIndex columnMapping.gender
                            , zipCode = getColumnIndex columnMapping.zipCode
                            , planType = getColumnIndex columnMapping.planType
                            }

                        -- Process each row, categorizing as valid or invalid
                        processRow : List String -> ( Maybe ProcessedContact, Maybe InvalidContact )
                        processRow row =
                            let
                                getValue : Maybe Int -> String
                                getValue maybeIndex =
                                    case maybeIndex of
                                        Just i ->
                                            if i < List.length row then
                                                row |> getAt i |> Maybe.withDefault ""

                                            else
                                                ""

                                        Nothing ->
                                            ""

                                -- Get carrier value and map it to standardized name
                                rawCarrier =
                                    getValue indices.currentCarrier

                                mappedCarrier =
                                    Dict.get rawCarrier carrierMapping.mappings
                                        |> Maybe.withDefault rawCarrier

                                -- Parse tobacco user value
                                parseTobaccoUser : String -> Bool
                                parseTobaccoUser val =
                                    let
                                        lower =
                                            String.toLower (String.trim val)
                                    in
                                    lower == "yes" || lower == "true" || lower == "1" || lower == "y"

                                -- Get email value
                                email =
                                    getValue indices.email

                                -- Check if email is valid
                                emailValid =
                                    isValidEmail email
                            in
                            if not emailValid then
                                ( Nothing
                                , Just
                                    { rowData = row
                                    , email = email
                                    , reason = "Invalid email format"
                                    , rowNumber = 0
                                    }
                                )

                            else
                                ( Just
                                    { firstName = getValue indices.firstName
                                    , lastName = getValue indices.lastName
                                    , email = email
                                    , phoneNumber = getValue indices.phoneNumber |> String.filter Char.isDigit
                                    , currentCarrier = mappedCarrier
                                    , effectiveDate = getValue indices.effectiveDate
                                    , birthDate = getValue indices.birthDate
                                    , tobaccoUser = getValue indices.tobaccoUser |> parseTobaccoUser
                                    , gender = getValue indices.gender
                                    , zipCode = getValue indices.zipCode
                                    , planType = getValue indices.planType
                                    }
                                , Nothing
                                )

                        -- Process all rows except header
                        processed =
                            rows
                                |> List.drop 1
                                |> List.indexedMap
                                    (\index row ->
                                        let
                                            ( maybeContact, maybeInvalidContact ) =
                                                processRow row

                                            updatedInvalidContact =
                                                maybeInvalidContact
                                                    |> Maybe.map (\contact -> { contact | rowNumber = index + 1 })
                                        in
                                        ( maybeContact, updatedInvalidContact )
                                    )

                        -- Separate valid and invalid contacts
                        validContacts =
                            processed
                                |> List.filterMap Tuple.first

                        invalidContacts =
                            processed
                                |> List.filterMap Tuple.second
                    in
                    Ok { valid = validContacts, invalid = invalidContacts }

                Nothing ->
                    Err NoHeaders

        Err _ ->
            Err (ParseError "Failed to parse CSV file")

================
File: frontend/src/Dashboard.elm
================
module Dashboard exposing (Model, Msg, init, subscriptions, update, view)

import Browser exposing (Document)
import Components.LimitBanner as LimitBanner exposing (LimitWarning(..))
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Time



-- MODEL


type alias Model =
    { limitBanner : LimitBanner.Model
    , showTutorialModal : Bool
    , quotesSent : Int
    , manualQuotesSent : Int
    , quotesViewed : Int
    , followUpsRequested : Int
    , healthQuestionsCompleted : Int
    , statsLoading : Bool
    , statsError : Maybe String
    , chartData : List ChartDataFromAPI
    , selectedTimeFilter : TimeFilter
    , selectedChartView : ChartView
    , upcomingRenewals : List Renewal
    }



-- This is the data structure from the API


type alias ChartDataFromAPI =
    { x : Float -- timestamp or month index
    , sends : Float
    , views : Float
    , followUps : Float
    , healthCompleted : Float -- New field
    }



-- This is the data structure for Chartist.js


type alias ChartistJsData =
    { labels : List String
    , series : List (List Float)
    }


type TimeFilter
    = Last7Days
    | Last30Days
    | Last90Days
    | YearToDate
    | CustomRange Time.Posix Time.Posix


type ChartView
    = TrendView
    | FunnelView
    | ComparisonView


type alias Renewal =
    { id : String
    , name : String
    , email : String
    , phone : String
    , date : String
    , policyType : String
    }



-- MESSAGES


type Msg
    = NoOp
    | LimitBannerMsg LimitBanner.Msg
    | CloseTutorialModal
    | OpenTutorialModal
    | FetchDashboardStats
    | GotDashboardStats (Result Http.Error DashboardStatsResponse)
    | SelectTimeFilter TimeFilter
    | SelectChartView ChartView
    | FetchRenewals
    | GotRenewals (Result Http.Error RenewalResponse)
    | SendReminderToContact String
    | CallContact String


type alias Flags =
    { isPostPayment : Maybe Bool
    }


type alias DashboardStats =
    { quotesSent : Int
    , manualQuotesSent : Int
    , quotesViewed : Int
    , followUpsRequested : Int
    , healthQuestionsCompleted : Int
    , chartData : List ChartDataFromAPI
    }


type alias DashboardStatsResponse =
    { success : Bool
    , stats : DashboardStats
    }


type alias RenewalResponse =
    { success : Bool
    , renewals : List Renewal
    }


dashboardStatsDecoder : Decoder DashboardStats
dashboardStatsDecoder =
    Decode.succeed DashboardStats
        |> Pipeline.required "quotesSent" Decode.int
        |> Pipeline.required "manualQuotesSent" Decode.int
        |> Pipeline.required "quotesViewed" Decode.int
        |> Pipeline.required "followUpsRequested" Decode.int
        |> Pipeline.required "healthQuestionsCompleted" Decode.int
        |> Pipeline.required "chartData" (Decode.list chartDataFromAPIDecoder)


chartDataFromAPIDecoder : Decoder ChartDataFromAPI
chartDataFromAPIDecoder =
    Decode.succeed ChartDataFromAPI
        |> Pipeline.required "x" Decode.float
        |> Pipeline.required "sends" Decode.float
        |> Pipeline.required "views" Decode.float
        |> Pipeline.required "followUps" Decode.float
        |> Pipeline.optional "healthCompleted" Decode.float 0.0



-- Default to 0 if not present


dashboardStatsResponseDecoder : Decoder DashboardStatsResponse
dashboardStatsResponseDecoder =
    Decode.succeed DashboardStatsResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "stats" dashboardStatsDecoder


renewalDecoder : Decoder Renewal
renewalDecoder =
    Decode.succeed Renewal
        |> Pipeline.required "id" Decode.string
        |> Pipeline.required "name" Decode.string
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "phone" Decode.string
        |> Pipeline.required "date" Decode.string
        |> Pipeline.required "policyType" Decode.string


renewalResponseDecoder : Decoder RenewalResponse
renewalResponseDecoder =
    Decode.succeed RenewalResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "renewals" (Decode.list renewalDecoder)



-- HELPERS
-- Function to encode ChartistJsData to JSON


encodeChartistJsData : ChartistJsData -> Encode.Value
encodeChartistJsData data =
    Encode.object
        [ ( "labels", Encode.list Encode.string data.labels )
        , ( "series", Encode.list (Encode.list Encode.float) data.series )
        ]



-- Helper to format month float to short string (e.g., 0.0 -> "Jan")


formatMonthLabel : Float -> String
formatMonthLabel x =
    let
        monthIndex =
            round x
    in
    case monthIndex of
        0 ->
            "Jan"

        1 ->
            "Feb"

        2 ->
            "Mar"

        3 ->
            "Apr"

        4 ->
            "May"

        5 ->
            "Jun"

        6 ->
            "Jul"

        7 ->
            "Aug"

        8 ->
            "Sep"

        9 ->
            "Oct"

        10 ->
            "Nov"

        11 ->
            "Dec"

        _ ->
            ""



-- Calculate percentages and rates


calculateViewRate : Model -> Float
calculateViewRate model =
    if model.quotesSent == 0 then
        0

    else
        toFloat model.quotesViewed / toFloat model.quotesSent * 100


calculateFollowUpRate : Model -> Float
calculateFollowUpRate model =
    if model.quotesViewed == 0 then
        0

    else
        toFloat model.followUpsRequested / toFloat model.quotesViewed * 100


calculateCompletionRate : Model -> Float
calculateCompletionRate model =
    if model.quotesSent == 0 then
        0

    else
        toFloat model.healthQuestionsCompleted / toFloat model.quotesSent * 100



-- Helper to get API endpoint based on time filter


timeFilterToApiParam : TimeFilter -> String
timeFilterToApiParam filter =
    case filter of
        Last7Days ->
            "7days"

        Last30Days ->
            "30days"

        Last90Days ->
            "90days"

        YearToDate ->
            "ytd"

        CustomRange start end ->
            "custom"



-- Would need to append date parameters
-- INIT


init : Flags -> ( Model, Cmd Msg )
init flags =
    let
        ( limitBannerModel, limitBannerCmd ) =
            LimitBanner.init
    in
    ( { limitBanner = limitBannerModel
      , showTutorialModal = Maybe.withDefault False flags.isPostPayment
      , quotesSent = 0
      , manualQuotesSent = 0
      , quotesViewed = 0
      , followUpsRequested = 0
      , healthQuestionsCompleted = 0
      , statsLoading = True
      , statsError = Nothing
      , chartData = []
      , selectedTimeFilter = Last30Days
      , selectedChartView = TrendView
      , upcomingRenewals = []
      }
    , Cmd.batch
        [ Cmd.map LimitBannerMsg limitBannerCmd
        , fetchDashboardStats Last30Days
        , fetchRenewals
        ]
    )



-- HTTP


fetchDashboardStats : TimeFilter -> Cmd Msg
fetchDashboardStats timeFilter =
    let
        timeParam =
            timeFilterToApiParam timeFilter

        url =
            "/api/dashboard/stats?period=" ++ timeParam
    in
    Http.get
        { url = url
        , expect = Http.expectJson GotDashboardStats dashboardStatsResponseDecoder
        }


fetchRenewals : Cmd Msg
fetchRenewals =
    Http.get
        { url = "/api/dashboard/renewals"
        , expect = Http.expectJson GotRenewals renewalResponseDecoder
        }


httpErrorToString : Http.Error -> String
httpErrorToString error =
    case error of
        Http.BadUrl url ->
            "Bad URL: " ++ url

        Http.Timeout ->
            "Request timed out"

        Http.NetworkError ->
            "Network error"

        Http.BadStatus code ->
            "Bad status: " ++ String.fromInt code

        Http.BadBody message ->
            "Bad body: " ++ message



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        LimitBannerMsg limitBannerMsg ->
            let
                ( limitBanner, cmd ) =
                    LimitBanner.update limitBannerMsg model.limitBanner
            in
            ( { model | limitBanner = limitBanner }
            , Cmd.map LimitBannerMsg cmd
            )

        CloseTutorialModal ->
            ( { model | showTutorialModal = False }
            , Cmd.none
            )

        OpenTutorialModal ->
            ( { model | showTutorialModal = True }
            , Cmd.none
            )

        FetchDashboardStats ->
            ( { model | statsLoading = True, statsError = Nothing }
            , fetchDashboardStats model.selectedTimeFilter
            )

        GotDashboardStats result ->
            case result of
                Ok response ->
                    if response.success then
                        let
                            totalQuotesSent =
                                response.stats.quotesSent + response.stats.manualQuotesSent
                        in
                        ( { model
                            | statsLoading = False
                            , quotesSent = totalQuotesSent
                            , manualQuotesSent = response.stats.manualQuotesSent
                            , quotesViewed = response.stats.quotesViewed
                            , followUpsRequested = response.stats.followUpsRequested
                            , healthQuestionsCompleted = response.stats.healthQuestionsCompleted
                            , chartData = response.stats.chartData
                          }
                        , Cmd.none
                        )

                    else
                        ( { model | statsLoading = False, statsError = Just "Failed to load dashboard data." }
                        , Cmd.none
                        )

                Err httpError ->
                    ( { model | statsLoading = False, statsError = Just (httpErrorToString httpError) }
                    , Cmd.none
                    )

        SelectTimeFilter timeFilter ->
            ( { model | selectedTimeFilter = timeFilter, statsLoading = True }
            , fetchDashboardStats timeFilter
            )

        SelectChartView chartView ->
            ( { model | selectedChartView = chartView }
            , Cmd.none
            )

        FetchRenewals ->
            ( model
            , fetchRenewals
            )

        GotRenewals result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model | upcomingRenewals = response.renewals }
                        , Cmd.none
                        )

                    else
                        ( model
                        , Cmd.none
                        )

                Err _ ->
                    ( model
                    , Cmd.none
                    )

        SendReminderToContact contactId ->
            -- This would call an API to send a reminder
            ( model
            , Cmd.none
            )

        CallContact contactId ->
            -- This would integrate with a calling system or log the call
            ( model
            , Cmd.none
            )

        NoOp ->
            ( model, Cmd.none )


viewChartist : String -> ChartView -> Html msg
viewChartist chartistDataJson chartView =
    let
        chartType =
            case chartView of
                TrendView ->
                    "chartist-line"

                FunnelView ->
                    "chartist-funnel"

                ComparisonView ->
                    "chartist-bar"
    in
    node chartType
        [ attribute "data" chartistDataJson
        , attribute "style" "height: 100%; width: 100%; display: block;"
        ]
        []



-- VIEW


view : Model -> Document Msg
view model =
    { title = "Dashboard"
    , body =
        [ div [ class "p-4 sm:p-6 max-w-7xl mx-auto" ]
            [ LimitBanner.view model.limitBanner
                |> Html.map LimitBannerMsg
            , if model.showTutorialModal then
                viewTutorialModal

              else
                text ""
            , viewDashboardHeader model
            , viewStatsCards model
            , viewMainContent model
            ]
        ]
    }


viewDashboardHeader : Model -> Html Msg
viewDashboardHeader model =
    div [ class "flex flex-col sm:flex-row justify-between items-center mb-6" ]
        [ h1 [ class "text-2xl font-bold text-gray-800 mb-4 sm:mb-0" ]
            [ text "MedicareMax Dashboard" ]
        , div [ class "flex space-x-2" ]
            [ select
                [ class "bg-white border border-gray-300 rounded-md px-3 py-2 text-sm"
                , onInput
                    (\value ->
                        case value of
                            "7days" ->
                                SelectTimeFilter Last7Days

                            "30days" ->
                                SelectTimeFilter Last30Days

                            "90days" ->
                                SelectTimeFilter Last90Days

                            "ytd" ->
                                SelectTimeFilter YearToDate

                            _ ->
                                NoOp
                    )
                ]
                [ option [ value "7days" ] [ text "Last 7 Days" ]
                , option [ value "30days", selected (model.selectedTimeFilter == Last30Days) ] [ text "Last 30 Days" ]
                , option [ value "90days" ] [ text "Last 90 Days" ]
                , option [ value "ytd" ] [ text "Year to Date" ]
                ]
            , button
                [ class "bg-[#03045e] text-white px-4 py-2 rounded-md text-sm hover:bg-opacity-90"
                , onClick FetchDashboardStats
                ]
                [ text "Refresh" ]
            ]
        ]


viewStatsCards : Model -> Html Msg
viewStatsCards model =
    let
        viewRate =
            calculateViewRate model |> round

        followUpRate =
            calculateFollowUpRate model |> round

        completionRate =
            calculateCompletionRate model |> round
    in
    div [ class "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6" ]
        [ -- Quotes Sent card
          if model.statsLoading then
            viewStatsCardWithSpinner "Quotes Sent" "text-[#03045e]"

          else if model.statsError /= Nothing then
            viewStatsCard "Quotes Sent" "0" "text-red-600" "Failed to load data"

          else
            viewStatsCard "Quotes Sent" (String.fromInt model.quotesSent) "text-[#03045e]" "Total emails sent with quotes"

        -- View Rate card
        , if model.statsLoading then
            viewStatsCardWithSpinner "View Rate" "text-[#0077b6]"

          else if model.statsError /= Nothing then
            viewStatsCard "View Rate" "0" "text-red-600" "Failed to load data"

          else
            viewStatsCard "View Rate" (String.fromInt viewRate ++ "%") "text-[#0077b6]" (String.fromInt model.quotesViewed ++ " quotes viewed")

        -- Upcoming Emails card
        , if model.statsLoading then
            viewStatsCardWithSpinner "Upcoming Emails" "text-[#00b4d8]"

          else if model.statsError /= Nothing then
            viewStatsCard "Upcoming Emails" "0" "text-red-600" "Failed to load data"

          else
            viewStatsCard "Upcoming Emails" (String.fromInt model.followUpsRequested) "text-[#00b4d8]" "Upcoming scheduled emails"

        -- Completion Rate card
        , if model.statsLoading then
            viewStatsCardWithSpinner "Completion Rate" "text-[#48cae4]"

          else if model.statsError /= Nothing then
            viewStatsCard "Completion Rate" "0" "text-red-600" "Failed to load data"

          else
            viewStatsCard "Completion Rate" (String.fromInt completionRate ++ "%") "text-[#48cae4]" (String.fromInt model.healthQuestionsCompleted ++ " health questions completed")
        ]


viewMainContent : Model -> Html Msg
viewMainContent model =
    div [ class "grid grid-cols-1 lg:grid-cols-3 gap-6" ]
        [ -- Chart section
          div [ class "lg:col-span-2 bg-white rounded-lg shadow-xl p-4" ]
            [ div [ class "flex justify-between items-center mb-4" ]
                [ h2 [ class "text-lg font-semibold text-gray-800" ] [ text "Performance Metrics" ]
                , div [ class "flex space-x-2" ]
                    [ button
                        [ class
                            ("px-3 py-1 text-sm rounded-md "
                                ++ (if model.selectedChartView == TrendView then
                                        "bg-[#03045e] text-white"

                                    else
                                        "bg-gray-100"
                                   )
                            )
                        , onClick (SelectChartView TrendView)
                        ]
                        [ text "Trend" ]
                    , button
                        [ class
                            ("px-3 py-1 text-sm rounded-md "
                                ++ (if model.selectedChartView == FunnelView then
                                        "bg-[#03045e] t ext-white"

                                    else
                                        "bg-gray-100"
                                   )
                            )
                        , onClick (SelectChartView FunnelView)
                        ]
                        [ text "Funnel" ]
                    , button
                        [ class
                            ("px-3 py-1 text-sm rounded-md "
                                ++ (if model.selectedChartView == ComparisonView then
                                        "bg-[#03045e] text-white"

                                    else
                                        "bg-gray-100"
                                   )
                            )
                        , onClick (SelectChartView ComparisonView)
                        ]
                        [ text "Comparison" ]
                    ]
                ]
            , div [ class "h-64" ]
                [ if model.statsLoading then
                    -- Chart spinner
                    div [ class "h-full w-full flex items-center justify-center" ]
                        [ div [ class "animate-spin rounded-full h-12 w-12 border-t-2 border-l-2 border-[#03045e]" ] []
                        , div [ class "ml-3 text-gray-500" ] [ text "Loading chart data..." ]
                        ]

                  else if model.statsError /= Nothing then
                    -- Error message
                    div [ class "h-full w-full flex items-center justify-center" ]
                        [ div [ class "text-red-500" ] [ text "Error loading chart data. Please try again." ] ]

                  else if List.isEmpty model.chartData then
                    -- No data message
                    div [ class "h-full w-full flex items-center justify-center" ]
                        [ div [ class "text-gray-500" ] [ text "No data available to display." ] ]

                  else
                    let
                        -- Different data formatting based on chart type
                        chartistData =
                            case model.selectedChartView of
                                FunnelView ->
                                    -- For funnel view, we need a simpler data structure
                                    -- We'll use the most recent data points
                                    let
                                        latestData =
                                            List.reverse model.chartData |> List.head
                                    in
                                    case latestData of
                                        Just latest ->
                                            -- Pass the actual values from the model here, not from chartData
                                            { labels = [ "Quotes Sent", "Quotes Viewed", "Upcoming Emails", "Health Completed" ]
                                            , series = [ [ toFloat model.quotesSent, toFloat model.quotesViewed, toFloat model.followUpsRequested, toFloat model.healthQuestionsCompleted ] ]
                                            }

                                        Nothing ->
                                            -- Even if there's no chart data, we can still use the model values
                                            { labels = [ "Quotes Sent", "Quotes Viewed", "Upcoming Emails", "Health Completed" ]
                                            , series = [ [ toFloat model.quotesSent, toFloat model.quotesViewed, toFloat model.followUpsRequested, toFloat model.healthQuestionsCompleted ] ]
                                            }

                                _ ->
                                    -- For trend and comparison views
                                    let
                                        labels =
                                            List.map (.x >> formatMonthLabel) model.chartData

                                        seriesSents =
                                            List.map .sends model.chartData

                                        seriesViews =
                                            List.map .views model.chartData

                                        seriesFollowUps =
                                            List.map .followUps model.chartData

                                        seriesHealthCompleted =
                                            List.map .healthCompleted model.chartData
                                    in
                                    { labels = labels
                                    , series = [ seriesSents, seriesViews, seriesFollowUps, seriesHealthCompleted ]
                                    }

                        chartistJson =
                            Encode.encode 0 (encodeChartistJsData chartistData)
                    in
                    viewChartist chartistJson model.selectedChartView
                ]
            , div [ class "flex flex-col sm:flex-row justify-center mt-4 space-y-2 sm:space-y-0 sm:space-x-8 text-sm text-gray-600 border-t border-gray-200 pt-4" ]
                [ div [ class "flex items-center" ]
                    [ div [ class "w-3 h-3 rounded-full bg-[#03045e] mr-1.5 sm:mr-2" ] []
                    , text "Quotes Sent"
                    ]
                , div [ class "flex items-center" ]
                    [ div [ class "w-3 h-3 rounded-full bg-[#0077b6] mr-1.5 sm:mr-2" ] []
                    , text "Quotes Viewed"
                    ]
                , div [ class "flex items-center" ]
                    [ div [ class "w-3 h-3 rounded-full bg-[#00b4d8] mr-1.5 sm:mr-2" ] []
                    , text "Upcoming Emails"
                    ]
                , div [ class "flex items-center" ]
                    [ div [ class "w-3 h-3 rounded-full bg-[#48cae4] mr-1.5 sm:mr-2" ] []
                    , text "Health Completed"
                    ]
                ]
            ]
        , -- Renewals section
          div [ class "lg:col-span-1 bg-white rounded-lg shadow-xl p-4" ]
            [ div [ class "flex justify-between items-center mb-4" ]
                [ h2 [ class "text-lg font-semibold text-gray-800" ] [ text "Upcoming Renewals" ]
                , span [ class "bg-[#03045e] text-white text-xs px-2 py-1 rounded-full" ]
                    [ text (String.fromInt (List.length model.upcomingRenewals) ++ " Total") ]
                ]
            , if model.statsLoading then
                div [ class "h-full w-full flex items-center justify-center py-8" ]
                    [ div [ class "animate-spin rounded-full h-8 w-8 border-t-2 border-l-2 border-[#03045e]" ] [] ]

              else if List.isEmpty model.upcomingRenewals then
                div [ class "text-center py-8 text-gray-500" ]
                    [ text "No upcoming renewals at this time." ]

              else
                div [ class "space-y-4 max-h-[400px] overflow-y-auto" ]
                    (List.map viewRenewalItem model.upcomingRenewals)
            , div [ class "mt-4 text-center" ]
                [ button [ class "text-[#03045e] text-sm font-medium" ]
                    [ text "View All Renewals" ]
                ]
            ]
        ]


viewRenewalItem : Renewal -> Html Msg
viewRenewalItem renewal =
    div [ class "border-b pb-3" ]
        [ div [ class "flex justify-between items-start" ]
            [ div []
                [ div [ class "font-medium" ] [ text renewal.name ]
                , div [ class "text-sm text-gray-500" ] [ text renewal.policyType ]
                ]
            , div [ class "text-sm font-medium text-[#03045e]" ] [ text renewal.date ]
            ]
        , div [ class "mt-2 flex items-center text-xs text-gray-500" ]
            [ -- Email icon
              span [ class "mr-1" ] [ text "📧" ]
            , text renewal.email
            ]
        , div [ class "mt-1 flex items-center text-xs text-gray-500" ]
            [ -- Phone icon
              span [ class "mr-1" ] [ text "📞" ]
            , text renewal.phone
            ]
        , div [ class "mt-2 flex space-x-2" ]
            [ button
                [ class "bg-[#0077b6] text-white text-xs px-3 py-1 rounded"
                , onClick (SendReminderToContact renewal.id)
                ]
                [ text "Send Reminder" ]
            , button
                [ class "bg-gray-100 text-gray-800 text-xs px-3 py-1 rounded"
                , onClick (CallContact renewal.id)
                ]
                [ text "Call" ]
            ]
        ]


viewTutorialModal : Html Msg
viewTutorialModal =
    div [ class "fixed inset-0 z-50 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4" ]
        [ div [ class "bg-white p-4 sm:p-6 rounded-lg shadow-lg max-w-2xl w-full" ]
            [ div [ class "flex justify-between items-center mb-4" ]
                [ h2 [ class "text-lg sm:text-xl font-semibold text-[#03045E]" ] [ text "Welcome to MedicareMax!" ]
                , button
                    [ class "text-gray-400 hover:text-gray-600 text-xl p-1", onClick CloseTutorialModal ]
                    [ text "×" ]
                ]
            , div [ class "mb-4 sm:mb-6" ]
                [ iframe
                    [ src "https://www.youtube.com/embed/dQw4w9WgXcQ" -- Replace with actual tutorial video
                    , class "w-full aspect-video max-h-[50vh] sm:h-96"
                    , attribute "allowfullscreen" ""
                    , attribute "frameborder" "0"
                    ]
                    []
                ]
            , p [ class "mb-4 text-gray-600 text-sm sm:text-base" ]
                [ text "This quick setup tutorial will help you get started with MedicareMax and show you how to make the most of its features." ]
            , div [ class "flex justify-end" ]
                [ button
                    [ class "px-4 py-2 bg-[#03045E] text-white rounded-md hover:bg-opacity-90 w-full sm:w-auto"
                    , onClick CloseTutorialModal
                    ]
                    [ text "Close" ]
                ]
            ]
        ]


viewStatsCard : String -> String -> String -> String -> Html Msg
viewStatsCard title value colorClass subtitle =
    div [ class "bg-white rounded-lg shadow-xl p-4 sm:p-6" ]
        [ div [ class "text-gray-600 text-xs sm:text-sm" ] [ text title ]
        , div [ class ("text-2xl sm:text-4xl font-bold mt-1 sm:mt-2 " ++ colorClass) ] [ text value ]
        , div [ class "text-gray-500 text-xs mt-1" ] [ text subtitle ]
        ]


viewStatsCardWithSpinner : String -> String -> Html Msg
viewStatsCardWithSpinner title colorClass =
    div [ class "bg-white rounded-lg shadow-xl p-4 sm:p-6" ]
        [ div [ class "text-gray-600 text-xs sm:text-sm" ] [ text title ]
        , div [ class ("text-2xl sm:text-4xl font-bold mt-1 sm:mt-2 flex items-center justify-center " ++ colorClass) ]
            [ div [ class "animate-spin rounded-full h-8 w-8 border-t-2 border-l-2 border-[#03045e]" ] [] ]
        , div [ class "text-gray-500 text-xs mt-1" ] [ text "Loading..." ]
        ]


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/src/Decline.elm
================
module Decline exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onInput, onSubmit)
import Http
import Json.Decode as D
import Json.Encode as E
import Url.Parser.Query as Query


type alias Model =
    { name : String
    , email : String
    , isSubmitting : Bool
    , error : Maybe String
    , success : Bool
    , quoteId : Maybe String
    , key : Nav.Key
    }


type Msg
    = UpdateName String
    | UpdateEmail String
    | SubmitForm
    | GotSubmitResponse (Result Http.Error ())
    | GotContactInfo (Result Http.Error ContactInfo)


type alias ContactInfo =
    { email : String
    , firstName : String
    , lastName : String
    }


init : Nav.Key -> Maybe String -> ( Model, Cmd Msg )
init key maybeQuoteId =
    ( { name = ""
      , email = ""
      , isSubmitting = False
      , error = Nothing
      , success = False
      , quoteId = maybeQuoteId
      , key = key
      }
    , case maybeQuoteId of
        Just quoteId ->
            Http.get
                { url = "/api/quotes/decode/" ++ quoteId
                , expect = Http.expectJson GotContactInfo contactInfoDecoder
                }

        Nothing ->
            Cmd.none
    )


contactInfoDecoder : D.Decoder ContactInfo
contactInfoDecoder =
    D.field "contact"
        (D.map3 ContactInfo
            (D.field "email" D.string)
            (D.field "firstName" D.string)
            (D.field "lastName" D.string)
        )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateName name ->
            ( { model | name = name }, Cmd.none )

        UpdateEmail email ->
            ( { model | email = email }, Cmd.none )

        SubmitForm ->
            ( { model | isSubmitting = True }
            , Http.post
                { url = "/api/contact-request"
                , body = Http.jsonBody (encodeForm model)
                , expect = Http.expectWhatever GotSubmitResponse
                }
            )

        GotSubmitResponse result ->
            case result of
                Ok _ ->
                    ( { model | isSubmitting = False, success = True }, Cmd.none )

                Err _ ->
                    ( { model | isSubmitting = False, error = Just "Failed to submit form. Please try again." }, Cmd.none )

        GotContactInfo result ->
            case result of
                Ok info ->
                    ( { model
                        | email = info.email
                        , name = info.firstName ++ " " ++ info.lastName
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( model, Cmd.none )


encodeForm : Model -> E.Value
encodeForm model =
    E.object
        [ ( "name", E.string model.name )
        , ( "email", E.string model.email )
        , ( "type", E.string "decline" )
        , ( "quoteId", Maybe.map E.string model.quoteId |> Maybe.withDefault E.null )
        ]


view : Model -> Browser.Document Msg
view model =
    { title = "Not Eligible - Medicare Max"
    , body =
        [ div [ class "min-h-screen bg-white" ]
            [ nav [ class "bg-white border-b border-gray-200" ]
                [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" ]
                    [ div [ class "flex justify-between h-16 items-center" ]
                        [ div [ class "flex-shrink-0" ]
                            [ img [ src "/images/medicare-max-logo.png", class "h-8 w-auto", alt "Medicare Max" ] [] ]
                        ]
                    ]
                ]
            , div [ class "max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12" ]
                [ if model.success then
                    div [ class "text-center" ]
                        [ h1 [ class "text-3xl font-bold text-gray-900 mb-4" ]
                            [ text "Thank You" ]
                        , p [ class "text-gray-600" ]
                            [ text "We'll be in touch soon to discuss your options." ]
                        ]

                  else
                    div []
                        [ h1 [ class "text-3xl font-bold text-center text-gray-900 mb-4" ]
                            [ text "We Need to Talk" ]
                        , p [ class "text-gray-600 text-center mb-8" ]
                            [ text "Based on your answers, you may not qualify for this plan. However, we'd love to help you find a different plan that's a perfect fit for your needs." ]
                        , case model.error of
                            Just error ->
                                div [ class "bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" ]
                                    [ text error ]

                            Nothing ->
                                text ""
                        , Html.form [ onSubmit SubmitForm, class "space-y-6 max-w-lg mx-auto" ]
                            [ div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                    [ text "Name" ]
                                , input
                                    [ type_ "text"
                                    , class "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
                                    , value model.name
                                    , onInput UpdateName
                                    , required True
                                    ]
                                    []
                                ]
                            , div []
                                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                                    [ text "Email" ]
                                , input
                                    [ type_ "email"
                                    , class "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
                                    , value model.email
                                    , onInput UpdateEmail
                                    , required True
                                    ]
                                    []
                                ]
                            , button
                                [ class "w-full bg-purple-600 text-white py-3 px-4 rounded-lg hover:bg-purple-700 transition-colors duration-200 disabled:opacity-50"
                                , type_ "submit"
                                , disabled model.isSubmitting
                                ]
                                [ if model.isSubmitting then
                                    text "Submitting..."

                                  else
                                    text "Request Follow-up"
                                ]
                            ]
                        ]
                ]
            ]
        ]
    }


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/src/Earnings.elm
================
module Earnings exposing
    ( EarningsInputs
    , EarningsModel
    , baseCase
    , flatCase
    , rolloverCase
    )

import PriceModel


type alias EarningsInputs =
    { calculationInputs : PriceModel.CalculationInputs
    , overheadCost : Float -- Annual fixed overhead cost
    , customerAcquisitionCost : Float -- Cost per new customer
    , earningsMultiple : Float -- Multiple for enterprise value calculation
    }


type alias EarningsModel =
    List
        { year : Int
        , revenue : Float
        , costs : Float
        , earnings : Float
        , enterpriseValue : Float
        }



-- Helper to calculate enterprise value based on earnings and multiple


calculateEnterpriseValue : Float -> Float -> Float
calculateEnterpriseValue earnings multiple =
    earnings * multiple


baseCase : EarningsInputs -> EarningsModel
baseCase inputs =
    List.range 0 6
        |> List.map
            (\year ->
                let
                    -- Base revenue stays constant (existing book)
                    revenue =
                        toFloat inputs.calculationInputs.contacts
                            * inputs.calculationInputs.commissionRate

                    -- Only fixed costs in base case
                    costs =
                        inputs.overheadCost

                    -- Calculate earnings
                    earnings =
                        revenue - costs

                    -- Calculate enterprise value as simple multiple of earnings
                    enterpriseValue =
                        calculateEnterpriseValue earnings inputs.earningsMultiple
                in
                { year = year
                , revenue = revenue
                , costs = costs
                , earnings = earnings
                , enterpriseValue = enterpriseValue
                }
            )


flatCase : EarningsInputs -> EarningsModel
flatCase inputs =
    List.range 0 6
        |> List.map
            (\year ->
                let
                    -- Total contacts stays constant - these are existing policies
                    totalContacts =
                        toFloat inputs.calculationInputs.contacts

                    -- Revenue from existing book - already paying commissions
                    revenue =
                        totalContacts * inputs.calculationInputs.commissionRate

                    -- Need to replace 1/6 of book every year to maintain size
                    replacementCustomers =
                        totalContacts / 6

                    -- Constant replacement rate
                    -- Costs: fixed overhead + CAC for replacements
                    costs =
                        inputs.overheadCost
                            + (replacementCustomers * inputs.customerAcquisitionCost)

                    -- Calculate earnings
                    earnings =
                        revenue - costs

                    -- Calculate enterprise value as simple multiple of earnings
                    enterpriseValue =
                        calculateEnterpriseValue earnings inputs.earningsMultiple
                in
                { year = year
                , revenue = revenue
                , costs = costs
                , earnings = earnings
                , enterpriseValue = enterpriseValue
                }
            )


rolloverCase : EarningsInputs -> EarningsModel
rolloverCase inputs =
    List.range 0 6
        |> List.map
            (\year ->
                let
                    -- Base revenue from existing book
                    baseRevenue =
                        toFloat inputs.calculationInputs.contacts
                            * inputs.calculationInputs.commissionRate

                    -- Calculate retained customers (starting year 1)
                    -- These are customers we would have lost (1/6 of book) but kept (at rollover rate)
                    retainedCustomers =
                        if year == 0 then
                            0

                        else
                            -- 1/6 of book * rollover rate for each year
                            (toFloat inputs.calculationInputs.contacts / 6)
                                * (inputs.calculationInputs.rolloverPercent / 100)
                                * toFloat year

                    -- Additional revenue from retained customers
                    retainedRevenue =
                        retainedCustomers * inputs.calculationInputs.commissionRate

                    revenue =
                        baseRevenue + retainedRevenue

                    -- Need to replace 1/6 of original book minus those we retain
                    baseReplacements =
                        if year == 0 then
                            toFloat inputs.calculationInputs.contacts / 6

                        else
                            -- Only replace those we didn't retain
                            (toFloat inputs.calculationInputs.contacts / 6)
                                * (1 - inputs.calculationInputs.rolloverPercent / 100)

                    -- Costs include fixed overhead plus CAC for replacements
                    costs =
                        inputs.overheadCost
                            + (baseReplacements * inputs.customerAcquisitionCost)

                    -- Calculate earnings
                    earnings =
                        revenue - costs

                    -- Calculate enterprise value as simple multiple of earnings
                    enterpriseValue =
                        calculateEnterpriseValue earnings inputs.earningsMultiple
                in
                { year = year
                , revenue = revenue
                , costs = costs
                , earnings = earnings
                , enterpriseValue = enterpriseValue
                }
            )

================
File: frontend/src/Eligibility.elm
================
module Eligibility exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Dict exposing (Dict)
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onInput, onSubmit)
import Http
import Json.Decode as D
import Json.Decode.Pipeline as P
import Json.Encode as E
import MyIcon
import Svg exposing (path, svg)
import Svg.Attributes exposing (d, fill, fillRule, height, stroke, strokeLinecap, strokeLinejoin, strokeWidth, viewBox, width)
import Url.Builder as Builder
import Utils.QuoteHeader exposing (viewHeader)



-- TYPES


type Color
    = DangerColor
    | BlueColor
    | AmberColor
    | SuccessColor
    | PurpleColor
    | BrandColor


type AnswerType
    = BooleanAnswer (Maybe Bool)
    | TextAnswer String


type alias FollowUpQuestion =
    { id : Int
    , text : String
    , answerType : AnswerType
    }


type alias Question =
    { id : Int
    , icon : Icon
    , title : String
    , text : String
    , color : Color
    , answer : Maybe Bool
    , followUpQuestions : List FollowUpQuestion
    , isExpanded : Bool
    }


type alias Model =
    { key : Nav.Key
    , questions : List Question
    , quoteId : Maybe String
    , orgId : String
    , orgName : Maybe String
    , orgLogo : Maybe String
    , isSubmitting : Bool
    , submissionError : Maybe String
    , isLoading : Bool
    }


type Msg
    = AnswerQuestion Int Bool
    | ToggleExpand Int
    | UpdateFollowUpText Int Int String
    | AnswerFollowUpQuestion Int Int Bool
    | SubmitAnswers
    | SkipQuestions
    | GotSubmitResponse (Result Http.Error ContactResponse)
    | GotTempContactResponse (Result Http.Error String)
    | GotOrgDetails (Result Http.Error OrgDetailsResponse)
    | GotExistingAnswers (Result Http.Error ExistingAnswersResponse)


type alias ContactResponse =
    { contactId : String
    , orgName : String
    , orgLogo : Maybe String
    }


type alias OrgDetailsResponse =
    { orgName : String
    , orgLogo : Maybe String
    }


type Icon
    = HeartIcon
    | LungsIcon
    | AlertCircleIcon
    | DropletsIcon
    | BrainIcon
    | Building2Icon
    | StethoscopeIcon


type alias ExistingAnswersResponse =
    { answers : List ExistingAnswer
    , orgName : String
    , orgLogo : Maybe String
    }


type alias ExistingAnswer =
    { questionId : Int
    , questionText : String
    , questionType : String
    , answer : Bool
    , followUpAnswers : List FollowUpAnswer
    }


type alias FollowUpAnswer =
    { questionId : Int
    , questionText : String
    , answer : AnswerType
    }



-- INIT


defaultQuestions : List Question
defaultQuestions =
    [ { id = 1
      , icon = HeartIcon
      , title = "Heart Health"
      , text = "Have you ever been diagnosed with or treated for any heart condition, including but not limited to heart failure, coronary artery disease, angina, atrial fibrillation, or heart valve problems?"
      , color = DangerColor
      , answer = Nothing
      , isExpanded = False
      , followUpQuestions =
            [ { id = 101
              , text = "What specific heart condition(s) have you been diagnosed with?"
              , answerType = TextAnswer ""
              }
            , { id = 102
              , text = "In the past 2 years, have you been hospitalized, had surgery, or any cardiac procedures (like angioplasty or stenting) for this condition?"
              , answerType = BooleanAnswer Nothing
              }
            , { id = 103
              , text = "Are you currently taking 3 or more medications for this heart condition, or using oxygen or nitroglycerin?"
              , answerType = BooleanAnswer Nothing
              }
            ]
      }
    , { id = 2
      , icon = LungsIcon
      , title = "Lung Health"
      , text = "Have you ever been diagnosed with or treated for a chronic lung condition such as COPD, emphysema, chronic bronchitis, or cystic fibrosis?"
      , color = BlueColor
      , answer = Nothing
      , isExpanded = False
      , followUpQuestions =
            [ { id = 201
              , text = "What specific lung condition(s) have you been diagnosed with?"
              , answerType = TextAnswer ""
              }
            , { id = 202
              , text = "Does this condition require you to use oxygen at home or a nebulizer?"
              , answerType = BooleanAnswer Nothing
              }
            , { id = 203
              , text = "In the past year, have you been hospitalized due to lung problems or had frequent (3 or more) respiratory infections requiring antibiotics or steroids?"
              , answerType = BooleanAnswer Nothing
              }
            ]
      }
    , { id = 3
      , icon = AlertCircleIcon
      , title = "Cancer History"
      , text = "Have you ever been diagnosed with or treated for cancer, leukemia, or lymphoma (excluding basal cell skin cancer)?"
      , color = AmberColor
      , answer = Nothing
      , isExpanded = False
      , followUpQuestions =
            [ { id = 301
              , text = "What type of cancer were you diagnosed with?"
              , answerType = TextAnswer ""
              }
            , { id = 302
              , text = "When were you initially diagnosed?"
              , answerType = TextAnswer ""
              }
            , { id = 303
              , text = "Are you currently undergoing active cancer treatment (chemotherapy, radiation, immunotherapy, targeted therapy, or hormone therapy)?"
              , answerType = BooleanAnswer Nothing
              }
            ]
      }
    , { id = 4
      , icon = DropletsIcon
      , title = "Diabetes with Complications"
      , text = "Have you ever been diagnosed with diabetes that has resulted in any complications affecting your eyes (retinopathy), nerves (neuropathy), kidneys (nephropathy), circulation (vascular disease), or heart?"
      , color = SuccessColor
      , answer = Nothing
      , isExpanded = False
      , followUpQuestions =
            [ { id = 401
              , text = "Which complications of diabetes have you experienced? (e.g., Neuropathy, Retinopathy, Kidney Problems, Vascular Disease, Heart Problems)"
              , answerType = TextAnswer ""
              }
            , { id = 402
              , text = "Do you require insulin to manage your diabetes, and if so, what is your typical daily insulin dosage?"
              , answerType = TextAnswer ""
              }
            ]
      }
    , { id = 5
      , icon = BrainIcon
      , title = "Memory or Cognitive Health"
      , text = "Do you have any concerns about your memory, thinking, or cognitive function, OR have you ever been diagnosed with dementia, Alzheimer's disease, or any other cognitive impairment?"
      , color = PurpleColor
      , answer = Nothing
      , isExpanded = False
      , followUpQuestions =
            [ { id = 501
              , text = "Have you been formally diagnosed with any cognitive impairment? If yes, what diagnosis?"
              , answerType = TextAnswer ""
              }
            , { id = 502
              , text = "Do you require assistance with activities of daily living such as remembering medications, managing finances, or personal care due to cognitive impairment?"
              , answerType = BooleanAnswer Nothing
              }
            ]
      }
    , { id = 6
      , icon = Building2Icon
      , title = "Recent and Current Hospitalizations"
      , text = "In the past 2 years, have you been hospitalized overnight in a hospital more than two times for any medical condition (excluding planned surgeries)?"
      , color = BrandColor
      , answer = Nothing
      , isExpanded = False
      , followUpQuestions = []
      }
    , { id = 7
      , icon = StethoscopeIcon
      , title = "Current Hospitalization or Medical Test"
      , text = "Are you currently hospitalized or waiting on results from a medical test, or been recommended by a doctor to have a medical test performed?"
      , color = BlueColor
      , answer = Nothing
      , isExpanded = False
      , followUpQuestions = []
      }
    ]


init : Nav.Key -> { quoteId : Maybe String, orgId : Maybe String } -> ( Model, Cmd Msg )
init key { quoteId, orgId } =
    let
        extractedOrgId =
            case ( orgId, quoteId ) of
                ( Nothing, Just id ) ->
                    id
                        |> String.split "-"
                        |> List.head
                        |> Maybe.withDefault ""

                ( Just orgIdValue, _ ) ->
                    orgIdValue

                ( Nothing, Nothing ) ->
                    ""

        initialModel =
            { key = key
            , questions = defaultQuestions
            , quoteId = quoteId
            , orgId = extractedOrgId
            , orgName = Nothing
            , orgLogo = Nothing
            , isSubmitting = False
            , submissionError = Nothing
            , isLoading = True
            }

        loadOrgDetails =
            if String.isEmpty extractedOrgId then
                Cmd.none

            else
                Http.get
                    { url = "/api/org/" ++ extractedOrgId ++ "/details"
                    , expect = Http.expectJson GotOrgDetails orgDetailsResponseDecoder
                    }

        loadExistingAnswers =
            case quoteId of
                Just id ->
                    let
                        contactId =
                            String.split "-" id
                                |> List.drop 1
                                |> List.head
                                |> Maybe.withDefault ""
                    in
                    if not (String.isEmpty contactId) then
                        Http.get
                            { url = "/api/org/" ++ extractedOrgId ++ "/eligibility-answers/" ++ contactId
                            , expect = Http.expectJson GotExistingAnswers existingAnswersResponseDecoder
                            }

                    else
                        Cmd.none

                Nothing ->
                    Cmd.none
    in
    ( initialModel
    , Cmd.batch [ loadOrgDetails, loadExistingAnswers ]
    )



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        SkipQuestions ->
            ( model
            , Nav.pushUrl model.key
                (Builder.absolute [ "schedule" ]
                    ([ Builder.string "orgId" model.orgId ]
                        ++ (case model.quoteId of
                                Just id ->
                                    [ Builder.string "id" id ]

                                Nothing ->
                                    []
                           )
                        ++ [ Builder.string "status" "decline" ]
                    )
                )
            )

        AnswerQuestion id answer ->
            ( { model
                | questions =
                    List.map
                        (\q ->
                            if q.id == id then
                                { q
                                    | answer = Just answer
                                    , isExpanded = answer && not (List.isEmpty q.followUpQuestions) -- Only expand if there are followup questions
                                }

                            else
                                q
                        )
                        model.questions
              }
            , Cmd.none
            )

        ToggleExpand id ->
            ( { model
                | questions =
                    List.map
                        (\q ->
                            if q.id == id then
                                { q | isExpanded = not q.isExpanded }

                            else
                                q
                        )
                        model.questions
              }
            , Cmd.none
            )

        UpdateFollowUpText questionId answerId text ->
            ( { model
                | questions =
                    List.map
                        (\q ->
                            if q.id == questionId then
                                { q
                                    | followUpQuestions =
                                        List.map
                                            (\f ->
                                                if f.id == answerId then
                                                    { f | answerType = TextAnswer text }

                                                else
                                                    f
                                            )
                                            q.followUpQuestions
                                }

                            else
                                q
                        )
                        model.questions
              }
            , Cmd.none
            )

        AnswerFollowUpQuestion questionId answerId answer ->
            ( { model
                | questions =
                    List.map
                        (\q ->
                            if q.id == questionId then
                                { q
                                    | followUpQuestions =
                                        List.map
                                            (\f ->
                                                if f.id == answerId then
                                                    { f | answerType = BooleanAnswer (Just answer) }

                                                else
                                                    f
                                            )
                                            q.followUpQuestions
                                }

                            else
                                q
                        )
                        model.questions
              }
            , Cmd.none
            )

        GotSubmitResponse result ->
            case result of
                Ok response ->
                    let
                        anyYes =
                            List.any (\q -> q.answer == Just True) model.questions

                        nextUrl =
                            Builder.absolute [ "schedule" ]
                                ([ Builder.string "orgId" model.orgId
                                 , Builder.string "status"
                                    (if anyYes then
                                        "decline"

                                     else
                                        "accept"
                                    )
                                 ]
                                    ++ (case model.quoteId of
                                            Just id ->
                                                [ Builder.string "id" id ]

                                            Nothing ->
                                                [ Builder.string "contactId" response.contactId ]
                                       )
                                )
                    in
                    ( { model
                        | isSubmitting = False
                        , orgName = Just response.orgName
                        , orgLogo = response.orgLogo
                      }
                    , Nav.pushUrl model.key nextUrl
                    )

                Err error ->
                    ( { model
                        | isSubmitting = False
                        , submissionError = Just "Failed to save your answers. Please try again."
                      }
                    , Cmd.none
                    )

        GotTempContactResponse result ->
            case result of
                Ok contactId ->
                    -- Now that we have a temporary contact, submit the answers
                    let
                        relevantQuestions =
                            getRelevantQuestions model

                        encodedAnswers =
                            encodeAnswers relevantQuestions
                    in
                    ( model
                    , Http.post
                        { url = "/api/org/" ++ model.orgId ++ "/eligibility-answers"
                        , body =
                            Http.jsonBody <|
                                E.object
                                    [ ( "contact_id", E.string contactId )
                                    , ( "answers", encodedAnswers )
                                    ]
                        , expect = Http.expectJson GotSubmitResponse contactResponseDecoder
                        }
                    )

                Err error ->
                    ( { model
                        | isSubmitting = False
                        , submissionError = Just "Failed to create temporary contact. Please try again."
                      }
                    , Cmd.none
                    )

        GotOrgDetails result ->
            case result of
                Ok response ->
                    ( { model
                        | orgName = Just response.orgName
                        , orgLogo = response.orgLogo
                        , isLoading = False
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model | isLoading = False }
                    , Cmd.none
                    )

        GotExistingAnswers result ->
            case result of
                Ok response ->
                    let
                        updatedQuestions =
                            List.map
                                (\q ->
                                    case List.filter (\a -> a.questionId == q.id) response.answers of
                                        existingAnswer :: _ ->
                                            { q
                                                | answer = Just existingAnswer.answer
                                                , isExpanded = existingAnswer.answer -- Auto-expand if answered Yes
                                                , followUpQuestions =
                                                    List.map
                                                        (\fq ->
                                                            case List.filter (\fa -> fa.questionId == fq.id && fa.questionText == fq.text) existingAnswer.followUpAnswers of
                                                                followUpAnswer :: _ ->
                                                                    { fq | answerType = followUpAnswer.answer }

                                                                [] ->
                                                                    fq
                                                        )
                                                        q.followUpQuestions
                                            }

                                        [] ->
                                            q
                                )
                                model.questions
                    in
                    ( { model
                        | questions = updatedQuestions
                        , orgName = Just response.orgName
                        , orgLogo = response.orgLogo
                        , isLoading = False
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model | isLoading = False }
                    , Cmd.none
                    )

        SubmitAnswers ->
            let
                relevantQuestions =
                    getRelevantQuestions model

                allRelevantQuestionsAnswered =
                    List.all
                        (\q ->
                            case q.followUpQuestions of
                                [] ->
                                    q.answer /= Nothing

                                followUps ->
                                    List.all
                                        (\fq ->
                                            case fq.answerType of
                                                TextAnswer _ ->
                                                    True

                                                BooleanAnswer _ ->
                                                    q.answer /= Nothing
                                        )
                                        followUps
                        )
                        relevantQuestions
            in
            if allRelevantQuestionsAnswered then
                case model.quoteId of
                    Just quoteId ->
                        -- If we have a quote ID, submit answers directly
                        ( { model | isSubmitting = True, submissionError = Nothing }
                        , submitAnswers model
                        )

                    Nothing ->
                        -- If no quote ID, first create a temporary contact
                        ( { model | isSubmitting = True, submissionError = Nothing }
                        , Http.post
                            { url = "/api/org/" ++ model.orgId ++ "/temp-contact"
                            , body = Http.jsonBody <| E.object [] -- Minimal data for temp contact
                            , expect = Http.expectString GotTempContactResponse
                            }
                        )

            else
                ( model
                , Cmd.none
                )



-- Helper functions


getRelevantQuestions : Model -> List Question
getRelevantQuestions model =
    let
        answeredQuestions =
            List.filter (\q -> q.answer /= Nothing) model.questions
    in
    answeredQuestions


encodeAnswers : List Question -> E.Value
encodeAnswers questions =
    E.object
        (List.filterMap
            (\q ->
                if q.answer == Nothing then
                    Nothing

                else
                    let
                        questionType =
                            case q.color of
                                DangerColor ->
                                    "main"

                                BlueColor ->
                                    "lung_health"

                                AmberColor ->
                                    "cancer_history"

                                SuccessColor ->
                                    "diabetes_with_complications"

                                PurpleColor ->
                                    "memory_or_cognitive_health"

                                BrandColor ->
                                    "recent_and_current_hospitalizations"

                        answerValue =
                            case q.answer of
                                Just ans ->
                                    E.bool ans

                                Nothing ->
                                    E.null
                    in
                    Just
                        ( String.fromInt q.id
                        , E.object
                            [ ( "id", E.int q.id )
                            , ( "question_text", E.string q.text )
                            , ( "question_type", E.string questionType )
                            , ( "answer", answerValue )
                            , ( "follow_up_questions", encodeFollowUpQuestions q.followUpQuestions )
                            ]
                        )
            )
            questions
        )


encodeAwnser : AnswerType -> Maybe E.Value
encodeAwnser answerType =
    case answerType of
        BooleanAnswer maybeAnswer ->
            case maybeAnswer of
                Just answer ->
                    Just (E.bool answer)

                Nothing ->
                    Nothing

        TextAnswer text ->
            Just (E.string text)


encodeFollowUpQuestions : List FollowUpQuestion -> E.Value
encodeFollowUpQuestions questions =
    questions
        |> List.filter
            (\q ->
                case q.answerType of
                    TextAnswer "" ->
                        False

                    BooleanAnswer Nothing ->
                        False

                    _ ->
                        True
            )
        |> List.map
            (\q ->
                E.object
                    ([ ( "id", Just (E.int q.id) )
                     , ( "question_text", Just (E.string q.text) )
                     , ( "answer", encodeAwnser q.answerType )
                     ]
                        |> List.filterMap
                            (\( key, value ) ->
                                case value of
                                    Just v ->
                                        Just ( key, v )

                                    Nothing ->
                                        Nothing
                            )
                    )
            )
        |> E.list identity


iconToSvg : Icon -> Color -> Html msg
iconToSvg icon color =
    let
        iconColor =
            case color of
                DangerColor ->
                    "text-[#DC2626]"

                BlueColor ->
                    "text-[#0075F2]"

                AmberColor ->
                    "text-amber-500"

                SuccessColor ->
                    "text-medicare-success"

                PurpleColor ->
                    "text-[#7F56D9]"

                BrandColor ->
                    "text-[#03045E]"
    in
    case icon of
        HeartIcon ->
            div [ class iconColor ] [ MyIcon.heartPulse 24 "currentColor" ]

        LungsIcon ->
            div [ class iconColor ] [ MyIcon.lungs 24 "currentColor" ]

        AlertCircleIcon ->
            div [ class iconColor ] [ MyIcon.activity 24 "currentColor" ]

        DropletsIcon ->
            div [ class iconColor ] [ MyIcon.droplets 24 "currentColor" ]

        BrainIcon ->
            div [ class iconColor ] [ MyIcon.brain 24 "currentColor" ]

        Building2Icon ->
            div [ class iconColor ] [ MyIcon.building2 24 "currentColor" ]

        StethoscopeIcon ->
            div [ class iconColor ] [ MyIcon.stethoscope 24 "currentColor" ]


colorToClasses : Color -> Bool -> { card : String, title : String, indicator : String }
colorToClasses color isActive =
    case color of
        DangerColor ->
            { card =
                if isActive then
                    "bg-[#DC2626]/10"

                else
                    "bg-white"
            , title = "text-[#DC2626]"
            , indicator = "bg-[#DC2626]/10"
            }

        BlueColor ->
            { card =
                if isActive then
                    "bg-[#0075F2]/20"

                else
                    "bg-white"
            , title = "text-[#0075F2]"
            , indicator = "bg-[#0075F2]/10"
            }

        AmberColor ->
            { card =
                if isActive then
                    "bg-amber-50"

                else
                    "bg-white"
            , title = "text-amber-500"
            , indicator = "bg-amber-50"
            }

        SuccessColor ->
            { card =
                if isActive then
                    "bg-medicare-success-light"

                else
                    "bg-white"
            , title = "text-medicare-success"
            , indicator = "bg-medicare-success-light"
            }

        PurpleColor ->
            { card =
                if isActive then
                    "bg-[#7F56D9]/20"

                else
                    "bg-white"
            , title = "text-[#7F56D9]"
            , indicator = "bg-[#7F56D9]/10"
            }

        BrandColor ->
            { card =
                if isActive then
                    "bg-[#03045E]/20"

                else
                    "bg-white"
            , title = "text-[#03045E]"
            , indicator = "bg-[#03045E]/10"
            }



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Underwriting Assessment"
    , body =
        [ div [ class "min-h-screen bg-white" ]
            [ if model.isLoading then
                div [ class "fixed inset-0 bg-white flex flex-col items-center justify-center gap-4 text-center" ]
                    [ div [ class "animate-spin rounded-full h-12 w-12 border-4 border-[#03045E] border-t-transparent" ] []
                    , p [ class "text-center text-lg font-medium text-gray-600" ]
                        [ text "Loading assessment..." ]
                    ]

              else
                div [ class "max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8" ]
                    [ -- Organization Logo/Name
                      viewHeader model.orgLogo model.orgName
                    , h1 [ class "text-2xl sm:text-3xl font-bold text-center text-gray-900 mb-2 sm:mb-3" ]
                        [ text "Underwriting Assessment" ]
                    , p [ class "text-gray-600 px-5 md:px-0 text-center mb-6 sm:mb-8 text-sm sm:text-base max-w-xl mx-auto" ]
                        [ text "In order to qualify for a new Supplemental plan you must pass medical underwriting. Please answer all questions to the best of your knowledge." ]
                    , if model.submissionError /= Nothing then
                        div [ class "mb-4 p-3 bg-red-100 text-red-700 rounded-lg text-sm" ]
                            [ text (Maybe.withDefault "" model.submissionError) ]

                      else
                        text ""
                    , Html.form [ onSubmit SubmitAnswers, class "space-y-4 sm:space-y-6" ]
                        (viewQuestionsWithFollowUps model
                            ++ [ viewSubmitButton model ]
                        )
                    , viewMedicareAdvantageOffRamp model
                    ]
            ]
        ]
    }


viewQuestionsWithFollowUps : Model -> List (Html Msg)
viewQuestionsWithFollowUps model =
    List.map
        (\q ->
            div [ class "mb-6 transition-all duration-200" ]
                [ viewQuestion q ]
        )
        model.questions


viewQuestion : Question -> Html Msg
viewQuestion question =
    let
        colorClasses =
            colorToClasses question.color (question.answer == Just True)

        shouldShowFollowUps =
            question.answer == Just True && question.isExpanded && not (List.isEmpty question.followUpQuestions)

        hasFollowUps =
            not (List.isEmpty question.followUpQuestions)

        bgColorClass =
            if question.answer == Just True then
                case question.color of
                    DangerColor ->
                        "bg-[#DC2626]/10"

                    BlueColor ->
                        "bg-[#0075F2]/10"

                    AmberColor ->
                        "bg-amber-50"

                    SuccessColor ->
                        "bg-medicare-success-light"

                    PurpleColor ->
                        "bg-[#7F56D9]/10"

                    BrandColor ->
                        "bg-[#03045E]/10"

            else
                "bg-white"
    in
    div
        [ class <|
            "rounded-lg shadow-card overflow-hidden transition-all duration-300 border border-[#DCE2E5] "
                ++ bgColorClass
        ]
        [ div [ class "p-3 sm:p-5" ]
            [ div [ class "flex items-start gap-2 sm:gap-4" ]
                [ div [ class "flex-shrink-0 mt-0.5 sm:mt-1" ]
                    [ iconToSvg question.icon question.color ]
                , div [ class "flex-1 min-w-0" ]
                    [ div [ class "flex justify-between items-start" ]
                        [ h3 [ class <| "font-semibold text-base sm:text-lg mb-1.5 sm:mb-2 " ++ colorClasses.title ]
                            [ text question.title ]
                        ]
                    , p [ class "text-gray-700 text-sm sm:text-base mb-3 sm:mb-4" ]
                        [ text question.text ]
                    , div [ class "flex gap-2 sm:gap-3" ]
                        [ viewAnswerButton question True
                        , viewAnswerButton question False
                        ]
                    ]
                ]
            ]
        , if shouldShowFollowUps then
            div [ class "mt-4 space-y-4 border-t border-[#DCE2E5] pt-4 pb-4 sm:pb-5" ]
                (List.map (\f -> viewFollowUpQuestion f question.id) question.followUpQuestions)

          else
            text ""
        ]


viewFollowUpQuestion : FollowUpQuestion -> Int -> Html Msg
viewFollowUpQuestion followUp parentId =
    div [ class "px-3 sm:px-5" ]
        [ p [ class "text-gray-700 text-sm sm:text-base mb-2" ]
            [ text followUp.text ]
        , case followUp.answerType of
            TextAnswer textValue ->
                div [ class "mt-2" ]
                    [ textarea
                        [ class "w-full p-2.5 sm:p-3 text-sm sm:text-base bg-white border border-[#DCE2E5] rounded-lg focus:ring-2 focus:ring-[#03045E] focus:border-[#03045E]"
                        , rows 2
                        , placeholder "Please provide details..."
                        , value textValue
                        , onInput (\text -> UpdateFollowUpText parentId followUp.id text)
                        ]
                        []
                    ]

            BooleanAnswer answer ->
                div [ class "flex gap-2 sm:gap-3" ]
                    [ button
                        [ type_ "button"
                        , onClick (AnswerFollowUpQuestion parentId followUp.id True)
                        , class <|
                            "flex-1 py-2 sm:py-2.5 px-3 sm:px-4 text-sm sm:text-base rounded-lg font-medium transition-colors border "
                                ++ (if answer == Just True then
                                        "bg-[#03045E] text-white border-[#03045E]"

                                    else
                                        "bg-white text-gray-700 border-[#DCE2E5] hover:bg-gray-50"
                                   )
                        ]
                        [ text "Yes" ]
                    , button
                        [ type_ "button"
                        , onClick (AnswerFollowUpQuestion parentId followUp.id False)
                        , class <|
                            "flex-1 py-2 sm:py-2.5 px-3 sm:px-4 text-sm sm:text-base rounded-lg font-medium transition-colors border "
                                ++ (if answer == Just False then
                                        "bg-gray-900 text-white border-gray-900"

                                    else
                                        "bg-white text-gray-700 border-[#DCE2E5] hover:bg-gray-50"
                                   )
                        ]
                        [ text "No" ]
                    ]
        ]


viewRadioButton : Question -> String -> Bool -> Html Msg
viewRadioButton question labelText value =
    label
        [ class
            ("flex items-center justify-center px-3 sm:px-4 py-2 sm:py-2.5 rounded-md border text-sm sm:text-base cursor-pointer transition-all duration-200 w-full "
                ++ (if question.answer == Just value then
                        if value then
                            "border-blue-500 bg-blue-50 text-blue-700 font-medium shadow-sm"

                        else
                            "border-gray-500 bg-gray-50 text-gray-700 font-medium shadow-sm"

                    else
                        "border-gray-200 hover:border-blue-200 hover:bg-gray-50 text-gray-700"
                   )
            )
        , onClick (AnswerQuestion question.id value)
        ]
        [ input
            [ type_ "radio"
            , name ("question-" ++ String.fromInt question.id)
            , checked (question.answer == Just value)
            , class "sr-only"
            ]
            []
        , span [ class "font-medium" ] [ text labelText ]
        ]


viewAnswerButton : Question -> Bool -> Html Msg
viewAnswerButton question isYes =
    button
        [ type_ "button"
        , onClick (AnswerQuestion question.id isYes)
        , class <|
            "flex-1 py-2 sm:py-2.5 px-3 sm:px-4 text-sm sm:text-base rounded-lg font-medium transition-colors border "
                ++ (if question.answer == Just isYes then
                        if isYes then
                            "bg-[#03045E] text-white border-[#03045E]"

                        else
                            "bg-gray-900 text-white border-gray-900"

                    else
                        "bg-white text-gray-700 border-gray-300 hover:bg-gray-50"
                   )
        ]
        [ text
            (if isYes then
                "Yes"

             else
                "No"
            )
        ]


viewSubmitButton : Model -> Html Msg
viewSubmitButton model =
    let
        -- Check if all main questions are answered
        allMainQuestionsAnswered =
            List.all (\q -> q.answer /= Nothing) model.questions

        -- For any "Yes" answers with follow-up questions, check if all boolean follow-ups are answered
        allRequiredFollowUpsAnswered =
            List.all
                (\q ->
                    case q.answer of
                        Just True ->
                            -- If answered Yes, check follow-up questions
                            List.all
                                (\fq ->
                                    case fq.answerType of
                                        TextAnswer _ ->
                                            -- Text answers are optional
                                            True

                                        BooleanAnswer answer ->
                                            -- Boolean answers must be answered
                                            answer /= Nothing
                                )
                                q.followUpQuestions

                        _ ->
                            -- If not answered Yes, follow-ups don't matter
                            True
                )
                model.questions

        canSubmit =
            allMainQuestionsAnswered && allRequiredFollowUpsAnswered && not model.isSubmitting

        buttonClass =
            "w-full py-2.5 sm:py-3 rounded-lg text-white font-medium transition-colors duration-200 mt-4 sm:mt-6 text-sm sm:text-base shadow-sm "
                ++ (if canSubmit then
                        "bg-[#03045E] hover:bg-[#03045E]/90"

                    else
                        "bg-[#03045E]/70 cursor-not-allowed"
                   )
    in
    button
        [ class buttonClass
        , type_ "submit"
        , disabled (not canSubmit)
        ]
        [ if model.isSubmitting then
            text "Submitting..."

          else
            text "Next"
        ]


viewMedicareAdvantageOffRamp : Model -> Html Msg
viewMedicareAdvantageOffRamp model =
    div [ class "mt-12" ]
        [ div [ class "w-full h-px bg-[#DCE2E5] mb-8" ] [] -- Gray divider
        , div [ class "bg-white rounded-[10px] border border-[#DCE2E5] shadow-[0_1px_2px_rgba(16,24,40,0.05)]" ]
            [ div [ class "px-4 sm:px-6 py-4 sm:py-5 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 sm:gap-0" ]
                [ div [ class "flex items-start gap-4" ]
                    [ -- Icon for the section
                      div [ class "w-12 h-12 rounded-full bg-[#F9F5FF] flex items-center justify-center flex-shrink-0" ]
                        [ svg [ Svg.Attributes.width "26", Svg.Attributes.height "26", Svg.Attributes.viewBox "0 0 24 24", Svg.Attributes.fill "none" ]
                            [ path
                                [ Svg.Attributes.d "M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"
                                , Svg.Attributes.stroke "#7F56D9"
                                , Svg.Attributes.strokeWidth "2"
                                , Svg.Attributes.strokeLinecap "round"
                                , Svg.Attributes.strokeLinejoin "round"
                                ]
                                []
                            , path
                                [ Svg.Attributes.d "M12 8V12"
                                , Svg.Attributes.stroke "#7F56D9"
                                , Svg.Attributes.strokeWidth "2"
                                , Svg.Attributes.strokeLinecap "round"
                                , Svg.Attributes.strokeLinejoin "round"
                                ]
                                []
                            , path
                                [ Svg.Attributes.d "M12 16H12.01"
                                , Svg.Attributes.stroke "#7F56D9"
                                , Svg.Attributes.strokeWidth "2"
                                , Svg.Attributes.strokeLinecap "round"
                                , Svg.Attributes.strokeLinejoin "round"
                                ]
                                []
                            ]
                        ]
                    , div [ class "flex flex-col" ]
                        [ h3 [ class "text-lg sm:text-xl font-bold text-[#101828] -tracking-[0.02em]" ]
                            [ text "Looking to dramatically lower your monthly costs?" ]
                        , p [ class "text-sm sm:text-base text-[#667085]" ]
                            [ text "Medicare Advantage plans offer $0 monthly premiums with drug coverage included. These plans have improved a lot over recent years, with more benefits and flexibility than ever. If saving money is your priority, let's find the right plan for you." ]
                        ]
                    ]
                , div [ class "sm:ml-4 flex justify-center sm:justify-start" ]
                    [ button
                        [ onClick SkipQuestions
                        , class "whitespace-nowrap bg-[#03045E] text-white px-5 sm:px-4 py-3 sm:py-2 rounded-lg hover:bg-[#02034D] transition-colors text-sm sm:text-base w-full sm:w-auto text-center"
                        , type_ "button"
                        , disabled model.isSubmitting
                        ]
                        [ text "Explore Options" ]
                    ]
                ]
            ]
        ]



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none



-- Add this near other decoders


contactResponseDecoder : D.Decoder ContactResponse
contactResponseDecoder =
    D.map3 ContactResponse
        (D.field "contactId" D.string)
        (D.field "orgName" D.string)
        (D.field "orgLogo" (D.nullable D.string))


orgDetailsResponseDecoder : D.Decoder OrgDetailsResponse
orgDetailsResponseDecoder =
    D.map2 OrgDetailsResponse
        (D.field "name" D.string)
        (D.field "logo_data" (D.nullable D.string))


submitAnswers : Model -> Cmd Msg
submitAnswers model =
    Http.post
        { url = "/api/org/" ++ model.orgId ++ "/eligibility-answers"
        , body =
            Http.jsonBody <|
                E.object
                    [ ( "quote_id", E.string (Maybe.withDefault "" model.quoteId) )
                    , ( "answers", encodeAnswers (getRelevantQuestions model) )
                    ]
        , expect = Http.expectJson GotSubmitResponse contactResponseDecoder
        }


existingAnswersResponseDecoder : D.Decoder ExistingAnswersResponse
existingAnswersResponseDecoder =
    D.map3 ExistingAnswersResponse
        (D.field "answers" (D.dict existingAnswerDecoder |> D.map dictToAnswerList))
        (D.field "orgName" D.string)
        (D.field "orgLogo" (D.nullable D.string))


existingAnswerDecoder : D.Decoder ExistingAnswer
existingAnswerDecoder =
    D.succeed ExistingAnswer
        |> P.required "id" D.int
        |> P.required "question_text" D.string
        |> P.required "question_type" D.string
        |> P.required "answer" D.bool
        |> P.required "follow_up_questions" (D.list followUpAnswerDecoder)


followUpAnswerDecoder : D.Decoder FollowUpAnswer
followUpAnswerDecoder =
    D.succeed FollowUpAnswer
        |> P.required "id" D.int
        |> P.required "question_text" D.string
        |> P.required "answer" answerTypeDecoder


answerTypeDecoder : D.Decoder AnswerType
answerTypeDecoder =
    D.oneOf
        [ D.map (\b -> BooleanAnswer (Just b)) D.bool
        , D.map TextAnswer D.string
        ]


dictToAnswerList : Dict String ExistingAnswer -> List ExistingAnswer
dictToAnswerList dict =
    Dict.toList dict
        |> List.map
            (\( key, answer ) ->
                { answer | questionId = String.toInt key |> Maybe.withDefault 0 }
            )

================
File: frontend/src/EmailScheduler.elm
================
module EmailScheduler exposing
    ( EmailSchedule
    , PlanType(..)
    , ScheduledEmail
    , ScheduledEmailStatus(..)
    , ScheduledEmailType(..)
    , getScheduledEmails
    , init
    , scheduledEmailTypeToString
    , viewFutureActivity
    , viewScheduledEmail
    )

{-| This module manages email scheduling for various events such as birthdays,
anniversaries, New Year greetings, and October blasts. It supports different plan
types and provides functionality to schedule emails, check their status, and display upcoming activities.

The module includes:

  - Type definitions for email schedules and statuses.
  - Initialization of email schedules.
  - Logic to calculate scheduled emails with status checks.
  - Views to display future scheduled emails in a user-friendly table format.

Dependencies:

  - `Date` for handling dates.
  - `Html` for rendering views.

-}

import BirthdayRules exposing (canPresentDifferentPlanOnly, getDelayedEmailDate, getStateRule, isInBirthdayRuleWindow, isInContinuousOpenEnrollment)
import Date exposing (Date)
import Html exposing (Html, div, h2, span, table, tbody, td, text, th, thead, tr)
import Html.Attributes exposing (class)
import Time exposing (Month(..))



-- TYPES


{-| Represents an email schedule for a contact, including key dates and plan information.

  - `contactId`: Unique identifier for the contact.
  - `effectiveDate`: The date when the plan became effective.
  - `birthDate`: The contact's birth date.
  - `currentDate`: The current date for reference.
  - `planType`: The type of plan (PlanN, PlanG, or NoPlan).
  - `state`: The state of the contact.
  - `stateCarrierSettings`: List of state carrier settings.
  - `stateLicenses`: List of state licenses.

-}
type alias EmailSchedule =
    { contactId : Int
    , effectiveDate : Date
    , birthDate : Date
    , currentDate : Date
    , planType : PlanType
    , state : String
    , stateCarrierSettings : List StateCarrierSetting
    , stateLicenses : List String
    }


{-| Represents a scheduled email with its type, scheduled time, and status.

  - `emailType`: The type of email (e.g., Birthday, Anniversary).
  - `scheduledTime`: The date when the email is scheduled to be sent.
  - `status`: The status of the email (Scheduled or Skipped with a reason).

-}
type alias ScheduledEmail =
    { emailType : ScheduledEmailType
    , scheduledTime : Date
    , status : ScheduledEmailStatus
    }


{-| Represents the status of a scheduled email.

  - `Scheduled`: The email is scheduled to be sent.
  - `Skipped reason`: The email was skipped, with a reason provided.
  - `Delayed reason`: The email was delayed due to birthday rules, with a reason provided.

-}
type ScheduledEmailStatus
    = Scheduled
    | Skipped String
    | Delayed String


{-| Represents the type of scheduled email, associated with a plan type.

  - `Birthday`: Email for the contact's birthday.
  - `Anniversary`: Email for the plan's anniversary.
  - `NewYear`: Email for New Year greetings.
  - `OctoberBlast`: Email for an October promotional blast.
  - `NoEmails`: No scheduled emails.

-}
type ScheduledEmailType
    = Birthday
    | Anniversary
    | NewYear
    | OctoberBlast
    | NoEmails


{-| Represents the plan type for a contact.

  - `PlanN`: Plan N (specific benefits).
  - `PlanG`: Plan G (specific benefits).
  - `NoPlan`: No plan assigned.

-}
type PlanType
    = PlanN
    | PlanG
    | NoPlan


{-| Represents a state carrier setting.

  - `state`: The state.
  - `carrier`: The carrier.
  - `active`: Whether the setting is active.
  - `targetGI`: Whether the setting targets GI.

-}
type alias StateCarrierSetting =
    { state : String
    , carrier : String
    , active : Bool
    , targetGI : Bool
    }



-- INITIALIZATION


{-| Initializes an email schedule for a contact.

  - `contactId`: Unique identifier for the contact.
  - `effective`: The effective date of the plan.
  - `birth`: The contact's birth date.
  - `current`: The current date for scheduling reference.
  - `plan`: The plan type.
  - `state`: The state of the contact.
  - `settings`: List of state carrier settings.
  - `licenses`: List of state licenses.
    Returns an `EmailSchedule` record with the provided values.

-}
init : Int -> Date -> Date -> Date -> PlanType -> String -> List StateCarrierSetting -> List String -> EmailSchedule
init contactId effective birth current plan state settings licenses =
    { contactId = contactId
    , effectiveDate = effective
    , birthDate = birth
    , currentDate = current
    , planType = plan
    , state = state
    , stateCarrierSettings = settings
    , stateLicenses = licenses
    }



-- CALCULATIONS


{-| Checks if a contact's state is active.

  - `schedule`: The email schedule to check.
    Returns `True` if the contact's state is active, otherwise `False`.

-}
isStateActive : EmailSchedule -> Bool
isStateActive schedule =
    List.member schedule.state schedule.stateLicenses


{-| Calculates the list of scheduled emails for a given email schedule.

  - `schedule`: The email schedule to process.
    Returns a list of `ScheduledEmail` records, each with a type, scheduled time, and status.
    Emails are scheduled for:
  - The contact's next birthday.
  - The plan's next anniversary.
  - The next New Year (January 1st).
  - The next October blast (October 1st).
    Emails within the first year of the effective date are skipped.
    Emails for contacts in states with continuous open enrollment are skipped.
    Emails for contacts in their birthday rule window are delayed.

-}
getScheduledEmails : EmailSchedule -> List ScheduledEmail
getScheduledEmails schedule =
    if isInContinuousOpenEnrollment schedule.state then
        [ { emailType = NoEmails
          , scheduledTime = schedule.currentDate
          , status = Skipped "Contact's state has continuous open enrollment"
          }
        ]

    else
        let
            -- Calculate the date one year after the effective date for status checks.
            oneYearAfterEffective : Date
            oneYearAfterEffective =
                Date.add Date.Years 1 schedule.effectiveDate

            -- Check if we're within the first year
            isWithinFirstYear : Bool
            isWithinFirstYear =
                Date.compare schedule.currentDate oneYearAfterEffective == LT

            -- Calculate the next occurrence of an event based on the email type and base date.
            nextOccurrence : ScheduledEmailType -> Date -> Date
            nextOccurrence emailType baseDate =
                let
                    currentYear : Int
                    currentYear =
                        Date.year schedule.currentDate

                    -- Calculate next year's date for birthday and anniversary
                    nextBirthdayOrAnniversaryYear : Date -> Int
                    nextBirthdayOrAnniversaryYear date =
                        let
                            thisYearDate =
                                Date.fromCalendarDate currentYear (Date.month date) (Date.day date)
                        in
                        if Date.compare thisYearDate schedule.currentDate == LT then
                            currentYear + 1

                        else
                            currentYear

                    -- For September blast (previously October), use current year if September hasn't passed yet
                    septemberThisYear : Date
                    septemberThisYear =
                        Date.fromCalendarDate currentYear Sep 1

                    shouldUseNextYearForSeptember : Bool
                    shouldUseNextYearForSeptember =
                        Date.compare septemberThisYear schedule.currentDate == LT

                    result =
                        case emailType of
                            Birthday ->
                                -- Calculate birthday date then subtract 14 days
                                let
                                    nextBirthday =
                                        Date.fromCalendarDate
                                            (nextBirthdayOrAnniversaryYear baseDate)
                                            (Date.month baseDate)
                                            (Date.day baseDate)
                                in
                                Date.add Date.Days -14 nextBirthday

                            Anniversary ->
                                -- Calculate anniversary date then subtract 30 days
                                let
                                    nextAnniversary =
                                        Date.fromCalendarDate
                                            (nextBirthdayOrAnniversaryYear baseDate)
                                            (Date.month baseDate)
                                            (Date.day baseDate)
                                in
                                Date.add Date.Days -30 nextAnniversary

                            OctoberBlast ->
                                -- Now using September 1st instead of October 1st
                                Date.fromCalendarDate
                                    (if shouldUseNextYearForSeptember then
                                        currentYear + 1

                                     else
                                        currentYear
                                    )
                                    Sep
                                    1

                            NewYear ->
                                -- Not used but keeping for type safety
                                schedule.currentDate

                            NoEmails ->
                                schedule.currentDate
                in
                result

            -- Check if an email should be delayed due to birthday rules
            checkBirthdayRuleDelay : ScheduledEmailType -> Date -> ( Date, ScheduledEmailStatus )
            checkBirthdayRuleDelay emailType scheduledDate =
                let
                    -- Check if the scheduled date falls within a birthday rule window
                    isScheduledDateInWindow : Date -> Date -> Bool
                    isScheduledDateInWindow referenceDate dateToCheck =
                        -- Get the rule for the state
                        case getStateRule schedule.state of
                            Just rule ->
                                let
                                    -- Calculate the start and end dates of the window for the scheduled year
                                    scheduledYear =
                                        Date.year dateToCheck

                                    adjustedReferenceDate =
                                        Date.fromCalendarDate scheduledYear (Date.month referenceDate) (Date.day referenceDate)

                                    -- For Nevada, the window starts on the first day of the birth month
                                    windowStartDate =
                                        if rule.state == "NV" then
                                            Date.fromCalendarDate scheduledYear (Date.month referenceDate) 1

                                        else
                                            -- For other states, subtract the days before birthday from the birthday
                                            Date.add Date.Days -rule.daysBeforeBirthday adjustedReferenceDate

                                    windowEndDate =
                                        Date.add Date.Days rule.totalDays windowStartDate
                                in
                                -- Check if the scheduled date falls within the window
                                Date.compare dateToCheck windowStartDate /= LT && Date.compare dateToCheck windowEndDate /= GT

                            Nothing ->
                                False
                in
                case emailType of
                    Birthday ->
                        -- For birthday emails, check if the state is Missouri (which doesn't have a birthday rule)
                        if schedule.state == "MO" then
                            -- Missouri only has anniversary rule, not birthday rule
                            ( scheduledDate, Scheduled )
                            -- For other states, check if the scheduled date falls within the birthday rule window

                        else if isScheduledDateInWindow schedule.birthDate scheduledDate then
                            -- If it does, delay until after the window
                            let
                                delayedDate =
                                    getDelayedEmailDate schedule.state schedule.birthDate scheduledDate
                            in
                            ( delayedDate, Delayed "due to birthday rule window" )

                        else
                            ( scheduledDate, Scheduled )

                    Anniversary ->
                        -- For Missouri anniversary rule
                        if schedule.state == "MO" then
                            -- Check if the scheduled date falls within the anniversary rule window
                            if isScheduledDateInWindow schedule.effectiveDate scheduledDate then
                                -- If the contact already has Plan G and we're sending a Plan G email, delay it
                                if schedule.planType == PlanG then
                                    let
                                        delayedDate =
                                            getDelayedEmailDate schedule.state schedule.effectiveDate scheduledDate
                                    in
                                    ( delayedDate, Delayed "due to anniversary rule window" )

                                else
                                    -- If it's a different plan type, we can send it during the window
                                    ( scheduledDate, Scheduled )

                            else
                                -- Outside the window, schedule normally
                                ( scheduledDate, Scheduled )

                        else
                            -- For other states, no delay for anniversary emails
                            ( scheduledDate, Scheduled )

                    _ ->
                        -- No delay for other email types
                        ( scheduledDate, Scheduled )

            -- Create a scheduled email with the appropriate status.
            createScheduledEmail : ScheduledEmailType -> Date -> ScheduledEmail
            createScheduledEmail emailType baseDate =
                let
                    scheduledTime : Date
                    scheduledTime =
                        nextOccurrence emailType baseDate

                    ( finalScheduledTime, birthdayRuleStatus ) =
                        checkBirthdayRuleDelay emailType scheduledTime

                    status : ScheduledEmailStatus
                    status =
                        if Date.compare scheduledTime schedule.currentDate == LT then
                            -- Skip if the date is in the past
                            Skipped "Date is in the past"

                        else if
                            Date.compare scheduledTime oneYearAfterEffective
                                == LT
                                && Date.compare scheduledTime schedule.effectiveDate
                                == GT
                        then
                            Skipped "Within first year of effective date"

                        else
                            birthdayRuleStatus
                in
                { emailType = emailType
                , scheduledTime =
                    if status == Delayed "due to birthday rule window" || status == Delayed "due to anniversary rule window" then
                        finalScheduledTime

                    else
                        scheduledTime
                , status = status
                }

            -- Helper function to create plan-specific emails for each event type.
            planSpecificEmail : ScheduledEmailType -> ScheduledEmail
            planSpecificEmail emailType =
                let
                    baseDate =
                        case emailType of
                            Birthday ->
                                schedule.birthDate

                            Anniversary ->
                                schedule.effectiveDate

                            NewYear ->
                                -- For New Year, we don't need a base date since we always use Jan 1
                                Date.fromCalendarDate (Date.year schedule.currentDate) Jan 1

                            OctoberBlast ->
                                -- For October blast, we don't need a base date since we always use Oct 1
                                Date.fromCalendarDate (Date.year schedule.currentDate) Oct 1

                            NoEmails ->
                                schedule.currentDate
                in
                createScheduledEmail emailType baseDate

            emails =
                if isWithinFirstYear then
                    [ { emailType = NoEmails
                      , scheduledTime = schedule.currentDate
                      , status = Skipped "Within first year of effective date"
                      }
                    ]

                else
                    [ planSpecificEmail Birthday
                    , planSpecificEmail Anniversary
                    , planSpecificEmail OctoberBlast

                    -- New Year email removed from the list
                    ]
        in
        -- Include both scheduled and delayed emails, but filter out individual skipped ones
        -- except for our special NoEmails case
        List.filter
            (\email ->
                case email.status of
                    Scheduled ->
                        True

                    Delayed _ ->
                        True

                    Skipped reason ->
                        -- Allow through if it's our NoEmails message
                        email.emailType == NoEmails
            )
            emails
            |> List.sortWith
                (\a b ->
                    Date.compare a.scheduledTime b.scheduledTime
                )



-- VIEW FUNCTIONS


{-| Displays a table of future scheduled emails.

  - `scheduledEmails`: The list of scheduled emails to display.
    Returns an HTML view with a table showing the email type, scheduled date, and status.

-}
viewFutureActivity : List ScheduledEmail -> Html msg
viewFutureActivity scheduledEmails =
    div []
        [ h2 [ class "text-lg font-medium text-gray-900 mb-4" ] [ text "Future Activity" ]
        , table [ class "min-w-full divide-y divide-gray-300" ]
            [ thead [ class "bg-gray-50" ]
                [ tr []
                    [ th [ class "px-3 py-3.5 text-left text-sm font-semibold text-gray-900" ] [ text "TYPE" ]
                    , th [ class "px-3 py-3.5 text-left text-sm font-semibold text-gray-900" ] [ text "SCHEDULED DATE" ]
                    , th [ class "px-3 py-3.5 text-left text-sm font-semibold text-gray-900" ] [ text "STATUS" ]
                    ]
                ]
            , tbody [ class "divide-y divide-gray-200 bg-white" ]
                (List.map
                    (\email ->
                        tr [ class "hover:bg-gray-50" ]
                            [ td [ class "px-3 py-2 text-sm text-gray-900" ]
                                [ text (scheduledEmailTypeToString email.emailType) ]
                            , td [ class "px-3 py-2 text-sm text-gray-900" ]
                                [ text (Date.format "MMMM ddd, yyyy" email.scheduledTime) ]
                            , td [ class "px-3 py-2 text-sm" ]
                                [ case email.status of
                                    Scheduled ->
                                        span [ class "text-green-600" ] [ text "Scheduled" ]

                                    Skipped reason ->
                                        span [ class "text-orange-600" ] [ text ("Skipped: " ++ reason) ]

                                    Delayed reason ->
                                        span [ class "text-blue-600" ] [ text ("Scheduled - Delayed " ++ reason) ]
                                ]
                            ]
                    )
                    scheduledEmails
                )
            ]
        ]


{-| Displays a single scheduled email as a table row.

  - `email`: The scheduled email to display.
    Returns an HTML table row with the email type, scheduled date, and status.

-}
viewScheduledEmail : ScheduledEmail -> Html msg
viewScheduledEmail email =
    tr [ class "hover:bg-gray-50" ]
        [ td [ class "px-3 py-2 text-sm text-gray-900" ]
            [ text (scheduledEmailTypeToString email.emailType) ]
        , td [ class "px-3 py-2 text-sm text-gray-900" ]
            [ text (Date.format "MMMM ddd, y" email.scheduledTime) ]
        , td [ class "px-3 py-2 text-sm" ]
            [ case email.status of
                Scheduled ->
                    span [ class "text-green-600" ] [ text "Scheduled" ]

                Skipped reason ->
                    span [ class "text-orange-600" ] [ text ("Skipped: " ++ reason) ]

                Delayed reason ->
                    span [ class "text-blue-600" ] [ text ("Delayed " ++ reason) ]
            ]
        ]


{-| Converts a scheduled email type to a human-readable string.

  - `emailType`: The scheduled email type to convert.
    Returns a string representation, including the plan type (e.g., "Birthday (Plan N)").

-}
scheduledEmailTypeToString : ScheduledEmailType -> String
scheduledEmailTypeToString emailType =
    case emailType of
        Birthday ->
            "Birthday (14 days before)"

        Anniversary ->
            "Anniversary (30 days before)"

        NewYear ->
            "New Year"

        OctoberBlast ->
            "AEP Reminder"

        NoEmails ->
            "No Scheduled Emails"

================
File: frontend/src/Home.elm
================
port module Home exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onMouseEnter, onMouseLeave)
import Http
import Json.Decode as Decode
import MyIcon exposing (activity, brightArrow, chatBubbles, commandKey, envelope, heartBubble, lightning, smilieyChat)
import Ports exposing (getOrgSlug, receiveOrgSlug)
import Process
import Set exposing (Set)
import Svg exposing (Svg)
import Task
import Time


port viewingPhone : (Bool -> msg) -> Sub msg



-- MODEL


type alias Model =
    { key : Nav.Key
    , sessionState : SessionState
    , activeExperienceTab : ExperienceTab
    , carouselActive : Bool
    , expandedFaqs : Set String
    , expandedFeature : Maybe String
    }


type SessionState
    = Unknown
    | Checking
    | Valid
    | Invalid


type ExperienceTab
    = Email
    | Quote
    | Underwriting


type Msg
    = CheckSession
    | GotSessionResponse (Result Http.Error SessionResponse)
    | NavigateSignup
    | NavigateTryItOut
    | NavigatePricing
    | SetExperienceTab ExperienceTab
    | StartCarousel
    | StopCarousel
    | RotateCarousel Time.Posix
    | ToggleFaq String
    | ToggleFeature String
    | PhoneSectionVisible Bool
    | NoOp


type alias SessionResponse =
    { valid : Bool }


init : Nav.Key -> ( Model, Cmd Msg )
init key =
    ( { key = key
      , sessionState = Unknown
      , activeExperienceTab = Email
      , carouselActive = True
      , expandedFaqs = Set.empty
      , expandedFeature = Nothing
      }
    , checkSession
    )


checkSession : Cmd Msg
checkSession =
    Http.get
        { url = "/api/auth/session"
        , expect = Http.expectJson GotSessionResponse sessionResponseDecoder
        }


sessionResponseDecoder : Decode.Decoder SessionResponse
sessionResponseDecoder =
    Decode.map SessionResponse
        (Decode.field "valid" Decode.bool)



-- UPDATE


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        CheckSession ->
            ( { model | sessionState = Checking }
            , checkSession
            )

        GotSessionResponse result ->
            case result of
                Ok response ->
                    ( { model
                        | sessionState =
                            if response.valid then
                                Valid

                            else
                                Invalid
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model | sessionState = Invalid }
                    , Cmd.none
                    )

        NavigateSignup ->
            ( model
            , Nav.pushUrl model.key "/waitlist"
            )

        NavigateTryItOut ->
            ( model
            , Nav.pushUrl model.key "/self-onboarding/demo-org"
            )

        NavigatePricing ->
            ( model
            , Nav.pushUrl model.key "/pricing"
            )

        SetExperienceTab tab ->
            ( { model | activeExperienceTab = tab, carouselActive = False }
            , Cmd.batch
                [ Process.sleep 5000
                    |> Task.perform (\_ -> StartCarousel)
                ]
            )

        StartCarousel ->
            ( { model | carouselActive = True }
            , Cmd.none
            )

        StopCarousel ->
            ( { model | carouselActive = False }
            , Cmd.none
            )

        RotateCarousel _ ->
            if model.carouselActive then
                let
                    nextTab =
                        case model.activeExperienceTab of
                            Email ->
                                Quote

                            Quote ->
                                Underwriting

                            Underwriting ->
                                Email
                in
                ( { model | activeExperienceTab = nextTab }
                , Cmd.none
                )

            else
                ( model, Cmd.none )

        ToggleFaq id ->
            ( { model
                | expandedFaqs =
                    if Set.member id model.expandedFaqs then
                        Set.remove id model.expandedFaqs

                    else
                        Set.insert id model.expandedFaqs
              }
            , Cmd.none
            )

        ToggleFeature id ->
            ( { model
                | expandedFeature =
                    if model.expandedFeature == Just id then
                        Nothing

                    else
                        Just id
              }
            , Cmd.none
            )

        PhoneSectionVisible isVisible ->
            if isVisible then
                ( { model | activeExperienceTab = Email, carouselActive = True }
                , Cmd.none
                )

            else
                ( model, Cmd.none )

        NoOp ->
            ( model, Cmd.none )



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Medicare Max - Boost Your Medicare Supp Renewals with AI"
    , body =
        [ div [ class "min-h-screen bg-white md:snap-y md:snap-mandatory overflow-y-auto h-screen scroll-smooth" ]
            [ div [ class "max-w-7xl mx-auto px-6 sm:px-6 lg:px-8 pt-8 sm:pt-16 pb-16 sm:pb-32 min-h-screen flex items-center md:snap-start" ]
                [ div [ class "grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-16 items-center" ]
                    [ div [ class "relative" ]
                        [ div [ class "flex justify-center sm:justify-start w-full" ]
                            [ div [ class "inline-flex items-center rounded-full bg-[#F9F5FF] mt-16 sm:mt-0 px-0 sm:px-0 py-1 mb-6 sm:mb-8" ]
                                [ div [ class "bg-[#03045E] rounded-full px-3 sm:px-3.5 py-1" ]
                                    [ span [ class "text-xs sm:text-sm text-white" ] [ text "Old book of business?" ]
                                    ]
                                , div [ class "flex items-center px-2 sm:px-3" ]
                                    [ span [ class "text-xs sm:text-sm font-medium text-[#03045E]" ] [ text "Renew with ease" ]
                                    , span [ class "ml-1 text-[#03045E]" ] [ text "→" ]
                                    ]
                                ]
                            ]
                        , h1
                            [ class "text-3xl sm:text-4xl lg:text-5xl xl:text-6xl tracking-tight font-semibold text-[#141B29] leading-[1.2] text-center sm:text-left" ]
                            [ text "Boost Your Medigap Renewals with AI" ]
                        , p
                            [ class "mt-4 sm:mt-6 text-base sm:text-lg text-[#475467] leading-[1.5] text-center sm:text-left" ]
                            [ text "Our AI-powered system handles client outreach, quotes, health underwriting, and e-apps — magically resetting your residuals so you can focus on growing your book." ]
                        , div [ class "mt-8 sm:mt-12 flex justify-start gap-6" ]
                            [ button
                                [ onClick NavigateSignup
                                , class "w-[220px] inline-flex items-center justify-center px-6 py-3.5 rounded-lg text-base font-semibold text-white bg-[#03045E] hover:bg-[#1a1f5f] transition-colors duration-200"
                                ]
                                [ text "Get Early Access" ]
                            , button
                                [ onClick NavigateTryItOut
                                , class "w-[220px] inline-flex items-center justify-center px-6 py-3.5 rounded-lg text-base font-semibold text-[#03045E] bg-white border-2 border-[#03045E] hover:bg-gray-50 transition-colors duration-200"
                                ]
                                [ text "Try It Out" ]
                            ]
                        ]
                    , div [ class "relative" ]
                        [ div [ class "mx-auto w-full max-w-sm sm:max-w-none relative rounded-lg overflow-hidden" ]
                            [ img
                                [ src "/images/hero.png"
                                , class "w-full"
                                , alt "Dashboard with agent statistics"
                                ]
                                []
                            ]
                        ]
                    ]
                ]
            , div [ class "bg-white py-8 sm:py-16 min-h-screen flex items-center md:snap-start" ]
                [ div [ class "max-w-7xl mx-auto px-6 sm:px-6 lg:px-8" ]
                    [ div [ class "mb-8 sm:mb-12 text-left" ]
                        [ span [ class "text-[#03045E] font-semibold text-sm sm:text-base" ] [ text "It's quite simple" ]
                        , h2 [ class "mt-2 sm:mt-3 text-2xl sm:text-3xl md:text-4xl font-semibold text-gray-900" ] [ text "Here's how it works" ]
                        , p [ class "mt-2 sm:mt-4 text-base sm:text-lg text-gray-600" ] [ text "3 easy steps to setup your book and automate your retention." ]
                        ]
                    , div [ class "grid grid-cols-1 md:grid-cols-3 gap-4 sm:gap-8 mt-8 sm:mt-16" ]
                        [ div [ class "bg-[#F9FAFB] p-4 sm:p-6 rounded-lg flex flex-row sm:flex-col items-center sm:items-center" ]
                            [ div [ class "bg-[#03045E] w-10 sm:w-12 h-10 sm:h-12 flex items-center justify-center rounded-lg mr-4 sm:mr-0 sm:mb-6 flex-shrink-0" ]
                                [ lightning 24 "#FFFFFF"
                                ]
                            , div [ class "flex-1 sm:text-center" ]
                                [ h3 [ class "text-lg sm:text-xl font-semibold text-gray-900 text-left sm:text-center" ] [ text "Upload" ]
                                , p [ class "mt-2 text-sm sm:text-base text-gray-600 text-left sm:text-center" ] [ text "Upload your book of business effortlessly. Our system tracks policy age, renewal windows, and client details automatically." ]
                                ]
                            ]
                        , div [ class "bg-[#F9FAFB] p-4 sm:p-6 rounded-lg flex flex-row sm:flex-col items-center sm:items-center" ]
                            [ div [ class "bg-[#03045E] w-10 sm:w-12 h-10 sm:h-12 flex items-center justify-center rounded-lg mr-4 sm:mr-0 sm:mb-6 flex-shrink-0" ]
                                [ envelope 24 "#FFFFFF"
                                ]
                            , div [ class "flex-1 sm:text-center" ]
                                [ h3 [ class "text-lg sm:text-xl font-semibold text-gray-900 text-left sm:text-center" ] [ text "Engage" ]
                                , p [ class "mt-2 text-sm sm:text-base text-gray-600 text-left sm:text-center" ] [ text "Clients receive personalized quotes showing your preferred carriers, underwriting pre-checks, and renewal options at key moments—without manual outreach." ]
                                ]
                            ]
                        , div [ class "bg-[#F9FAFB] p-4 sm:p-6 rounded-lg flex flex-row sm:flex-col items-center sm:items-center" ]
                            [ div [ class "bg-[#03045E] w-10 sm:w-12 h-10 sm:h-12 flex items-center justify-center rounded-lg mr-4 sm:mr-0 sm:mb-6 flex-shrink-0" ]
                                [ brightArrow 24 "#FFFFFF"
                                ]
                            , div [ class "flex-1 sm:text-center" ]
                                [ h3 [ class "text-lg sm:text-xl font-semibold text-gray-900 text-left sm:text-center" ] [ text "Retain & Reset" ]
                                , p [ class "mt-2 text-sm sm:text-base text-gray-600 text-left sm:text-center" ] [ text "Clients complete 95% of the underwriting and application on their own. You simply verify details in a quick 5-minute call and submit the application." ]
                                ]
                            ]
                        ]
                    ]
                ]
            , div [ class "py-8 max-w-7xl mx-auto px-6 sm:px-6 lg:px-8 min-h-screen flex flex-col justify-center md:snap-start" ]
                [ div [ class "lg:block hidden text-left md:mb-10 max-w-3xl" ]
                    [ h2 [ class "text-2xl sm:text-3xl md:text-4xl font-semibold text-gray-900" ]
                        [ text "Your Client's Personalized Experience" ]
                    , p [ class "mt-3 text-base sm:text-lg text-gray-600" ]
                        [ text "Hover over each section to see what your client will experience along their journey to resetting the clock." ]
                    ]
                , div [ class "relative" ]
                    [ div [ class "absolute right-0 top-0 lg:-mt-40 lg:-mr-4 z-0 hidden lg:block" ]
                        [ div
                            [ class "relative h-[650px] w-[340px] lg:w-[380px] lg:h-[770px] rounded-[40px] transform lg:rotate-[3deg] overflow-hidden"
                            ]
                            [ div [ class (phoneContentClass model.activeExperienceTab Email) ]
                                [ img
                                    [ src "/images/email.jpeg"
                                    , class "absolute inset-0 w-full h-full object-cover rounded-[40px]"
                                    , alt "Personalized email preview"
                                    ]
                                    []
                                ]
                            , div [ class (phoneContentClass model.activeExperienceTab Quote) ]
                                [ img
                                    [ src "/images/quote.jpeg"
                                    , class "absolute inset-0 w-full h-full object-cover rounded-[40px]"
                                    , alt "Medicare quote comparison"
                                    ]
                                    []
                                ]
                            , div [ class (phoneContentClass model.activeExperienceTab Underwriting) ]
                                [ img
                                    [ src "/images/underwriting.jpeg"
                                    , class "absolute inset-0 w-full h-full object-cover rounded-[40px]"
                                    , alt "Underwriting and scheduling interface"
                                    ]
                                    []
                                ]
                            , div
                                [ class "absolute inset-0 pointer-events-none z-10"
                                , style "box-shadow" "inset 0 0 25px 20px #F9FAFB"
                                , style "border-radius" "40px"
                                ]
                                []
                            , div
                                [ class "absolute bottom-0 left-0 right-0 h-[30%] pointer-events-none"
                                , style "background" "linear-gradient(to top, #F9FAFB 0%, rgba(249, 250, 251, 0) 100%)"
                                ]
                                []
                            , div
                                [ class "absolute top-0 left-0 right-0 h-[20%] pointer-events-none"
                                , style "background" "linear-gradient(to bottom, #F9FAFB 0%, rgba(249, 250, 251, 0) 100%)"
                                ]
                                []
                            , div
                                [ class "absolute -left-[50px] -right-[50px] -bottom-[50px] h-[100px] pointer-events-none"
                                , style "background" "#F9FAFB"
                                , style "filter" "blur(40px)"
                                ]
                                []
                            ]
                        ]
                    , div [ class "lg:hidden flex flex-col items-center" ]
                        [ h2 [ class "text-2xl sm:text-3xl font-semibold text-gray-900 text-center mt-2 mb-4" ]
                            [ text "Your Client's Personalized Experience" ]
                        , div
                            [ class "relative h-[400px] w-[280px] rounded-[30px] overflow-hidden mb-4"
                            , id "phone-experience-section"
                            ]
                            [ div [ class (phoneContentClass model.activeExperienceTab Email) ]
                                [ img
                                    [ src "/images/email_crop.jpeg"
                                    , class "absolute inset-0 w-full h-full object-cover object-center rounded-[30px]"
                                    , alt "Personalized email preview"
                                    ]
                                    []
                                ]
                            , div [ class (phoneContentClass model.activeExperienceTab Quote) ]
                                [ img
                                    [ src "/images/quote_crop.jpeg"
                                    , class "absolute inset-0 w-full h-full object-cover object-center rounded-[30px]"
                                    , alt "Medicare quote comparison"
                                    ]
                                    []
                                ]
                            , div [ class (phoneContentClass model.activeExperienceTab Underwriting) ]
                                [ img
                                    [ src "/images/underwriting_crop.jpeg"
                                    , class "absolute inset-0 w-full h-full object-cover object-center rounded-[30px]"
                                    , alt "Underwriting and scheduling interface"
                                    ]
                                    []
                                ]
                            , div
                                [ class "absolute inset-0 pointer-events-none z-10"
                                , style "box-shadow" "inset 0 0 15px 10px #F9FAFB"
                                , style "border-radius" "30px"
                                ]
                                []
                            ]
                        ]
                    , div [ class "lg:hidden w-full" ]
                        [ div [ class "grid grid-cols-3 gap-1 mb-1" ]
                            [ div
                                [ class (tabContainerClass model.activeExperienceTab Email)
                                , onClick (SetExperienceTab Email)
                                ]
                                [ text "Email" ]
                            , div
                                [ class (tabContainerClass model.activeExperienceTab Quote)
                                , onClick (SetExperienceTab Quote)
                                ]
                                [ text "Quotes" ]
                            , div
                                [ class (tabContainerClass model.activeExperienceTab Underwriting)
                                , onClick (SetExperienceTab Underwriting)
                                ]
                                [ text "Underwriting" ]
                            ]
                        , div [ class "bg-white p-4 rounded-b-lg shadow-sm border-t-0" ]
                            [ div
                                [ class
                                    (if model.activeExperienceTab == Email then
                                        "block"

                                     else
                                        "hidden"
                                    )
                                ]
                                [ h3 [ class "text-lg font-semibold text-gray-900" ]
                                    [ text "Your Client Receives a Personalized Email" ]
                                , p [ class "mt-2 text-gray-600" ]
                                    [ text "Your client gets a tailored email with their name, plan info, and helpful next steps—making them feel seen, supported, and confident in their Medicare decision." ]
                                ]
                            , div
                                [ class
                                    (if model.activeExperienceTab == Quote then
                                        "block"

                                     else
                                        "hidden"
                                    )
                                ]
                                [ h3 [ class "text-lg font-semibold text-gray-900" ]
                                    [ text "They Review the Quotes" ]
                                , p [ class "mt-2 text-gray-600" ]
                                    [ text "Your client can easily review their personalized Medicare quotes—clear, side-by-side comparisons that make choosing the right plan simple and stress-free." ]
                                ]
                            , div
                                [ class
                                    (if model.activeExperienceTab == Underwriting then
                                        "block"

                                     else
                                        "hidden"
                                    )
                                ]
                                [ h3 [ class "text-lg font-semibold text-gray-900" ]
                                    [ text "And Then Complete Underwriting & Schedules" ]
                                , p [ class "mt-2 text-gray-600" ]
                                    [ text "Your client answers a few quick health questions and picks a time that works best for them—keeping the process smooth, secure, and completely on their terms." ]
                                ]
                            ]
                        ]
                    , div [ class "relative w-full lg:w-3/5 space-y-8 z-10 hidden lg:block" ]
                        [ div
                            [ class (experienceTabClass model.activeExperienceTab Email)
                            , onMouseEnter (SetExperienceTab Email)
                            , onMouseLeave StartCarousel
                            , onClick (SetExperienceTab Email)
                            ]
                            [ h3 [ class "text-xl font-semibold text-gray-900" ]
                                [ text "Your Client Receives a Personalized Email" ]
                            , p [ class "mt-2 text-gray-600" ]
                                [ text "Your client gets a tailored email with their name, plan info, and helpful next steps—making them feel seen, supported, and confident in their Medicare decision." ]
                            ]
                        , div
                            [ class (experienceTabClass model.activeExperienceTab Quote)
                            , onMouseEnter (SetExperienceTab Quote)
                            , onMouseLeave StartCarousel
                            , onClick (SetExperienceTab Quote)
                            ]
                            [ h3 [ class "text-xl font-semibold text-gray-900" ]
                                [ text "They Review the Quotes" ]
                            , p [ class "mt-2 text-gray-600" ]
                                [ text "Your client can easily review their personalized Medicare quotes—clear, side-by-side comparisons that make choosing the right plan simple and stress-free." ]
                            ]
                        , div
                            [ class (experienceTabClass model.activeExperienceTab Underwriting)
                            , onMouseEnter (SetExperienceTab Underwriting)
                            , onMouseLeave StartCarousel
                            , onClick (SetExperienceTab Underwriting)
                            ]
                            [ h3 [ class "text-xl font-semibold text-gray-900" ]
                                [ text "And Then Complete Underwriting & Schedules" ]
                            , p [ class "mt-2 text-gray-600" ]
                                [ text "Your client answers a few quick health questions and picks a time that works best for them—keeping the process smooth, secure, and completely on their terms." ]
                            ]
                        ]
                    ]
                ]
            , div [ class "py-12 sm:py-16 bg-white relative overflow-hidden min-h-[50vh] sm:min-h-screen flex items-center md:snap-start" ]
                [ div [ class "max-w-7xl mx-auto px-6 sm:px-6 lg:px-8" ]
                    [ div [ class "text-center mb-8" ]
                        [ h2 [ class "text-3xl sm:text-4xl font-semibold text-gray-900" ] [ text "All you need to reset your commissions" ]
                        , p [ class "mt-4 text-lg text-gray-600" ] [ text "It's like having a new team member that's only focused on retention." ]
                        ]
                    , div [ class "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mt-16" ]
                        [ featureCard model "quote-flow" "Simple Quote to Call Flow" "Streamline your workflow with a automated process that takes clients from initial quote to final application in just a few clicks." (chatBubbles 24 "#03045E")
                        , featureCard model "protection" "Non-Commissionable Protection" "Our AI-powered logic engine only sends emails to clients that are fully commissionable." (lightning 24 "#03045E")
                        , featureCard model "analytics" "Live Analytics" "Track real-time engagement metrics, conversion rates, and upcoming renewal opportunities in your personalized dashboard." (activity 24 "#03045E")
                        , featureCard model "notifications" "Activity Notifications" "Get instant alerts when clients review quotes, complete underwriting, or request follow-ups, so you never miss an opportunity to connect." (smilieyChat 24 "#03045E")
                        , featureCard model "carrier-control" "Carrier and Licensing Control" "Customize which carriers and plans to showcase based on your licenses and preferred partnerships." (commandKey 24 "#03045E")
                        , featureCard model "agency-setup" "Agent or Agency Setup" "Configure individual agent profiles or manage your entire agency with customizable roles and white-labeled client communications." (heartBubble 24 "#03045E")
                        ]
                    ]
                ]
            , div [ class "py-12 sm:py-16 bg-white relative overflow-hidden min-h-[50vh] sm:min-h-screen flex items-center md:snap-start" ]
                [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-20 w-full" ]
                    [ div [ class "grid grid-cols-1 gap-8 mt-16" ]
                        [ -- Mobile layout (hidden on larger screens)
                          div [ class "flex flex-col items-center md:hidden" ]
                            [ div [ class "w-full text-center px-4 mb-8" ]
                                [ h2 [ class "text-2xl font-semibold text-gray-900" ]
                                    [ text "Residuals don't need to vanish. We make sure they don't." ]
                                ]
                            , div [ class "w-full mb-6" ]
                                [ div [ class "mx-auto max-w-xs" ]
                                    [ img [ src "/images/flap.png", class "w-full h-auto", alt "Dashboard interface" ] [] ]
                                ]
                            , div [ class "w-full text-center p-4" ]
                                [ div [ class "space-y-3 mt-8" ]
                                    [ div [ class "flex gap-3 items-start" ]
                                        [ div [ class "text-[#03045E] text-lg flex-shrink-0" ] [ text "✓" ]
                                        , p [ class "text-base text-gray-600 text-left" ] [ text "White-Labeled Tools" ]
                                        ]
                                    , div [ class "flex gap-3 items-start" ]
                                        [ div [ class "text-[#03045E] text-lg flex-shrink-0" ] [ text "✓" ]
                                        , p [ class "text-base text-gray-600 text-left" ] [ text "5 Minute Setup" ]
                                        ]
                                    , div [ class "flex gap-3 items-start" ]
                                        [ div [ class "text-[#03045E] text-lg flex-shrink-0" ] [ text "✓" ]
                                        , p [ class "text-base text-gray-600 text-left" ] [ text "Automated Retention" ]
                                        ]
                                    ]
                                , div [ class "mt-6 flex justify-center" ]
                                    [ button
                                        [ onClick NavigateSignup
                                        , class "inline-flex items-center px-5 py-2 rounded-lg text-base font-medium text-white bg-[#03045E] hover:bg-[#1a1f5f] transition-colors duration-200"
                                        ]
                                        [ text "Get Early Access" ]
                                    ]
                                ]
                            ]

                        -- Desktop layout (hidden on small screens)
                        , div [ class "hidden md:flex flex-col items-center justify-center relative w-full min-h-[700px]" ]
                            [ div [ class "max-w-4xl mx-auto text-center" ]
                                [ h2 [ class "text-6xl font-semibold text-gray-900 mb-12" ]
                                    [ text "Residuals don't need to vanish. We make sure they don't." ]
                                , div [ class "flex justify-center items-center gap-24" ]
                                    [ div [ class "space-y-6 text-left" ]
                                        [ div [ class "flex gap-4 items-start" ]
                                            [ div [ class "text-[#03045E] text-2xl" ] [ text "✓" ]
                                            , p [ class "text-xl text-gray-600" ] [ text "White-Labeled Tools" ]
                                            ]
                                        , div [ class "flex gap-4 items-start" ]
                                            [ div [ class "text-[#03045E] text-2xl" ] [ text "✓" ]
                                            , p [ class "text-xl text-gray-600" ] [ text "5 Minute Setup" ]
                                            ]
                                        , div [ class "flex gap-4 items-start" ]
                                            [ div [ class "text-[#03045E] text-2xl" ] [ text "✓" ]
                                            , p [ class "text-xl text-gray-600" ] [ text "Automated Retention" ]
                                            ]
                                        , div [ class "mt-10" ]
                                            [ button
                                                [ onClick NavigateSignup
                                                , class "inline-flex items-center px-8 py-4 rounded-lg text-lg font-medium text-white bg-[#03045E] hover:bg-[#1a1f5f] transition-colors duration-200"
                                                ]
                                                [ text "Get Early Access" ]
                                            ]
                                        ]
                                    , div [ class "relative w-[500px]" ]
                                        [ img [ src "/images/flap.png", class "w-full h-auto", alt "Dashboard interface" ] [] ]
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            , div [ class "py-8 sm:py-16 min-h-[50vh] sm:min-h-screen flex items-center md:snap-start" ]
                [ div [ class "max-w-7xl mx-auto px-6 sm:px-6 lg:px-8" ]
                    [ div [ class "text-center mb-8 sm:mb-12" ]
                        [ h2 [ class "text-3xl sm:text-4xl font-semibold text-gray-900" ] [ text "Frequently asked questions" ]
                        , p [ class "mt-4 text-lg text-gray-600" ] [ text "Everything you need to know." ]
                        ]
                    , div [ class "max-w-3xl mx-auto divide-y divide-gray-200" ]
                        [ faqItem "How many emails can I send?"
                            "Our system sends regular, automated emails to every client in your book of business. Each plan tier supports different numbers of contacts - so you can choose the right level for your agency size. The emails continue indefinitely to keep your book engaged and ready for renewal opportunities."
                            model
                        , faqItem "How do I know my Client data is protected?"
                            "We take data security extremely seriously. All client data is encrypted both in transit and at rest using industry-standard encryption protocols. Additionally, each agency gets their own dedicated database instance, ensuring complete data separation between different agencies' client records."
                            model
                        , faqItem "Will I be notified when someone requests a quote?"
                            "Yes, you'll receive real-time notifications whenever a client requests a quote or takes any significant action. You can customize your notification preferences in your dashboard settings."
                            model
                        , faqItem "Will the emails come from me?"
                            "Yes, all communications are white-labeled and will appear to come directly from you. You can customize the email sender name and signature to maintain your personal brand and relationship with your clients."
                            model
                        ]
                    , div [ class "mt-16 text-center hidden md:block" ]
                        [ h3 [ class "text-2xl font-semibold text-gray-900" ] [ text "Want to be notified on launch day?" ]
                        , p [ class "mt-4 text-lg text-gray-600" ] [ text "Join agents all across the US ready to reset their books." ]
                        , div [ class "mt-8" ]
                            [ button
                                [ onClick NavigateSignup
                                , class "inline-flex items-center px-6 py-3 rounded-lg text-base font-medium text-white bg-[#03045E] hover:bg-[#1a1f5f] transition-colors duration-200"
                                ]
                                [ text "Get Early Access" ]
                            ]
                        ]
                    ]
                ]
            , div [ class "py-8 sm:py-14 min-h-[40vh] sm:min-h-screen flex items-center md:snap-start md:hidden" ]
                [ div [ class "max-w-7xl mx-auto px-6 sm:px-6 lg:px-8" ]
                    [ div [ class "text-center" ]
                        [ h3 [ class "text-2xl font-semibold text-gray-900" ] [ text "Want to be notified on launch day?" ]
                        , p [ class "mt-4 text-lg text-gray-600" ] [ text "Join agents all across the US ready to reset their books." ]
                        , div [ class "mt-8" ]
                            [ button
                                [ onClick NavigateSignup
                                , class "inline-flex items-center px-6 py-3 rounded-lg text-base font-medium text-white bg-[#03045E] hover:bg-[#1a1f5f] transition-colors duration-200 w-full sm:w-auto justify-center"
                                ]
                                [ text "Get Early Access" ]
                            ]
                        ]
                    ]
                ]
            , footer [ class "bg-[#141B29] text-white py-6 sm:py-8 md:py-16 md:snap-start" ]
                [ div [ class "max-w-7xl mx-auto px-6 sm:px-6 lg:px-8" ]
                    [ div [ class "flex flex-col md:flex-row justify-between pb-4 sm:pb-6" ]
                        [ div [ class "mb-4 md:mb-0" ]
                            [ div [ class "flex items-center" ]
                                [ img [ src "/images/whiteIcon.svg", class "h-6 sm:h-8 w-auto", alt "Medicare Max logo" ] []
                                ]
                            , p [ class "mt-2 text-sm sm:text-base text-[#94969C]" ] [ text "Retention technology that has your back." ]
                            ]
                        ]
                    , div [ class "flex gap-3 sm:gap-4 mb-4" ]
                        [ span [ class "text-sm sm:text-base text-[#94969C]" ]
                            [ text "email: "
                            , a [ href "mailto:information@medicaremax.ai", class "text-[#94969C] hover:text-white" ] [ text "information@medicaremax.ai" ]
                            ]
                        ]
                    , div [ class "border-t border-[#1F242F] pt-4 sm:pt-5 text-[#94969C] text-sm sm:text-base" ]
                        [ p [] [ text "© 2025 Medicare Max. All rights reserved." ] ]
                    ]
                ]
            ]
        ]
    }


imageVisibilityClass : ExperienceTab -> ExperienceTab -> String
imageVisibilityClass activeTab tab =
    if activeTab == tab then
        "absolute inset-0 w-full h-full object-cover transition-opacity duration-500 opacity-100"

    else
        "absolute inset-0 w-full h-full object-cover transition-opacity duration-500 opacity-0"


experienceTabClass : ExperienceTab -> ExperienceTab -> String
experienceTabClass activeTab tab =
    let
        baseClass =
            "border-l-4 pl-4 sm:pl-6 py-4 sm:py-5 cursor-pointer transition-all duration-300 ease-in-out"
    in
    if activeTab == tab then
        baseClass ++ " border-[#03045E]"

    else
        baseClass ++ " border-gray-200 hover:border-gray-400"


phoneContentClass : ExperienceTab -> ExperienceTab -> String
phoneContentClass activeTab tab =
    if activeTab == tab then
        "absolute inset-0 w-full h-full transition-opacity duration-500 opacity-100"

    else
        "absolute inset-0 w-full h-full transition-opacity duration-500 opacity-0"


featureCard : Model -> String -> String -> String -> Svg Msg -> Html Msg
featureCard model id title description icon =
    let
        -- Base classes shared across all sizes
        baseCardClass =
            "rounded-lg transition-all duration-300 ease-in-out flex flex-col h-full"

        -- Mobile-specific classes (non-expandable, more compact)
        mobileCardClass =
            "md:hidden " ++ baseCardClass ++ " bg-[#F9FAFB] p-4 mx-4"

        -- Desktop-specific classes
        desktopCardClass =
            "hidden md:flex " ++ baseCardClass ++ " bg-[#F9FAFB] p-4 sm:p-5"

        -- Mobile title classes
        mobileTitleClass =
            "md:hidden text-base font-semibold text-gray-900 text-center"

        -- Desktop title classes
        desktopTitleClass =
            "hidden md:block text-base sm:text-lg font-semibold text-gray-900 text-center"

        -- Mobile icon container
        mobileIconContainerClass =
            "md:hidden w-10 h-10 mx-auto mb-3 rounded-lg flex items-center justify-center shadow-sm"

        -- Desktop icon container
        desktopIconContainerClass =
            "hidden md:flex w-10 h-10 sm:w-11 sm:h-11 mx-auto mb-3 sm:mb-4 rounded-lg items-center justify-center shadow-md"
    in
    div []
        [ -- Mobile version (non-expandable)
          div
            [ class mobileCardClass ]
            [ div [ class mobileIconContainerClass ] [ icon ]
            , h3 [ class mobileTitleClass ] [ text title ]
            , p [ class "md:hidden mt-2 text-xs text-gray-600 text-center" ] [ text description ]
            ]

        -- Desktop version
        , div [ class desktopCardClass ]
            [ div [ class desktopIconContainerClass ] [ icon ]
            , h3 [ class desktopTitleClass ] [ text title ]
            , p [ class "hidden md:block mt-2 text-xs sm:text-sm text-gray-600 text-center" ] [ text description ]
            ]
        ]


faqItem : String -> String -> Model -> Html Msg
faqItem question answer model =
    let
        isExpanded =
            Set.member question model.expandedFaqs
    in
    div [ class "py-4 sm:py-6" ]
        [ div
            [ class "flex justify-between items-start cursor-pointer group"
            , onClick (ToggleFaq question)
            ]
            [ h3 [ class "text-base sm:text-lg font-medium text-gray-900 group-hover:text-gray-700 transition-colors duration-200" ] [ text question ]
            , button
                [ class "ml-4 sm:ml-6 h-6 sm:h-7 w-6 sm:w-7 flex items-center justify-center rounded-full group-hover:bg-gray-100 transition-colors duration-200"
                ]
                [ span
                    [ class "text-gray-500 text-lg sm:text-xl transition-transform duration-200"
                    , style "transform"
                        (if isExpanded then
                            "rotate(180deg)"

                         else
                            "rotate(0deg)"
                        )
                    ]
                    [ text
                        (if isExpanded then
                            "-"

                         else
                            "+"
                        )
                    ]
                ]
            ]
        , div
            [ class "mt-2 text-sm sm:text-base text-gray-600 overflow-hidden transition-all duration-300 ease-in-out"
            , style "max-height"
                (if isExpanded then
                    "500px"

                 else
                    "0"
                )
            , style "opacity"
                (if isExpanded then
                    "1"

                 else
                    "0"
                )
            ]
            [ text answer ]
        ]



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions model =
    let
        carouselMsg =
            if model.carouselActive then
                Time.every 4000 RotateCarousel

            else
                Sub.none
    in
    Sub.batch
        [ carouselMsg
        , viewingPhone PhoneSectionVisible
        ]


mobileTabButtonClass : ExperienceTab -> ExperienceTab -> String
mobileTabButtonClass activeTab tab =
    let
        baseClass =
            "px-4 py-2 text-sm font-medium rounded-lg transition-colors duration-200"
    in
    if activeTab == tab then
        baseClass ++ " bg-[#03045E] text-white"

    else
        baseClass ++ " bg-gray-100 text-gray-700 hover:bg-gray-200"


tabContainerClass : ExperienceTab -> ExperienceTab -> String
tabContainerClass activeTab tab =
    let
        baseClass =
            "py-2 text-center text-sm font-medium cursor-pointer transition-colors duration-200 border-t-2"
    in
    if activeTab == tab then
        baseClass ++ " bg-white text-gray-900 border-t-2 border-[#03045E]"

    else
        baseClass ++ " bg-gray-100 text-gray-600 border-t-2 border-transparent"

================
File: frontend/src/Landing.elm
================
module Landing exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Html exposing (Html, a, br, div, h1, img, p, span, text)
import Html.Attributes exposing (class, href, src)
import Html.Events exposing (onClick)
import Url.Builder as Builder


type alias Model =
    { quoteId : Maybe String
    }


type Msg
    = NavigateTo String


init : { quoteId : Maybe String } -> ( Model, Cmd Msg )
init flags =
    ( { quoteId = flags.quoteId }
    , Cmd.none
    )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NavigateTo path ->
            ( model, Cmd.none )



-- Navigation will be handled by parent


view : Model -> Browser.Document Msg
view model =
    { title = "Thanks for checking it out - Medicare Max"
    , body =
        [ div [ class "min-h-screen bg-white" ]
            [ div [ class "max-w-md mx-auto px-4 sm:px-6 lg:px-8 pt-12" ]
                [ div [ class "mb-16" ]
                    [ img
                        [ src "/images/medicare-max-logo.png"
                        , class "h-12"
                        ]
                        []
                    ]
                , div [ class "text-center" ]
                    [ div [ class "mb-8" ]
                        [ img
                            [ src "/images/party-popper.png"
                            , class "h-16 mx-auto"
                            ]
                            []
                        ]
                    , h1 [ class "text-[40px] leading-[48px] font-bold text-[#111111] mb-4" ]
                        [ text "Thanks for"
                        , br [] []
                        , text "checking it out."
                        ]
                    , p [ class "text-lg text-gray-600 mb-8" ]
                        [ text "Head to "
                        , span [ class "text-[#0A0F51] font-bold" ] [ text "your email" ]
                        , text " to see what"
                        , br [] []
                        , text "your clients will experience"
                        ]
                    , a
                        [ href "/"
                        , class "inline-flex items-center px-6 py-3 text-base font-medium rounded-md text-white bg-[#0A0F51] hover:bg-[#0A0F51]/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#0A0F51] mb-8"
                        , onClick (NavigateTo "/")
                        ]
                        [ text "Back to the Homepage" ]
                    , div [ class "text-gray-600 text-sm max-w-[200px] mx-auto" ]
                        [ text "Didn't receive an email yet - "
                        , case model.quoteId of
                            Just id ->
                                a
                                    [ href (Builder.absolute [ "compare" ] [ Builder.string "id" id ])
                                    , class "text-[#0A0F51] underline hover:text-[#0A0F51]/90"
                                    , onClick (NavigateTo (Builder.absolute [ "compare" ] [ Builder.string "id" id ]))
                                    ]
                                    [ text "click here" ]

                            Nothing ->
                                text ""
                        , text " for your quote"
                        ]
                    ]
                ]
            ]
        ]
    }


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/src/Login.elm
================
module Login exposing (Model, Msg, init, subscriptions, update, view)

import Basics
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onInput, onSubmit)
import Http
import Json.Decode as Decode
import Json.Encode as Encode
import Time
import Url
import Url.Parser as Parser exposing ((</>), (<?>), Parser, s, string)
import Url.Parser.Query as Query


type alias Model =
    { email : String
    , status : Status
    , isLoggedIn : Bool
    , key : Nav.Key
    , resendAvailableAt : Maybe Time.Posix
    , isFromOnboarding : Bool
    , prefilledEmail : Maybe String
    }


type Status
    = Idle
    | Submitting
    | Success
    | Failed String
    | LinkSent


type alias LoginResponse =
    { success : Bool
    }


type alias SessionCheckResponse =
    { valid : Bool }


type Msg
    = EmailChanged String
    | SubmitForm
    | GotLoginResponse (Result Http.Error LoginResponse)
    | GotSessionCheck (Result Http.Error SessionCheckResponse)
    | LogOut
    | NoOp
    | CheckResendAvailable Time.Posix
    | ResendLink


init : Nav.Key -> Bool -> Url.Url -> ( Model, Cmd Msg )
init key isLoggedIn url =
    let
        queryParams =
            extractQueryParams url
    in
    ( { email = Maybe.withDefault "" queryParams.email
      , status = Idle
      , isLoggedIn = isLoggedIn
      , key = key
      , resendAvailableAt = Nothing
      , isFromOnboarding = queryParams.onboarding
      , prefilledEmail = queryParams.email
      }
    , Cmd.none
    )



-- Helper to extract query parameters


extractQueryParams : Url.Url -> { onboarding : Bool, email : Maybe String }
extractQueryParams url =
    let
        parser =
            Query.map2
                (\onboarding email -> { onboarding = onboarding == Just "completed", email = email })
                (Query.string "onboarding")
                (Query.string "email")

        route =
            { url | path = "" }
                |> Parser.parse (Parser.top <?> parser)
    in
    Maybe.withDefault { onboarding = False, email = Nothing } route


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        EmailChanged email ->
            ( { model | email = email, status = Idle }
            , Cmd.none
            )

        SubmitForm ->
            if String.isEmpty model.email then
                ( { model | status = Failed "Please enter your email address" }
                , Cmd.none
                )

            else
                ( { model | status = Submitting }
                , Http.get
                    { url = "/api/auth/session"
                    , expect = Http.expectJson GotSessionCheck sessionCheckDecoder
                    }
                )

        GotSessionCheck result ->
            case result of
                Ok response ->
                    if response.valid then
                        -- If session is valid, redirect to dashboard
                        ( model
                        , Nav.pushUrl model.key "/dashboard"
                        )

                    else
                        -- If no valid session, proceed with login
                        let
                            -- Set resend cooldown to 60 seconds from now
                            now =
                                Time.millisToPosix 0

                            -- Placeholder, would normally use actual current time
                            cooldownTime =
                                Time.millisToPosix (Time.posixToMillis now + 60000)
                        in
                        ( { model | resendAvailableAt = Just cooldownTime }
                        , Http.post
                            { url = "/api/auth/login"
                            , body = Http.jsonBody (encodeLoginBody model.email)
                            , expect = Http.expectJson GotLoginResponse loginResponseDecoder
                            }
                        )

                Err _ ->
                    -- On error checking session, proceed with normal login flow
                    let
                        -- Set resend cooldown to 60 seconds from now
                        now =
                            Time.millisToPosix 0

                        -- Placeholder, would normally use actual current time
                        cooldownTime =
                            Time.millisToPosix (Time.posixToMillis now + 60000)
                    in
                    ( { model | resendAvailableAt = Just cooldownTime }
                    , Http.post
                        { url = "/api/auth/login"
                        , body = Http.jsonBody (encodeLoginBody model.email)
                        , expect = Http.expectJson GotLoginResponse loginResponseDecoder
                        }
                    )

        NoOp ->
            ( model, Cmd.none )

        LogOut ->
            ( { model
                | isLoggedIn = False
                , status = Idle
              }
            , Http.post
                { url = "/api/auth/logout"
                , body = Http.emptyBody
                , expect = Http.expectWhatever (\_ -> NoOp)
                }
            )

        GotLoginResponse result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model | status = LinkSent }
                        , Cmd.none
                        )

                    else
                        ( { model | status = Failed "Failed to send login link. Please try again." }
                        , Cmd.none
                        )

                Err _ ->
                    ( { model | status = Failed "Failed to send login link. Please try again." }
                    , Cmd.none
                    )

        CheckResendAvailable currentTime ->
            case model.resendAvailableAt of
                Just availableAt ->
                    if Time.posixToMillis currentTime >= Time.posixToMillis availableAt then
                        ( { model | resendAvailableAt = Nothing }, Cmd.none )

                    else
                        ( model, Cmd.none )

                Nothing ->
                    ( model, Cmd.none )

        ResendLink ->
            update SubmitForm model


viewLoginForm : Model -> { title : String, body : List (Html Msg) }
viewLoginForm model =
    { title = "Login"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8" ]
            [ div [ class "sm:mx-auto sm:w-full sm:max-w-md" ]
                [ h2 [ class "mt-6 text-center text-3xl font-extrabold text-gray-900" ]
                    [ if model.isFromOnboarding then
                        text "Activate Your Account"

                      else
                        text "Welcome Back To MedicareMax"
                    ]
                ]
            , div [ class "mt-8 sm:mx-auto sm:w-full sm:max-w-md" ]
                [ div [ class "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10" ]
                    [ if model.isFromOnboarding then
                        div [ class "mb-6 bg-blue-50 p-4 rounded-md border border-blue-200" ]
                            [ p [ class "text-blue-800" ]
                                [ text "Your account has been created successfully! Please check your email for an activation link to continue to your new account." ]
                            ]

                      else
                        text ""
                    , Html.form [ onSubmit SubmitForm ]
                        [ div []
                            [ label [ for "email", class "block text-sm font-medium text-gray-700" ]
                                [ text "Email address" ]
                            , div [ class "mt-1" ]
                                [ input
                                    [ type_ "email"
                                    , name "email"
                                    , id "email"
                                    , class "appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                    , placeholder "you@example.com"
                                    , value model.email
                                    , onInput EmailChanged
                                    ]
                                    []
                                ]
                            ]
                        , div [ class "mt-6" ]
                            [ button
                                [ type_ "submit"
                                , class "w-full flex justify-center py-2 px-4 sm:py-2.5 sm:px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                                ]
                                [ text "Send login link" ]
                            ]
                        ]
                    , viewStatus model.status model
                    , div [ class "mt-4 text-center text-sm" ]
                        [ text "Not Yet a MedicareMax User? "
                        , a [ href "/signup", class "font-medium text-indigo-600 hover:text-indigo-500" ]
                            [ text "Sign Up Here" ]
                        ]
                    ]
                ]
            ]
        ]
    }


viewStatus : Status -> Model -> Html Msg
viewStatus status model =
    case status of
        LinkSent ->
            div [ class "mt-4 p-4 bg-green-50 rounded-md" ]
                [ p [ class "text-sm text-green-700 text-center" ]
                    [ p [ class "mb-2" ] [ text "If your email is registered, you'll receive a login link soon." ]
                    , p [] [ text "Check your inbox and spam folder." ]
                    ]
                , div [ class "mt-2 text-center" ]
                    [ viewResendLink model ]
                ]

        Failed error ->
            div [ class "mt-4 p-4 bg-red-50 rounded-md" ]
                [ p [ class "text-sm text-red-700" ]
                    [ text error ]
                ]

        Submitting ->
            div [ class "mt-4 text-center text-gray-600" ]
                [ text "Sending login link..." ]

        _ ->
            text ""


viewResendLink : Model -> Html Msg
viewResendLink model =
    case model.resendAvailableAt of
        Just availableAt ->
            let
                currentTime =
                    Time.millisToPosix 0

                -- Placeholder, would normally use actual current time
                diff =
                    Basics.max 0 ((Time.posixToMillis availableAt - Time.posixToMillis currentTime) // 1000)
            in
            if diff <= 0 then
                button
                    [ onClick ResendLink
                    , class "text-sm text-blue-600 hover:text-blue-800 underline"
                    ]
                    [ text "Resend link" ]

            else
                span [ class "text-sm text-gray-600" ]
                    [ text ("Resend link in " ++ String.fromInt diff ++ " seconds") ]

        Nothing ->
            button
                [ onClick ResendLink
                , class "text-sm text-blue-600 hover:text-blue-800 underline"
                ]
                [ text "Resend link" ]


encodeLoginBody : String -> Encode.Value
encodeLoginBody email =
    Encode.object
        [ ( "email", Encode.string email )
        ]


loginResponseDecoder : Decode.Decoder LoginResponse
loginResponseDecoder =
    Decode.map LoginResponse
        (Decode.field "success" Decode.bool)


sessionCheckDecoder : Decode.Decoder SessionCheckResponse
sessionCheckDecoder =
    Decode.map SessionCheckResponse
        (Decode.field "valid" Decode.bool)


subscriptions : Model -> Sub Msg
subscriptions model =
    case model.resendAvailableAt of
        Just _ ->
            Time.every 1000 CheckResendAvailable

        Nothing ->
            Sub.none


view : Model -> { title : String, body : List (Html Msg) }
view model =
    if model.isLoggedIn then
        { title = "Already Logged In"
        , body =
            [ div [ class "min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8" ]
                [ div [ class "sm:mx-auto sm:w-full sm:max-w-md" ]
                    [ h2 [ class "mt-6 text-center text-3xl font-extrabold text-gray-900" ]
                        [ text "Already Logged In" ]
                    , div [ class "mt-8 sm:mx-auto sm:w-full sm:max-w-md" ]
                        [ div [ class "bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10" ]
                            [ p [ class "text-center text-gray-600 mb-6" ]
                                [ text "You are already logged in." ]
                            , button
                                [ onClick LogOut
                                , class "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                                ]
                                [ text "Log Out" ]
                            ]
                        ]
                    ]
                ]
            ]
        }

    else
        viewLoginForm model

================
File: frontend/src/Logout.elm
================
module Logout exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Http


type alias Model =
    { key : Nav.Key }


type Msg
    = LogoutCompleted (Result Http.Error ())
    | NoOp


init : Nav.Key -> ( Model, Cmd Msg )
init key =
    ( { key = key }
    , Http.post
        { url = "/api/auth/logout"
        , body = Http.emptyBody
        , expect = Http.expectWhatever LogoutCompleted
        }
    )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        LogoutCompleted (Ok _) ->
            ( model
            , Nav.load "/"
            )

        LogoutCompleted (Err _) ->
            -- Even if the logout request fails, we'll redirect to home
            ( model
            , Nav.load "/"
            )

        NoOp ->
            ( model, Cmd.none )


view : Model -> Browser.Document Msg
view _ =
    { title = "Logging out..."
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex items-center justify-center" ]
            [ div [ class "animate-spin rounded-full h-8 w-8 border-2 border-purple-500 border-t-transparent" ] []
            ]
        ]
    }


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/src/Main.elm
================
port module Main exposing (main)

import AddAgent
import Browser exposing (Document)
import Browser.Events
import Browser.Navigation as Nav
import ChangePlan
import ChoosePlan
import Compare exposing (CompareParams)
import Components.AccountStatusBanner as AccountStatusBanner
import Contact
import Contacts
import Dashboard
import Dict exposing (Dict)
import Eligibility
import Home
import Html exposing (Html, a, button, div, h1, img, nav, p, text)
import Html.Attributes exposing (alt, class, href, src)
import Html.Events exposing (onClick, stopPropagationOn)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as E
import Landing
import Login
import Logout
import MyIcon
import Onboarding
import Pricing
import Pricing2
import Process
import Profile
import Quote
import Schedule
import ScheduleMain
import SelfServiceOnboarding
import Settings
import Signup
import Stripe
import Svg exposing (path, svg)
import Svg.Attributes exposing (d, fill, viewBox)
import Task
import TempLanding
import Url exposing (Url)
import Url.Parser as Parser exposing ((</>), (<?>), Parser, map, oneOf, s, string, top)
import Url.Parser.Query as Query
import Waitlist
import Walkthrough



-- PORTS
-- Send a message to JavaScript to clear the session cookie


port redirectToStripe :
    String
    -> Cmd msg -- ADDED: Port for Stripe redirection


type alias VerificationResponse =
    { success : Bool
    , redirectUrl : String
    , session : String
    , email : String
    , orgSlug : String
    }


type alias SessionResponse =
    { valid : Bool
    , session : String
    , email : String
    , organizationSlug : String
    , firstName : String
    , lastName : String
    , isAdmin : Bool
    , id : String
    }


verificationDecoder : Decoder VerificationResponse
verificationDecoder =
    Decode.map5 VerificationResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "redirectUrl" Decode.string)
        (Decode.field "session" Decode.string)
        (Decode.field "email" Decode.string)
        (Decode.field "orgSlug" Decode.string)


sessionDecoder : Decoder SessionResponse
sessionDecoder =
    Decode.map8 SessionResponse
        (Decode.field "valid" Decode.bool)
        (Decode.field "session" Decode.string)
        (Decode.field "email" Decode.string)
        (Decode.field "organizationSlug" Decode.string)
        (Decode.oneOf
            [ Decode.field "firstName" Decode.string
            , Decode.field "first_name" Decode.string
            ]
        )
        (Decode.oneOf
            [ Decode.field "lastName" Decode.string
            , Decode.field "last_name" Decode.string
            ]
        )
        (Decode.oneOf
            [ Decode.field "is_admin" Decode.bool
            , Decode.field "is_admin" Decode.int
                |> Decode.map (\i -> i == 1)
            ]
        )
        (Decode.field "id" (Decode.map String.fromInt Decode.int))


type alias User =
    { id : String
    , email : String
    , isAdmin : Bool
    , isAgent : Bool
    , organizationSlug : String
    , organizationId : String
    , firstName : String
    , lastName : String
    , subscriptionTier : String
    , accountStatus : Maybe AccountStatusBanner.AccountStatusDetails
    }



-- Account status types


type alias AccountStatus =
    String


type alias AccountStatusDetails =
    { status : AccountStatus
    , message : String
    , organizationId : Int
    , organizationName : String
    , organizationSlug : String
    , subscriptionTier : String
    , subscriptionStatus : String
    , agentLimit : Int
    , contactLimit : Int
    , currentAgentCount : Int
    , currentContactCount : Int
    , billingCycleEnd : Maybe String
    , paymentFailureCount : Int
    , paymentCompleted : Bool
    }


type alias Model =
    { key : Nav.Key
    , url : Url
    , page : Page
    , session : SessionState
    , currentUser : Maybe User
    , isSetup : Bool
    , intendedDestination : Maybe String
    , showDropdown : Bool
    , showStatusBanner : Bool
    , showPaymentStatus : Bool
    }


type SessionState
    = Unknown -- Initial state
    | Verified String -- Has valid session
    | NoSession -- Definitely no valid session


type Page
    = NotFoundPage
    | LoginPage Login.Model
    | ContactsPage Contacts.Model
    | TempLandingPage TempLanding.Model
    | SettingsPage Settings.Model
    | Signup Signup.Model
    | ChoosePlanPage ChoosePlan.Model
    | ChangePlanPage ChangePlan.Model
    | AddAgentsPage AddAgent.Model
    | ProfilePage Profile.Model
    | LoadingPage
    | HomePage Home.Model
    | ContactPage Contact.Model
    | ComparePage Compare.Model
    | QuotePage Quote.Model
    | EligibilityPage Eligibility.Model
    | SchedulePage Schedule.Model
    | ScheduleMainPage ScheduleMain.Model
    | DashboardPage Dashboard.Model
    | LogoutPage Logout.Model
    | OnboardingPage Onboarding.Model
    | WalkthroughPage Walkthrough.Model
    | SelfOnboardingPage SelfServiceOnboarding.Model
    | WaitlistPage Waitlist.Model
    | LandingPage Landing.Model
    | PricingPage Pricing.Model
    | Pricing2Page Pricing2.Model
    | StripePage Stripe.Model


type Msg
    = LinkClicked Browser.UrlRequest
    | InternalLinkClicked String
    | UrlChanged Url
    | LoginMsg Login.Msg
    | ContactsMsg Contacts.Msg
    | TempLandingMsg TempLanding.Msg
    | SettingsMsg Settings.Msg
    | SignupMsg Signup.Msg
    | ChoosePlanMsg ChoosePlan.Msg
    | ChangePlanMsg ChangePlan.Msg
    | AddAgentsMsg AddAgent.Msg
    | GotVerification (Result Http.Error VerificationResponse)
    | GotSession (Result Http.Error SessionResponse)
    | ProfileMsg Profile.Msg
    | HomeMsg Home.Msg
    | ContactMsg Contact.Msg
    | CompareMsg Compare.Msg
    | QuoteMsg Quote.Msg
    | EligibilityMsg Eligibility.Msg
    | ScheduleMsg Schedule.Msg
    | ScheduleMainMsg ScheduleMain.Msg
    | DashboardMsg Dashboard.Msg
    | NoOp
    | GotCurrentUser (Result Http.Error CurrentUserResponse)
    | OrgFinalized (Result Http.Error ())
    | LogoutMsg Logout.Msg
    | OnboardingMsg Onboarding.Msg
    | ToggleDropdown
    | CloseDropdown
    | InitiateLogout
    | GotAccountStatus (Result Http.Error AccountStatusResponse)
    | CloseStatusBanner
    | WalkthroughMsg Walkthrough.Msg
    | ShowDropdown
    | HideDropdown
    | ToggleStatusBanner
    | PerformRedirect String
    | DirectPageUpdate
    | SelfOnboardingMsg SelfServiceOnboarding.Msg
    | WaitlistMsg Waitlist.Msg
    | LandingMsg Landing.Msg
    | PricingMsg Pricing.Msg
    | Pricing2Msg Pricing2.Msg
    | StripeMsg Stripe.Msg
    | TogglePaymentStatus
    | SetSessionResponse (Result Http.Error SetSessionResponseAlias)
    | LogTrackingClickResult (Result Http.Error ())


type alias Flags =
    {}


type alias CompareFlags =
    { state : String
    , zip : String
    , county : String
    , gender : String
    , tobacco : Bool
    , age : Int
    , planType : String
    , currentCarrier : Maybe String
    , dateOfBirth : String
    , quoteId : Maybe String
    }


main : Program Flags Model Msg
main =
    Browser.application
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        , onUrlChange = UrlChanged
        , onUrlRequest = LinkClicked
        }


type alias AccountStatusResponse =
    { success : Bool
    , status : AccountStatusDetails
    }


accountStatusDecoder : Decoder AccountStatusDetails
accountStatusDecoder =
    Decode.succeed AccountStatusDetails
        |> Pipeline.required "status" Decode.string
        |> Pipeline.required "message" Decode.string
        |> Pipeline.required "organizationId" Decode.int
        |> Pipeline.required "organizationName" Decode.string
        |> Pipeline.required "organizationSlug" Decode.string
        |> Pipeline.required "subscriptionTier" Decode.string
        |> Pipeline.required "subscriptionStatus" Decode.string
        |> Pipeline.required "agentLimit" Decode.int
        |> Pipeline.required "contactLimit" Decode.int
        |> Pipeline.required "currentAgentCount" Decode.int
        |> Pipeline.required "currentContactCount" Decode.int
        |> Pipeline.optional "billingCycleEnd" (Decode.nullable Decode.string) Nothing
        |> Pipeline.required "paymentFailureCount" Decode.int
        |> Pipeline.required "paymentCompleted" Decode.bool


accountStatusResponseDecoder : Decoder AccountStatusResponse
accountStatusResponseDecoder =
    Decode.succeed AccountStatusResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "status" accountStatusDecoder


init : Flags -> Url.Url -> Nav.Key -> ( Model, Cmd Msg )
init flags url key =
    let
        initialSession =
            Unknown

        -- Parse the initial route to determine if we're on a public page
        initialRoute =
            Parser.parse routeParser url

        --|> Debug.log "initialRoute"
        -- Determine if this is a public route that can be rendered immediately
        isPublicRoute =
            case initialRoute of
                Just (PublicRoute _) ->
                    True

                --|> Debug.log "isPublicRoute"
                _ ->
                    False

        --|> Debug.log "isPublicRoute"
        -- Set initial page appropriately
        initialPage =
            if isPublicRoute then
                -- For public routes, we'll immediately handle this in updatePageForcePublic below
                LoadingPage

            else
                -- For protected routes, we need to wait for session verification
                LoadingPage

        model =
            { key = key
            , url = url
            , page = initialPage
            , session = initialSession
            , currentUser = Nothing
            , isSetup = False
            , intendedDestination = Nothing
            , showDropdown = False
            , showStatusBanner = True
            , showPaymentStatus = False
            }

        checkSession =
            Http.get
                { url = "/api/auth/session"
                , expect = Http.expectJson GotSession sessionDecoder
                }

        -- Use a very short timer for the initial direct page update for public routes
        directPageUpdate =
            Task.perform (\_ -> DirectPageUpdate) (Process.sleep 50)

        currentPath =
            url.path

        queryDict : Dict String String
        queryDict =
            getQueryDict model.url.query

        maybeUserEmail : Maybe String
        maybeUserEmail =
            Dict.get "email" queryDict

        -- Check session and also immediately try to render public routes
        cmds0 =
            case initialSession of
                Verified _ ->
                    -- If we have a session, also fetch the current user immediately
                    -- But don't use directPageUpdate for protected routes to prevent duplicate initialization
                    [ fetchCurrentUser ]

                _ ->
                    []

        -- Only add directPageUpdate for public routes to prevent duplicate initialization
        cmdsWithPageUpdate =
            if isPublicRoute then
                cmds0 ++ [ directPageUpdate ]

            else
                cmds0

        cmds1 =
            case ( currentPath, maybeUserEmail ) of
                ( "/walkthrough", Just userEmail ) ->
                    cmdsWithPageUpdate ++ [ setSession userEmail ]

                _ ->
                    cmdsWithPageUpdate

        cmds =
            cmds1
    in
    -- For public routes, immediately try to render without waiting for session
    if isPublicRoute then
        -- Try to render public route immediately
        updatePageForcePublic url ( model, Cmd.batch cmds )

    else
        -- For protected routes, wait for session verification
        ( model, Cmd.batch (cmds ++ [ checkSession ]) )


getQueryDict : Maybe String -> Dict String String
getQueryDict maybeQueryString =
    case maybeQueryString of
        Just queryString ->
            queryString
                |> String.split "&"
                |> List.filterMap
                    (\param ->
                        case String.split "=" param of
                            [ key0, value ] ->
                                Just ( key0, value )

                            _ ->
                                Nothing
                    )
                |> Dict.fromList

        Nothing ->
            Dict.empty


type alias CompareParams =
    { quoteId : Maybe String
    , orgId : Maybe String
    , tid : Maybe String
    }


type alias CompareParamsPartial1 =
    { state : Maybe String
    , zip : Maybe String
    , county : Maybe String
    , gender : Maybe String
    }


type alias CompareParamsPartial2 =
    { tobacco : Bool
    , age : Maybe Int
    , planType : Maybe String
    , currentCarrier : Maybe String
    }


type Route
    = PublicRoute PublicPage
    | ProtectedRoute ProtectedPage
    | AdminRoute AdminPage
    | SetupRoute SetupPage
    | NotFound


type VerifyParams
    = VerifyParams String String


type PublicPage
    = HomeRoute
    | LoginRoute
    | SignupRoute
    | OnboardingRoute
    | VerifyRoute VerifyParams
    | CompareRoute CompareParams
    | QuoteRoute { quoteId : Maybe String, trackingId : Maybe String, planType : Maybe String, orgId : Maybe String }
    | EligibilityRoute ( Maybe String, Maybe String, Maybe String )
    | ScheduleRoute ( Maybe String, Maybe String, Maybe String )
    | ScheduleMainRoute
    | SelfOnboardingRoute String
    | WaitlistRoute
    | LandingRoute { quoteId : Maybe String }
    | PricingRoute
    | Pricing2Route


type ProtectedPage
    = ContactsRoute
    | ProfileRoute
    | TempLandingRoute
    | ContactRoute String
    | DashboardRoute
    | ChangePlanRoute
    | StripeRoute
    | WalkthroughRoute


type AdminPage
    = SettingsRoute
    | AgentsRoute


type SetupPage
    = ChoosePlanRoute (Maybe SetupProgress)
    | SetupSettingsRoute (Maybe SetupProgress)
    | AddAgentsRoute (Maybe SetupProgress)


type alias SetupProgress =
    { plan : Maybe String
    , orgSettings : Bool
    }


type RouteAccess
    = Public -- No auth needed (login, home)
    | Protected -- Requires valid session
    | Setup -- Special setup flow routes


setupProgressDecoder : Query.Parser (Maybe SetupProgress)
setupProgressDecoder =
    Query.map2
        (\plan org ->
            case ( plan, org ) of
                ( Just p, Just o ) ->
                    Just
                        { plan = Just p
                        , orgSettings = o == "complete"
                        }

                _ ->
                    Nothing
        )
        (Query.string "plan")
        (Query.string "org")


compareParamsParser : Query.Parser CompareParams
compareParamsParser =
    Query.map3 CompareParams
        (Query.string "id")
        (Query.string "orgId")
        (Query.string "tid")



-- Parse the orgId


routeParser : Parser (Route -> a) a
routeParser =
    oneOf
        [ map (PublicRoute HomeRoute) top
        , map (PublicRoute WaitlistRoute) (s "waitlist")
        , map (PublicRoute LoginRoute) (s "login")
        , map (PublicRoute SignupRoute) (s "signup")
        , map (PublicRoute OnboardingRoute) (s "onboarding")
        , map (PublicRoute PricingRoute) (s "pricing")
        , map (PublicRoute Pricing2Route) (s "pricing2")
        , map (PublicRoute ScheduleMainRoute) (s "schedule-main")
        , map (\orgSlug token -> PublicRoute (VerifyRoute (VerifyParams orgSlug token)))
            (s "auth" </> s "verify" </> string </> string)
        , oneOf
            [ map (\quoteId tid -> PublicRoute (CompareRoute { quoteId = Just quoteId, orgId = Nothing, tid = tid }))
                (s "compare" </> string <?> Query.string "tid")
            , map (PublicRoute << CompareRoute)
                (s "compare" <?> compareParamsParser)
            ]
        , map (\quoteId -> PublicRoute (CompareRoute { quoteId = Just quoteId, orgId = Nothing, tid = Nothing }))
            (s "compare" </> string)
        , map (PublicRoute << QuoteRoute)
            (s "quote"
                <?> Query.map4
                        (\id tid planType orgId ->
                            { quoteId = id, trackingId = tid, planType = planType, orgId = orgId }
                        )
                        (Query.string "id")
                        (Query.string "tid")
                        (Query.string "planType")
                        (Query.string "orgId")
            )
        , map (PublicRoute << EligibilityRoute)
            (s "eligibility"
                <?> Query.map3
                        (\id tid orgId ->
                            ( id, tid, orgId )
                        )
                        (Query.string "id")
                        (Query.string "tid")
                        (Query.string "orgId")
            )
        , map (PublicRoute << ScheduleRoute)
            (s "schedule"
                <?> Query.map3 (\id status tid -> ( id, status, tid ))
                        (Query.string "id")
                        (Query.string "status")
                        (Query.string "tid")
            )
        , map (\orgSlug -> PublicRoute (SelfOnboardingRoute orgSlug))
            (s "self-onboarding" </> string)
        , map (PublicRoute << LandingRoute)
            (s "landing"
                <?> Query.map (\id -> { quoteId = id })
                        (Query.string "id")
            )
        , map (ProtectedRoute ChangePlanRoute) (s "change-plan")
        , map (ProtectedRoute ContactsRoute) (s "contacts")
        , map (AdminRoute SettingsRoute) (s "settings")
        , map (ProtectedRoute ProfileRoute) (s "profile")
        , map (ProtectedRoute TempLandingRoute) (s "templanding")
        , map (ProtectedRoute WalkthroughRoute) (s "walkthrough")
        , map (ProtectedRoute StripeRoute) (s "stripe")
        , map (AdminRoute AgentsRoute) (s "add-agents")
        , map (ProtectedRoute DashboardRoute) (s "dashboard")
        , map (\id -> ProtectedRoute (ContactRoute id)) (s "contact" </> string)
        , map (\progress -> SetupRoute (ChoosePlanRoute progress))
            (s "choose-plan" <?> setupProgressDecoder)
        , map (\progress -> SetupRoute (SetupSettingsRoute progress))
            (s "setup" </> s "settings" <?> setupProgressDecoder)
        , map (\progress -> SetupRoute (AddAgentsRoute progress))
            (s "setup" </> s "add-agents" <?> setupProgressDecoder)
        ]


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        LogTrackingClickResult result ->
            case result of
                Ok _ ->
                    ( model, Cmd.none )

                Err _ ->
                    ( model, Cmd.none )

        SetSessionResponse result ->
            case result of
                Ok sessionResponse ->
                    ( model
                    , if sessionResponse.success then
                        Cmd.none

                      else
                        Nav.pushUrl model.key "/login"
                    )

                Err _ ->
                    ( model
                    , Nav.pushUrl model.key "/login"
                    )

        DirectPageUpdate ->
            -- Force updatePage even if we're in Unknown session state
            updatePageForcePublic model.url ( model, Cmd.none )

        LinkClicked urlRequest ->
            case urlRequest of
                Browser.Internal url ->
                    ( model
                    , Nav.pushUrl model.key (Url.toString url)
                    )

                Browser.External href ->
                    ( model
                    , Nav.load href
                    )

        InternalLinkClicked frag ->
            ( { model
                | showDropdown = False
                , showPaymentStatus = False
              }
            , Nav.pushUrl model.key frag
            )

        UrlChanged url ->
            ( { model | url = url }
            , Cmd.none
            )
                |> updatePage url

        LoginMsg subMsg ->
            case model.page of
                LoginPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Login.update subMsg pageModel
                    in
                    ( { model | page = LoginPage newPageModel }
                    , Cmd.map LoginMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ContactsMsg subMsg ->
            case model.page of
                ContactsPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Contacts.update subMsg pageModel
                    in
                    ( { model | page = ContactsPage newPageModel }
                    , Cmd.map ContactsMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        TempLandingMsg subMsg ->
            case model.page of
                TempLandingPage pageModel ->
                    case subMsg of
                        TempLanding.NavigateTo path ->
                            ( model
                            , Nav.pushUrl model.key path
                            )

                _ ->
                    ( model, Cmd.none )

        SettingsMsg subMsg ->
            case model.page of
                SettingsPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Settings.update subMsg pageModel
                    in
                    ( { model | page = SettingsPage newPageModel }
                    , Cmd.map SettingsMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        SignupMsg subMsg ->
            case model.page of
                Signup signupModel ->
                    let
                        ( newSignupModel, newCmd ) =
                            Signup.update subMsg signupModel
                    in
                    ( { model | page = Signup newSignupModel }
                    , Cmd.map SignupMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ChoosePlanMsg subMsg ->
            case model.page of
                ChoosePlanPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            ChoosePlan.update subMsg pageModel
                    in
                    ( { model | page = ChoosePlanPage newPageModel }
                    , Cmd.map ChoosePlanMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ChangePlanMsg subMsg ->
            case model.page of
                ChangePlanPage pageModel ->
                    let
                        ( updatedPageModel, updatedCmd ) =
                            ChangePlan.update subMsg pageModel
                    in
                    ( { model | page = ChangePlanPage updatedPageModel }
                    , Cmd.map ChangePlanMsg updatedCmd
                    )

                _ ->
                    ( model, Cmd.none )

        AddAgentsMsg subMsg ->
            case model.page of
                AddAgentsPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            AddAgent.update subMsg pageModel
                    in
                    ( { model | page = AddAgentsPage newPageModel }
                    , Cmd.map AddAgentsMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        GotVerification result ->
            case result of
                Ok response ->
                    if response.success then
                        let
                            ( choosePlanModel, choosePlanCmd ) =
                                ChoosePlan.init response.orgSlug response.session model.key False

                            -- Only set isSetup to True if we're being redirected to a setup route
                            isInSetup =
                                String.startsWith "/choose-plan" response.redirectUrl
                                    || String.startsWith "/setup" response.redirectUrl

                            newModel =
                                { model
                                    | session = Verified response.session
                                    , currentUser =
                                        Just
                                            { id = ""
                                            , email = response.email
                                            , isAdmin = False
                                            , isAgent = False
                                            , organizationSlug = response.orgSlug
                                            , organizationId = response.orgSlug
                                            , firstName = ""
                                            , lastName = ""
                                            , subscriptionTier = ""
                                            , accountStatus = Nothing
                                            }
                                    , isSetup = isInSetup
                                    , page = LoadingPage -- Force to loading page to prevent UI flicker during redirection
                                }
                        in
                        ( newModel
                        , Cmd.batch
                            [ -- Instead of direct navigation, use a message to redirect
                              case model.intendedDestination of
                                Just destination ->
                                    Task.perform PerformRedirect (Task.succeed destination)

                                Nothing ->
                                    Task.perform PerformRedirect (Task.succeed response.redirectUrl)
                            , fetchCurrentUser
                            ]
                        )

                    else
                        ( model, Nav.pushUrl model.key "/login" )

                Err error ->
                    ( model, Nav.pushUrl model.key "/login" )

        PerformRedirect url ->
            -- Navigate to the specified URL
            ( model, Nav.pushUrl model.key url )

        GotSession result ->
            case result of
                Ok response ->
                    if response.valid then
                        let
                            user =
                                { id = response.id
                                , email = response.email
                                , isAdmin = response.isAdmin
                                , isAgent = True -- We'll get this from /api/me endpoint
                                , organizationSlug = response.organizationSlug
                                , organizationId = response.organizationSlug -- Use the org slug as org ID for now
                                , firstName = response.firstName
                                , lastName = response.lastName
                                , subscriptionTier = ""
                                , accountStatus = Nothing
                                }

                            -- Only set isSetup to True if we're in the middle of setup
                            isInSetup =
                                case Parser.parse routeParser model.url of
                                    Just (SetupRoute _) ->
                                        True

                                    _ ->
                                        False

                            newModel =
                                { model
                                    | session = Verified response.session
                                    , currentUser = Just user
                                    , isSetup = isInSetup
                                }
                        in
                        -- Just update the page, which will handle fetching user data if needed
                        updatePage model.url ( newModel, Cmd.none )

                    else
                        let
                            newModel =
                                { model | session = NoSession }
                        in
                        -- For invalid session, update page which will handle redirects
                        updatePage model.url ( newModel, Cmd.none )

                Err error ->
                    let
                        newModel =
                            { model | session = NoSession }
                    in
                    -- For session error, update page which will handle redirects
                    updatePage model.url ( newModel, Cmd.none )

        ProfileMsg subMsg ->
            case model.page of
                ProfilePage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Profile.update subMsg pageModel
                    in
                    ( { model | page = ProfilePage newPageModel }
                    , case subMsg of
                        Profile.NavigateTo path ->
                            Nav.pushUrl model.key path

                        _ ->
                            Cmd.map ProfileMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        HomeMsg subMsg ->
            case model.page of
                HomePage pageModel ->
                    let
                        ( newPageModel, homeCmd ) =
                            Home.update subMsg pageModel
                    in
                    ( { model | page = HomePage newPageModel }
                    , Cmd.map HomeMsg homeCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ContactMsg subMsg ->
            case model.page of
                ContactPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Contact.update subMsg pageModel
                    in
                    ( { model | page = ContactPage newPageModel }
                    , Cmd.map ContactMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        CompareMsg subMsg ->
            case model.page of
                ComparePage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Compare.update subMsg pageModel
                    in
                    ( { model | page = ComparePage newPageModel }
                    , Cmd.map CompareMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        QuoteMsg subMsg ->
            case model.page of
                QuotePage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Quote.update subMsg pageModel
                    in
                    ( { model | page = QuotePage newPageModel }
                    , Cmd.map QuoteMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        EligibilityMsg subMsg ->
            case model.page of
                EligibilityPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Eligibility.update subMsg pageModel
                    in
                    ( { model | page = EligibilityPage newPageModel }
                    , Cmd.map EligibilityMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ScheduleMsg subMsg ->
            case model.page of
                SchedulePage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Schedule.update subMsg pageModel
                    in
                    ( { model | page = SchedulePage newPageModel }
                    , Cmd.map ScheduleMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ScheduleMainMsg subMsg ->
            case model.page of
                ScheduleMainPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            ScheduleMain.update subMsg pageModel
                    in
                    ( { model | page = ScheduleMainPage newPageModel }
                    , Cmd.map ScheduleMainMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        DashboardMsg subMsg ->
            case model.page of
                DashboardPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Dashboard.update subMsg pageModel
                    in
                    ( { model | page = DashboardPage newPageModel }
                    , Cmd.map DashboardMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        WaitlistMsg subMsg ->
            case model.page of
                WaitlistPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Waitlist.update subMsg pageModel
                    in
                    ( { model | page = WaitlistPage newPageModel }
                    , Cmd.map WaitlistMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        GotCurrentUser result ->
            case result of
                Ok response ->
                    case response.user of
                        Just user ->
                            let
                                currentUser =
                                    Just
                                        { id = user.id
                                        , email = user.email
                                        , isAdmin = user.isAdmin
                                        , isAgent = user.isAgent
                                        , organizationSlug = user.organizationSlug
                                        , organizationId = user.organizationId
                                        , firstName = user.firstName
                                        , lastName = user.lastName
                                        , subscriptionTier = user.subscriptionTier
                                        , accountStatus = Nothing -- Will fetch this separately
                                        }

                                newModel =
                                    { model | currentUser = currentUser }

                                -- Fetch account status after user is loaded
                                cmd =
                                    Cmd.none

                                --fetchAccountStatus user.organizationSlug
                            in
                            -- Check if we were already on the right page with the right data
                            -- Only update the page if something meaningful has changed
                            case model.currentUser of
                                Just existingUser ->
                                    if existingUser.id == user.id && existingUser.organizationSlug == user.organizationSlug then
                                        -- We already have the same user, just update the model without triggering updatePage
                                        --( newModel, cmd )
                                        updatePage model.url ( newModel, cmd )

                                    else
                                        -- User has changed, update the page
                                        updatePage model.url ( newModel, cmd )

                                Nothing ->
                                    -- We didn't have a user before, update the page
                                    updatePage model.url ( newModel, cmd )

                        Nothing ->
                            -- No user data, but we should still update the page to avoid being stuck
                            updatePage model.url ( model, Cmd.none )

                Err error ->
                    -- Error retrieving user data, but we should still update the page to avoid being stuck
                    updatePage model.url ( model, Cmd.none )

        GotAccountStatus result ->
            case result of
                Ok response ->
                    if response.success then
                        -- Update user with account status
                        let
                            updatedUser =
                                model.currentUser
                                    |> Maybe.map
                                        (\user ->
                                            { user | accountStatus = Just response.status }
                                        )

                            updatedModel =
                                { model | currentUser = updatedUser }
                        in
                        -- Now that we have all data (session, user, account status), update the page
                        updatePage model.url ( updatedModel, Cmd.none )

                    else
                        ( model, Cmd.none )

                Err _ ->
                    -- Even if there's an error getting account status, we should still update the page
                    -- rather than staying on the loading screen
                    updatePage model.url ( model, Cmd.none )

        CloseStatusBanner ->
            ( { model | showStatusBanner = False }
            , Cmd.none
            )

        OrgFinalized result ->
            case result of
                Ok _ ->
                    ( model, Cmd.none )

                -- Navigation already happened
                Err _ ->
                    ( { model | page = LoadingPage }
                    , Nav.pushUrl model.key "/settings"
                      -- Redirect to settings on error
                    )

        LogoutMsg subMsg ->
            case model.page of
                LogoutPage logoutModel ->
                    let
                        ( newLogoutModel, logoutCmd ) =
                            Logout.update subMsg logoutModel
                    in
                    ( { model | page = LogoutPage newLogoutModel }
                    , Cmd.map LogoutMsg logoutCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ToggleDropdown ->
            ( { model | showDropdown = not model.showDropdown }
            , Cmd.none
            )

        CloseDropdown ->
            ( { model
                | showDropdown = False
                , showPaymentStatus = False
              }
            , Cmd.none
            )

        InitiateLogout ->
            ( { model
                | session = NoSession
                , currentUser = Nothing
                , showDropdown = False
              }
            , Cmd.batch
                [ Nav.pushUrl model.key "/"
                , Http.post
                    { url = "/api/auth/logout"
                    , body = Http.emptyBody
                    , expect = Http.expectWhatever (\_ -> NoOp)
                    }
                ]
            )

        NoOp ->
            ( model, Cmd.none )

        OnboardingMsg subMsg ->
            case model.page of
                OnboardingPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Onboarding.update subMsg pageModel
                    in
                    ( { model | page = OnboardingPage newPageModel }
                    , Cmd.map OnboardingMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        WalkthroughMsg subMsg ->
            case model.page of
                WalkthroughPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            Walkthrough.update subMsg pageModel
                    in
                    ( { model | page = WalkthroughPage newPageModel }
                    , Cmd.map WalkthroughMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        SelfOnboardingMsg subMsg ->
            case model.page of
                SelfOnboardingPage pageModel ->
                    let
                        ( newPageModel, newCmd ) =
                            SelfServiceOnboarding.update subMsg pageModel
                    in
                    ( { model | page = SelfOnboardingPage newPageModel }
                    , Cmd.map SelfOnboardingMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        ShowDropdown ->
            ( { model | showDropdown = True }, Cmd.none )

        HideDropdown ->
            ( { model | showDropdown = False }, Cmd.none )

        ToggleStatusBanner ->
            ( { model | showStatusBanner = not model.showStatusBanner }, Cmd.none )

        LandingMsg subMsg ->
            case model.page of
                LandingPage landingModel ->
                    case subMsg of
                        Landing.NavigateTo path ->
                            ( model
                            , Nav.pushUrl model.key path
                            )

                _ ->
                    ( model, Cmd.none )

        PricingMsg subMsg ->
            case model.page of
                PricingPage pricingModel ->
                    let
                        ( newPricingModel, newCmd ) =
                            Pricing.update subMsg pricingModel
                    in
                    ( { model | page = PricingPage newPricingModel }
                    , Cmd.map PricingMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        Pricing2Msg subMsg ->
            case model.page of
                Pricing2Page pricing2Model ->
                    let
                        ( newPricing2Model, newCmd ) =
                            Pricing2.update subMsg pricing2Model
                    in
                    ( { model | page = Pricing2Page newPricing2Model }
                    , Cmd.map Pricing2Msg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        StripeMsg subMsg ->
            case model.page of
                StripePage stripeModel ->
                    let
                        ( newStripeModel, newCmd ) =
                            Stripe.update subMsg stripeModel
                    in
                    ( { model | page = StripePage newStripeModel }
                    , Cmd.map StripeMsg newCmd
                    )

                _ ->
                    ( model, Cmd.none )

        TogglePaymentStatus ->
            ( { model | showPaymentStatus = not model.showPaymentStatus }, Cmd.none )


view : Model -> Browser.Document Msg
view model =
    let
        viewPage =
            case model.page of
                NotFoundPage ->
                    viewNotFound

                WaitlistPage waitlistModel ->
                    let
                        waitlistView =
                            Waitlist.view waitlistModel
                    in
                    { title = waitlistView.title
                    , body = [ viewWithNav model (Html.map WaitlistMsg (div [] waitlistView.body)) ]
                    }

                LoginPage loginModel ->
                    let
                        loginView =
                            Login.view loginModel
                    in
                    { title = loginView.title
                    , body = List.map (Html.map LoginMsg) loginView.body
                    }

                ContactsPage contactsModel ->
                    { title = "Contacts"
                    , body = [ viewWithNav model (Html.map ContactsMsg (Contacts.view contactsModel)) ]
                    }

                TempLandingPage landingModel ->
                    let
                        landingView =
                            TempLanding.view landingModel
                    in
                    { title = landingView.title
                    , body = [ viewWithNav model (Html.map TempLandingMsg (div [] landingView.body)) ]
                    }

                SettingsPage settingsModel ->
                    let
                        settingsView =
                            Settings.view settingsModel
                    in
                    { title = settingsView.title
                    , body = [ viewWithNav model (Html.map SettingsMsg (div [] settingsView.body)) ]
                    }

                Signup signupModel ->
                    let
                        signupView =
                            Signup.view signupModel
                    in
                    { title = signupView.title
                    , body = List.map (Html.map SignupMsg) signupView.body
                    }

                ChoosePlanPage choosePlanModel ->
                    let
                        choosePlanView =
                            ChoosePlan.view choosePlanModel
                    in
                    { title = choosePlanView.title
                    , body = [ viewWithNav model (Html.map ChoosePlanMsg (div [] choosePlanView.body)) ]
                    }

                ChangePlanPage changePlanModel ->
                    let
                        changePlanView =
                            ChangePlan.view changePlanModel
                    in
                    { title = changePlanView.title
                    , body = [ viewWithNav model (Html.map ChangePlanMsg (div [] changePlanView.body)) ]
                    }

                AddAgentsPage addAgentModel ->
                    let
                        addAgentView =
                            AddAgent.view addAgentModel
                    in
                    { title = addAgentView.title
                    , body =
                        if addAgentModel.isSetup then
                            -- In setup flow, don't show the header
                            [ Html.map AddAgentsMsg (div [] addAgentView.body) ]

                        else
                            -- Not in setup flow, show the header
                            [ viewWithNav model (Html.map AddAgentsMsg (div [] addAgentView.body)) ]
                    }

                ProfilePage profileModel ->
                    let
                        profileView =
                            Profile.view profileModel
                    in
                    { title = profileView.title
                    , body = [ viewWithNav model (Html.map ProfileMsg (div [] profileView.body)) ]
                    }

                LoadingPage ->
                    { title = "Loading..."
                    , body = [ viewLoading ]
                    }

                HomePage homeModel ->
                    let
                        homeView =
                            Home.view homeModel
                    in
                    { title = homeView.title
                    , body = [ viewWithNav model (Html.map HomeMsg (div [] homeView.body)) ]
                    }

                ContactPage contactModel ->
                    let
                        contactView =
                            Contact.view contactModel
                    in
                    { title = contactView.title
                    , body = [ viewWithNav model (Html.map ContactMsg (div [] contactView.body)) ]
                    }

                ComparePage compareModel ->
                    let
                        compareView =
                            Compare.view compareModel
                    in
                    { title = compareView.title
                    , body = [ viewWithNav model (Html.map CompareMsg (div [] compareView.body)) ]
                    }

                QuotePage quoteModel ->
                    let
                        quoteView =
                            Quote.view quoteModel
                    in
                    { title = quoteView.title
                    , body = [ viewWithNav model (Html.map QuoteMsg (div [] quoteView.body)) ]
                    }

                EligibilityPage eligibilityModel ->
                    let
                        eligibilityView =
                            Eligibility.view eligibilityModel
                    in
                    { title = eligibilityView.title
                    , body = [ viewWithNav model (Html.map EligibilityMsg (div [] eligibilityView.body)) ]
                    }

                SchedulePage scheduleModel ->
                    let
                        scheduleView =
                            Schedule.view scheduleModel
                    in
                    { title = scheduleView.title
                    , body = [ viewWithNav model (Html.map ScheduleMsg (div [] scheduleView.body)) ]
                    }

                ScheduleMainPage scheduleMainModel ->
                    let
                        scheduleMainView =
                            ScheduleMain.view scheduleMainModel
                    in
                    { title = scheduleMainView.title
                    , body = [ viewWithNav model (Html.map ScheduleMainMsg (div [] scheduleMainView.body)) ]
                    }

                DashboardPage dashboardModel ->
                    let
                        dashboardView =
                            Dashboard.view dashboardModel
                    in
                    { title = dashboardView.title
                    , body = [ viewWithNav model (Html.map DashboardMsg (div [] dashboardView.body)) ]
                    }

                LogoutPage logoutModel ->
                    let
                        logoutView =
                            Logout.view logoutModel
                    in
                    { title = logoutView.title
                    , body = List.map (Html.map LogoutMsg) logoutView.body
                    }

                OnboardingPage pageModel ->
                    let
                        onboardingView =
                            Onboarding.view pageModel
                    in
                    { title = onboardingView.title

                    -- Use the body from the Onboarding.view Document directly
                    , body = List.map (Html.map OnboardingMsg) onboardingView.body
                    }

                WalkthroughPage pageModel ->
                    let
                        walkthroughView =
                            Walkthrough.view pageModel
                    in
                    { title = walkthroughView.title
                    , body = [ viewWithNav model (Html.map WalkthroughMsg (div [] walkthroughView.body)) ]
                    }

                SelfOnboardingPage pageModel ->
                    let
                        selfOnboardingView =
                            SelfServiceOnboarding.view pageModel
                    in
                    { title = selfOnboardingView.title
                    , body = [ viewWithNav model (Html.map SelfOnboardingMsg (div [] selfOnboardingView.body)) ]
                    }

                LandingPage landingModel ->
                    let
                        landingView =
                            Landing.view landingModel
                    in
                    { title = landingView.title
                    , body = [ viewWithNav model (Html.map LandingMsg (div [] landingView.body)) ]
                    }

                PricingPage pricingModel ->
                    let
                        pricingView =
                            Pricing.view pricingModel
                    in
                    { title = "Pricing"
                    , body = [ viewWithNav model (Html.map PricingMsg pricingView) ]
                    }

                Pricing2Page pricing2Model ->
                    let
                        pricing2View =
                            Pricing2.view pricing2Model
                    in
                    { title = "Pricing"
                    , body = [ viewWithNav model (Html.map Pricing2Msg pricing2View) ]
                    }

                StripePage stripeModel ->
                    let
                        stripeView =
                            Stripe.view stripeModel
                    in
                    { title = stripeView.title
                    , body = [ viewWithNav model (Html.map StripeMsg (div [] stripeView.body)) ]
                    }
    in
    viewPage


viewWithNav : Model -> Html Msg -> Html Msg
viewWithNav model content =
    div []
        [ if model.isSetup then
            -- Don't show header during setup flow
            content

          else
            -- Show header for regular pages
            div []
                [ viewNavHeader model
                , content
                ]
        ]


viewPublicNav : Model -> Html Msg
viewPublicNav model =
    div []
        [ -- Desktop navigation
          nav [ class "max-w-7xl mx-auto px-6 sm:px-6 lg:px-8 py-4 sm:py-6 sticky top-0 z-50 bg-white hidden lg:block" ]
            [ div
                [ class "flex justify-between items-center" ]
                [ div [ class "flex items-center" ]
                    [ a [ href "/" ]
                        [ img
                            [ src "/images/medicare-max-logo.png"
                            , class "h-6 sm:h-8 w-auto"
                            , alt "Medicare Max logo"
                            ]
                            []
                        ]
                    ]
                , div [ class "flex items-center justify-end gap-8" ]
                    [ div [ class "flex items-center gap-2" ]
                        [ button
                            [ onClick (InternalLinkClicked "/schedule-main")
                            , class "px-4 text-gray-600 hover:text-gray-900 text-base font-medium cursor-pointer transition-all duration-200"
                            ]
                            [ text "Book a Demo" ]
                        , button
                            [ onClick (InternalLinkClicked "/pricing")
                            , class "px-4 text-gray-600 hover:text-gray-900 text-base font-medium cursor-pointer transition-all duration-200"
                            ]
                            [ text "Pricing" ]
                        ]
                    , div [ class "flex items-center" ]
                        [ button
                            [ onClick (InternalLinkClicked "/waitlist")
                            , class "bg-[#03045E] text-white border-2 border-[#03045E] px-6 sm:px-8 py-2 rounded-lg text-sm font-medium hover:bg-[#1a1f5f] transition-colors duration-200 mr-3 w-[200px] text-center"
                            ]
                            [ text "Get Early Access" ]
                        , button
                            [ onClick (InternalLinkClicked "/self-onboarding/demo-org")
                            , class "bg-white text-[#03045E] border-2 border-[#03045E] px-6 sm:px-8 py-2 rounded-lg text-sm font-medium hover:bg-gray-50 transition-colors duration-200 w-[200px] text-center"
                            ]
                            [ text "Try It Out" ]
                        ]
                    ]
                ]
            ]

        -- Mobile navigation
        , nav [ class "lg:hidden sticky top-0 z-50 bg-white" ]
            [ div [ class "max-w-7xl mx-auto px-4 py-4" ]
                [ div [ class "flex justify-between items-center" ]
                    [ a [ href "/" ]
                        [ img
                            [ src "/images/medicare-max-logo.png"
                            , class "h-6 w-auto"
                            , alt "Medicare Max logo"
                            ]
                            []
                        ]
                    , button
                        [ onClick ToggleDropdown
                        , class "p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100 focus:outline-none"
                        ]
                        [ -- Hamburger icon
                          svg
                            [ Svg.Attributes.class "h-6 w-6"
                            , Svg.Attributes.fill "none"
                            , Svg.Attributes.viewBox "0 0 24 24"
                            , Svg.Attributes.stroke "currentColor"
                            ]
                            [ path
                                [ Svg.Attributes.strokeLinecap "round"
                                , Svg.Attributes.strokeLinejoin "round"
                                , Svg.Attributes.strokeWidth "2"
                                , Svg.Attributes.d "M4 6h16M4 12h16M4 18h16"
                                ]
                                []
                            ]
                        ]
                    ]
                ]
            , if model.showDropdown then
                div
                    [ class "absolute top-full left-0 w-full bg-white shadow-lg border-t border-gray-200"
                    , stopPropagationOn "mousedown" (Decode.succeed ( NoOp, True ))
                    ]
                    [ div [ class "px-4 py-2 space-y-2" ]
                        [ button
                            [ onClick (InternalLinkClicked "/schedule-main")
                            , class "block w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-md"
                            ]
                            [ text "Book a Demo" ]
                        , button
                            [ onClick (InternalLinkClicked "/pricing")
                            , class "block w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-md"
                            ]
                            [ text "Pricing" ]
                        , button
                            [ onClick (InternalLinkClicked "/waitlist")
                            , class "block w-full text-left px-4 py-2 text-[#03045E] font-medium hover:bg-gray-100 rounded-md"
                            ]
                            [ text "Get Early Access" ]
                        , button
                            [ onClick (InternalLinkClicked "/self-onboarding/demo-org")
                            , class "block w-full text-left px-4 py-2 text-[#03045E] font-medium hover:bg-gray-100 rounded-md"
                            ]
                            [ text "Try It Out" ]
                        ]
                    ]

              else
                text ""
            ]
        ]


viewNavHeader : Model -> Html Msg
viewNavHeader model =
    let
        -- Check if current page is one of the quote flow pages that should have simplified header
        isQuoteFlowPage =
            case model.page of
                QuotePage _ ->
                    True

                ComparePage _ ->
                    True

                EligibilityPage _ ->
                    True

                SchedulePage _ ->
                    True

                SelfOnboardingPage _ ->
                    True

                LandingPage _ ->
                    True

                _ ->
                    False

        isPublicPage =
            case model.page of
                HomePage _ ->
                    True

                PricingPage _ ->
                    True

                Pricing2Page _ ->
                    True

                WaitlistPage _ ->
                    True

                ScheduleMainPage _ ->
                    True

                _ ->
                    False

        isPaymentActive =
            model.currentUser
                |> Maybe.andThen .accountStatus
                |> Maybe.map (\status -> status.paymentCompleted)
                |> Maybe.withDefault False

        paymentStatusMessage =
            model.currentUser
                |> Maybe.andThen .accountStatus
                |> Maybe.map
                    (\status ->
                        if status.subscriptionStatus == "active" then
                            "Payments active"

                        else
                            "Payment needs to be updated. Click to update payment information."
                    )
                |> Maybe.withDefault "Payment status unknown"

        paymentStatusIcon =
            if isPaymentActive then
                MyIcon.zap 20 "#10B981"
                -- Green color for active

            else
                MyIcon.zapOff 20 "#EF4444"

        -- Red color for inactive
        paymentStatusIndicator =
            div [ class "relative" ]
                [ button
                    [ class "flex items-center space-x-2 px-3 py-1.5 text-gray-700 text-sm font-medium hover:bg-[#DCE2E5] rounded-md transition-colors duration-200"
                    , onClick TogglePaymentStatus
                    ]
                    [ div [ class "flex items-center space-x-2" ]
                        [ paymentStatusIcon
                        ]
                    ]
                , if model.showPaymentStatus then
                    div
                        [ class "absolute right-0 mt-2 w-64 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 z-50"
                        , stopPropagationOn "mousedown" (Decode.succeed ( NoOp, True ))
                        ]
                        [ div [ class "px-4 py-2 text-sm text-gray-700" ]
                            [ text paymentStatusMessage
                            , if not isPaymentActive then
                                button
                                    [ class "mt-2 w-full px-4 py-2 bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors duration-200"
                                    , onClick (InternalLinkClicked "/stripe")
                                    ]
                                    [ text "Update Payment" ]

                              else
                                text ""
                            ]
                        ]

                  else
                    text ""
                ]
    in
    if isPublicPage then
        viewPublicNav model

    else if isQuoteFlowPage then
        text ""

    else
        -- Full header with navigation for other pages
        nav [ class "bg-white border-b border-gray-200" ]
            [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" ]
                [ div [ class "flex justify-between h-16" ]
                    [ div [ class "flex items-center" ]
                        [ div [ class "shrink-0 flex items-center" ]
                            [ a
                                [ href "#"
                                , onClick (InternalLinkClicked "/")
                                , class "cursor-pointer"
                                ]
                                [ img
                                    [ src "/images/medicare-max-logo.png"
                                    , class "h-6 sm:h-6 w-auto mr-2 sm:mr-8"
                                    , alt "Medicare Max logo"
                                    ]
                                    []
                                ]
                            ]
                        , div [ class "hidden sm:flex items-center space-x-4" ]
                            [ button
                                [ class "px-3 py-1.5 text-gray-700 text-sm font-medium hover:bg-[#DCE2E5] rounded-md transition-colors duration-200"
                                , onClick (InternalLinkClicked "/dashboard")
                                ]
                                [ text "Dashboard" ]
                            , button
                                [ class "px-3 py-1.5 text-gray-700 text-sm font-medium hover:bg-[#DCE2E5] rounded-md transition-colors duration-200"
                                , onClick (InternalLinkClicked "/contacts")
                                ]
                                [ text "Contacts" ]
                            ]
                        ]
                    , div [ class "flex items-center space-x-2" ]
                        [ div [ class "relative" ]
                            [ button
                                [ class "flex items-center space-x-1 sm:space-x-2 px-2 sm:px-3 py-1.5 text-gray-700 text-xs sm:text-sm font-medium hover:bg-[#DCE2E5] rounded-md transition-colors duration-200"
                                , onClick ToggleDropdown
                                , stopPropagationOn "mousedown" (Decode.succeed ( NoOp, True ))
                                ]
                                [ case model.currentUser of
                                    Just user ->
                                        text (user.firstName ++ " " ++ user.lastName)

                                    Nothing ->
                                        text "Menu"
                                , div [ class "w-4 h-4 flex-shrink-0" ]
                                    [ svg
                                        [ Svg.Attributes.viewBox "0 0 20 20"
                                        , Svg.Attributes.fill "currentColor"
                                        ]
                                        [ path
                                            [ Svg.Attributes.d "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" ]
                                            []
                                        ]
                                    ]
                                ]
                            , if model.showDropdown then
                                div
                                    [ class "absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 z-50"
                                    , stopPropagationOn "mousedown" (Decode.succeed ( NoOp, True ))
                                    ]
                                    [ -- Always show on mobile
                                      div [ class "block sm:hidden" ]
                                        [ button
                                            [ class "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-[#DCE2E5]"
                                            , onClick (InternalLinkClicked "/dashboard")
                                            ]
                                            [ text "Dashboard" ]
                                        , button
                                            [ class "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-[#DCE2E5]"
                                            , onClick (InternalLinkClicked "/contacts")
                                            ]
                                            [ text "Contacts" ]
                                        ]
                                    , if isAdmin model.currentUser then
                                        button
                                            [ class "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-[#DCE2E5]"
                                            , onClick (InternalLinkClicked "/profile")
                                            ]
                                            [ text "Profile" ]

                                      else
                                        text ""
                                    , if isAdmin model.currentUser then
                                        button
                                            [ class "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-[#DCE2E5]"
                                            , onClick (InternalLinkClicked "/settings")
                                            ]
                                            [ text "Organization Settings" ]

                                      else
                                        text ""
                                    , if isAdmin model.currentUser then
                                        button
                                            [ class "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-[#DCE2E5]"
                                            , onClick (InternalLinkClicked "/add-agents")
                                            ]
                                            [ text "Agents" ]

                                      else
                                        text ""
                                    , button
                                        [ class "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-[#DCE2E5]"
                                        , onClick (InternalLinkClicked "/stripe")
                                        ]
                                        [ text "Payment Settings" ]
                                    , button
                                        [ class "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-[#DCE2E5]"
                                        , onClick InitiateLogout
                                        ]
                                        [ text "Log out" ]
                                    ]

                              else
                                text ""
                            ]
                        ]
                    ]
                ]
            ]


isAdminOrAdminAgent : Maybe User -> Bool
isAdminOrAdminAgent maybeUser =
    case maybeUser of
        Just user ->
            user.isAdmin && user.isAgent

        Nothing ->
            False


isAdmin : Maybe User -> Bool
isAdmin maybeUser =
    case maybeUser of
        Just user ->
            user.isAdmin

        Nothing ->
            False


viewNotFound : Browser.Document msg
viewNotFound =
    { title = "404 - Page Not Found"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex flex-col items-center justify-center" ]
            [ h1 [ class "text-4xl font-bold text-gray-900 mb-4" ]
                [ text "404 - Page Not Found" ]
            , p [ class "text-gray-600" ]
                [ text "The page you're looking for doesn't exist." ]
            ]
        ]
    }


viewLoading : Html msg
viewLoading =
    div [ class "min-h-screen bg-gray-50 flex items-center justify-center" ]
        [ div [ class "animate-spin rounded-full h-8 w-8 border-2 border-purple-500 border-t-transparent" ] []
        ]


subscriptions : Model -> Sub Msg
subscriptions model =
    let
        dropdownSub =
            if model.showDropdown || model.showPaymentStatus then
                Browser.Events.onMouseDown (Decode.succeed CloseDropdown)

            else
                Sub.none

        escDropdownSub =
            if model.showDropdown then
                Browser.Events.onKeyDown (Decode.succeed CloseDropdown)

            else
                Sub.none

        pageSubs =
            case model.page of
                LoadingPage ->
                    Sub.none

                WaitlistPage pageModel ->
                    Sub.map WaitlistMsg (Waitlist.subscriptions pageModel)

                LoginPage pageModel ->
                    Sub.map LoginMsg (Login.subscriptions pageModel)

                ContactsPage pageModel ->
                    Sub.map ContactsMsg (Contacts.subscriptions pageModel)

                TempLandingPage pageModel ->
                    Sub.map TempLandingMsg (TempLanding.subscriptions pageModel)

                SettingsPage pageModel ->
                    Sub.map SettingsMsg (Settings.subscriptions pageModel)

                Signup signupModel ->
                    Sub.map SignupMsg (Signup.subscriptions signupModel)

                ChoosePlanPage pageModel ->
                    Sub.map ChoosePlanMsg (ChoosePlan.subscriptions pageModel)

                ChangePlanPage pageModel ->
                    Sub.map ChangePlanMsg (ChangePlan.subscriptions pageModel)

                AddAgentsPage pageModel ->
                    Sub.map AddAgentsMsg (AddAgent.subscriptions pageModel)

                ProfilePage pageModel ->
                    Sub.map ProfileMsg (Profile.subscriptions pageModel)

                HomePage pageModel ->
                    Sub.map HomeMsg (Home.subscriptions pageModel)

                ContactPage pageModel ->
                    Sub.map ContactMsg (Contact.subscriptions pageModel)

                ComparePage pageModel ->
                    Sub.map CompareMsg (Compare.subscriptions pageModel)

                QuotePage pageModel ->
                    Sub.map QuoteMsg (Quote.subscriptions pageModel)

                EligibilityPage pageModel ->
                    Sub.map EligibilityMsg (Eligibility.subscriptions pageModel)

                SchedulePage pageModel ->
                    Sub.map ScheduleMsg (Schedule.subscriptions pageModel)

                ScheduleMainPage pageModel ->
                    Sub.map ScheduleMainMsg (ScheduleMain.subscriptions pageModel)

                DashboardPage pageModel ->
                    Sub.map DashboardMsg (Dashboard.subscriptions pageModel)

                NotFoundPage ->
                    Sub.none

                LogoutPage pageModel ->
                    Sub.map LogoutMsg (Logout.subscriptions pageModel)

                OnboardingPage pageModel ->
                    Sub.map OnboardingMsg (Onboarding.subscriptions pageModel)

                WalkthroughPage pageModel ->
                    Sub.map WalkthroughMsg (Walkthrough.subscriptions pageModel)

                SelfOnboardingPage _ ->
                    Sub.none

                LandingPage landingModel ->
                    Sub.map LandingMsg (Landing.subscriptions landingModel)

                PricingPage pricingModel ->
                    Sub.none

                Pricing2Page pricing2Model ->
                    Sub.map Pricing2Msg (Pricing2.subscriptions pricing2Model)

                StripePage stripeModel ->
                    Sub.none
    in
    Sub.batch [ dropdownSub, escDropdownSub, pageSubs ]


routeAccessType : Route -> RouteAccess
routeAccessType route =
    case route of
        PublicRoute _ ->
            Public

        ProtectedRoute _ ->
            Protected

        AdminRoute _ ->
            Protected

        -- Still Protected, but we'll check admin status separately
        SetupRoute _ ->
            Setup

        NotFound ->
            Public


userDecoder : Decoder User
userDecoder =
    Decode.succeed User
        |> Pipeline.required "id" (Decode.map String.fromInt Decode.int)
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "is_admin"
            (Decode.oneOf
                [ Decode.bool
                , Decode.int |> Decode.map (\n -> n == 1)
                ]
            )
        |> Pipeline.required "is_agent"
            (Decode.oneOf
                [ Decode.bool
                , Decode.int |> Decode.map (\n -> n == 1)
                ]
            )
        |> Pipeline.required "organization_slug" Decode.string
        |> Pipeline.required "organization_id" (Decode.map String.fromInt Decode.int)
        |> Pipeline.required "firstName" Decode.string
        |> Pipeline.required "lastName" Decode.string
        |> Pipeline.required "subscription_tier" Decode.string
        |> Pipeline.optional "accountStatus" (Decode.nullable accountStatusDecoder) Nothing


type SetupStep
    = NotStarted
    | PlanSelection
    | OrganizationSetup
    | AgentSetup
    | Complete


getSetupStep : Model -> SetupStep
getSetupStep model =
    case model.currentUser of
        Nothing ->
            NotStarted

        Just user ->
            if not model.isSetup then
                PlanSelection

            else if not (hasOrganizationSettings user) then
                OrganizationSetup

            else if not (hasAgents user) then
                AgentSetup

            else
                Complete


hasOrganizationSettings : User -> Bool
hasOrganizationSettings user =
    -- Check if both organization and brand settings are configured
    case user.organizationSlug of
        "" ->
            False

        _ ->
            -- For now return True since we've merged brand settings into org settings
            -- TODO: Add actual check for required settings once API is updated
            True


hasAgents : User -> Bool
hasAgents user =
    -- TODO: Add actual check for agents
    True


redirectToSetupStep : Model -> ( Model, Cmd Msg )
redirectToSetupStep model =
    case getSetupStep model of
        NotStarted ->
            ( model, Nav.pushUrl model.key "/login" )

        PlanSelection ->
            ( model, Nav.pushUrl model.key "/choose-plan" )

        OrganizationSetup ->
            case model.currentUser of
                Just user ->
                    ( model
                    , Nav.pushUrl model.key
                        ("/setup/settings?plan=" ++ user.organizationSlug)
                    )

                Nothing ->
                    ( model, Nav.pushUrl model.key "/setup/settings" )

        AgentSetup ->
            case model.currentUser of
                Just user ->
                    ( model
                    , Nav.pushUrl model.key
                        ("/setup/add-agents?plan=" ++ user.organizationSlug ++ "&org=complete")
                    )

                Nothing ->
                    ( model, Nav.pushUrl model.key "/setup/add-agents" )

        Complete ->
            ( model, Nav.pushUrl model.key "/contacts" )


shouldRedirectAdminRoute : Route -> Model -> Maybe String
shouldRedirectAdminRoute route model =
    case route of
        AdminRoute _ ->
            case model.currentUser of
                Just user ->
                    if user.isAdmin then
                        Nothing
                        -- Admin user, no redirect needed

                    else
                        Just "/contacts"

                -- Non-admin user, redirect to contacts
                Nothing ->
                    Just "/login"

        -- Not logged in, redirect to login
        _ ->
            Nothing


shouldRedirectToLogin : Route -> Model -> Bool
shouldRedirectToLogin route model =
    let
        result =
            case route of
                PublicRoute _ ->
                    False

                NotFound ->
                    False

                AdminRoute _ ->
                    case model.session of
                        Verified _ ->
                            False

                        _ ->
                            True

                _ ->
                    case model.session of
                        Verified _ ->
                            False

                        _ ->
                            True
    in
    -- Add a debug log for the redirect check
    result


shouldRedirectToSetup : Route -> Model -> Bool
shouldRedirectToSetup route model =
    -- Only check setup state if we're in setup mode
    if model.isSetup then
        case route of
            SetupRoute _ ->
                -- Already in a setup route, no redirect needed
                False

            PublicRoute _ ->
                -- Public routes are always accessible
                False

            NotFound ->
                -- Not found routes don't redirect
                False

            AdminRoute _ ->
                -- Admin routes redirect if setup is not complete
                getSetupStep model /= Complete

            ProtectedRoute _ ->
                -- Protected routes redirect if setup is not complete
                getSetupStep model /= Complete

    else
        False


updatePage : Url -> ( Model, Cmd Msg ) -> ( Model, Cmd Msg )
updatePage url ( model, cmd ) =
    case model.session of
        Unknown ->
            -- When session state is Unknown, still allow public routes to render
            case Parser.parse routeParser url of
                Just route ->
                    case routeAccessType route of
                        Public ->
                            -- For public routes, redirect to the force update function
                            updatePageForcePublic url ( model, cmd )

                        _ ->
                            -- For non-public routes, keep showing loading while we wait
                            ( { model | page = LoadingPage }
                            , cmd
                            )

                Nothing ->
                    ( { model | page = NotFoundPage }
                    , cmd
                    )

        -- Rest of the function remains the same for Verified and NoSession states
        _ ->
            case Parser.parse routeParser url of
                Just route ->
                    let
                        -- Update isSetup based on the route
                        modelWithUpdatedSetup =
                            updateIsSetup model route

                        adminRedirect =
                            shouldRedirectAdminRoute route modelWithUpdatedSetup

                        -- Determine if we should make authenticated requests based on session state
                        -- Only fetch user data if we have a verified session AND don't already have user info
                        authCmd =
                            case ( model.session, model.currentUser ) of
                                ( Verified _, Nothing ) ->
                                    -- Only fetch user data if we have a verified session but no user data
                                    fetchCurrentUser

                                _ ->
                                    -- Don't make authenticated requests if no session or already have user data
                                    Cmd.none
                    in
                    case adminRedirect of
                        Just redirectUrl ->
                            ( modelWithUpdatedSetup, Nav.pushUrl modelWithUpdatedSetup.key redirectUrl )

                        Nothing ->
                            let
                                needsLogin =
                                    shouldRedirectToLogin route modelWithUpdatedSetup

                                needsSetup =
                                    shouldRedirectToSetup route modelWithUpdatedSetup
                            in
                            if needsLogin then
                                ( { modelWithUpdatedSetup
                                    | intendedDestination = Just (Url.toString url)
                                    , page = LoginPage (Login.init modelWithUpdatedSetup.key False url |> Tuple.first)
                                  }
                                , if String.contains "/login" (Url.toString url) then
                                    -- Already on login page, don't redirect
                                    Cmd.none

                                  else
                                    Nav.pushUrl modelWithUpdatedSetup.key "/login"
                                )

                            else if needsSetup then
                                -- Check if we're already on a setup route to prevent redirect loops
                                case route of
                                    SetupRoute _ ->
                                        -- Already on a setup route, just update the page
                                        ( modelWithUpdatedSetup, authCmd )

                                    _ ->
                                        redirectToSetupStep modelWithUpdatedSetup

                            else
                                -- Continue with the original logic for handling different routes
                                -- Rest of the function remains the same
                                case route of
                                    PublicRoute HomeRoute ->
                                        -- Home page handles its own session checking
                                        let
                                            ( homeModel, homeCmd ) =
                                                Home.init modelWithUpdatedSetup.key
                                        in
                                        ( { modelWithUpdatedSetup | page = HomePage homeModel }
                                        , Cmd.map HomeMsg homeCmd
                                        )

                                    PublicRoute WaitlistRoute ->
                                        let
                                            ( waitlistModel, waitlistCmd ) =
                                                Waitlist.init
                                        in
                                        ( { modelWithUpdatedSetup | page = WaitlistPage waitlistModel }
                                        , Cmd.map WaitlistMsg waitlistCmd
                                        )

                                    PublicRoute LoginRoute ->
                                        let
                                            ( loginModel, loginCmd ) =
                                                Login.init modelWithUpdatedSetup.key False url
                                        in
                                        ( { modelWithUpdatedSetup | page = LoginPage loginModel }
                                        , Cmd.map LoginMsg loginCmd
                                        )

                                    PublicRoute SignupRoute ->
                                        -- Initialize signup page without making authenticated API calls
                                        let
                                            ( signupModel, signupCmd ) =
                                                Signup.init modelWithUpdatedSetup.key
                                        in
                                        ( { modelWithUpdatedSetup | page = Signup signupModel }
                                        , Cmd.map SignupMsg signupCmd
                                        )

                                    PublicRoute OnboardingRoute ->
                                        let
                                            -- Extract the query parameters from the URL
                                            queryParams =
                                                url.query
                                                    |> Maybe.map (\q -> String.split "&" q)
                                                    |> Maybe.withDefault []
                                                    |> List.filterMap
                                                        (\param ->
                                                            case String.split "=" param of
                                                                key :: value :: [] ->
                                                                    Just ( key, value )

                                                                _ ->
                                                                    Nothing
                                                        )

                                            -- Initialize the new onboarding module with query params
                                            ( onboardingModel, onboardingCmd ) =
                                                Onboarding.init modelWithUpdatedSetup.key url
                                        in
                                        ( { modelWithUpdatedSetup | page = OnboardingPage onboardingModel }
                                        , Cmd.map OnboardingMsg onboardingCmd
                                        )

                                    PublicRoute (VerifyRoute params) ->
                                        -- For verification, we need to make an API call
                                        let
                                            verifyUrl =
                                                case params of
                                                    VerifyParams orgSlug token ->
                                                        "/api/auth/verify/" ++ orgSlug ++ "/" ++ token

                                            verifyCmd =
                                                Http.get
                                                    { url = verifyUrl
                                                    , expect = Http.expectJson GotVerification verificationDecoder
                                                    }
                                        in
                                        ( model, verifyCmd )

                                    PublicRoute (CompareRoute params) ->
                                        case params.quoteId of
                                            Just quoteId ->
                                                -- We have a quote ID, which is what we prefer
                                                let
                                                    ( compareModel, compareCmd ) =
                                                        Compare.init model.key (Just params)
                                                in
                                                ( { model | page = ComparePage compareModel }
                                                , Cmd.map CompareMsg compareCmd
                                                )

                                            Nothing ->
                                                -- No quote ID, check if we have a valid orgId
                                                if isValidOrgId params.orgId then
                                                    -- We have a valid orgId but no quoteId, so use the params
                                                    let
                                                        ( compareModel, compareCmd ) =
                                                            Compare.init model.key (Just params)
                                                    in
                                                    ( { model | page = ComparePage compareModel }
                                                    , Cmd.map CompareMsg compareCmd
                                                    )

                                                else
                                                    -- No valid orgId either, redirect to 404
                                                    ( { model | page = NotFoundPage }
                                                    , Nav.pushUrl model.key "/404"
                                                    )

                                    PublicRoute (QuoteRoute params) ->
                                        -- First check if there's a valid quoteId
                                        if isValidQuoteId params.quoteId then
                                            let
                                                initialValues =
                                                    { zipCode = Nothing
                                                    , dateOfBirth = Nothing
                                                    , tobacco = Nothing
                                                    , gender = Nothing
                                                    , quoteId = params.quoteId
                                                    , planType = params.planType
                                                    , orgId = params.orgId -- Pass orgId even if it's Nothing
                                                    }

                                                ( quoteModel, quoteCmd ) =
                                                    Quote.init model.key initialValues
                                            in
                                            ( { model | page = QuotePage quoteModel }
                                            , Cmd.map QuoteMsg quoteCmd
                                            )
                                            -- If there's no valid quoteId, show error

                                        else
                                            -- Redirect to an error page or show an error
                                            ( { model | page = NotFoundPage }
                                            , Nav.pushUrl model.key "/error?message=Missing%20or%20invalid%20quote%20ID"
                                            )

                                    PublicRoute (EligibilityRoute params) ->
                                        let
                                            ( quoteId, _, orgIdStr ) =
                                                params
                                        in
                                        if isValidOrgId orgIdStr then
                                            let
                                                ( eligibilityModel, eligibilityCmd ) =
                                                    Eligibility.init model.key { quoteId = quoteId, orgId = orgIdStr }
                                            in
                                            ( { model | page = EligibilityPage eligibilityModel }
                                            , Cmd.map EligibilityMsg eligibilityCmd
                                            )

                                        else
                                            -- Redirect to an error page or show an error
                                            ( { model | page = NotFoundPage }
                                            , Nav.pushUrl model.key "/error?message=Missing%20or%20invalid%20organization%20ID"
                                            )

                                    PublicRoute (ScheduleRoute params) ->
                                        let
                                            ( scheduleModel, scheduleCmd ) =
                                                Schedule.init model.key
                                                    ((\( id, _, _ ) -> id) params)
                                                    ((\( _, status, _ ) -> status) params)
                                        in
                                        ( { model | page = SchedulePage scheduleModel }
                                        , Cmd.map ScheduleMsg scheduleCmd
                                        )

                                    PublicRoute ScheduleMainRoute ->
                                        let
                                            ( scheduleMainModel, scheduleMainCmd ) =
                                                ScheduleMain.init model.key
                                        in
                                        ( { model | page = ScheduleMainPage scheduleMainModel }
                                        , Cmd.map ScheduleMainMsg scheduleMainCmd
                                        )

                                    ProtectedRoute ContactsRoute ->
                                        let
                                            -- Convert Main.elm User to Contacts.elm User format
                                            contactsUser =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map
                                                        (\user ->
                                                            { id = String.toInt user.id |> Maybe.withDefault 0
                                                            , email = user.email
                                                            , firstName = user.firstName
                                                            , lastName = user.lastName
                                                            , isAdmin = user.isAdmin
                                                            , isAgent = user.isAgent
                                                            , isDefault = False -- Add isDefault field
                                                            , organizationId = String.toInt user.organizationId |> Maybe.withDefault 0
                                                            , isActive = True -- Assume active
                                                            , phone = "" -- Default empty
                                                            , carriers = [] -- Default empty
                                                            , stateLicenses = [] -- Default empty
                                                            }
                                                        )

                                            ( contactsModel, contactsCmd ) =
                                                Contacts.init modelWithUpdatedSetup.key contactsUser
                                        in
                                        ( { modelWithUpdatedSetup | page = ContactsPage contactsModel }
                                        , Cmd.map ContactsMsg contactsCmd
                                        )

                                    ProtectedRoute ProfileRoute ->
                                        let
                                            ( profileModel, profileCmd ) =
                                                Profile.init ()
                                        in
                                        ( { modelWithUpdatedSetup | page = ProfilePage profileModel }
                                        , Cmd.batch
                                            [ Cmd.map ProfileMsg profileCmd
                                            , authCmd
                                            ]
                                        )

                                    ProtectedRoute TempLandingRoute ->
                                        let
                                            ( tempLandingModel, tempLandingCmd ) =
                                                TempLanding.init ()
                                        in
                                        ( { modelWithUpdatedSetup | page = TempLandingPage tempLandingModel }
                                        , Cmd.batch
                                            [ Cmd.map TempLandingMsg tempLandingCmd
                                            , authCmd
                                            ]
                                        )

                                    ProtectedRoute (ContactRoute id) ->
                                        let
                                            ( contactModel, contactCmd ) =
                                                Contact.init modelWithUpdatedSetup.key id
                                        in
                                        ( { modelWithUpdatedSetup | page = ContactPage contactModel }
                                        , Cmd.batch
                                            [ Cmd.map ContactMsg contactCmd
                                            , authCmd
                                            ]
                                        )

                                    ProtectedRoute ChangePlanRoute ->
                                        let
                                            ( changePlanModel, changePlanCmd ) =
                                                ChangePlan.init
                                                    { key = modelWithUpdatedSetup.key
                                                    , session = extractSession modelWithUpdatedSetup.session
                                                    , orgSlug = modelWithUpdatedSetup.currentUser |> Maybe.map .organizationSlug |> Maybe.withDefault ""
                                                    }
                                        in
                                        ( { modelWithUpdatedSetup | page = ChangePlanPage changePlanModel }
                                        , Cmd.batch
                                            [ Cmd.map ChangePlanMsg changePlanCmd
                                            , authCmd
                                            ]
                                        )

                                    ProtectedRoute DashboardRoute ->
                                        let
                                            dashboardFlags =
                                                { isPostPayment =
                                                    case
                                                        Parser.parse
                                                            (Parser.s "dashboard" <?> Query.string "payment_success")
                                                            url
                                                    of
                                                        Just (Just "true") ->
                                                            Just True

                                                        _ ->
                                                            Nothing
                                                }

                                            ( dashboardModel, dashboardCmd ) =
                                                Dashboard.init dashboardFlags
                                        in
                                        ( { modelWithUpdatedSetup | page = DashboardPage dashboardModel }
                                        , Cmd.batch
                                            [ Cmd.map DashboardMsg dashboardCmd
                                            , authCmd
                                            ]
                                        )

                                    ProtectedRoute WalkthroughRoute ->
                                        let
                                            ( walkthroughModel, walkthroughCmd ) =
                                                Walkthrough.init modelWithUpdatedSetup.key
                                        in
                                        ( { modelWithUpdatedSetup | page = WalkthroughPage walkthroughModel }
                                        , Cmd.batch
                                            [ Cmd.map WalkthroughMsg walkthroughCmd
                                            , authCmd
                                            ]
                                        )

                                    AdminRoute SettingsRoute ->
                                        let
                                            -- Convert Main.elm User to Settings.elm CurrentUser format
                                            settingsUser =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map
                                                        (\user ->
                                                            { id = user.id
                                                            , email = user.email
                                                            , isAdmin = user.isAdmin
                                                            , isAgent = user.isAgent
                                                            , organizationSlug = user.organizationSlug
                                                            , organizationId = user.organizationId
                                                            }
                                                        )

                                            ( settingsModel, settingsCmd ) =
                                                Settings.init
                                                    { isSetup = False
                                                    , key = modelWithUpdatedSetup.key
                                                    , currentUser = settingsUser
                                                    , planType =
                                                        modelWithUpdatedSetup.currentUser
                                                            |> Maybe.map .subscriptionTier
                                                            |> Maybe.withDefault ""
                                                    }
                                        in
                                        ( { modelWithUpdatedSetup | page = SettingsPage settingsModel }
                                        , Cmd.batch
                                            [ Cmd.map SettingsMsg settingsCmd
                                            , authCmd
                                            ]
                                        )

                                    AdminRoute AgentsRoute ->
                                        let
                                            -- Convert Main.elm User to AddAgent.elm CurrentUser format
                                            addAgentUser =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map
                                                        (\user ->
                                                            { id = user.id
                                                            , email = user.email
                                                            , firstName = user.firstName
                                                            , lastName = user.lastName
                                                            , isAdmin = user.isAdmin
                                                            , isAgent = user.isAgent
                                                            , phone = ""
                                                            }
                                                        )

                                            ( addAgentModel, addAgentCmd ) =
                                                AddAgent.init
                                                    False
                                                    modelWithUpdatedSetup.key
                                                    addAgentUser
                                                    (modelWithUpdatedSetup.currentUser
                                                        |> Maybe.map .subscriptionTier
                                                        |> Maybe.withDefault ""
                                                    )
                                        in
                                        ( { modelWithUpdatedSetup | page = AddAgentsPage addAgentModel }
                                        , Cmd.batch
                                            [ Cmd.map AddAgentsMsg addAgentCmd
                                            , authCmd
                                            ]
                                        )

                                    SetupRoute (ChoosePlanRoute progress) ->
                                        let
                                            orgSlug =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map .organizationSlug
                                                    |> Maybe.withDefault ""

                                            session =
                                                extractSession modelWithUpdatedSetup.session

                                            ( choosePlanModel, choosePlanCmd ) =
                                                ChoosePlan.init orgSlug session modelWithUpdatedSetup.key True
                                        in
                                        ( { modelWithUpdatedSetup | page = ChoosePlanPage choosePlanModel }
                                        , Cmd.batch
                                            [ Cmd.map ChoosePlanMsg choosePlanCmd
                                            , authCmd
                                            ]
                                        )

                                    SetupRoute (SetupSettingsRoute progress) ->
                                        let
                                            -- Get plan type from progress if available, otherwise use subscription tier
                                            planType =
                                                progress
                                                    |> Maybe.andThen .plan
                                                    |> Maybe.withDefault
                                                        (modelWithUpdatedSetup.currentUser
                                                            |> Maybe.map .subscriptionTier
                                                            |> Maybe.withDefault ""
                                                        )

                                            -- Convert Main.elm User to Settings.elm CurrentUser format
                                            settingsUser =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map
                                                        (\user ->
                                                            { id = user.id
                                                            , email = user.email
                                                            , isAdmin = user.isAdmin
                                                            , isAgent = user.isAgent
                                                            , organizationSlug = user.organizationSlug
                                                            , organizationId = user.organizationId
                                                            }
                                                        )

                                            ( settingsModel, settingsCmd ) =
                                                Settings.init
                                                    { isSetup = True
                                                    , key = modelWithUpdatedSetup.key
                                                    , currentUser = settingsUser
                                                    , planType = planType
                                                    }
                                        in
                                        ( { modelWithUpdatedSetup | page = SettingsPage settingsModel }
                                        , Cmd.batch
                                            [ Cmd.map SettingsMsg settingsCmd
                                            , authCmd
                                            ]
                                        )

                                    SetupRoute (AddAgentsRoute progress) ->
                                        let
                                            -- Get plan type from progress if available, otherwise use subscription tier
                                            planType =
                                                progress
                                                    |> Maybe.andThen .plan
                                                    |> Maybe.withDefault
                                                        (modelWithUpdatedSetup.currentUser
                                                            |> Maybe.map .subscriptionTier
                                                            |> Maybe.withDefault ""
                                                        )

                                            -- Convert Main.elm User to AddAgent.elm CurrentUser format
                                            addAgentUser =
                                                modelWithUpdatedSetup.currentUser
                                                    |> Maybe.map
                                                        (\user ->
                                                            { id = user.id
                                                            , email = user.email
                                                            , firstName = user.firstName
                                                            , lastName = user.lastName
                                                            , isAdmin = user.isAdmin
                                                            , isAgent = user.isAgent
                                                            , phone = ""
                                                            }
                                                        )

                                            ( addAgentModel, addAgentCmd ) =
                                                AddAgent.init True modelWithUpdatedSetup.key addAgentUser planType
                                        in
                                        ( { modelWithUpdatedSetup | page = AddAgentsPage addAgentModel }
                                        , Cmd.batch
                                            [ Cmd.map AddAgentsMsg addAgentCmd
                                            , authCmd
                                            ]
                                        )

                                    NotFound ->
                                        ( modelWithUpdatedSetup, Cmd.none )

                                    PublicRoute (SelfOnboardingRoute orgSlug) ->
                                        let
                                            ( selfOnboardingModel, selfOnboardingCmd ) =
                                                SelfServiceOnboarding.init model.key url
                                        in
                                        ( { model | page = SelfOnboardingPage selfOnboardingModel }
                                        , Cmd.map SelfOnboardingMsg selfOnboardingCmd
                                        )

                                    PublicRoute (LandingRoute params) ->
                                        let
                                            ( landingModel, landingCmd ) =
                                                Landing.init params
                                        in
                                        ( { model | page = LandingPage landingModel }
                                        , Cmd.map LandingMsg landingCmd
                                        )

                                    PublicRoute PricingRoute ->
                                        let
                                            ( pricingModel, pricingCmd ) =
                                                Pricing.init
                                        in
                                        ( { modelWithUpdatedSetup | page = PricingPage pricingModel }
                                        , Cmd.batch
                                            [ Cmd.map PricingMsg pricingCmd
                                            , authCmd
                                            ]
                                        )

                                    PublicRoute Pricing2Route ->
                                        let
                                            ( pricing2Model, pricing2Cmd ) =
                                                Pricing2.init
                                        in
                                        ( { modelWithUpdatedSetup | page = Pricing2Page pricing2Model }
                                        , Cmd.batch
                                            [ Cmd.map Pricing2Msg pricing2Cmd
                                            , authCmd
                                            ]
                                        )

                                    ProtectedRoute StripeRoute ->
                                        let
                                            ( stripeModel, stripeCmd ) =
                                                Stripe.init modelWithUpdatedSetup.key url
                                        in
                                        ( { modelWithUpdatedSetup | page = StripePage stripeModel }
                                        , Cmd.batch
                                            [ Cmd.map StripeMsg stripeCmd
                                            , authCmd
                                            ]
                                        )

                Nothing ->
                    ( { model | page = NotFoundPage }
                    , cmd
                    )


type alias CurrentUserResponse =
    { success : Bool
    , user : Maybe User
    }


fetchCurrentUser : Cmd Msg
fetchCurrentUser =
    Http.get
        { url = "/api/me"
        , expect = Http.expectJson GotCurrentUser currentUserResponseDecoder
        }


setSession : String -> Cmd Msg
setSession email =
    Http.post
        { url = "/api/auth/set-session"
        , expect = Http.expectJson SetSessionResponse setSessionResponseDecoder
        , body = Http.jsonBody (E.object [ ( "email", E.string email ) ])
        }


type alias SetSessionResponseAlias =
    { success : Bool
    }


setSessionResponseDecoder : Decoder SetSessionResponseAlias
setSessionResponseDecoder =
    Decode.map SetSessionResponseAlias
        (Decode.field "success" Decode.bool)


fetchAccountStatus : String -> Cmd Msg
fetchAccountStatus orgSlug =
    Http.get
        { url = "/api/organizations/" ++ orgSlug ++ "/account-status"
        , expect = Http.expectJson GotAccountStatus accountStatusResponseDecoder
        }


currentUserResponseDecoder : Decoder CurrentUserResponse
currentUserResponseDecoder =
    Decode.map2 CurrentUserResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "user"
            (Decode.nullable
                (Decode.value
                    |> Decode.andThen
                        (\_ ->
                            userDecoder
                        )
                )
            )
        )



-- Wrap the user in Just since our type expects Maybe User


isBasicPlan : Model -> Bool
isBasicPlan model =
    case model.currentUser of
        Just user ->
            user.organizationSlug == "basic"

        Nothing ->
            True


finalizeOrganization : String -> Cmd Msg
finalizeOrganization orgId =
    Http.post
        { url = "/api/organizations/" ++ orgId ++ "/finalize"
        , body = Http.emptyBody
        , expect = Http.expectWhatever OrgFinalized
        }



-- Helper function to extract session string from SessionState


extractSession : SessionState -> String
extractSession sessionState =
    case sessionState of
        Verified session ->
            session

        _ ->
            ""



-- Helper function to map Document msg to Document Msg


mapDocument : (msg -> Msg) -> Browser.Document msg -> Browser.Document Msg
mapDocument toMsg document =
    { title = document.title
    , body = List.map (Html.map toMsg) document.body
    }



-- Update the isSetup flag based on the current URL and route


updateIsSetup : Model -> Route -> Model
updateIsSetup model route =
    let
        -- Determine if we're in setup mode based on the route
        newIsSetup =
            case route of
                SetupRoute _ ->
                    True

                _ ->
                    -- For non-setup routes, only keep isSetup = True if we're in the middle
                    -- of setup flow (haven't completed it yet)
                    model.isSetup && (getSetupStep model /= Complete)
    in
    { model | isSetup = newIsSetup }



-- Add a new function to force update public routes


updatePageForcePublic : Url -> ( Model, Cmd Msg ) -> ( Model, Cmd Msg )
updatePageForcePublic url ( model, cmd ) =
    case Parser.parse routeParser url of
        Just route ->
            case route of
                PublicRoute HomeRoute ->
                    let
                        ( homeModel, homeCmd ) =
                            Home.init model.key
                    in
                    ( { model | page = HomePage homeModel }
                    , Cmd.map HomeMsg homeCmd
                    )

                PublicRoute WaitlistRoute ->
                    let
                        ( waitlistModel, waitlistCmd ) =
                            Waitlist.init
                    in
                    ( { model | page = WaitlistPage waitlistModel }
                    , Cmd.map WaitlistMsg waitlistCmd
                    )

                PublicRoute LoginRoute ->
                    let
                        ( loginModel, loginCmd ) =
                            Login.init model.key False url
                    in
                    ( { model | page = LoginPage loginModel }
                    , Cmd.map LoginMsg loginCmd
                    )

                PublicRoute SignupRoute ->
                    let
                        ( signupModel, signupCmd ) =
                            Signup.init model.key
                    in
                    ( { model | page = Signup signupModel }
                    , Cmd.map SignupMsg signupCmd
                    )

                PublicRoute OnboardingRoute ->
                    let
                        -- Extract the query parameters from the URL
                        queryParams =
                            url.query
                                |> Maybe.map (\q -> String.split "&" q)
                                |> Maybe.withDefault []
                                |> List.filterMap
                                    (\param ->
                                        case String.split "=" param of
                                            key :: value :: [] ->
                                                Just ( key, value )

                                            _ ->
                                                Nothing
                                    )

                        -- Initialize the new onboarding module with query params
                        ( onboardingModel, onboardingCmd ) =
                            Onboarding.init model.key url
                    in
                    ( { model | page = OnboardingPage onboardingModel }
                    , Cmd.map OnboardingMsg onboardingCmd
                    )

                PublicRoute (VerifyRoute params) ->
                    let
                        verifyUrl =
                            case params of
                                VerifyParams orgSlug token ->
                                    "/api/auth/verify/" ++ orgSlug ++ "/" ++ token
                    in
                    ( model
                    , Http.get
                        { url = verifyUrl
                        , expect = Http.expectJson GotVerification verificationDecoder
                        }
                    )

                PublicRoute (CompareRoute params) ->
                    case params.quoteId of
                        Just quoteId ->
                            let
                                ( compareModel, compareCmd ) =
                                    Compare.init model.key (Just params)
                            in
                            ( { model | page = ComparePage compareModel }
                            , Cmd.map CompareMsg compareCmd
                            )

                        Nothing ->
                            if isValidOrgId params.orgId then
                                let
                                    ( compareModel, compareCmd ) =
                                        Compare.init model.key (Just params)
                                in
                                ( { model | page = ComparePage compareModel }
                                , Cmd.map CompareMsg compareCmd
                                )

                            else
                                ( { model | page = NotFoundPage }
                                , Nav.pushUrl model.key "/404"
                                )

                PublicRoute (QuoteRoute params) ->
                    if isValidQuoteId params.quoteId then
                        let
                            initialValues =
                                { zipCode = Nothing
                                , dateOfBirth = Nothing
                                , tobacco = Nothing
                                , gender = Nothing
                                , quoteId = params.quoteId
                                , planType = params.planType
                                , orgId = params.orgId -- Pass orgId even if it's Nothing
                                }

                            ( quoteModel, quoteCmd ) =
                                Quote.init model.key initialValues
                        in
                        ( { model | page = QuotePage quoteModel }
                        , Cmd.map QuoteMsg quoteCmd
                        )

                    else
                        ( { model | page = NotFoundPage }
                        , Nav.pushUrl model.key "/error?message=Missing%20or%20invalid%20quote%20ID"
                        )

                PublicRoute (EligibilityRoute params) ->
                    let
                        ( quoteId, _, orgIdStr ) =
                            params
                    in
                    if isValidOrgId orgIdStr then
                        let
                            ( eligibilityModel, eligibilityCmd ) =
                                Eligibility.init model.key { quoteId = quoteId, orgId = orgIdStr }
                        in
                        ( { model | page = EligibilityPage eligibilityModel }
                        , Cmd.map EligibilityMsg eligibilityCmd
                        )

                    else
                        ( { model | page = NotFoundPage }
                        , Nav.pushUrl model.key "/error?message=Missing%20or%20invalid%20organization%20ID"
                        )

                PublicRoute (ScheduleRoute params) ->
                    let
                        ( scheduleModel, scheduleCmd ) =
                            Schedule.init model.key
                                ((\( id, _, _ ) -> id) params)
                                ((\( _, status, _ ) -> status) params)
                    in
                    ( { model | page = SchedulePage scheduleModel }
                    , Cmd.map ScheduleMsg scheduleCmd
                    )

                PublicRoute ScheduleMainRoute ->
                    let
                        ( scheduleMainModel, scheduleMainCmd ) =
                            ScheduleMain.init model.key
                    in
                    ( { model | page = ScheduleMainPage scheduleMainModel }
                    , Cmd.map ScheduleMainMsg scheduleMainCmd
                    )

                PublicRoute (SelfOnboardingRoute orgSlug) ->
                    let
                        ( selfOnboardingModel, selfOnboardingCmd ) =
                            SelfServiceOnboarding.init model.key url
                    in
                    ( { model | page = SelfOnboardingPage selfOnboardingModel }
                    , Cmd.map SelfOnboardingMsg selfOnboardingCmd
                    )

                ProtectedRoute _ ->
                    updatePage url ( model, cmd )

                AdminRoute _ ->
                    updatePage url ( model, cmd )

                SetupRoute _ ->
                    updatePage url ( model, cmd )

                NotFound ->
                    ( { model | page = NotFoundPage }, cmd )

                PublicRoute (LandingRoute params) ->
                    let
                        ( landingModel, landingCmd ) =
                            Landing.init params
                    in
                    ( { model | page = LandingPage landingModel }
                    , Cmd.map LandingMsg landingCmd
                    )

                PublicRoute PricingRoute ->
                    let
                        ( pricingModel, pricingCmd ) =
                            Pricing.init
                    in
                    ( { model | page = PricingPage pricingModel }
                    , Cmd.map PricingMsg pricingCmd
                    )

                PublicRoute Pricing2Route ->
                    let
                        ( pricing2Model, pricing2Cmd ) =
                            Pricing2.init
                    in
                    ( { model | page = Pricing2Page pricing2Model }
                    , Cmd.map Pricing2Msg pricing2Cmd
                    )

        Nothing ->
            ( { model | page = NotFoundPage }
            , cmd
            )



-- Add a helper function to check if an organization ID is valid
-- It should return True only if the orgId is not empty, not "default", and is a proper string


isValidOrgId : Maybe String -> Bool
isValidOrgId maybeOrgId =
    case maybeOrgId of
        Just orgId ->
            not (String.isEmpty orgId) && orgId /= "default"

        Nothing ->
            False



-- Add a helper function to check if a quote ID is valid


isValidQuoteId : Maybe String -> Bool
isValidQuoteId maybeQuoteId =
    case maybeQuoteId of
        Just quoteId ->
            not (String.isEmpty quoteId)

        Nothing ->
            False

================
File: frontend/src/main.ts
================
import './styles.css'
import { Elm } from './Main.elm'
import * as Chartist from 'chartist';
import 'chartist/dist/index.css';
import { setupLineChartAnimations, setupBarChartAnimations, animateFunnelChart } from './chart-animations';

// Declare Stripe for TypeScript
declare const Stripe: any;
// Declare Chartist for TypeScript
// declare const Chartist: any;

// Define the Stripe Checkout custom element
customElements.define('stripe-checkout', class extends HTMLElement {
  private stripe: any;
  private checkout: any;

  constructor() {
    super();
    console.log('[Stripe] Creating new stripe-checkout element');
    this.stripe = null;
    this.checkout = null;
  }

  async connectedCallback() {
    console.log('[Stripe] Element connected to DOM');
    // Check if there's already an active instance
    if ((this.constructor as any).activeInstance) {
      console.log('[Stripe] Cleaning up previous Stripe Checkout instance');
      const prevInstance = (this.constructor as any).activeInstance;
      if (prevInstance.checkout) {
        await prevInstance.checkout.destroy();
      }
      prevInstance.remove();
    }

    // Set this as the active instance
    (this.constructor as any).activeInstance = this;
    console.log('[Stripe] Set as active checkout instance');

    // Apply a wider style to the element
    this.style.width = '100%';
    this.style.maxWidth = '800px';
    this.style.minHeight = '500px';
    
    await this.initializeStripe();
    await this.mountCheckout();
  }

  attributeChangedCallback(name: string, oldValue: string, newValue: string) {
    console.log(`[Stripe] Attribute changed: ${name} from "${oldValue}" to "${newValue}"`);
    if (this.isConnected) {
      this.mountCheckout();
    }
  }

  static get observedAttributes() {
    return ['price-id', 'metered-price-id', 'return-url', 'first-name', 'last-name', 'email'];
  }

  async initializeStripe() {
    if (!this.stripe) {
      console.log('[Stripe] Loading Stripe.js script');
      const stripeScript = document.createElement('script');
      stripeScript.src = 'https://js.stripe.com/v3/';
      document.head.appendChild(stripeScript);
      await new Promise(resolve => stripeScript.onload = resolve);
      console.log('[Stripe] Stripe.js script loaded');
      
      // Use environment variable if available, otherwise fallback to the hardcoded key
      const publishableKey = import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || 
        'pk_test_51Qyh7RCBUPXAZKNGAvsWikdxCCaV1R9Vc79IgPqCul8AJsln69ABDQZE0zzOtOlH5rqrlw2maRebndvPl8xDaIVl00Nn2OOBCX';
      
      console.log('[Stripe] Initializing Stripe with publishable key:', publishableKey.substring(0, 20) + '...');
      this.stripe = Stripe(publishableKey);
      console.log('[Stripe] Stripe initialized successfully');
    }
  }

  async mountCheckout() {
    console.log('[Stripe] Mounting checkout form');
    const priceId = this.getAttribute('price-id');
    const meteredPriceId = this.getAttribute('metered-price-id');
    const firstName = this.getAttribute('first-name');
    const lastName = this.getAttribute('last-name');
    const email = this.getAttribute('email');

    console.log('[Stripe] Checkout attributes:', { 
      priceId, 
      meteredPriceId, 
      firstName, 
      lastName, 
      email: email ? `${email.substring(0, 3)}...${email.split('@')[1] ? '@' + email.split('@')[1] : ''}` : null 
    });

    if (!priceId || !firstName || !lastName || !email) {
      console.error('[Stripe] Missing required attributes for checkout');
      this.textContent = 'Error: Missing required attributes';
      return;
    }

    try {
      console.log(`[Stripe] Creating checkout session with priceId: ${priceId}, meteredPriceId: ${meteredPriceId || 'none'}, email: ${email}`);
      
      console.log('[Stripe] Sending request to /api/create-checkout-session');
      const response = await fetch('/api/create-checkout-session', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          priceId,
          meteredPriceId,
          customerEmail: email,
          customerName: `${firstName} ${lastName}`
        }),
      });

      console.log(`[Stripe] Create checkout session response status: ${response.status}`);
      const data = await response.json();
      console.log('[Stripe] Checkout session response data:', data);
      
      if (!response.ok) {
        console.error('[Stripe] Failed to create checkout session:', data.message || 'Unknown error');
        throw new Error(data.message || 'Failed to create checkout session');
      }

      const { clientSecret } = data;
      console.log('[Stripe] Got client secret:', clientSecret ? `${clientSecret.substring(0, 10)}...` : 'null');

      // Destroy existing checkout if it exists
      if (this.checkout) {
        console.log('[Stripe] Destroying existing checkout instance');
        await this.checkout.destroy();
      }

      // Create the checkout form
      console.log('[Stripe] Initializing embedded checkout with client secret');
      this.checkout = await this.stripe.initEmbeddedCheckout({
        clientSecret,
        onComplete: async () => {
          console.log('[Stripe] Checkout complete callback triggered');
          try {
            console.log('[Stripe] Checkout complete! Fetching session data with clientSecret:', clientSecret.substring(0, 10) + '...');
            
            // Extract the session ID from the client secret (format: cs_<id>_secret_<secret>)
            const sessionId = clientSecret.split('_secret_')[0];
            console.log('[Stripe] Extracted session ID:', sessionId);
            
            // Poll for session status to ensure payment is complete
            console.log('[Stripe] Starting to poll for session status');
            this.pollSessionStatus(sessionId, email, firstName, lastName, clientSecret);
            
          } catch (error) {
            console.error('[Stripe] Error handling checkout completion:', error);
            
            const errorData = {
              success: false,
              message: error instanceof Error ? error.message : 'Payment completion failed',
            };

            console.log('[Stripe] Sending error data to Elm:', errorData);

            // Find the Elm app instance
            const elmApp = (window as any).elmApp;
            if (elmApp && elmApp.ports && elmApp.ports.checkoutError) {
              console.log('[Stripe] Sending checkout error to Elm via port');
              elmApp.ports.checkoutError.send(errorData);
            } else {
              // Fall back to event dispatching
              console.log('[Stripe] Elm app or port not found for error, dispatching event instead');
              const event = new CustomEvent('checkout-error', {
                detail: { error: errorData }
              });
              document.dispatchEvent(event);
            }
          }
        }
      });

      // Mount the checkout form to the element
      console.log('[Stripe] Mounting checkout to DOM element');
      await this.checkout.mount(this);
      console.log('[Stripe] Checkout mounted successfully');

    } catch (error) {
      console.error('[Stripe] Error mounting checkout:', error);
      this.textContent = `Error: ${error instanceof Error ? error.message : 'Failed to load payment form'}`;
    }
  }

  // Poll for session status to confirm payment completion
  async pollSessionStatus(sessionId: string, email: string, firstName: string, lastName: string, clientSecret: string, attempts = 0) {
    if (attempts > 5) {
      console.error('[Stripe] Max polling attempts reached for session:', sessionId);
      
      const errorData = {
        success: false,
        message: 'Timeout waiting for payment confirmation',
      };
      
      // Find the Elm app instance
      const elmApp = (window as any).elmApp;
      if (elmApp && elmApp.ports && elmApp.ports.checkoutError) {
        console.log('[Stripe] Sending checkout timeout error to Elm via port');
        elmApp.ports.checkoutError.send(errorData);
      }
      
      return;
    }
    
    try {
      console.log(`[Stripe] Polling attempt ${attempts + 1} for session status: ${sessionId}`);
      
      // Check the status of the session
      const response = await fetch(`/api/session-status?session_id=${sessionId}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (!response.ok) {
        console.error(`[Stripe] Error checking session status: ${response.status}`);
        setTimeout(() => this.pollSessionStatus(sessionId, email, firstName, lastName, clientSecret, attempts + 1), 2000);
        return;
      }
      
      const sessionData = await response.json();
      console.log('[Stripe] Session status response:', sessionData);
      
      if (sessionData.status === 'complete') {
        console.log('[Stripe] Session is complete, fetching detailed session data');
        
        // Get checkout session data which includes customer and subscription IDs
        const sessionDetailResponse = await fetch(`/api/checkout-session?clientSecret=${encodeURIComponent(sessionId + '_secret_' + clientSecret.split('_secret_')[1])}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        
        if (!sessionDetailResponse.ok) {
          console.error(`[Stripe] Error getting session details: ${sessionDetailResponse.status}`);
          setTimeout(() => this.pollSessionStatus(sessionId, email, firstName, lastName, clientSecret, attempts + 1), 2000);
          return;
        }
        
        const sessionDetailData = await sessionDetailResponse.json();
        console.log('[Stripe] Session details retrieved:', sessionDetailData);
        
        // Prepare the payment completion data
        const paymentData = {
          email,
          firstName,
          lastName,
          stripeCustomerId: sessionDetailData.customer,
          stripeSubscriptionId: sessionDetailData.subscription,
          stripeUsageItemId: sessionDetailData.subscription_item
        };
        
        console.log('[Stripe] Sending payment completion data:', JSON.stringify(paymentData));
        
        // Send data to payment-complete endpoint
        const paymentResponse = await fetch('/api/stripe/payment-complete', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(paymentData)
        });
        
        if (!paymentResponse.ok) {
          console.error(`[Stripe] Error completing payment: ${paymentResponse.status}`);
          const errorText = await paymentResponse.text();
          console.error('[Stripe] Payment completion error details:', errorText);
          
          const errorData = {
            success: false,
            message: `Payment processing error: ${paymentResponse.status}`,
          };
          
          // Send to Elm
          const elmApp = (window as any).elmApp;
          if (elmApp && elmApp.ports && elmApp.ports.checkoutError) {
            elmApp.ports.checkoutError.send(errorData);
          }
          
          return;
        }
        
        const paymentResult = await paymentResponse.json();
        console.log('[Stripe] Payment completion result:', paymentResult);
        
        // Send success to Elm
        const paymentStatus = {
          success: paymentResult.success,
          message: paymentResult.success ? 'Payment completed successfully' : 'Payment processing failed',
          paymentCompleted: paymentResult.success
        };
        
        const elmApp = (window as any).elmApp;
        if (elmApp && elmApp.ports && elmApp.ports.paymentCompleted) {
          console.log('[Stripe] Sending payment completion status to Elm via port:', paymentStatus);
          elmApp.ports.paymentCompleted.send(paymentStatus);
        } else {
          console.log('[Stripe] Elm app or port not found, dispatching event instead');
          const event = new CustomEvent('payment-completed', {
            detail: { status: paymentStatus }
          });
          document.dispatchEvent(event);
        }
        
      } else if (sessionData.status === 'open') {
        // Session still in progress, poll again
        console.log('[Stripe] Session still open, polling again in 2 seconds');
        setTimeout(() => this.pollSessionStatus(sessionId, email, firstName, lastName, clientSecret, attempts + 1), 2000);
      } else {
        // Other status (e.g., 'expired')
        console.log(`[Stripe] Session has status: ${sessionData.status}, stopping polling`);
        
        const errorData = {
          success: false,
          message: `Payment session ${sessionData.status}`,
        };
        
        // Send to Elm
        const elmApp = (window as any).elmApp;
        if (elmApp && elmApp.ports && elmApp.ports.checkoutError) {
          elmApp.ports.checkoutError.send(errorData);
        }
      }
      
    } catch (error) {
      console.error('[Stripe] Error polling session status:', error);
      setTimeout(() => this.pollSessionStatus(sessionId, email, firstName, lastName, clientSecret, attempts + 1), 2000);
    }
  }

  async createCheckoutSession(priceId: string, meteredPriceId: string | null, email?: string, name?: string) {
    try {
      console.log(`[Stripe] Creating checkout session for base price: ${priceId}, metered price: ${meteredPriceId}, email: ${email || 'not provided'}`);
      const response = await fetch('/api/create-checkout-session', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          priceId,
          meteredPriceId,
          customerEmail: email,
          customerName: name
        })
      });
      
      console.log(`[Stripe] Create checkout session response status: ${response.status}`);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`[Stripe] Checkout session creation failed with status ${response.status}:`, errorText);
        throw new Error(`Failed to create checkout session: ${response.status} ${errorText}`);
      }
      
      const data = await response.json();
      console.log('[Stripe] Checkout session created successfully:', { success: data.success, clientSecret: data.clientSecret ? `${data.clientSecret.substring(0, 10)}...` : null });
      return data;
    } catch (error: any) {
      console.error('[Stripe] Error in createCheckoutSession:', error);
      throw error;
    }
  }

  async disconnectedCallback() {
    console.log('[Stripe] Stripe Checkout element disconnected, cleaning up...');
    if (this.checkout) {
      try {
        await this.checkout.destroy();
        this.checkout = null;
        console.log('[Stripe] Checkout instance destroyed successfully');
      } catch (error) {
        console.error('[Stripe] Error destroying checkout:', error);
      }
    }
    // Clear the active instance if this element is being removed
    if ((this.constructor as any).activeInstance === this) {
      (this.constructor as any).activeInstance = null;
      console.log('[Stripe] Cleared active instance reference');
    }
  }
});

// Define the Chartist Bar chart custom element (existing implementation)
customElements.define('chartist-bar', class extends HTMLElement {
  static get observedAttributes() { return ['data']; }
  connectedCallback() { this.renderChart(); }
  attributeChangedCallback() { this.renderChart(); }
  renderChart() {
    const dataAttr = this.getAttribute('data');
    if (!dataAttr) return;
    let chartData;
    try {
      chartData = JSON.parse(dataAttr);
    } catch (e) {
      this.textContent = 'Invalid chart data';
      return;
    }
    this.innerHTML = '';
    const chartDiv = document.createElement('div');
    chartDiv.style.height = '100%';
    chartDiv.style.width = '100%';
    this.appendChild(chartDiv);
    
    // Add custom CSS for series colors and enhanced styling
    const style = document.createElement('style');
    style.textContent = `
      .ct-series-a .ct-bar, .ct-series-a .ct-line, .ct-series-a .ct-point {
        stroke: #03045e !important;
        stroke-width: 2px;
      }
      .ct-series-b .ct-bar, .ct-series-b .ct-line, .ct-series-b .ct-point {
        stroke: #0077b6 !important;
        stroke-width: 2px;
      }
      .ct-series-c .ct-bar, .ct-series-c .ct-line, .ct-series-c .ct-point {
        stroke: #00b4d8 !important;
        stroke-width: 2px;
      }
      .ct-series-d .ct-bar, .ct-series-d .ct-line, .ct-series-d .ct-point {
        stroke: #48cae4 !important;
        stroke-width: 2px;
      }

      /* Enhanced styling for bar chart */
      .ct-bar {
        stroke-linecap: round;
      }

      /* Grid styling */
      .ct-grid {
        stroke: rgba(0,0,0,0.1) !important;
        stroke-dasharray: 2px;
      }

      /* Better label styling */
      .ct-label {
        font-size: 12px !important;
        color: #555 !important;
        fill: #555 !important;
      }
    `;
    this.appendChild(style);

    const chart = new Chartist.BarChart(chartDiv, chartData, {
      stackBars: false,
      axisY: { onlyInteger: true },
      chartPadding: {
        right: 40,
        left: 20,
        top: 20,
        bottom: 20
      },
      seriesBarDistance: 15,
      // Responsive options for bar chart
      plugins: [
        // Optional: add a tooltip plugin if desired
        // Chartist.plugins?.tooltip && Chartist.plugins.tooltip()
      ]
    });

    // Apply bar chart animations
    try {
      console.log('Setting up bar chart animations');
      setupBarChartAnimations(chart);
    } catch (e) {
      console.error('Error setting up bar chart animations:', e);
    }
  }
});

// Define the Chartist Line chart custom element (new)
customElements.define('chartist-line', class extends HTMLElement {
  static get observedAttributes() { return ['data']; }
  connectedCallback() { this.renderChart(); }
  attributeChangedCallback() { this.renderChart(); }
  renderChart() {
    const dataAttr = this.getAttribute('data');
    if (!dataAttr) return;
    let chartData;
    try {
      chartData = JSON.parse(dataAttr);
    } catch (e) {
      this.textContent = 'Invalid chart data';
      return;
    }
    this.innerHTML = '';
    const chartDiv = document.createElement('div');
    chartDiv.style.height = '100%';
    chartDiv.style.width = '100%';
    this.appendChild(chartDiv);
    
    // Add custom CSS for series colors and enhanced styling
    const style = document.createElement('style');
    style.textContent = `
      .ct-series-a .ct-bar, .ct-series-a .ct-line, .ct-series-a .ct-point {
        stroke: #03045e !important;
        stroke-width: 3px;
      }
      .ct-series-b .ct-bar, .ct-series-b .ct-line, .ct-series-b .ct-point {
        stroke: #0077b6 !important;
        stroke-width: 3px;
      }
      .ct-series-c .ct-bar, .ct-series-c .ct-line, .ct-series-c .ct-point {
        stroke: #00b4d8 !important;
        stroke-width: 3px;
      }
      .ct-series-d .ct-bar, .ct-series-d .ct-line, .ct-series-d .ct-point {
        stroke: #48cae4 !important;
        stroke-width: 3px;
      }

      /* Enhanced point styling */
      .ct-point {
        stroke-width: 8px !important;
        fill: white !important;
        stroke-linecap: round;
      }

      /* Grid styling */
      .ct-grid {
        stroke: rgba(0,0,0,0.1) !important;
        stroke-dasharray: 2px;
      }

      /* Better label styling */
      .ct-label {
        font-size: 12px !important;
        color: #555 !important;
        fill: #555 !important;
      }

      /* Area under the line */
      .ct-area {
        fill-opacity: 0.1;
      }
    `;
    this.appendChild(style);

    const chart = new Chartist.LineChart(chartDiv, chartData, {
      fullWidth: true,
      chartPadding: {
        right: 40,
        left: 20,
        top: 20,
        bottom: 20
      },
      lineSmooth: Chartist.Interpolation.cardinal({
        tension: 0.2
      }),
      axisY: {
        onlyInteger: true
      },
      showPoint: true,
      plugins: [
        // No plugins currently to avoid build error
      ]
    });

    // Apply line chart animations
    try {
      console.log('Setting up line chart animations');
      setupLineChartAnimations(chart);
    } catch (e) {
      console.error('Error setting up line chart animations:', e);
    }
  }
});

// Define the Chartist Funnel chart custom element
customElements.define('chartist-funnel', class extends HTMLElement {
  static get observedAttributes() { return ['data']; }
  connectedCallback() { this.renderChart(); }
  attributeChangedCallback() { this.renderChart(); }
  renderChart() {
    const dataAttr = this.getAttribute('data');
    if (!dataAttr) return;
    let chartData;
    try {
      chartData = JSON.parse(dataAttr);
    } catch (e) {
      this.textContent = 'Invalid chart data';
      return;
    }
    
    this.innerHTML = '';
    
    // Custom parent container for better layout control
    const chartContainer = document.createElement('div');
    chartContainer.className = 'funnel-chart-container';
    chartContainer.style.height = '100%';
    chartContainer.style.width = '100%';
    chartContainer.style.display = 'flex';
    chartContainer.style.flexDirection = 'column';
    chartContainer.style.justifyContent = 'space-between';
    this.appendChild(chartContainer);
    
    // Add custom CSS with improved styling and animations
    const style = document.createElement('style');
    style.textContent = `
      .funnel-chart-container {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        padding: 10px 20px;
        height: 100%;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        justify-content: space-around;
      }
      .funnel-bar {
        height: 35px;
        border-radius: 4px;
        margin: 10px 0;
        position: relative;
        overflow: visible;
        transition: width 0.8s cubic-bezier(0.22, 0.61, 0.36, 1), opacity 0.6s ease;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        opacity: 1;
        transform-origin: left center;
      }
      .funnel-bar-label {
        position: absolute;
        left: -140px;
        width: 130px;
        text-align: right;
        font-size: 14px;
        font-weight: 500;
        line-height: 35px;
        color: #333;
        transition: opacity 0.4s ease, transform 0.5s ease;
      }
      .funnel-bar-value {
        position: absolute;
        right: -45px;
        font-size: 14px;
        font-weight: 500;
        line-height: 35px;
        color: #666;
        transition: opacity 0.4s ease, transform 0.5s ease;
      }
      .funnel-bar-quotes-sent {
        background-color: #03045e;
        background-image: linear-gradient(to right, #03045e, #073286);
      }
      .funnel-bar-quotes-viewed {
        background-color: #0077b6;
        background-image: linear-gradient(to right, #0077b6, #0091d9);
      }
      .funnel-bar-health-completed {
        background-color: #48cae4;
        background-image: linear-gradient(to right, #48cae4, #79ddf2);
      }
    `;
    this.appendChild(style);
    
    // For a clean funnel visualization, create custom HTML bars
    if (chartData && chartData.labels && chartData.series) {
      console.log('Funnel chart data:', chartData);

      // Extract values from the chartData
      // Each series should be a single data point from the most recent data
      let values = [];

      // Try to extract values from series in the correct format
      if (Array.isArray(chartData.series)) {
        if (chartData.series.length === 1 && Array.isArray(chartData.series[0])) {
          // Format: { series: [[v1, v2, v3, v4]] }
          values = chartData.series[0].map((v: any) => parseFloat(v) || 0);
        } else if (chartData.series.length > 0 && Array.isArray(chartData.series[0]) && chartData.series[0].length === 1) {
          // Format: { series: [[v1], [v2], [v3], [v4]] }
          values = chartData.series.map((s: any[]) => parseFloat(s[0]) || 0);
        } else {
          // Format: { series: [v1, v2, v3, v4] }
          values = chartData.series.map((v: any) => parseFloat(v) || 0);
        }
      }

      // Ensure we have 4 values
      while (values.length < 4) values.push(0);
      values = values.slice(0, 4);

      console.log('Funnel values:', values);

      // Find the max value for scaling
      // Use 2x the Quotes Sent value as the maximum scale to make the drop-off less steep
      const quotesSentValue = values[0] || 1;
      const maxValue = Math.max(quotesSentValue * 2, 1); // 2x the Quotes Sent value, with minimum of 1

      // Define custom bar data with actual values - in reverse order for proper funnel flow
      // Health Completed (smallest) at the top, Quotes Sent (largest) at the bottom
      const barData = [
        { label: 'Health Completed', class: 'funnel-bar-health-completed', value: values[3] || 0, display: Math.round(values[3] || 0) },
        { label: 'Quotes Viewed', class: 'funnel-bar-quotes-viewed', value: values[1] || 0, display: Math.round(values[1] || 0) },
        { label: 'Quotes Sent', class: 'funnel-bar-quotes-sent', value: values[0] || 0, display: Math.round(values[0] || 0) }
      ];

      // Container for better spacing
      const innerContainer = document.createElement('div');
      innerContainer.style.paddingLeft = '140px'; // Space for labels
      innerContainer.style.paddingRight = '60px'; // Space for values
      innerContainer.style.width = '100%';
      innerContainer.style.position = 'relative';
      chartContainer.appendChild(innerContainer);

      // Create a bar for each item
      barData.forEach(item => {
        const barContainer = document.createElement('div');
        barContainer.style.display = 'flex';
        barContainer.style.alignItems = 'center';
        barContainer.style.position = 'relative';
        barContainer.style.marginBottom = '25px';

        const barLabel = document.createElement('div');
        barLabel.className = 'funnel-bar-label';
        barLabel.textContent = item.label;
        barLabel.style.opacity = '0'; // Hide initially for animation
        barLabel.style.transform = 'translateY(10px)'; // Position for animation
        barContainer.appendChild(barLabel);

        const bar = document.createElement('div');
        bar.className = `funnel-bar ${item.class}`;

        // Scale the width based on value (relative to max value)
        const percentage = Math.max(5, (item.value / maxValue) * 100);
        const percentageStr = `${percentage}%`;

        // Store the original width for animation purposes, but start with 0 width for animation
        bar.setAttribute('data-original-width', percentageStr);
        bar.style.width = '0%';  // Start with width 0 for animation
        bar.style.opacity = '0'; // Start hidden for smooth animation

        // Add the value as text inside the bar if it's large enough
        if (percentage > 15) {
          bar.style.color = 'white';
          bar.style.paddingLeft = '12px';
          bar.style.display = 'flex';
          bar.style.alignItems = 'center';
          bar.textContent = item.display.toString();
        }

        // Add a separate value label outside the bar
        const valueLabel = document.createElement('div');
        valueLabel.className = 'funnel-bar-value';
        valueLabel.textContent = item.display.toString();
        valueLabel.style.opacity = '0'; // Hide initially for animation
        valueLabel.style.transform = 'translateY(10px)'; // Position for animation
        barContainer.appendChild(valueLabel);

        barContainer.appendChild(bar);
        innerContainer.appendChild(barContainer);
      });

      // Apply animation to the funnel chart after rendering
      // Use a small timeout to ensure DOM is fully ready
      setTimeout(() => {
        animateFunnelChart(innerContainer);
      }, 50);
    }
  }
});

const root = document.querySelector('#app');
if (!root) {
  console.error('Could not find root element');
  throw new Error('Could not find root element');
}

// Initialize Elm app
try {
  console.log('Initializing Elm application...');
  
  if (!Elm) {
    throw new Error('Elm object is not defined');
  }
  
  if (!Elm.Main) {
    throw new Error('Elm.Main is not defined. Make sure the Elm application is correctly compiled.');
  }
  
  if (typeof Elm.Main.init !== 'function') {
    throw new Error('Elm.Main.init is not a function. The Elm application might not be correctly compiled.');
  }
  
  console.log('Elm available:', !!Elm);
  console.log('Elm.Main available:', !!Elm.Main);
  console.log('Elm.Main.init available:', !!(Elm.Main && typeof Elm.Main.init === 'function'));
  
  const app = Elm.Main.init({
    node: root  
  });
  
  (window as any).elmApp = app;
  (window as any).elmDebug = Elm;
  
  // Setup IntersectionObserver for phone section
  if (app.ports && app.ports.viewingPhone) {
    setTimeout(() => {
      const phoneSection = document.getElementById('phone-experience-section')
      
      if (phoneSection) {
        console.log('Found phone section, setting up IntersectionObserver')
        
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              console.log('Phone section is now visible')
              app.ports.viewingPhone.send(true)
            } else {
              console.log('Phone section is no longer visible')
              app.ports.viewingPhone.send(false)
            }
          })
        }, {
          threshold: 0.2
        })
        
        observer.observe(phoneSection)
      } else {
        console.warn('Could not find phone section for carousel')
      }
    }, 1000)
  }

  // Get org slug
  if (app.ports && app.ports.getOrgSlug) {
    app.ports.getOrgSlug.subscribe(() => {
      app.ports.receiveOrgSlug.send("")
    })
  }
    
  // Copy to clipboard
  if (app.ports && app.ports.copyToClipboard) {
    app.ports.copyToClipboard.subscribe((text: string) => {
      console.log('Copying to clipboard:', text.substring(0, 20) + '...')
      try {
        navigator.clipboard.writeText(text)
          .then(() => {
            console.log('Text copied to clipboard')
            if (app.ports.onCopyResult) {
              app.ports.onCopyResult.send(true)
            }
          })
          .catch((error) => {
            console.error('Failed to copy text to clipboard:', error)
            if (app.ports.onCopyResult) {
              app.ports.onCopyResult.send(false)
            }
          })
      } catch (error) {
        console.error('Clipboard API not available:', error)
        if (app.ports.onCopyResult) {
          app.ports.onCopyResult.send(false)
        }
      }
    })
  }

  // Listen for payment completion from stripe-checkout
  document.addEventListener('payment-completed', (e: any) => {
    if (app.ports && app.ports.paymentCompleted) {
      console.log('Sending payment completion status to Elm via port:', e.detail.status);
      app.ports.paymentCompleted.send(e.detail.status);
    }
  });

} catch (error) {
  console.error('Error initializing Elm application:', error);
  
  if (root) {
    root.innerHTML = `
      <div style="max-width: 800px; margin: 50px auto; padding: 20px; font-family: sans-serif; background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 5px;">
        <h1 style="color: #721c24;">Elm Initialization Error</h1>
        <p style="margin-bottom: 20px; font-size: 16px;">There was a problem initializing the application:</p>
        <pre style="background: #f8f9fa; padding: 15px; border-radius: 5px; overflow: auto; max-height: 300px;">${error}</pre>
        <p style="margin-top: 20px; font-size: 14px;">Try refreshing the page or clearing your browser cache.</p>
        <button onclick="window.location.reload()" style="padding: 10px 20px; background: #dc3545; color: white; border: none; border-radius: 5px; cursor: pointer; margin-top: 10px;">Refresh Page</button>
      </div>
    `;
  }
}

================
File: frontend/src/MyIcon.elm
================
module MyIcon exposing (..)

import Svg exposing (Svg, rect, svg)
import Svg.Attributes exposing (..)


zapOff : Int -> String -> Svg msg
zapOff size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M10.513 4.856 13.12 2.17a.5.5 0 0 1 .86.46l-1.377 4.317" ] []
        , Svg.path [ d "M15.656 10H20a1 1 0 0 1 .78 1.63l-1.72 1.773" ] []
        , Svg.path [ d "M16.273 16.273 10.88 21.83a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14H4a1 1 0 0 1-.78-1.63l4.507-4.643" ] []
        , Svg.path [ d "m2 2 20 20" ] []
        ]


zap : Int -> String -> Svg msg
zap size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z" ] []
        ]


heartPulse size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" ] []
        , Svg.path [ d "M3.22 12H9.5l.5-1 2 4.5 2-7 1.5 3.5h5.27" ] []
        ]


stethoscope : Int -> String -> Svg msg
stethoscope size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M11 2v2" ] []
        , Svg.path [ d "M5 2v2" ] []
        , Svg.path [ d "M5 3H4a2 2 0 0 0-2 2v4a6 6 0 0 0 12 0V5a2 2 0 0 0-2-2h-1" ] []
        , Svg.path [ d "M8 15a6 6 0 0 0 12 0v-3" ] []
        , Svg.circle [ cx "20", cy "10", r "2" ] []
        ]


syringe : Int -> String -> Svg msg
syringe size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "m18 2 4 4" ] []
        , Svg.path [ d "m17 7 3-3" ] []
        , Svg.path [ d "M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5" ] []
        , Svg.path [ d "m9 11 4 4" ] []
        , Svg.path [ d "m5 19-3 3" ] []
        , Svg.path [ d "m14 4 6 6" ] []
        ]


lungs : Int -> String -> Svg msg
lungs size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M10 10v.2A3 3 0 0 1 8.9 16H5a3 3 0 0 1-1-5.8V10a3 3 0 0 1 6 0Z" ] []
        , Svg.path [ d "M7 16v6" ] []
        , Svg.path [ d "M13 19v3" ] []
        , Svg.path [ d "M12 19h8.3a1 1 0 0 0 .7-1.7L18 14h.3a1 1 0 0 0 .7-1.7L16 9h.2a1 1 0 0 0 .8-1.7L13 3l-1.4 1.5" ] []
        ]


droplets : Int -> String -> Svg msg
droplets size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M7 16.3c2.2 0 4-1.83 4-4.05 0-1.16-.57-2.26-1.71-3.19S7.29 6.75 7 5.3c-.29 1.45-1.14 2.84-2.29 3.76S3 11.1 3 12.25c0 2.22 1.8 4.05 4 4.05z" ] []
        , Svg.path [ d "M12.56 6.6A10.97 10.97 0 0 0 14 3.02c.5 2.5 2 4.9 4 6.5s3 3.5 3 5.5a6.98 6.98 0 0 1-11.91 4.97" ] []
        ]


brain : Int -> String -> Svg msg
brain size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z" ] []
        , Svg.path [ d "M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z" ] []
        , Svg.path [ d "M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4" ] []
        , Svg.path [ d "M17.599 6.5a3 3 0 0 0 .399-1.375" ] []
        , Svg.path [ d "M6.003 5.125A3 3 0 0 0 6.401 6.5" ] []
        , Svg.path [ d "M3.477 10.896a4 4 0 0 1 .585-.396" ] []
        , Svg.path [ d "M19.938 10.5a4 4 0 0 1 .585.396" ] []
        , Svg.path [ d "M6 18a4 4 0 0 1-1.967-.516" ] []
        , Svg.path [ d "M19.967 17.484A4 4 0 0 1 18 18" ] []
        ]


building2 : Int -> String -> Svg msg
building2 size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z" ] []
        , Svg.path [ d "M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2" ] []
        , Svg.path [ d "M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2" ] []
        , Svg.path [ d "M10 6h4" ] []
        , Svg.path [ d "M10 10h4" ] []
        , Svg.path [ d "M10 14h4" ] []
        , Svg.path [ d "M10 18h4" ] []
        ]


activity : Int -> String -> Svg msg
activity size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2" ] []
        ]


heartScan : Int -> String -> Svg msg
heartScan size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M11.246 16.657a1 1 0 0 0 1.508 0l3.57-4.101A2.75 2.75 0 1 0 12 9.168a2.75 2.75 0 1 0-4.324 3.388z" ] []
        , Svg.path [ d "M17 3h2a2 2 0 0 1 2 2v2" ] []
        , Svg.path [ d "M21 17v2a2 2 0 0 1-2 2h-2" ] []
        , Svg.path [ d "M3 7V5a2 2 0 0 1 2-2h2" ] []
        , Svg.path [ d "M7 21H5a2 2 0 0 1-2-2v-2" ] []
        ]


hospital : Int -> String -> Svg msg
hospital size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M12 6v4" ] []
        , Svg.path [ d "M14 14h-4" ] []
        , Svg.path [ d "M14 18h-4" ] []
        , Svg.path [ d "M14 8h-4" ] []
        , Svg.path [ d "M18 12h2a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-9a2 2 0 0 1 2-2h2" ] []
        , Svg.path [ d "M18 22V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v18" ] []
        ]


squareActivity : Int -> String -> Svg msg
squareActivity size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ rect [ width "18", height "18", x "3", y "3", rx "2" ] []
        , Svg.path [ d "M17 12h-2l-2 5-2-10-2 5H7" ] []
        ]


clipboardPlus : Int -> String -> Svg msg
clipboardPlus size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.rect [ width "8", height "4", x "8", y "2", rx "1", ry "1" ] []
        , Svg.path [ d "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" ] []
        , Svg.path [ d "M9 14h6" ] []
        , Svg.path [ d "M12 17v-6" ] []
        ]


clipboardList : Int -> String -> Svg msg
clipboardList size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.rect [ width "8", height "4", x "8", y "2", rx "1", ry "1" ] []
        , Svg.path [ d "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" ] []
        , Svg.path [ d "M12 11h4" ] []
        , Svg.path [ d "M12 16h4" ] []
        , Svg.path [ d "M8 11h.01" ] []
        , Svg.path [ d "M8 16h.01" ] []
        ]


users : Int -> String -> Svg msg
users size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" ] []
        , Svg.circle [ cx "9", cy "7", r "4" ] []
        , Svg.path [ d "M22 21v-2a4 4 0 0 0-3-3.87" ] []
        , Svg.path [ d "M16 3.13a4 4 0 0 1 0 7.75" ] []
        ]


brand : Int -> String -> Svg msg
brand size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.rect [ width "3", height "8", x "13", y "2", rx "1.5" ] []
        , Svg.path [ d "M19 8.5V10h1.5A1.5 1.5 0 1 0 19 8.5" ] []
        , Svg.rect [ width "3", height "8", x "8", y "14", rx "1.5" ] []
        , Svg.path [ d "M5 15.5V14H3.5A1.5 1.5 0 1 0 5 15.5" ] []
        , Svg.rect [ width "8", height "3", x "14", y "13", rx "1.5" ] []
        , Svg.path [ d "M15.5 19H14v1.5a1.5 1.5 0 1 0 1.5-1.5" ] []
        , Svg.rect [ width "8", height "3", x "2", y "8", rx "1.5" ] []
        , Svg.path [ d "M8.5 5H10V3.5A1.5 1.5 0 1 0 8.5 5" ] []
        ]


undo2 size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M9 14 4 9l5-5" ] []
        , Svg.path [ d "M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5a5.5 5.5 0 0 1-5.5 5.5H11" ] []
        ]


calendarDays : Int -> String -> Svg msg
calendarDays size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M8 2v4" ] []
        , Svg.path [ d "M16 2v4" ] []
        , Svg.rect [ width "18", height "18", x "3", y "4", rx "2" ] []
        , Svg.path [ d "M3 10h18" ] []
        , Svg.path [ d "M8 14h.01" ] []
        , Svg.path [ d "M12 14h.01" ] []
        , Svg.path [ d "M16 14h.01" ] []
        , Svg.path [ d "M8 18h.01" ] []
        , Svg.path [ d "M12 18h.01" ] []
        , Svg.path [ d "M16 18h.01" ] []
        ]


phoneOutgoing : Int -> String -> Svg msg
phoneOutgoing size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.polyline [ points "22 8 22 2 16 2" ] []
        , Svg.line [ x1 "16", x2 "22", y1 "8", y2 "2" ] []
        , Svg.path [ d "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" ] []
        ]


phoneIncoming : Int -> String -> Svg msg
phoneIncoming size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.polyline [ points "16 2 16 8 22 8" ] []
        , Svg.line [ x1 "22", x2 "16", y1 "2", y2 "8" ] []
        , Svg.path [ d "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" ] []
        ]


clipboardPaste : Int -> String -> Svg msg
clipboardPaste size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M15 2H9a1 1 0 0 0-1 1v2c0 .6.4 1 1 1h6c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1Z" ] []
        , Svg.path [ d "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2M16 4h2a2 2 0 0 1 2 2v2M11 14h10" ] []
        , Svg.path [ d "m17 10 4 4-4 4" ] []
        ]



-- home page


lightning : Int -> String -> Svg msg
lightning size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M13 2L4.09347 12.6879C3.74466 13.1064 3.57026 13.3157 3.56759 13.4925C3.56528 13.6461 3.63375 13.7923 3.75327 13.8889C3.89076 14 4.16319 14 4.70805 14H12L11 22L19.9066 11.3121C20.2554 10.8936 20.4298 10.6843 20.4324 10.5075C20.4348 10.3539 20.3663 10.2077 20.2468 10.1111C20.1093 10 19.8368 10 19.292 10H12L13 2Z" ] []
        ]


envelope : Int -> String -> Svg msg
envelope size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 25 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M2.33334 7L10.4983 12.7154C11.1594 13.1783 11.49 13.4097 11.8496 13.4993C12.1672 13.5785 12.4994 13.5785 12.8171 13.4993C13.1767 13.4097 13.5073 13.1783 14.1684 12.7154L22.3333 7M7.13334 20H17.5333C19.2135 20 20.0536 20 20.6953 19.673C21.2598 19.3854 21.7187 18.9265 22.0064 18.362C22.3333 17.7202 22.3333 16.8802 22.3333 15.2V8.8C22.3333 7.11984 22.3333 6.27976 22.0064 5.63803C21.7187 5.07354 21.2598 4.6146 20.6953 4.32698C20.0536 4 19.2135 4 17.5333 4H7.13334C5.45319 4 4.61311 4 3.97137 4.32698C3.40689 4.6146 2.94794 5.07354 2.66032 5.63803C2.33334 6.27976 2.33334 7.11984 2.33334 8.8V15.2C2.33334 16.8802 2.33334 17.7202 2.66032 18.362C2.94794 18.9265 3.40689 19.3854 3.97137 19.673C4.61311 20 5.45319 20 7.13334 20Z" ] []
        ]


brightArrow : Int -> String -> Svg msg
brightArrow size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 25 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M11.6666 3H8.46663C6.78647 3 5.94639 3 5.30465 3.32698C4.74017 3.6146 4.28123 4.07354 3.99361 4.63803C3.66663 5.27976 3.66663 6.11984 3.66663 7.8V16.2C3.66663 17.8802 3.66663 18.7202 3.99361 19.362C4.28123 19.9265 4.74017 20.3854 5.30465 20.673C5.94639 21 6.78647 21 8.46663 21H16.8666C18.5468 21 19.3869 21 20.0286 20.673C20.5931 20.3854 21.052 19.9265 21.3396 19.362C21.6666 18.7202 21.6666 17.8802 21.6666 16.2V13M12.6666 8H16.6666V12M16.1666 3.5V2M20.106 4.56066L21.1666 3.5M21.1769 8.5H22.6769M3.66663 13.3471C4.31857 13.4478 4.9865 13.5 5.66663 13.5C10.053 13.5 13.932 11.3276 16.2863 8" ] []
        ]


chatBubbles : Int -> String -> Svg msg
chatBubbles size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M6.09436 11.2288C6.03221 10.8282 5.99996 10.4179 5.99996 10C5.99996 5.58172 9.60525 2 14.0526 2C18.4999 2 22.1052 5.58172 22.1052 10C22.1052 10.9981 21.9213 11.9535 21.5852 12.8345C21.5154 13.0175 21.4804 13.109 21.4646 13.1804C21.4489 13.2512 21.4428 13.301 21.4411 13.3735C21.4394 13.4466 21.4493 13.5272 21.4692 13.6883L21.8717 16.9585C21.9153 17.3125 21.9371 17.4895 21.8782 17.6182C21.8266 17.731 21.735 17.8205 21.6211 17.8695C21.4911 17.9254 21.3146 17.8995 20.9617 17.8478L17.7765 17.3809C17.6101 17.3565 17.527 17.3443 17.4512 17.3448C17.3763 17.3452 17.3245 17.3507 17.2511 17.3661C17.177 17.3817 17.0823 17.4172 16.893 17.4881C16.0097 17.819 15.0524 18 14.0526 18C13.6344 18 13.2237 17.9683 12.8227 17.9073M7.63158 22C10.5965 22 13 19.5376 13 16.5C13 13.4624 10.5965 11 7.63158 11C4.66668 11 2.26316 13.4624 2.26316 16.5C2.26316 17.1106 2.36028 17.6979 2.53955 18.2467C2.61533 18.4787 2.65322 18.5947 2.66566 18.6739C2.67864 18.7567 2.68091 18.8031 2.67608 18.8867C2.67145 18.9668 2.65141 19.0573 2.61134 19.2383L2 22L4.9948 21.591C5.15827 21.5687 5.24 21.5575 5.31137 21.558C5.38652 21.5585 5.42641 21.5626 5.50011 21.5773C5.5701 21.5912 5.67416 21.6279 5.88227 21.7014C6.43059 21.8949 7.01911 22 7.63158 22Z" ] []
        ]


smilieyChat : Int -> String -> Svg msg
smilieyChat size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M8.99962 14C8.99962 14 10.3121 15.5 12.4996 15.5C14.6871 15.5 15.9996 14 15.9996 14M15.2496 9H15.2596M9.74962 9H9.75962M12.4996 20C17.194 20 20.9996 16.1944 20.9996 11.5C20.9996 6.80558 17.194 3 12.4996 3C7.8052 3 3.99962 6.80558 3.99962 11.5C3.99962 12.45 4.15547 13.3636 4.443 14.2166C4.55119 14.5376 4.60529 14.6981 4.61505 14.8214C4.62469 14.9432 4.6174 15.0286 4.58728 15.1469C4.55677 15.2668 4.48942 15.3915 4.35472 15.6408L2.71906 18.6684C2.48575 19.1002 2.36909 19.3161 2.3952 19.4828C2.41794 19.6279 2.50337 19.7557 2.6288 19.8322C2.7728 19.9201 3.01692 19.8948 3.50517 19.8444L8.62619 19.315C8.78127 19.299 8.85881 19.291 8.92949 19.2937C8.999 19.2963 9.04807 19.3029 9.11586 19.3185C9.18478 19.3344 9.27145 19.3678 9.44478 19.4345C10.3928 19.7998 11.4228 20 12.4996 20ZM15.7496 9C15.7496 9.27614 15.5258 9.5 15.2496 9.5C14.9735 9.5 14.7496 9.27614 14.7496 9C14.7496 8.72386 14.9735 8.5 15.2496 8.5C15.5258 8.5 15.7496 8.72386 15.7496 9ZM10.2496 9C10.2496 9.27614 10.0258 9.5 9.74962 9.5C9.47348 9.5 9.24962 9.27614 9.24962 9C9.24962 8.72386 9.47348 8.5 9.74962 8.5C10.0258 8.5 10.2496 8.72386 10.2496 9Z" ] []
        ]


commandKey : Int -> String -> Svg msg
commandKey size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M9 9V6C9 4.34315 7.65685 3 6 3C4.34315 3 3 4.34315 3 6C3 7.65685 4.34315 9 6 9H9ZM9 9V15M9 9H15M9 15V18C9 19.6569 7.65685 21 6 21C4.34315 21 3 19.6569 3 18C3 16.3431 4.34315 15 6 15H9ZM9 15H15M15 15H18C19.6569 15 21 16.3431 21 18C21 19.6569 19.6569 21 18 21C16.3431 21 15 19.6569 15 18V15ZM15 15V9M15 9V6C15 4.34315 16.3431 3 18 3C19.6569 3 21 4.34315 21 6C21 7.65685 19.6569 9 18 9H15Z" ] []
        ]


heartBubble : Int -> String -> Svg msg
heartBubble size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M20.9996 11.5C20.9996 16.1944 17.194 20 12.4996 20C11.4228 20 10.3928 19.7998 9.44478 19.4345C9.27145 19.3678 9.18478 19.3344 9.11586 19.3185C9.04807 19.3029 8.999 19.2963 8.92949 19.2937C8.85881 19.291 8.78127 19.299 8.62619 19.315L3.50517 19.8444C3.01692 19.8948 2.7728 19.9201 2.6288 19.8322C2.50337 19.7557 2.41794 19.6279 2.3952 19.4828C2.36909 19.3161 2.48575 19.1002 2.71906 18.6684L4.35472 15.6408C4.48942 15.3915 4.55677 15.2668 4.58728 15.1469C4.6174 15.0286 4.62469 14.9432 4.61505 14.8214C4.60529 14.6981 4.55119 14.5376 4.443 14.2166C4.15547 13.3636 3.99962 12.45 3.99962 11.5C3.99962 6.80558 7.8052 3 12.4996 3C17.194 3 20.9996 6.80558 20.9996 11.5Z" ] []
        , Svg.path [ d "M12.4965 8.94925C11.5968 7.9104 10.0965 7.63095 8.96924 8.58223C7.84196 9.5335 7.68326 11.124 8.56851 12.2491C9.11696 12.9461 10.4935 14.2191 11.4616 15.087C11.8172 15.4057 11.995 15.5651 12.2084 15.6293C12.3914 15.6844 12.6017 15.6844 12.7847 15.6293C12.9981 15.5651 13.1759 15.4057 13.5315 15.087C14.4996 14.2191 15.8761 12.9461 16.4246 12.2491C17.3098 11.124 17.1705 9.5235 16.0238 8.58223C14.8772 7.64096 13.3963 7.9104 12.4965 8.94925Z" ] []
        ]


circleMinus : Int -> String -> Svg msg
circleMinus size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M8 12H16M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z" ] []
        ]


circlePlus : Int -> String -> Svg msg
circlePlus size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M12 10V18M8 14H16M22 14C22 19.5228 17.5228 24 12 24C6.47715 24 2 19.5228 2 14C2 8.47715 6.47715 4 12 4C17.5228 4 22 8.47715 22 14Z" ] []
        ]


maxLogo : Int -> String -> Svg msg
maxLogo size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 246 34"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "M28.0608 2.05762C27.5512 1.90329 27.0107 1.82031 26.4509 1.82031H11.6131L21.1611 19.295L28.0608 2.05762Z", fill "white" ] []
        , Svg.path [ d "M5.27168 1.82713C2.33588 1.97181 0 4.3998 0 7.37378V18.0748C0.63094 18.0398 1.35488 18.0179 2.21965 18.0179C2.95641 18.0179 3.383 17.8859 3.63477 17.7535C3.86366 17.6332 4.0932 17.4384 4.3236 17.0378C4.86375 16.0985 5.27168 14.2768 5.27168 10.9835V1.82713Z", fill "white" ] []
        , Svg.path [ d "M0 23.6386V26.6258C0 29.6929 2.48443 32.1793 5.54913 32.1793H21.8764L10.8108 11.9272C10.7435 15.0062 10.3224 17.7398 9.13305 19.808C8.43859 21.0155 7.47738 22.0066 6.21494 22.6702C4.97538 23.3217 3.61007 23.5714 2.21965 23.5714C1.31899 23.5714 0.609185 23.5976 0 23.6386Z", fill "white" ] []
        , Svg.path [ d "M21.9817 32.1793H26.4509C29.5156 32.1793 32 29.6929 32 26.6258V7.37378C32 7.30239 31.9987 7.23132 31.996 7.16059L21.9817 32.1793Z", fill "white" ] []
        , Svg.path [ d "M42.24 29V9.008H48.652L53.104 22.364H53.188L57.64 9.008H64.08V29H59.376V17.296H59.236C59.068 17.968 58.844 18.808 58.48 19.816L55.288 29H51.06L47.868 19.816C47.504 18.808 47.252 17.968 47.112 17.296H46.972V29H42.24ZM75.46 29.42C70.616 29.42 66.892 25.724 66.892 21.132C66.892 16.568 70.616 12.984 75.46 12.984C80.332 12.984 84.028 16.792 84.028 21.524C84.028 21.86 84 22.448 83.972 22.756H71.932C72.184 24.352 73.668 24.94 75.516 24.94C76.832 24.94 77.924 24.632 78.428 23.596H83.72C82.712 27.068 79.52 29.42 75.46 29.42ZM72.1 19.536H78.736C78.54 18.668 77.308 17.464 75.376 17.464C73.444 17.464 72.24 18.5 72.1 19.536ZM92.6798 29.42C88.6198 29.42 85.5678 25.78 85.5678 21.216C85.5678 16.624 88.6198 12.984 92.6798 12.984C95.0598 12.984 97.1038 14.16 97.9718 15.812H98.1118V9.008H102.928V29H98.2518V26.76H98.1118C96.6838 28.832 94.7798 29.42 92.6798 29.42ZM94.0798 24.94C96.2638 24.94 97.5518 23.4 97.5518 21.216C97.5518 19.004 96.2638 17.464 94.0798 17.464C91.8678 17.464 90.6918 19.004 90.6918 21.216C90.6918 23.4 91.8678 24.94 94.0798 24.94ZM108.923 11.36C107.439 11.36 106.235 10.156 106.235 8.672C106.235 7.216 107.439 6.012 108.923 6.012C110.379 6.012 111.583 7.216 111.583 8.672C111.583 10.156 110.379 11.36 108.923 11.36ZM106.515 28.944V13.404H111.331V28.944H106.515ZM121.965 29.364C117.401 29.364 113.677 25.668 113.677 21.076C113.677 16.512 117.401 12.816 121.965 12.816C124.345 12.816 126.501 13.824 128.013 15.42L124.905 18.556C124.261 17.8 123.309 17.324 121.965 17.324C120.033 17.324 118.493 18.892 118.493 21.076C118.493 23.288 120.033 24.856 121.965 24.856C123.197 24.856 124.065 24.464 124.709 23.82L127.817 26.956C126.305 28.468 124.261 29.364 121.965 29.364ZM135.534 29.42C131.222 29.42 128.142 25.78 128.142 21.216C128.142 16.624 131.222 12.984 135.534 12.984C137.942 12.984 139.846 14.16 140.714 15.812H140.854V13.404H145.53V29H140.854V26.76H140.714C139.286 28.832 137.662 29.42 135.534 29.42ZM136.654 24.94C138.866 24.94 140.154 23.4 140.154 21.216C140.154 19.004 138.866 17.464 136.654 17.464C134.47 17.464 133.266 19.004 133.266 21.216C133.266 23.4 134.47 24.94 136.654 24.94ZM149.144 29V13.404H158.524V17.884H153.96V29H149.144ZM167.937 29.42C163.093 29.42 159.369 25.724 159.369 21.132C159.369 16.568 163.093 12.984 167.937 12.984C172.809 12.984 176.505 16.792 176.505 21.524C176.505 21.86 176.477 22.448 176.449 22.756H164.409C164.661 24.352 166.145 24.94 167.993 24.94C169.309 24.94 170.401 24.632 170.905 23.596H176.197C175.189 27.068 171.997 29.42 167.937 29.42ZM164.577 19.536H171.213C171.017 18.668 169.785 17.464 167.853 17.464C165.921 17.464 164.717 18.5 164.577 19.536ZM185.029 29V9.008H191.441L195.893 22.364H195.977L200.429 9.008H206.869V29H202.165V17.296H202.025C201.857 17.968 201.633 18.808 201.269 19.816L198.077 29H193.849L190.657 19.816C190.293 18.808 190.041 17.968 189.901 17.296H189.761V29H185.029ZM217.073 29.42C212.761 29.42 209.681 25.78 209.681 21.216C209.681 16.624 212.761 12.984 217.073 12.984C219.481 12.984 221.385 14.16 222.253 15.812H222.393V13.404H227.069V29H222.393V26.76H222.253C220.825 28.832 219.201 29.42 217.073 29.42ZM218.193 24.94C220.405 24.94 221.693 23.4 221.693 21.216C221.693 19.004 220.405 17.464 218.193 17.464C216.009 17.464 214.805 19.004 214.805 21.216C214.805 23.4 216.009 24.94 218.193 24.94ZM228.611 29L234.071 20.992L228.835 13.404H234.575L236.703 17.044L238.831 13.404H244.571L239.335 20.992L244.795 29H239.111L236.703 25.024L234.323 29H228.611Z", fill "white" ] []
        ]


chevronDown : Int -> String -> Svg msg
chevronDown size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "m6 9 6 6 6-6" ] []
        ]


chevronLeft : Int -> String -> Svg msg
chevronLeft size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "m15 18-6-6 6-6" ] []
        ]


chevronRight : Int -> String -> Svg msg
chevronRight size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.path [ d "m9 18 6-6-6-6" ] []
        ]


banknote : Int -> String -> Svg msg
banknote size color =
    svg
        [ width (String.fromInt size)
        , height (String.fromInt size)
        , viewBox "0 0 24 24"
        , fill "none"
        , stroke color
        , strokeWidth "2"
        , strokeLinecap "round"
        , strokeLinejoin "round"
        ]
        [ Svg.rect [ x "2", y "6", width "20", height "12", rx "2" ] []
        , Svg.circle [ cx "12", cy "12", r "2" ] []
        , Svg.path [ d "M6 12h.01M18 12h.01" ] []
        ]

================
File: frontend/src/Onboarding.elm
================
port module Onboarding exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import CarrierNaic exposing (Carrier(..), allCarriers, carrierToString)
import Dict exposing (Dict)
import File exposing (File)
import File.Select as Select
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import MyIcon
import Task
import Url exposing (Url)
import Url.Builder exposing (absolute, int, string)
import Url.Parser.Query as Query
import Utils.UrlStuff exposing (getQueryParams)



-- PORTS


port paymentCompleted : (PaymentResponse -> msg) -> Sub msg


port checkoutCompleted : (CheckoutData -> msg) -> Sub msg


port checkoutError : (ErrorData -> msg) -> Sub msg



-- MODEL


showStripe : Bool
showStripe =
    False


type alias PaymentResponse =
    { success : Bool
    , message : String
    , paymentCompleted : Bool
    }


type alias CheckoutData =
    { email : String
    , firstName : String
    , lastName : String
    , stripeCustomerId : String
    , stripeSubscriptionId : String
    , stripeUsageItemId : String
    }


type alias ErrorData =
    { success : Bool
    , message : String
    }


type alias Model =
    { user : User
    , frame : Int
    , companyName : String
    , companyPhone : String
    , companyWebsite : String
    , primaryColor : String
    , secondaryColor : String
    , logo : Maybe String
    , uploadingLogo : Bool
    , hover : Bool
    , key : Nav.Key
    , selectedCarriers : List Carrier
    , useSmartSend : Bool
    , agents : List Agent
    , showAgentForm : Bool
    , newAgentFirstName : String
    , newAgentLastName : String
    , newAgentEmail : String
    , newAgentPhone : String
    , newAgentIsAdmin : Bool
    , loadingResumeData : Bool
    , paymentStatus : PaymentStatus
    }


type PaymentStatus
    = ReadyToComplete
    | Continuing
    | Error ApiError
    | Loading
    | Success SubscriptionStatus
    | PaymentProcessing
    | PaymentCompleted


type ApiError
    = NetworkError
    | BadStatus Int String
    | BadPayload String
    | BadUrl String
    | Timeout


type alias SubscriptionStatus =
    { isActive : Bool
    , tier : String
    , currentPeriodEnd : Maybe Int
    , cancelAtPeriodEnd : Maybe Bool
    , paymentStatus : String
    }


type alias Agent =
    { firstName : String
    , lastName : String
    , email : String
    , phone : String
    , isAdmin : Bool
    }


maxFrame : Int
maxFrame =
    4


dummyUser : User
dummyUser =
    { firstName = "John"
    , lastName = "Doe"
    , email = "john.doe@example.com"
    , phone = ""
    }


type alias User =
    { firstName : String
    , lastName : String
    , email : String
    , phone : String
    }


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    let
        -- Filter out non-digit characters
        digitsOnly =
            String.filter Char.isDigit phone

        -- Limit to 10 digits
        limitedDigits =
            String.left 10 digitsOnly

        -- Format the phone number as needed
        formattedPhone =
            if String.length limitedDigits == 10 then
                "(" ++ String.left 3 limitedDigits ++ ") " ++ String.slice 3 6 limitedDigits ++ "-" ++ String.slice 6 10 limitedDigits

            else if String.length limitedDigits >= 7 then
                "(" ++ String.left 3 limitedDigits ++ ") " ++ String.slice 3 6 limitedDigits ++ "-" ++ String.slice 6 10 limitedDigits

            else if String.length limitedDigits >= 4 then
                "(" ++ String.left 3 limitedDigits ++ ") " ++ String.slice 3 10 limitedDigits

            else if String.length limitedDigits > 0 then
                "(" ++ limitedDigits

            else
                ""
    in
    formattedPhone


init : Nav.Key -> Url -> ( Model, Cmd Msg )
init key url =
    let
        queryParams =
            url |> getQueryParams

        firstName =
            Dict.get "firstName" queryParams

        lastName =
            Dict.get "lastName" queryParams

        email =
            Dict.get "email" queryParams

        phone =
            Dict.get "phone" queryParams
                |> Maybe.andThen Url.percentDecode
                |> Maybe.withDefault ""

        organizationName =
            Dict.get "organizationName" queryParams
                |> Maybe.andThen Url.percentDecode
                |> Maybe.withDefault ""

        frame =
            case Dict.get "frame" queryParams of
                Just f ->
                    case String.toInt f of
                        Just i ->
                            Basics.clamp 1 maxFrame i

                        Nothing ->
                            1

                Nothing ->
                    1

        maybeUser =
            case ( firstName, lastName, email ) of
                ( Just f, Just l, Just e ) ->
                    Just { firstName = f, lastName = l, email = e, phone = phone |> formatPhoneNumber }

                _ ->
                    Nothing

        currentUser =
            maybeUser |> Maybe.withDefault dummyUser

        initialAgents =
            [ { firstName = currentUser.firstName
              , lastName = currentUser.lastName
              , email = currentUser.email
              , phone = currentUser.phone
              , isAdmin = True -- Make the initial user an admin by default
              }
            ]

        initialModel =
            { user = currentUser
            , frame = frame
            , companyName = organizationName
            , companyPhone = currentUser.phone
            , companyWebsite = ""
            , primaryColor = "#6B46C1"
            , secondaryColor = "#9F7AEA"
            , logo = Nothing
            , uploadingLogo = False
            , hover = False
            , key = key
            , selectedCarriers = []
            , useSmartSend = True
            , agents = initialAgents
            , showAgentForm = False
            , newAgentFirstName = ""
            , newAgentLastName = ""
            , newAgentEmail = ""
            , newAgentPhone = ""
            , newAgentIsAdmin = True
            , loadingResumeData = False
            , paymentStatus = Loading
            }

        -- Check if this is a direct page load with frame > 1
        isDirectLoadWithHigherFrame =
            frame > 1 && (url.path == "/onboarding")

        redirectCommand =
            case maybeUser of
                Just user ->
                    fetchResumeData user.email

                Nothing ->
                    Nav.pushUrl key "/signup"
    in
    ( { initialModel | loadingResumeData = maybeUser /= Nothing }, redirectCommand )



-- UPDATE


type Msg
    = NoOp
    | CompanyNameChanged String
    | PhoneChanged String
    | WebsiteChanged String
    | PrimaryColorChanged String
    | SecondaryColorChanged String
    | UploadLogo
    | DragEnter
    | DragLeave
    | GotFiles File (List File)
    | GotLogo File
    | GotLogoUrl String
    | ContinueClicked
    | BackClicked
    | ToggleCarrier Carrier
    | ToggleSmartSend
    | ToggleAllCarriers
    | ShowAgentForm
    | HideAgentForm
    | AgentFirstNameChanged String
    | AgentLastNameChanged String
    | AgentEmailChanged String
    | AgentPhoneChanged String
    | AgentIsAdminToggled Bool
    | AddAgent
    | CompanyDetailsSaved (Result Http.Error SaveResponse)
    | LicensingSaved (Result Http.Error SaveResponse)
    | AgentsSaved (Result Http.Error SaveResponse)
    | GotResumeData (Result Http.Error ResumeData)
    | OnboardingLoginCompleted (Result Http.Error OnboardingLoginResponse)
    | PaymentSaved (Result Http.Error SaveResponse)
    | GotSubscriptionStatus (Result Http.Error SubscriptionStatus)
    | PaymentProcessed (Result Http.Error PaymentResponse)
    | PaymentCompletedFromPort PaymentResponse
    | RefreshPage
    | CheckoutCompletedFromPort CheckoutData
    | CheckoutErrorFromPort ErrorData
    | ProcessCheckoutData CheckoutData


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )

        CompanyNameChanged name ->
            ( { model | companyName = name }, Cmd.none )

        PhoneChanged phone ->
            ( { model | companyPhone = formatPhoneNumber phone }, Cmd.none )

        WebsiteChanged website ->
            ( { model | companyWebsite = website }, Cmd.none )

        PrimaryColorChanged color ->
            ( { model | primaryColor = color }, Cmd.none )

        SecondaryColorChanged color ->
            ( { model | secondaryColor = color }, Cmd.none )

        UploadLogo ->
            ( model, Select.file [ "image/png" ] GotLogo )

        DragEnter ->
            ( { model | hover = True }, Cmd.none )

        DragLeave ->
            ( { model | hover = False }, Cmd.none )

        GotFiles file files ->
            ( { model | hover = False, uploadingLogo = True }, Task.perform GotLogoUrl (File.toUrl file) )

        GotLogo file ->
            ( { model | uploadingLogo = True }, Task.perform GotLogoUrl (File.toUrl file) )

        GotLogoUrl url ->
            ( { model | logo = Just url, uploadingLogo = False }, Cmd.none )

        ContinueClicked ->
            case model.frame of
                4 ->
                    case model.paymentStatus of
                        Success status ->
                            if status.isActive then
                                ( { model | frame = model.frame + 1 }
                                , completeOnboardingLogin model.user.email
                                )

                            else
                                ( { model | paymentStatus = PaymentProcessing }
                                , checkPaymentStatus model.user.email
                                )

                        PaymentCompleted ->
                            ( { model | frame = model.frame + 1 }
                            , completeOnboardingLogin model.user.email
                            )

                        _ ->
                            ( model, Cmd.none )

                1 ->
                    if String.isEmpty model.companyName || String.isEmpty model.companyPhone then
                        ( model, Cmd.none )

                    else
                        ( { model | loadingResumeData = True }
                        , saveCompanyDetails model
                        )

                2 ->
                    if List.isEmpty model.selectedCarriers then
                        ( model, Cmd.none )

                    else
                        ( { model | frame = model.frame + 1 }
                        , Cmd.none
                        )

                3 ->
                    ( { model | frame = model.frame + 1, paymentStatus = ReadyToComplete }
                    , Cmd.none
                    )

                _ ->
                    ( model, Cmd.none )

        BackClicked ->
            let
                newFrame =
                    Basics.max 1 (model.frame - 1)
            in
            ( { model | frame = newFrame }
            , Nav.pushUrl model.key (buildUrl model newFrame)
            )

        ToggleCarrier carrier ->
            let
                newSelectedCarriers =
                    if List.member carrier model.selectedCarriers then
                        List.filter (\c -> c /= carrier) model.selectedCarriers

                    else
                        carrier :: model.selectedCarriers
            in
            ( { model | selectedCarriers = newSelectedCarriers }, Cmd.none )

        ToggleSmartSend ->
            ( { model | useSmartSend = not model.useSmartSend }, Cmd.none )

        ToggleAllCarriers ->
            let
                newSelectedCarriers =
                    if List.length model.selectedCarriers == List.length allCarriers then
                        []

                    else
                        allCarriers
            in
            ( { model | selectedCarriers = newSelectedCarriers }, Cmd.none )

        ShowAgentForm ->
            ( { model | showAgentForm = True }, Cmd.none )

        HideAgentForm ->
            ( { model | showAgentForm = False }, Cmd.none )

        AgentFirstNameChanged firstName ->
            ( { model | newAgentFirstName = firstName }, Cmd.none )

        AgentLastNameChanged lastName ->
            ( { model | newAgentLastName = lastName }, Cmd.none )

        AgentEmailChanged email ->
            ( { model | newAgentEmail = email }, Cmd.none )

        AgentPhoneChanged phone ->
            ( { model | newAgentPhone = phone }, Cmd.none )

        AgentIsAdminToggled isAdmin ->
            ( { model | newAgentIsAdmin = True }, Cmd.none )

        AddAgent ->
            let
                newAgent =
                    { firstName = model.newAgentFirstName
                    , lastName = model.newAgentLastName
                    , email = model.newAgentEmail
                    , phone = model.newAgentPhone
                    , isAdmin = True -- Keep the field value as True for consistency
                    }

                isValid =
                    not (String.isEmpty (String.trim model.newAgentFirstName))
                        && not (String.isEmpty (String.trim model.newAgentLastName))
                        && not (String.isEmpty (String.trim model.newAgentEmail))
            in
            if isValid then
                ( { model
                    | agents = model.agents ++ [ newAgent ]
                    , showAgentForm = False
                    , newAgentFirstName = ""
                    , newAgentLastName = ""
                    , newAgentEmail = ""
                    , newAgentPhone = ""
                    , newAgentIsAdmin = True -- Keep the field value as True for consistency
                  }
                , Cmd.none
                )

            else
                ( model, Cmd.none )

        CompanyDetailsSaved result ->
            case result of
                Ok response ->
                    if response.success then
                        -- Move to frame 2 and clear loading state
                        ( { model | frame = 2, loadingResumeData = False }
                        , Nav.pushUrl model.key (buildUrl { model | frame = 2 } 2)
                        )

                    else
                        -- Failed to save but stay on current page
                        ( { model | loadingResumeData = False }, Cmd.none )

                Err _ ->
                    -- Error saving but stay on current page
                    ( { model | loadingResumeData = False }, Cmd.none )

        LicensingSaved result ->
            case result of
                Ok response ->
                    if response.success then
                        ( model, Cmd.none )

                    else
                        -- Failed to save, redirect to signup
                        ( model, Nav.pushUrl model.key "/signup" )

                Err _ ->
                    -- Error saving, redirect to signup
                    ( model, Nav.pushUrl model.key "/signup" )

        AgentsSaved _ ->
            ( model
            , completeOnboardingLogin model.user.email
            )

        GotResumeData result ->
            case result of
                Ok resumeData ->
                    if resumeData.onboardingComplete then
                        -- Onboarding is complete, redirect to login
                        ( model, Nav.load "/login" )

                    else if resumeData.success then
                        -- Update model with resumed data
                        let
                            -- Convert carrier strings to Carrier type
                            selectedCarriers =
                                resumeData.carrierSettings.selectedCarriers
                                    |> List.filterMap
                                        (\carrierStr ->
                                            allCarriers
                                                |> List.filter (\c -> carrierToString c == carrierStr)
                                                |> List.head
                                        )

                            -- Create agents list with the current user marked as admin if not in list
                            updatedAgents =
                                if List.isEmpty resumeData.agents then
                                    model.agents

                                else
                                    resumeData.agents
                        in
                        ( { model
                            | loadingResumeData = False
                            , companyName = resumeData.organization.name |> Url.percentDecode |> Maybe.withDefault resumeData.organization.name
                            , companyPhone = resumeData.organization.phone
                            , companyWebsite = resumeData.organization.website
                            , primaryColor = resumeData.organization.primaryColor
                            , secondaryColor = resumeData.organization.secondaryColor
                            , logo = resumeData.organization.logo
                            , selectedCarriers = selectedCarriers
                            , useSmartSend = resumeData.carrierSettings.useSmartSend
                            , agents = updatedAgents
                          }
                        , Cmd.none
                        )

                    else
                        -- Failed to get resume data, redirect to signup if not on frame 1
                        ( { model | loadingResumeData = False }
                        , if model.frame > 1 then
                            Nav.pushUrl model.key "/signup"

                          else
                            Cmd.none
                        )

                Err _ ->
                    -- Error fetching resume data, redirect to signup if not on frame 1
                    ( { model | loadingResumeData = False }
                    , if model.frame > 1 then
                        Nav.pushUrl model.key "/signup"

                      else
                        Cmd.none
                    )

        OnboardingLoginCompleted result ->
            case result of
                Ok response ->
                    if response.success then
                        ( model
                        , Nav.load response.redirectUrl
                        )

                    else
                        ( { model | loadingResumeData = False }
                        , Nav.pushUrl model.key "/signup"
                        )

                Err _ ->
                    ( { model | loadingResumeData = False }
                    , Nav.pushUrl model.key "/signup"
                    )

        PaymentSaved result ->
            case result of
                Ok response ->
                    if response.success then
                        ( model, Cmd.none )

                    else
                        -- Failed to save, redirect to signup
                        ( model, Nav.pushUrl model.key "/signup" )

                Err _ ->
                    -- Error saving, redirect to signup
                    ( model, Nav.pushUrl model.key "/signup" )

        GotSubscriptionStatus result ->
            case result of
                Ok status ->
                    ( { model | paymentStatus = Success status }, Cmd.none )

                Err _ ->
                    ( model, Cmd.none )

        PaymentProcessed result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model | paymentStatus = PaymentCompleted }
                        , Cmd.batch
                            [ completeOnboardingLogin model.user.email
                            , fetchSubscriptionStatus
                            ]
                        )

                    else
                        ( { model | paymentStatus = Error (BadPayload "Payment processing failed. Please try again.") }
                        , Cmd.none
                        )

                Err _ ->
                    ( { model | paymentStatus = Error NetworkError }
                    , Cmd.none
                    )

        PaymentCompletedFromPort response ->
            if response.success then
                ( { model | paymentStatus = PaymentCompleted }
                , Cmd.batch
                    [ completeOnboardingLogin model.user.email
                    , fetchSubscriptionStatus
                    ]
                )

            else
                ( { model | paymentStatus = Error (BadPayload "Payment processing failed. Please try again.") }
                , Cmd.none
                )

        CheckoutCompletedFromPort checkoutData ->
            ( model, processCheckoutData checkoutData )

        CheckoutErrorFromPort errorData ->
            ( { model | paymentStatus = Error (BadPayload errorData.message) }, Cmd.none )

        ProcessCheckoutData checkoutData ->
            ( { model | paymentStatus = PaymentProcessing }
            , completePayment checkoutData
            )

        RefreshPage ->
            ( model, Nav.reload )



-- Calculate the price based on the number of contacts


calculatePrice : Int -> Int
calculatePrice contacts =
    let
        basePrice =
            60

        -- Base price for up to 500 contacts
        additionalTiers =
            Basics.max 0 (ceiling (toFloat (Basics.max 0 (contacts - 500)) / 500))

        additionalPrice =
            additionalTiers * 40

        -- $40 for each additional 500 contacts
    in
    basePrice + additionalPrice



-- Helper function to check if carriers are selected


hasSelectedCarriers : Model -> Bool
hasSelectedCarriers model =
    not (List.isEmpty model.selectedCarriers)



-- Calculate revenue based on contacts, average age, and rollover percent
-- Handle navigation if needed
-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Onboarding"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex flex-col items-center py-12 px-4 sm:px-6 lg:px-8" ]
            [ div [ class "flex flex-col items-center w-full mb-8" ]
                [ img [ src "/images/medicare-max-logo.png", class "h-10 w-auto" ] [] ]
            , if model.loadingResumeData then
                -- Show loading indicator when resuming data
                div [ class "max-w-6xl w-full space-y-8 bg-white p-8 rounded-lg shadow-md flex flex-col items-center justify-center min-h-[400px]" ]
                    [ div [ class "animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-700 mb-4" ] []
                    , p [ class "text-gray-600 text-center" ] [ text "Loading your settings..." ]
                    ]

              else
                div [ class "max-w-6xl w-full space-y-8 bg-white p-8 rounded-lg shadow-md" ]
                    [ case model.frame of
                        1 ->
                            viewCompany model

                        2 ->
                            viewLicensing model

                        3 ->
                            viewAddAgents model

                        4 ->
                            viewPayment model

                        _ ->
                            viewCompany model
                    , viewProgressDots model.frame
                    ]
            ]
        ]
    }


viewCompany : Model -> Html Msg
viewCompany model =
    div [ class "flex flex-col items-center" ]
        [ div [ class "text-center mb-8 w-full" ]
            [ h2 [ class "text-3xl font-semibold text-gray-900 mb-2" ] [ text "Company Settings" ]
            , p [ class "text-gray-500" ] [ text "Upload your logo and set your brand color." ]
            ]
        , div [ class "w-full max-w-md space-y-8 bg-white p-6 rounded-lg shadow-sm" ]
            [ div [ class "space-y-2" ]
                [ label [ class "block text-sm font-medium text-gray-700", for "company-name" ] [ text "Company Name" ]
                , input
                    [ class "block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                    , id "company-name"
                    , type_ "text"
                    , placeholder "Your Company Name"
                    , value model.companyName
                    , onInput CompanyNameChanged
                    ]
                    []
                ]
            , div [ class "flex space-x-4" ]
                [ div [ class "w-1/2 space-y-2" ]
                    [ label [ class "block text-sm font-medium text-gray-700", for "phone" ] [ text "Phone" ]
                    , input
                        [ class "block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                        , id "phone"
                        , type_ "tel"
                        , placeholder "(555) 555-5555"
                        , value model.companyPhone
                        , onInput PhoneChanged
                        ]
                        []
                    ]
                , div [ class "w-1/2 space-y-2" ]
                    [ label [ class "block text-sm font-medium text-gray-700", for "website" ] [ text "Website" ]
                    , div [ class "flex rounded-md shadow-sm" ]
                        [ span [ class "inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm" ]
                            [ text "https://" ]
                        , input
                            [ class "block w-full flex-1 rounded-none rounded-r-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                            , id "website"
                            , type_ "text"
                            , placeholder "www.example.com"
                            , value model.companyWebsite
                            , onInput WebsiteChanged
                            ]
                            []
                        ]
                    ]
                ]
            , div
                [ class
                    ("mt-8 p-6 border rounded-lg border-dashed text-center cursor-pointer transition-colors "
                        ++ (if model.hover then
                                "border-indigo-600 bg-indigo-50"

                            else
                                "border-gray-200 hover:bg-gray-50"
                           )
                    )
                , onClick UploadLogo
                , hijackOn "dragenter" (Decode.succeed DragEnter)
                , hijackOn "dragover" (Decode.succeed DragEnter)
                , hijackOn "dragleave" (Decode.succeed DragLeave)
                , hijackOn "drop" dropDecoder
                ]
                [ case model.logo of
                    Just logoUrl ->
                        div [ class "flex flex-col items-center" ]
                            [ img
                                [ src logoUrl
                                , class "h-20 w-20 object-contain mb-4"
                                ]
                                []
                            , div [ class "text-indigo-600 font-medium" ] [ text "Change logo" ]
                            ]

                    Nothing ->
                        if model.uploadingLogo then
                            div [ class "flex flex-col items-center" ]
                                [ div [ class "animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-indigo-500 mb-4" ] []
                                , div [ class "text-gray-500" ] [ text "Uploading..." ]
                                ]

                        else
                            div [ class "flex flex-col items-center" ]
                                [ div [ class "rounded-full bg-gray-100 p-3 mb-3" ]
                                    [ MyIcon.clipboardList 24 "#6366F1" ]
                                , div [ class "text-indigo-600 font-medium" ] [ text "Click to upload" ]
                                , div [ class "text-gray-500 text-sm mt-1" ] [ text "or drag and drop your logo" ]
                                , div [ class "text-gray-400 text-xs mt-2" ] [ text "PNG only (Recommended: 240px width x 60px height)" ]
                                ]
                ]

            {--
            , div [ class "space-y-4 mt-8" ]
                [ div [ class "space-y-2" ]
                    [ label [ class "block text-sm font-medium text-gray-700" ] [ text "Primary Brand Color" ]
                    , div [ class "flex items-center space-x-4" ]
                        [ input
                            [ type_ "color"
                            , class "w-10 h-10 p-0 border-0 rounded-md cursor-pointer"
                            , value model.primaryColor
                            , onInput PrimaryColorChanged
                            ]
                            []
                        , div [ class "text-sm text-gray-500" ] [ text "Click to change colors" ]
                        ]
                    ]
                , div [ class "space-y-2 mt-4" ]
                    [ label [ class "block text-sm font-medium text-gray-700" ] [ text "Secondary Brand Color" ]
                    , div [ class "flex items-center space-x-4" ]
                        [ input
                            [ type_ "color"
                            , class "w-10 h-10 p-0 border-0 rounded-md cursor-pointer"
                            , value model.secondaryColor
                            , onInput SecondaryColorChanged
                            ]
                            []
                        , div [ class "text-sm text-gray-500" ] [ text "Click to change colors" ]
                        ]
                    ]
                ]
            --}
            ]
        , div [ class "mt-10 w-full max-w-md" ]
            [ button
                [ class "w-full bg-[#03045e] text-white py-3 px-4 rounded-md hover:bg-[#02034e] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 font-medium"
                , onClick ContinueClicked
                ]
                [ text "Continue" ]
            ]
        ]


viewProgressDots : Int -> Html Msg
viewProgressDots currentFrame =
    let
        frames =
            List.range 1 maxFrame

        isActive frame =
            frame == currentFrame

        backButton =
            if currentFrame > 1 then
                div [ class "cursor-pointer w-10 flex justify-center items-center", onClick BackClicked ]
                    [ MyIcon.chevronLeft 32 "#4B5563" ]

            else
                div [ class "cursor-not-allowed w-10 flex justify-center items-center" ]
                    [ MyIcon.chevronLeft 32 "#E5E7EB" ]

        rightButton =
            div [ class "cursor-not-allowed w-10 flex justify-center items-center" ]
                [ MyIcon.chevronRight 32 "#E5E7EB" ]

        dots =
            List.map
                (\frame ->
                    div
                        [ class
                            (if isActive frame then
                                "w-2 h-2 rounded-full bg-indigo-600"

                             else
                                "w-2 h-2 rounded-full bg-gray-300"
                            )
                        ]
                        []
                )
                frames
    in
    div [ class "flex justify-center items-center mt-8" ]
        [ backButton
        , div [ class "flex justify-center space-x-2" ] dots
        , rightButton
        ]


viewLicensing : Model -> Html Msg
viewLicensing model =
    div [ class "flex flex-col items-center" ]
        [ h2 [ class "text-2xl font-semibold text-gray-900 mt-6" ] [ text "Carrier Information" ]
        , p [ class "text-gray-500 mt-2 mb-6" ] [ text "Tell us about your carrier relationships." ]
        , div [ class "w-full max-w-md space-y-6" ]
            [ div [ class "space-y-4" ]
                [ h3 [ class "text-xl font-medium text-gray-800" ] [ text "Carrier Contracts" ]
                , div [ class "mt-4 space-y-2 bg-gray-50 rounded-md p-4" ]
                    [ div [ class "flex items-center mb-3" ]
                        [ div [ class "flex items-center h-5" ]
                            [ input
                                [ type_ "checkbox"
                                , class "h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                                , checked (List.length model.selectedCarriers == List.length allCarriers)
                                , onClick ToggleAllCarriers
                                , id "select-all-carriers"
                                ]
                                []
                            ]
                        , div [ class "ml-3 text-sm" ]
                            [ label
                                [ class "font-medium text-gray-700 cursor-pointer"
                                , for "select-all-carriers"
                                ]
                                [ text "Select All Carriers" ]
                            ]
                        ]
                    , div [ class "grid grid-cols-2 gap-2" ]
                        (List.map
                            (\carrier ->
                                let
                                    carrierId =
                                        "carrier-" ++ (carrierToString carrier |> String.toLower |> String.replace " " "-")
                                in
                                div [ class "flex items-center" ]
                                    [ div [ class "flex items-center h-5" ]
                                        [ input
                                            [ type_ "checkbox"
                                            , class "h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                                            , checked (List.member carrier model.selectedCarriers)
                                            , onClick (ToggleCarrier carrier)
                                            , id carrierId
                                            ]
                                            []
                                        ]
                                    , div [ class "ml-3 text-sm" ]
                                        [ label
                                            [ class "font-medium text-gray-700 cursor-pointer"
                                            , for carrierId
                                            ]
                                            [ text (carrierToString carrier) ]
                                        ]
                                    ]
                            )
                            allCarriers
                        )
                    ]
                ]
            , div [ class "space-y-4 mt-6" ]
                [ h3 [ class "text-xl font-medium text-gray-800" ] [ text "Guaranteed Issue Settings" ]
                , div [ class "flex items-start p-4 bg-blue-50 rounded-md border border-blue-200" ]
                    [ div [ class "flex items-center h-5 mt-1" ]
                        [ input
                            [ class "h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                            , type_ "checkbox"
                            , id "smart-send"
                            , checked model.useSmartSend
                            , onClick ToggleSmartSend
                            ]
                            []
                        ]
                    , div [ class "ml-3" ]
                        [ label
                            [ class "font-medium text-gray-700 cursor-pointer"
                            , for "smart-send"
                            ]
                            [ text "Use SmartSend for Guaranteed Issue" ]
                        , p [ class "text-gray-600 text-sm mt-1" ]
                            [ text "When enabled, SmartSend will automatically avoid sending quotes to individuals in no-commission windows (for example, right before their birthday in Birthday Rule states)." ]
                        ]
                    ]
                ]
            , div [ class "w-full flex mt-8" ]
                [ button
                    [ class
                        (if hasSelectedCarriers model then
                            "w-full bg-[#03045e] text-white py-2 px-4 rounded-md hover:bg-[#02034e] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"

                         else
                            "w-full bg-[#03045e]/70 text-white py-2 px-4 rounded-md cursor-not-allowed"
                        )
                    , onClick ContinueClicked
                    , disabled (not (hasSelectedCarriers model))
                    ]
                    [ text "Continue" ]
                ]
            ]
        ]


viewAddAgents : Model -> Html Msg
viewAddAgents model =
    div [ class "flex flex-col items-center" ]
        [ div [ class "text-center mb-8 w-full" ]
            [ h2 [ class "text-3xl font-semibold text-gray-900 mb-2" ] [ text "More Team Members?" ]
            , p [ class "text-gray-500" ] [ text "Add additional agents who will be using Medicare Max" ]
            ]
        , div [ class "w-full max-w-4xl" ]
            [ div [ class "grid grid-cols-1 gap-6 mb-8" ]
                (List.map (viewAgentCard model) model.agents)
            , if model.showAgentForm then
                viewAgentForm model

              else
                div [ class "flex justify-center" ]
                    [ button
                        [ class "flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        , onClick ShowAgentForm
                        ]
                        [ span [ class "mr-2" ] [ text "+" ]
                        , text "Add Another Agent"
                        ]
                    ]
            ]
        , div [ class "mt-10 w-full max-w-md" ]
            [ button
                [ class "w-full bg-[#03045e] text-white py-3 px-4 rounded-md hover:bg-[#02034e] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 font-medium"
                , onClick ContinueClicked
                ]
                [ text "Continue" ]
            ]
        ]


viewAgentCard : Model -> Agent -> Html Msg
viewAgentCard model agent =
    let
        isCurrentUser =
            agent.email == model.user.email

        -- Decode the email address for display
        displayEmail =
            case Url.percentDecode agent.email of
                Just decoded ->
                    decoded

                Nothing ->
                    agent.email
    in
    div [ class "bg-white shadow rounded-lg p-8" ]
        -- Increased padding from p-6 to p-8
        [ div [ class "flex items-start" ]
            -- Changed from items-center to items-start
            [ div [ class "w-16 h-16 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-600 font-bold text-xl" ]
                -- Increased size and font
                [ text (String.left 1 agent.firstName ++ String.left 1 agent.lastName) ]
            , div [ class "ml-4 flex-grow" ]
                -- Added flex-grow
                [ div [ class "text-xl font-medium text-gray-900 mb-1" ]
                    -- Increased font size and added margin
                    [ text (agent.firstName ++ " " ++ agent.lastName) ]
                , div [ class "flex flex-col space-y-1 text-sm text-gray-500" ]
                    -- Added spacing
                    [ div [ class "break-all" ] [ text displayEmail ]
                    , div []
                        [ text
                            (if String.isEmpty agent.phone then
                                "No phone provided"

                             else
                                agent.phone
                            )
                        ]
                    ]
                ]
            ]
        , if isCurrentUser then
            div [ class "mt-4 text-xs text-gray-400 italic" ]
                [ text "Current user (you)" ]

          else
            text ""
        ]


viewAgentForm : Model -> Html Msg
viewAgentForm model =
    div [ class "bg-white shadow rounded-lg p-6 mb-6" ]
        [ div [ class "flex justify-between items-center mb-4" ]
            [ h3 [ class "text-lg font-medium text-gray-900" ]
                [ text "Add New Agent" ]
            , button
                [ class "text-gray-400 hover:text-gray-500"
                , onClick HideAgentForm
                ]
                [ text "×" ]
            ]
        , div [ class "space-y-4" ]
            [ div [ class "grid grid-cols-2 gap-4" ]
                [ div []
                    [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                        [ text "First Name" ]
                    , input
                        [ class "shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full px-3 py-2 text-base border-gray-300 rounded-md"
                        , type_ "text"
                        , placeholder "First name"
                        , value model.newAgentFirstName
                        , onInput AgentFirstNameChanged
                        ]
                        []
                    ]
                , div []
                    [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                        [ text "Last Name" ]
                    , input
                        [ class "shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full px-3 py-2 text-base border-gray-300 rounded-md"
                        , type_ "text"
                        , placeholder "Last name"
                        , value model.newAgentLastName
                        , onInput AgentLastNameChanged
                        ]
                        []
                    ]
                ]
            , div [ class "grid grid-cols-2 gap-4" ]
                [ div []
                    [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                        [ text "Email" ]
                    , input
                        [ class "shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full px-3 py-2 text-base border-gray-300 rounded-md"
                        , type_ "email"
                        , placeholder "Email address"
                        , value model.newAgentEmail
                        , onInput AgentEmailChanged
                        ]
                        []
                    ]
                , div []
                    [ label [ class "block text-sm font-medium text-gray-700 mb-1" ]
                        [ text "Phone" ]
                    , input
                        [ class "shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full px-3 py-2 text-base border-gray-300 rounded-md"
                        , type_ "tel"
                        , placeholder "Phone number"
                        , value model.newAgentPhone
                        , onInput AgentPhoneChanged
                        ]
                        []
                    ]
                ]
            , div [ class "pt-4" ]
                [ button
                    [ class
                        (if
                            String.isEmpty (String.trim model.newAgentFirstName)
                                || String.isEmpty (String.trim model.newAgentLastName)
                                || String.isEmpty (String.trim model.newAgentEmail)
                         then
                            "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-400 cursor-not-allowed"

                         else
                            "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        )
                    , onClick AddAgent
                    , disabled
                        (String.isEmpty (String.trim model.newAgentFirstName)
                            || String.isEmpty (String.trim model.newAgentLastName)
                            || String.isEmpty (String.trim model.newAgentEmail)
                        )
                    ]
                    [ text "Add Agent" ]
                ]
            ]
        ]


viewPayment : Model -> Html Msg
viewPayment model =
    div [ class "flex flex-col items-center" ]
        [ div [ class "text-center mb-8 w-full" ]
            [ h2 [ class "text-3xl font-semibold text-gray-900 mb-2" ] [ text "Payment Information" ]
            , p [ class "text-gray-500" ] [ text "Set up your payment method to complete your account." ]
            ]
        , div [ class "w-full max-w-md space-y-6" ]
            [ case model.paymentStatus of
                Loading ->
                    div [ class "mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md" ]
                        [ p [ class "text-blue-700" ] [ text "Loading subscription status..." ] ]

                Error apiError ->
                    div [ class "mt-4 p-3 bg-red-50 border border-red-200 rounded-md" ]
                        [ p [ class "text-red-700" ] [ text "Error" ]
                        , p [ class "mt-2 text-sm text-red-600" ]
                            [ text (apiErrorToString apiError)
                            , br [] []
                            , text "If you're using an ad blocker, please disable it for this site as it may interfere with payment processing."
                            ]
                        , div [ class "mt-4 flex justify-center" ]
                            [ button
                                [ class "px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
                                , onClick RefreshPage
                                ]
                                [ text "Refresh Page" ]
                            ]
                        ]

                Success status ->
                    if status.isActive then
                        div [ class "mt-4 p-3 bg-green-50 border border-green-200 rounded-md" ]
                            [ p [ class "text-green-700 font-medium" ]
                                [ text ("Active subscription: " ++ status.tier) ]
                            , case status.currentPeriodEnd of
                                Just periodEnd ->
                                    p [ class "mt-2 text-sm text-green-600" ]
                                        [ text ("Current period ends: " ++ formatUnixTimestamp periodEnd) ]

                                Nothing ->
                                    text ""
                            , case status.cancelAtPeriodEnd of
                                Just True ->
                                    p [ class "mt-2 text-sm text-yellow-600" ]
                                        [ text "Your subscription will cancel at the end of the current period" ]

                                _ ->
                                    text ""
                            ]

                    else
                        node "stripe-checkout"
                            [ attribute "price-id" "price_1RHG4mCBUPXAZKNGem75yV4U" --"price_1RBStWCBUPXAZKNGwpimWl7v"
                            , attribute "metered-price-id" "price_1RHG7kCBUPXAZKNGd5YvIzsw" --"price_1RBSvJCBUPXAZKNGQ1U9Hl8i"

                            --, attribute "return-url" ("http://localhost:3000/walkthrough?payment_success=true&email=" ++ model.user.email)
                            , attribute "first-name" model.user.firstName
                            , attribute "last-name" model.user.lastName
                            , attribute "email" model.user.email
                            ]
                            []

                Continuing ->
                    div [ class "mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md" ]
                        [ p [ class "text-blue-700" ] [ text "Resuming your previous setup" ]
                        , p [ class "mt-2 text-sm text-blue-600" ]
                            [ text "If the checkout doesn't appear, please disable any ad blockers for this site." ]
                        ]

                ReadyToComplete ->
                    node "stripe-checkout"
                        [ attribute "price-id" "price_1RHG4mCBUPXAZKNGem75yV4U" --"price_1RBStWCBUPXAZKNGwpimWl7v"
                        , attribute "metered-price-id" "price_1RHG7kCBUPXAZKNGd5YvIzsw" --"price_1RBSvJCBUPXAZKNGQ1U9Hl8i"

                        --, attribute "return-url" ("http://localhost:3000/walkthrough?payment_success=true&email=" ++ model.user.email)
                        , attribute "first-name" model.user.firstName
                        , attribute "last-name" model.user.lastName
                        , attribute "email" model.user.email
                        ]
                        []

                PaymentProcessing ->
                    div [ class "mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md" ]
                        [ div [ class "animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mx-auto mb-4" ] []
                        , p [ class "text-blue-700 text-center" ] [ text "Processing your payment..." ]
                        ]

                PaymentCompleted ->
                    div [ class "mt-4 p-3 bg-green-50 border border-green-200 rounded-md" ]
                        [ p [ class "text-green-700 font-medium text-center" ] [ text "Payment completed successfully!" ]
                        , p [ class "mt-2 text-sm text-green-600 text-center" ] [ text "Finalizing your account setup..." ]
                        ]
            ]
        ]



-- Helper function to format Unix timestamp


formatUnixTimestamp : Int -> String
formatUnixTimestamp timestamp =
    -- Convert Unix timestamp to readable date string
    -- For now just return the raw timestamp, you can enhance this later
    String.fromInt timestamp



-- Helper function to convert API errors to strings


apiErrorToString : ApiError -> String
apiErrorToString error =
    case error of
        NetworkError ->
            "Network error occurred. Please check your connection."

        BadStatus status message ->
            "Server error: " ++ String.fromInt status ++ " - " ++ message

        BadPayload message ->
            "Failed to process server response. "
                ++ (if String.contains "JSON" message then
                        "Please try refreshing the page."

                    else
                        message
                   )

        BadUrl url ->
            "Invalid API URL: " ++ url

        Timeout ->
            "Request timed out. Please try again."



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.batch
        [ paymentCompleted PaymentCompletedFromPort
        , checkoutCompleted CheckoutCompletedFromPort
        , checkoutError CheckoutErrorFromPort
        ]



-- Helper function to build URL with frame parameter


buildUrl : Model -> Int -> String
buildUrl model frame =
    let
        -- Determine if the email appears to be already encoded
        emailIsEncoded =
            let
                decoded =
                    Url.percentDecode model.user.email
            in
            case decoded of
                Just d ->
                    d /= model.user.email

                -- If decoding changes the value, it was encoded
                Nothing ->
                    False

        -- Invalid percent encoding, treat as not encoded
        -- Base URL parameters without email
        baseParams =
            [ int "frame" frame
            , string "firstName" model.user.firstName
            , string "lastName" model.user.lastName
            , string "phone" model.user.phone
            ]

        -- If email is already encoded, manually construct the URL to avoid re-encoding
        url =
            if emailIsEncoded then
                absolute [ "onboarding" ] baseParams ++ "&email=" ++ model.user.email

            else
                absolute [ "onboarding" ] (baseParams ++ [ string "email" model.user.email ])
    in
    url



-- Helper function to format precise money values with 2 decimal places
-- Save company details to the API


saveCompanyDetails : Model -> Cmd Msg
saveCompanyDetails model =
    Http.post
        { url = "/api/onboarding/company"
        , body =
            Http.jsonBody
                (Encode.object
                    [ ( "email", Encode.string model.user.email )
                    , ( "firstName", Encode.string model.user.firstName )
                    , ( "lastName", Encode.string model.user.lastName )
                    , ( "phone", Encode.string model.user.phone )
                    , ( "companyName", Encode.string model.companyName )
                    , ( "companyPhone", Encode.string model.companyPhone )
                    , ( "companyWebsite", Encode.string model.companyWebsite )
                    , ( "primaryColor", Encode.string model.primaryColor )
                    , ( "secondaryColor", Encode.string model.secondaryColor )
                    , ( "logo", Maybe.withDefault Encode.null (Maybe.map Encode.string model.logo) )
                    ]
                )
        , expect = Http.expectJson CompanyDetailsSaved saveResponseDecoder
        }



-- Save licensing settings to the API


saveLicensingSettings : Model -> Cmd Msg
saveLicensingSettings model =
    Http.post
        { url = "/api/onboarding/licensing"
        , body =
            Http.jsonBody
                (Encode.object
                    [ ( "email", Encode.string model.user.email )
                    , ( "selectedCarriers", Encode.list Encode.string (List.map carrierToString model.selectedCarriers) )
                    , ( "useSmartSend", Encode.bool model.useSmartSend )
                    ]
                )
        , expect = Http.expectJson LicensingSaved saveResponseDecoder
        }



-- Save agents to the API


saveAgents : Model -> Cmd Msg
saveAgents model =
    Http.post
        { url = "/api/onboarding/agents"
        , body =
            Http.jsonBody
                (Encode.object
                    [ ( "email", Encode.string model.user.email )
                    , ( "agents"
                      , Encode.list
                            (\agent ->
                                Encode.object
                                    [ ( "firstName", Encode.string agent.firstName )
                                    , ( "lastName", Encode.string agent.lastName )
                                    , ( "email", Encode.string agent.email )
                                    , ( "phone", Encode.string agent.phone )
                                    , ( "isAdmin", Encode.bool agent.isAdmin )
                                    ]
                            )
                            model.agents
                      )
                    ]
                )
        , expect = Http.expectJson AgentsSaved saveResponseDecoder
        }



-- Get saved onboarding data


fetchResumeData : String -> Cmd Msg
fetchResumeData email =
    -- Use a simple HTTP request with the raw email to avoid encoding issues
    -- The plus sign in emails is problematic with URL encoding
    -- So instead of using URL Builder, we'll manually construct the URL
    -- preserving the email exactly as received
    let
        -- Use encodeUri to properly encode the email preserving the + sign
        encodedEmail =
            -- Replace + with %2B to preserve it in the URL
            email
                |> String.replace "+" "%2B"
                |> Url.percentEncode
    in
    Http.get
        { url = "/api/onboarding/resume?email=" ++ encodedEmail
        , expect = Http.expectJson GotResumeData resumeDataDecoder
        }



-- Decoder for resume data from backend


resumeDataDecoder : Decoder ResumeData
resumeDataDecoder =
    Decode.succeed ResumeData
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "onboardingComplete" Decode.bool
        |> Pipeline.optional "organization" organizationDecoder defaultOrganization
        |> Pipeline.optional "user" userDecoder defaultUser
        |> Pipeline.optional "agents" (Decode.list agentDecoder) []
        |> Pipeline.optional "carrierSettings" carrierSettingsDecoder defaultCarrierSettings


type alias ResumeData =
    { success : Bool
    , onboardingComplete : Bool
    , organization : OrganizationData
    , user : UserData
    , agents : List Agent
    , carrierSettings : CarrierSettings
    }


type alias OrganizationData =
    { id : Int
    , name : String
    , website : String
    , phone : String
    , primaryColor : String
    , secondaryColor : String
    , logo : Maybe String
    }


type alias UserData =
    { id : Int
    , firstName : String
    , lastName : String
    , email : String
    , phone : String
    }


type alias CarrierSettings =
    { selectedCarriers : List String
    , useSmartSend : Bool
    }



-- Default values


defaultOrganization : OrganizationData
defaultOrganization =
    { id = 0
    , name = ""
    , website = ""
    , phone = ""
    , primaryColor = "#6B46C1"
    , secondaryColor = "#9F7AEA"
    , logo = Nothing
    }


defaultUser : UserData
defaultUser =
    { id = 0
    , firstName = ""
    , lastName = ""
    , email = ""
    , phone = ""
    }


defaultCarrierSettings : CarrierSettings
defaultCarrierSettings =
    { selectedCarriers = []
    , useSmartSend = True
    }



-- Decoders


organizationDecoder : Decoder OrganizationData
organizationDecoder =
    Decode.succeed OrganizationData
        |> Pipeline.required "id" Decode.int
        |> Pipeline.required "name" Decode.string
        |> Pipeline.required "website" Decode.string
        |> Pipeline.required "phone" Decode.string
        |> Pipeline.required "primaryColor" Decode.string
        |> Pipeline.required "secondaryColor" Decode.string
        |> Pipeline.optional "logo" (Decode.map Just Decode.string) Nothing


userDecoder : Decoder UserData
userDecoder =
    Decode.succeed UserData
        |> Pipeline.required "id" Decode.int
        |> Pipeline.required "firstName" Decode.string
        |> Pipeline.required "lastName" Decode.string
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "phone" Decode.string


agentDecoder : Decoder Agent
agentDecoder =
    Decode.succeed Agent
        |> Pipeline.required "firstName" Decode.string
        |> Pipeline.required "lastName" Decode.string
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "phone" Decode.string
        |> Pipeline.required "isAdmin" Decode.bool


carrierSettingsDecoder : Decoder CarrierSettings
carrierSettingsDecoder =
    Decode.succeed CarrierSettings
        |> Pipeline.required "selectedCarriers" (Decode.list Decode.string)
        |> Pipeline.required "useSmartSend" Decode.bool


type alias SaveResponse =
    { success : Bool
    , message : String
    }


saveResponseDecoder : Decoder SaveResponse
saveResponseDecoder =
    Decode.map2 SaveResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "message" Decode.string)


type alias OnboardingLoginResponse =
    { success : Bool
    , redirectUrl : String
    , email : String
    }


onboardingLoginResponseDecoder : Decoder OnboardingLoginResponse
onboardingLoginResponseDecoder =
    Decode.succeed OnboardingLoginResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "redirectUrl" Decode.string
        |> Pipeline.required "email" Decode.string


completeOnboardingLogin : String -> Cmd Msg
completeOnboardingLogin email =
    Http.post
        { url = "/api/auth/onboarding-login"
        , body =
            Http.jsonBody
                (Encode.object
                    [ ( "emailRaw", Encode.string email )
                    ]
                )
        , expect = Http.expectJson OnboardingLoginCompleted onboardingLoginResponseDecoder
        }



-- Save payment settings to the API


savePaymentSettings : Model -> Cmd Msg
savePaymentSettings model =
    Http.post
        { url = "/api/onboarding/payment"
        , body =
            Http.jsonBody
                (Encode.object
                    [ ( "email", Encode.string model.user.email )
                    ]
                )
        , expect = Http.expectJson PaymentSaved saveResponseDecoder
        }



-- Add fetchSubscriptionStatus function


fetchSubscriptionStatus : Cmd Msg
fetchSubscriptionStatus =
    Http.get
        { url = "/api/stripe/subscription-status"
        , expect = Http.expectJson GotSubscriptionStatus subscriptionStatusDecoder
        }



-- Add subscription status decoder


subscriptionStatusDecoder : Decoder SubscriptionStatus
subscriptionStatusDecoder =
    Decode.field "data"
        (Decode.map5 SubscriptionStatus
            (Decode.field "isActive" Decode.bool)
            (Decode.field "tier" Decode.string)
            (Decode.maybe (Decode.field "currentPeriodEnd" Decode.int))
            (Decode.maybe (Decode.field "cancelAtPeriodEnd" Decode.bool))
            (Decode.field "paymentStatus" Decode.string)
        )



-- Add payment status check function


checkPaymentStatus : String -> Cmd Msg
checkPaymentStatus email =
    Http.get
        { url = "/api/stripe/payment-status"
        , expect = Http.expectJson PaymentProcessed paymentResponseDecoder
        }



-- Add payment response decoder


paymentResponseDecoder : Decoder PaymentResponse
paymentResponseDecoder =
    Decode.map3 PaymentResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "message" Decode.string)
        (Decode.field "paymentCompleted" Decode.bool)



-- Call the payment-complete endpoint with checkout data


completePayment : CheckoutData -> Cmd Msg
completePayment checkoutData =
    Http.post
        { url = "/api/stripe/payment-complete"
        , body = Http.jsonBody (encodeCheckoutData checkoutData)
        , expect = Http.expectJson PaymentProcessed paymentResponseDecoder
        }



-- Encode checkout data for the API


encodeCheckoutData : CheckoutData -> Encode.Value
encodeCheckoutData data =
    Encode.object
        [ ( "email", Encode.string data.email )
        , ( "firstName", Encode.string data.firstName )
        , ( "lastName", Encode.string data.lastName )
        , ( "stripeCustomerId", Encode.string data.stripeCustomerId )
        , ( "stripeSubscriptionId", Encode.string data.stripeSubscriptionId )
        , ( "stripeUsageItemId", Encode.string data.stripeUsageItemId )
        ]



-- Process checkout data by making the API call


processCheckoutData : CheckoutData -> Cmd Msg
processCheckoutData checkoutData =
    -- After a small delay to allow UI to update, process the checkout data
    Task.perform (\_ -> ProcessCheckoutData checkoutData) (Task.succeed ())



-- Helper functions for drag and drop


dropDecoder : Decode.Decoder Msg
dropDecoder =
    Decode.at [ "dataTransfer", "files" ] (Decode.oneOrMore GotFiles File.decoder)


hijackOn : String -> Decode.Decoder msg -> Attribute msg
hijackOn event decoder =
    preventDefaultOn event (Decode.map hijack decoder)


hijack : msg -> ( msg, Bool )
hijack msg =
    ( msg, True )

================
File: frontend/src/Ports.elm
================
port module Ports exposing
    ( clearDebugInfo
    , copyToClipboard
    , getOrgSlug
    , onCopyResult
    , receiveOrgSlug
    , saveDebugInfo
    , viewingPhone
    )

-- Port for requesting the orgSlug from JavaScript


port getOrgSlug : () -> Cmd msg



-- Port for receiving the orgSlug from JavaScript


port receiveOrgSlug : (String -> msg) -> Sub msg



-- Port for copying text to clipboard


port copyToClipboard : String -> Cmd msg



-- Port for receiving copy result from JavaScript


port onCopyResult : (Bool -> msg) -> Sub msg



-- Port for saving debug info


port saveDebugInfo : String -> Cmd msg



-- Port for clearing debug info


port clearDebugInfo : () -> Cmd msg



-- Port for tracking when the user is viewing the phone preview


port viewingPhone : (Bool -> msg) -> Sub msg

================
File: frontend/src/PriceModel.elm
================
module PriceModel exposing (CalculationInputs, view)

import Html exposing (Html, div, h4, p, table, tbody, td, text, tr)
import Html.Attributes exposing (class)


type alias CalculationInputs =
    { contacts : Int
    , averageAge : Float
    , rolloverPercent : Float
    , commissionRate : Float
    }



-- Calculate the price based on the number of contacts


calculatePrice : Int -> Int
calculatePrice contacts =
    let
        basePrice =
            150

        -- Base price for up to 250 contacts
        additionalTiers =
            Basics.max 0 (ceiling (toFloat (Basics.max 0 (contacts - 250)) / 250))

        additionalPrice =
            additionalTiers * 35

        -- $35 for each additional 250 contacts
    in
    basePrice + additionalPrice



-- Parse calculation inputs from the model
-- Calculate revenue based on inputs


type alias RevenueModel =
    { ltvGainPerYear : Float
    , ltvPerContact : Float
    , price : Int
    , firstYearPayout : Float
    , ltvGainPerContact : Float
    , contactsRolledOver : Float
    , roi : Float
    }


calculateRevenue : CalculationInputs -> RevenueModel
calculateRevenue inputs =
    let
        -- Constants
        price =
            calculatePrice inputs.contacts

        maxYears =
            6.0

        ltvDiscountMultiplier =
            1.0

        -- Basic calculations
        ltvPerContact =
            inputs.commissionRate * maxYears * ltvDiscountMultiplier

        rolloverFraction =
            inputs.rolloverPercent / 100.0

        contactsRolledOver =
            toFloat inputs.contacts * rolloverFraction

        -- LTV calculations
        remainingYears =
            maxYears - inputs.averageAge

        additionalYearsForRolled =
            maxYears - remainingYears

        additionalYearsDiscount =
            (1 - ltvDiscountMultiplier) * additionalYearsForRolled / maxYears

        additionalYearsDiscountMultiplier =
            1 - additionalYearsDiscount

        ltvGainPerContact =
            inputs.commissionRate * additionalYearsForRolled * additionalYearsDiscountMultiplier

        ltvGainPerYear =
            ltvGainPerContact * contactsRolledOver

        contactsAtMaxAge =
            -- assumes equal distribution across 6 years
            toFloat inputs.contacts / 6.0

        firstYearPayout =
            contactsAtMaxAge * inputs.commissionRate * rolloverFraction

        roi =
            ltvGainPerYear / toFloat (calculatePrice inputs.contacts * 12)
    in
    { ltvGainPerYear = ltvGainPerYear
    , ltvPerContact = ltvPerContact
    , price = price
    , firstYearPayout = firstYearPayout
    , ltvGainPerContact = ltvGainPerContact
    , contactsRolledOver = contactsRolledOver
    , roi = roi
    }


view : CalculationInputs -> Html msg
view inputs =
    let
        revenueModel =
            calculateRevenue inputs
    in
    div [ class "space-y-6" ]
        [ div
            [ class "bg-white p-4 rounded-md shadow-sm border border-gray-200" ]
            [ h4 [ class "text-md font-medium text-gray-800 mb-4" ] [ text "Subscription Cost" ]
            , table [ class "w-full text-sm" ]
                [ tbody []
                    [ tr [ class "border-b border-gray-200" ]
                        [ td [ class "py-2 text-gray-600" ] [ text "Base monthly subscription:" ]
                        , td [ class "py-2 text-right font-medium" ] [ text "$150/month" ]
                        ]
                    , if revenueModel.price /= 150 then
                        tr [ class "border-b border-gray-200" ]
                            [ td [ class "py-2 text-gray-600" ] [ text "Additional monthly contacts cost:" ]
                            , td [ class "py-2 text-right font-medium" ]
                                [ text <| "$" ++ addCommas (String.fromInt (revenueModel.price - 150)) ++ "/month" ]
                            ]

                      else
                        text ""

                    {--
                    , tr [ class "border-b border-gray-200" ]
                        [ td [ class "py-2 font-medium" ] [ text "Monthly total:" ]
                        , td [ class "py-2 text-right font-bold text-indigo-600" ]
                            [ text <| "$" ++ String.fromInt (Maybe.withDefault 0 model.calculatedPrice) ]
                        ]
                    --}
                    , tr []
                        [ td [ class "py-2 font-medium" ] [ text "Annual Cost:" ]
                        , td [ class "py-2 text-right font-bold text-indigo-600" ]
                            [ text <| "$" ++ addCommas (String.fromInt (revenueModel.price * 12)) ]
                        ]
                    ]
                ]
            ]
        , div [ class "bg-white p-4 rounded-md shadow-sm border border-gray-200" ]
            [ h4 [ class "text-md font-medium text-gray-800 mb-4" ] [ text "Revenue Impact" ]
            , p [ class "text-xs text-gray-600 mb-4 italic" ]
                [ text "Calculations assume an average book age of 3 years." ]
            , div [ class "space-y-4" ]
                [ div [ class "grid grid-cols-1 gap-2" ]
                    [ div [ class "flex justify-between items-center border-b border-gray-200 py-2" ]
                        [ div [ class "text-gray-600 truncate pr-4" ] [ text "Lifetime Revenue Per Contact:" ]
                        , div [ class "text-right font-medium whitespace-nowrap" ]
                            [ text <| "$" ++ formatPreciseMoney revenueModel.ltvPerContact ]
                        ]
                    , div [ class "flex justify-between items-center border-b border-gray-200 py-2" ]
                        [ div [ class "text-gray-600 truncate pr-4" ] [ text "Lifetime Gain Per Contact Rolled Over:" ]
                        , div [ class "text-right font-medium whitespace-nowrap" ]
                            [ text <| "$" ++ formatPreciseMoney revenueModel.ltvGainPerContact ]
                        ]
                    , div [ class "flex justify-between items-center border-b border-gray-200 py-2" ]
                        [ div [ class "text-gray-600 truncate pr-4" ] [ text "Contacts Rolled Over Per Year:" ]
                        , div [ class "text-right font-medium whitespace-nowrap" ]
                            [ text <| formatNumber revenueModel.contactsRolledOver ]
                        ]

                    {--
                    , div [ class "flex justify-between items-center border-b border-gray-200 py-2" ]
                        [ div [ class "text-gray-600 truncate pr-4" ] [ text "Average First Year Payout:" ]
                        , div [ class "text-right font-medium text-green-600 whitespace-nowrap" ]
                            [ text <| "$" ++ formatPreciseMoney revenueModel.firstYearPayout ]
                        ]
                    --}
                    , div [ class "flex justify-between items-center border-b border-gray-200 py-2" ]
                        [ div [ class "text-gray-600 truncate pr-4" ] [ text "Lifetime Revenue Added Per Year:" ]
                        , div [ class "text-right font-bold text-indigo-600 whitespace-nowrap" ]
                            [ text <| "$" ++ formatRoughMoney revenueModel.ltvGainPerYear ]
                        ]
                    , div [ class "flex justify-between items-center py-2" ]
                        [ div [ class "font-medium text-gray-700 truncate pr-4" ] [ text "Return on Investment:" ]
                        , div [ class "text-right font-bold text-green-600 whitespace-nowrap" ]
                            [ text <| formatNumber revenueModel.roi ++ "x" ]
                        ]
                    ]
                ]
            ]
        ]


formatPreciseMoney : Float -> String
formatPreciseMoney value =
    let
        -- Round to 2 decimal places
        roundedValue =
            round10 2 value

        -- Format the number with commas and 2 decimal places
        valueStr =
            String.fromFloat roundedValue
    in
    formatMoney valueStr


formatRoughMoney : Float -> String
formatRoughMoney value =
    let
        roundedValue =
            round10 0 value
    in
    formatMoney (String.fromFloat roundedValue)


formatNumber : Float -> String
formatNumber value =
    if value == toFloat (round value) then
        -- It's a whole number - show no decimals
        String.fromInt (round value)

    else
        -- Show with appropriate precision
        String.fromFloat (round10 1 value)



-- Helper function to format money values


formatMoney : String -> String
formatMoney valueStr =
    let
        parts =
            String.split "." valueStr

        intPart =
            List.head parts |> Maybe.withDefault ""

        decPart =
            List.drop 1 parts
                |> List.head
                |> Maybe.withDefault ""
                |> (\s ->
                        if String.length s == 0 then
                            "00"

                        else if String.length s == 1 then
                            s ++ "0"

                        else
                            String.left 2 s
                   )

        -- Format integer part with commas
        formattedInt =
            addCommas intPart
    in
    formattedInt ++ "." ++ decPart



-- Add commas to numbers for better readability


addCommas : String -> String
addCommas str =
    if String.length str <= 3 then
        str

    else
        let
            -- Recursively add commas
            addCommasHelper : String -> String -> String
            addCommasHelper acc remaining =
                if String.length remaining <= 3 then
                    remaining ++ acc

                else
                    let
                        len =
                            String.length remaining

                        front =
                            String.dropRight 3 remaining

                        back =
                            String.right 3 remaining
                    in
                    addCommasHelper ("," ++ back ++ acc) front
        in
        addCommasHelper "" str



-- Helper function to round to specific decimal places


round10 : Int -> Float -> Float
round10 n value =
    let
        factor =
            10 ^ n |> toFloat
    in
    (value * factor) |> round |> toFloat |> (\x -> x / factor)

================
File: frontend/src/Pricing.elm
================
module Pricing exposing (Model, Msg, init, subscriptions, update, view)

import Basics
import Chart as C
import Chart.Attributes as CA
import Chart.Item as CI
import Dict
import Earnings
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import List.Extra
import MyIcon
import PriceModel
import Svg
import Svg.Attributes as SA


type alias Model =
    { calculationInputs : PriceModel.CalculationInputs
    , calculatorExpanded : Bool
    , activePreset : Maybe Int
    , earningsInputs :
        { overheadCost : Float
        , customerAcquisitionCost : Float
        , earningsMultiple : Float
        }
    }


type alias Pricing =
    { contacts : Int
    , price : Float
    }


basePricing =
    { contacts = 0
    , price = 50
    }


tier1Pricing =
    { contacts = 250
    , price = 35
    }


init : ( Model, Cmd Msg )
init =
    ( { calculationInputs =
            { contacts = 1000
            , averageAge = 3.0
            , rolloverPercent = 7
            , commissionRate = 300
            }
      , calculatorExpanded = True
      , activePreset = Nothing
      , earningsInputs =
            { overheadCost = 1000 * 100 -- Default to number of contacts * 100
            , customerAcquisitionCost = 400 -- Default CAC of 400
            , earningsMultiple = 10 -- Default to 10x multiple
            }
      }
    , Cmd.none
    )


type Msg
    = ContactCountChanged Int
    | RolloverPercentChanged Float
    | CommissionRateChanged Float
    | ToggleCalculator
    | SelectPreset Int
    | OverheadCostChanged Float
    | CustomerAcquisitionCostChanged Float
    | EarningsMultipleChanged Float


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        ContactCountChanged count ->
            let
                oldCalculationInputs =
                    model.calculationInputs

                newCalculationInputs =
                    { oldCalculationInputs | contacts = count }

                oldEarningsInputs =
                    model.earningsInputs

                newEarningsInputs =
                    { oldEarningsInputs | overheadCost = toFloat count * 100 }
            in
            ( { model
                | calculationInputs = newCalculationInputs
                , earningsInputs = newEarningsInputs
                , activePreset = Nothing
              }
            , Cmd.none
            )

        RolloverPercentChanged percent ->
            let
                oldCalculationInputs =
                    model.calculationInputs

                newCalculationInputs =
                    { oldCalculationInputs | rolloverPercent = percent }
            in
            ( { model | calculationInputs = newCalculationInputs }
            , Cmd.none
            )

        CommissionRateChanged rate ->
            let
                oldCalculationInputs =
                    model.calculationInputs

                newCalculationInputs =
                    { oldCalculationInputs | commissionRate = rate }
            in
            ( { model | calculationInputs = newCalculationInputs }
            , Cmd.none
            )

        ToggleCalculator ->
            ( { model | calculatorExpanded = not model.calculatorExpanded }
            , Cmd.none
            )

        SelectPreset value ->
            let
                oldCalculationInputs =
                    model.calculationInputs

                newCalculationInputs =
                    { oldCalculationInputs | contacts = value }
            in
            ( { model
                | calculationInputs = newCalculationInputs
                , activePreset = Just value
              }
            , Cmd.none
            )

        OverheadCostChanged cost ->
            let
                oldEarningsInputs =
                    model.earningsInputs

                newEarningsInputs =
                    { oldEarningsInputs | overheadCost = cost }
            in
            ( { model | earningsInputs = newEarningsInputs }
            , Cmd.none
            )

        CustomerAcquisitionCostChanged cost ->
            let
                oldEarningsInputs =
                    model.earningsInputs

                newEarningsInputs =
                    { oldEarningsInputs | customerAcquisitionCost = cost }
            in
            ( { model | earningsInputs = newEarningsInputs }
            , Cmd.none
            )

        EarningsMultipleChanged multiple ->
            let
                oldEarningsInputs =
                    model.earningsInputs

                newEarningsInputs =
                    { oldEarningsInputs | earningsMultiple = multiple }
            in
            ( { model | earningsInputs = newEarningsInputs }
            , Cmd.none
            )



-- Helper functions


formatNumber : Float -> String
formatNumber value =
    if value == toFloat (round value) then
        -- It's a whole number - show no decimals
        addCommas (String.fromInt (round value))

    else
        -- Show with appropriate precision
        String.fromFloat (round10 1 value)


addCommas : String -> String
addCommas str =
    let
        parts =
            String.split "." str

        beforeDecimal =
            List.head parts |> Maybe.withDefault ""

        afterDecimal =
            List.tail parts |> Maybe.withDefault [] |> List.head |> Maybe.withDefault ""

        formatBeforeDecimal s =
            if String.length s <= 3 then
                s

            else
                let
                    reversedDigits =
                        String.reverse s

                    withCommas =
                        reversedDigits
                            |> String.toList
                            |> List.indexedMap
                                (\i c ->
                                    if i > 0 && modBy 3 i == 0 then
                                        [ ',', c ]

                                    else
                                        [ c ]
                                )
                            |> List.concat
                            |> String.fromList
                            |> String.reverse
                in
                withCommas
    in
    if String.isEmpty afterDecimal then
        formatBeforeDecimal beforeDecimal

    else
        formatBeforeDecimal beforeDecimal ++ "." ++ afterDecimal


round10 : Int -> Float -> Float
round10 n value =
    let
        factor =
            10 ^ n |> toFloat
    in
    (value * factor) |> round |> toFloat |> (\x -> x / factor)



-- New graduated pricing calculation function


calculatePricing : Int -> { basePrice : Float, tierPrices : List { contacts : Int, price : Float }, totalPrice : Float }
calculatePricing contacts =
    let
        baseSubscription =
            basePricing.price

        -- Calculate number of additional 250-contact tiers needed
        additionalTiers =
            if contacts <= tier1Pricing.contacts then
                0

            else
                ceiling (toFloat (contacts - tier1Pricing.contacts) / toFloat tier1Pricing.contacts)

        -- Calculate price for additional tiers
        additionalPrice =
            toFloat additionalTiers * tier1Pricing.price

        totalPrice =
            baseSubscription + additionalPrice

        -- Create list of tier prices for display
        tierPrices =
            [ { contacts = contacts - tier1Pricing.contacts
              , price = additionalPrice
              }
            ]
    in
    { basePrice = baseSubscription
    , tierPrices = tierPrices
    , totalPrice = totalPrice
    }



-- Calculate enhanced revenue metrics based on MedicareMax model


type alias EnhancedRevenue =
    { price : Float
    , annualPrice : Float
    , monthlyConverted : Float
    , annualConverted : Float
    , monthlyLtv : Float
    , annualLtv : Float
    , roi : Float
    , netBenefit : Float
    }


calculateEnhancedRevenue : PriceModel.CalculationInputs -> EnhancedRevenue
calculateEnhancedRevenue inputs =
    let
        -- Constants from MedicareMax model
        annualConversionRate =
            inputs.rolloverPercent / 100

        -- Using rollover percent as conversion rate
        monthlyRate =
            monthlyConversionRate inputs

        contactLtv =
            inputs.commissionRate * 3

        -- Pricing calculation
        pricing =
            calculatePricing inputs.contacts

        -- Converted contacts
        monthlyConverted =
            toFloat inputs.contacts * monthlyRate |> round |> toFloat

        annualConverted =
            toFloat inputs.contacts * annualConversionRate

        -- LTV calculations
        monthlyLtv =
            monthlyConverted * contactLtv

        annualLtv =
            annualConverted * contactLtv

        -- ROI and benefit
        annualPrice =
            pricing.totalPrice * 12

        roi =
            annualLtv / annualPrice

        netBenefit =
            annualLtv - annualPrice
    in
    { price = pricing.totalPrice
    , annualPrice = annualPrice
    , monthlyConverted = monthlyConverted
    , annualConverted = annualConverted
    , monthlyLtv = monthlyLtv
    , annualLtv = annualLtv
    , roi = roi
    , netBenefit = netBenefit
    }



-- Main view


view : Model -> Html Msg
view model =
    let
        pricing =
            calculatePricing model.calculationInputs.contacts

        revenue =
            calculateEnhancedRevenue model.calculationInputs

        pricePerContact =
            if model.calculationInputs.contacts > 0 then
                pricing.totalPrice / toFloat model.calculationInputs.contacts

            else
                0
    in
    div [ class "min-h-screen bg-white flex flex-col items-center py-0 px-4 sm:px-6 lg:px-8" ]
        [ div [ class "max-w-5xl w-full space-y-8" ]
            [ div [ class "flex flex-col items-center" ]
                [ h2 [ class "text-4xl sm:text-3xl font-semibold text-gray-900 mt-6" ] [ text "Special Launch Pricing" ]
                , p [ class "text-gray-500 mt-2 mb-6 text-center" ] [ text "Transparent pricing. Pay for what you use." ]

                -- Pricing Tiers - Responsive Layout
                , div [ class "w-full flex flex-col md:flex-row gap-4 sm:gap-6 mb-8 sm:mb-12" ]
                    [ div [ class "w-full md:w-1/2 p-5 sm:p-6 border rounded-lg bg-white shadow-sm" ]
                        [ div [ class "flex flex-col px-2 sm:px-3" ]
                            [ div [ class "flex justify-between items-center mb-3" ]
                                [ h3 [ class "font-bold text-lg sm:text-xl text-gray-800" ] [ text "Base Subscription" ]
                                , span [ class "px-3 py-1 bg-green-100 text-green-800 text-sm rounded-full" ]
                                    [ text "Includes 250 contacts" ]
                                ]
                            , div [ class "flex items-baseline gap-2 mb-3" ]
                                [ span [ class "text-2xl sm:text-3xl font-bold text-gray-900" ] [ text "$50" ]
                                , span [ class "text-gray-600" ] [ text "/month" ]
                                ]
                            , p [ class "text-gray-600 text-sm" ]
                                [ text "Includes all features of the Medicare Max portal platform." ]
                            ]
                        ]
                    , div [ class "w-full md:w-1/2 p-5 sm:p-6 border rounded-lg bg-white shadow-sm" ]
                        [ div [ class "flex flex-col px-2 sm:px-3" ]
                            [ div [ class "flex justify-between items-center mb-3" ]
                                [ h3 [ class "font-bold text-lg sm:text-xl text-gray-800" ] [ text "Additional Contacts" ]
                                , span [ class "px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full" ]
                                    [ text "Pay as you go" ]
                                ]
                            , div [ class "flex items-baseline gap-2 mb-3" ]
                                [ span [ class "text-2xl sm:text-3xl font-bold text-gray-900" ] [ text <| formatCurrency tier1Pricing.price ]
                                , span [ class "text-gray-600" ] [ text "/250 contacts" ]
                                ]
                            , p [ class "text-gray-600 text-sm" ]
                                [ text "Simple per-tier pricing above base tier." ]
                            ]
                        ]
                    ]

                -- Calculator Section - Responsive Layout
                , div [ class "w-full grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8" ]
                    [ div [ class "flex flex-col space-y-6" ]
                        [ div [ class "flex flex-col sm:flex-row gap-4 sm:gap-6 items-start" ]
                            [ div [ class "w-full sm:w-48" ]
                                [ label [ class "block text-gray-700 text-sm font-bold mb-2", for "contacts" ]
                                    [ text "Number of Contacts:" ]
                                , input
                                    [ id "contacts"
                                    , type_ "number"
                                    , value (String.fromInt model.calculationInputs.contacts)
                                    , onInput (\str -> ContactCountChanged (String.toInt str |> Maybe.withDefault 0))
                                    , class "shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline w-full"
                                    , Html.Attributes.min "0"
                                    ]
                                    []
                                ]
                            , div [ class "flex-1 w-full" ]
                                [ div [ class "grid grid-cols-2 sm:grid-cols-3 gap-2" ]
                                    ([ 250, 1000, 5000, 10000, 20000, 40000 ]
                                        |> List.map
                                            (\presetValue ->
                                                let
                                                    isActive =
                                                        model.activePreset == Just presetValue

                                                    baseClass =
                                                        "hover:bg-blue-200 text-blue-800 font-semibold py-1 px-2 rounded-full text-sm text-center"

                                                    activeClass =
                                                        "bg-blue-500 text-white"

                                                    inactiveClass =
                                                        "bg-blue-100"
                                                in
                                                button
                                                    [ onClick (SelectPreset presetValue)
                                                    , class
                                                        (baseClass
                                                            ++ " "
                                                            ++ (if isActive then
                                                                    activeClass

                                                                else
                                                                    inactiveClass
                                                               )
                                                        )
                                                    ]
                                                    [ text (formatNumber (toFloat presetValue)) ]
                                            )
                                    )
                                ]
                            ]
                        , div [ class "bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-4" ]
                            [ h3 [ class "text-lg font-bold text-gray-800 mb-3" ] [ text "Your Plan Summary" ]
                            , div [ class "space-y-2" ]
                                [ div [ class "flex justify-between items-center text-sm" ]
                                    [ span [ class "text-gray-600" ] [ text "Base subscription:" ]
                                    , span [ class "font-bold" ] [ text (formatCurrency pricing.basePrice) ]
                                    ]
                                , List.filterMap
                                    (\tier ->
                                        if tier.contacts > 0 && tier.price > 0 then
                                            Just
                                                (div [ class "flex justify-between items-center text-sm" ]
                                                    [ span [ class "text-gray-600" ]
                                                        [ text
                                                            (if tier.contacts <= 0 then
                                                                ""

                                                             else
                                                                let
                                                                    numTiers =
                                                                        ceiling (toFloat tier.contacts / toFloat tier1Pricing.contacts)
                                                                in
                                                                String.fromInt numTiers
                                                                    ++ " bundle"
                                                                    ++ (if numTiers > 1 then
                                                                            "s"

                                                                        else
                                                                            ""
                                                                       )
                                                                    ++ " of 250 @ "
                                                                    ++ formatCurrency tier1Pricing.price
                                                                    ++ " each:"
                                                            )
                                                        ]
                                                    , span [ class "font-bold" ] [ text (formatCurrency tier.price) ]
                                                    ]
                                                )

                                        else
                                            Nothing
                                    )
                                    pricing.tierPrices
                                    |> div [ class "space-y-2" ]
                                ]
                            ]
                        ]
                    , div [ class "flex items-center justify-center" ]
                        [ div [ class "bg-blue-600 rounded-lg p-6 text-white text-center w-full lg:w-96" ]
                            [ h2 [ class "font-bold mb-2 text-lg" ] [ text "Monthly Price" ]
                            , div [ class "text-4xl sm:text-5xl font-bold mb-2" ] [ text (formatCurrency pricing.totalPrice) ]
                            , p [ class "text-sm text-blue-100" ]
                                [ text ("For " ++ formatNumber (toFloat model.calculationInputs.contacts) ++ " contacts") ]
                            ]
                        ]
                    ]

                -- Value Analysis Section - Responsive Layout
                , div [ class "w-full mt-8 mb-8" ]
                    [ div [ class "bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-4 border border-purple-100" ]
                        [ div [ class "flex flex-col gap-6" ]
                            [ div [ class "grid grid-cols-1 lg:grid-cols-3 gap-6" ]
                                [ div [ class "flex flex-col gap-4" ]
                                    [ h2 [ class "text-lg font-bold text-gray-800" ] [ text "Value Analysis" ]
                                    , div [ class "grid grid-cols-2 gap-4" ]
                                        [ div [ class "flex flex-col gap-5" ]
                                            -- Left column for inputs
                                            [ div [ class "flex flex-col" ]
                                                [ label
                                                    [ class "block text-sm font-medium text-gray-700 mb-1 cursor-pointer h-5"
                                                    , for "commission-rate"
                                                    ]
                                                    [ text "Annual Commission" ]
                                                , div [ class "flex rounded-md shadow-sm w-[100px]" ]
                                                    [ div [ class "flex-shrink-0 inline-flex items-center px-2 rounded-l-md border border-r-0 border-gray-300 bg-indigo-100 text-indigo-800 text-sm font-medium" ]
                                                        [ text "$" ]
                                                    , input
                                                        [ class "w-full border border-gray-300 rounded-none rounded-r-md shadow-sm py-1 px-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-center"
                                                        , id "commission-rate"
                                                        , type_ "number"
                                                        , placeholder "Commission"
                                                        , value (String.fromFloat model.calculationInputs.commissionRate)
                                                        , onInput (\str -> CommissionRateChanged (String.toFloat str |> Maybe.withDefault 0))
                                                        , Html.Attributes.min "0"
                                                        , Html.Attributes.step "5"
                                                        ]
                                                        []
                                                    ]
                                                ]
                                            , div [ class "flex flex-col" ]
                                                [ label
                                                    [ class "block text-sm font-medium text-gray-700 mb-1 cursor-pointer h-5"
                                                    , for "rollover-percent"
                                                    ]
                                                    [ text "Annual Rollover" ]
                                                , div [ class "flex rounded-md shadow-sm w-[100px]" ]
                                                    [ div [ class "flex-shrink-0 inline-flex items-center px-2 rounded-l-md border border-r-0 border-gray-300 bg-indigo-100 text-indigo-800 text-sm font-medium" ]
                                                        [ text "%" ]
                                                    , input
                                                        [ class "w-full border border-gray-300 rounded-none rounded-r-md shadow-sm py-1 px-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-center"
                                                        , id "rollover-percent"
                                                        , type_ "number"
                                                        , placeholder "Rollover"
                                                        , value (String.fromFloat model.calculationInputs.rolloverPercent)
                                                        , onInput (\str -> RolloverPercentChanged (String.toFloat str |> Maybe.withDefault 0))
                                                        , Html.Attributes.min "0"
                                                        , Html.Attributes.max "100"
                                                        , Html.Attributes.step "0.1"
                                                        ]
                                                        []
                                                    ]
                                                ]
                                            ]
                                        , div [ class "flex flex-col gap-6" ]
                                            -- Right column for outputs
                                            [ div [ class "flex flex-col" ]
                                                [ div [ class "text-sm font-medium text-gray-700 h-5" ] [ text "Baseline Commission" ]
                                                , div [ class "h-[30px] flex flex-col justify-start" ]
                                                    [ div [ class "text-lg font-semibold text-indigo-600 -mb-1" ]
                                                        [ text ("$" ++ formatNumber (model.calculationInputs.commissionRate * 6)) ]
                                                    , div [ class "text-sm font-normal text-gray-500" ] [ text "6 years" ]
                                                    ]
                                                ]
                                            , div [ class "flex flex-col" ]
                                                [ div [ class "text-sm font-medium text-gray-700 h-5" ] [ text "Added Commission" ]
                                                , div [ class "h-[30px] flex flex-col justify-start" ]
                                                    [ div [ class "text-lg font-semibold text-indigo-600 -mb-1" ]
                                                        [ text ("$" ++ formatNumber (model.calculationInputs.commissionRate * 3)) ]
                                                    , div [ class "text-sm font-normal text-gray-500" ] [ text "3 extra yrs (on average)" ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                , div [ class "bg-white rounded-lg p-3 shadow-sm border border-gray-200" ]
                                    [ h3 [ class "font-bold text-gray-700 mb-2 text-md" ] [ text "Monthly Impact" ]
                                    , div [ class "space-y-2 text-sm" ]
                                        [ div [ class "flex justify-between items-start" ]
                                            [ div [ class "flex flex-col" ]
                                                [ span [ class "text-gray-600" ] [ text "Investment:" ]
                                                ]
                                            , span [ class "font-bold" ] [ text (formatCurrencyRounded revenue.price) ]
                                            ]
                                        , div [ class "flex justify-between items-start" ]
                                            [ div [ class "flex flex-col" ]
                                                [ span [ class "text-gray-600" ] [ text "Converted contacts:" ]
                                                , span [ class "text-xs text-gray-500" ]
                                                    [ text
                                                        ("("
                                                            ++ formatNumber (monthlyConversionRate model.calculationInputs * 100)
                                                            ++ "% of "
                                                            ++ formatNumber (toFloat model.calculationInputs.contacts)
                                                            ++ ")"
                                                        )
                                                    ]
                                                ]
                                            , span [ class "font-bold" ] [ text (formatNumber revenue.monthlyConverted) ]
                                            ]
                                        , div [ class "flex justify-between items-start" ]
                                            [ div [ class "flex flex-col" ]
                                                [ span [ class "text-gray-600" ] [ text "New LTV Added:" ]
                                                , span [ class "text-xs text-gray-500" ]
                                                    [ text ("(" ++ formatNumber revenue.monthlyConverted ++ " × $" ++ formatNumber (model.calculationInputs.commissionRate * 3) ++ ")") ]
                                                ]
                                            , span [ class "font-bold text-purple-700" ] [ text (formatCurrencyRounded revenue.monthlyLtv) ]
                                            ]
                                        ]
                                    ]
                                , div [ class "bg-white rounded-lg p-3 shadow-sm border border-gray-200" ]
                                    [ h3 [ class "font-bold text-gray-700 mb-2 text-md" ] [ text "Annual Impact" ]
                                    , div [ class "space-y-2 text-sm" ]
                                        [ div [ class "flex justify-between items-start" ]
                                            [ div [ class "flex flex-col" ]
                                                [ span [ class "text-gray-600" ] [ text "Investment:" ]
                                                ]
                                            , span [ class "font-bold" ] [ text (formatCurrencyRounded revenue.annualPrice) ]
                                            ]
                                        , div [ class "flex justify-between items-start" ]
                                            [ div [ class "flex flex-col" ]
                                                [ span [ class "text-gray-600" ] [ text "Converted contacts:" ]
                                                , span [ class "text-xs text-gray-500" ]
                                                    [ text
                                                        ("("
                                                            ++ formatNumber model.calculationInputs.rolloverPercent
                                                            ++ "% of "
                                                            ++ formatNumber (toFloat model.calculationInputs.contacts)
                                                            ++ ")"
                                                        )
                                                    ]
                                                ]
                                            , span [ class "font-bold" ] [ text (formatNumber revenue.annualConverted) ]
                                            ]
                                        , div [ class "flex justify-between items-start" ]
                                            [ div [ class "flex flex-col" ]
                                                [ span [ class "text-gray-600" ] [ text "New LTV Added:" ]
                                                , span [ class "text-xs text-gray-500" ]
                                                    [ text ("(" ++ formatNumber revenue.annualConverted ++ " × $" ++ formatNumber (model.calculationInputs.commissionRate * 3) ++ ")") ]
                                                ]
                                            , span [ class "font-bold text-green-700" ] [ text (formatCurrencyRounded revenue.annualLtv) ]
                                            ]
                                        ]
                                    ]
                                ]
                            , div [ class "mt-6" ]
                                [ div [ class "bg-emerald-600 rounded-lg p-4 sm:p-6 text-white text-center flex flex-col sm:flex-row justify-center gap-8 sm:gap-16" ]
                                    [ div [ class "text-center" ]
                                        [ h3 [ class "text-lg mb-2 font-medium text-emerald-100" ] [ text "Return on Investment" ]
                                        , div [ class "text-3xl sm:text-4xl font-bold mb-1" ] [ text (formatNumber revenue.roi ++ "x") ]
                                        ]
                                    , div [ class "text-center" ]
                                        [ h3 [ class "text-lg mb-2 font-medium text-emerald-100" ] [ text "Net Annual Benefit" ]
                                        , div [ class "text-3xl sm:text-4xl font-bold mb-1" ] [ text (formatCurrencyRounded revenue.netBenefit) ]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ]

                -- Earnings Parameters Section
                {--
                , div [ class "w-full mt-8 bg-white rounded-lg p-4 shadow-sm border border-gray-200" ]
                    [ h3 [ class "text-lg font-bold text-gray-800 mb-4" ] [ text "Earnings Model Parameters" ]
                    , div [ class "flex flex-col gap-5" ]
                        [ div [ class "flex flex-col" ]
                            [ label
                                [ class "block text-sm font-medium text-gray-700 mb-1 cursor-pointer h-5"
                                , for "annual-overhead"
                                ]
                                [ text "Annual Overhead" ]
                            , div [ class "flex rounded-md shadow-sm w-[200px]" ]
                                [ div [ class "flex-shrink-0 inline-flex items-center px-2 rounded-l-md border border-r-0 border-gray-300 bg-indigo-100 text-indigo-800 text-sm font-medium" ]
                                    [ text "$" ]
                                , input
                                    [ id "annual-overhead"
                                    , type_ "number"
                                    , class "w-full border border-gray-300 rounded-none rounded-r-md shadow-sm py-1 px-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-center"
                                    , value (String.fromFloat model.earningsInputs.overheadCost)
                                    , onInput (\str -> OverheadCostChanged (String.toFloat str |> Maybe.withDefault 0))
                                    , Html.Attributes.step "1000"
                                    , Html.Attributes.min "0"
                                    ]
                                    []
                                ]
                            ]
                        , div [ class "flex flex-col" ]
                            [ label
                                [ class "block text-sm font-medium text-gray-700 mb-1 cursor-pointer h-5"
                                , for "customer-acquisition-cost"
                                ]
                                [ text "Customer Acquisition Cost" ]
                            , div [ class "flex rounded-md shadow-sm w-[200px]" ]
                                [ div [ class "flex-shrink-0 inline-flex items-center px-2 rounded-l-md border border-r-0 border-gray-300 bg-indigo-100 text-indigo-800 text-sm font-medium" ]
                                    [ text "$" ]
                                , input
                                    [ id "customer-acquisition-cost"
                                    , type_ "number"
                                    , class "w-full border border-gray-300 rounded-none rounded-r-md shadow-sm py-1 px-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-center"
                                    , value (String.fromFloat model.earningsInputs.customerAcquisitionCost)
                                    , onInput (\str -> CustomerAcquisitionCostChanged (String.toFloat str |> Maybe.withDefault 0))
                                    , Html.Attributes.step "10"
                                    , Html.Attributes.min "0"
                                    ]
                                    []
                                ]
                            ]
                        , div [ class "flex flex-col" ]
                            [ label
                                [ class "block text-sm font-medium text-gray-700 mb-1 cursor-pointer h-5"
                                , for "earnings-multiple"
                                ]
                                [ text "Earnings Multiple" ]
                            , div [ class "flex rounded-md shadow-sm w-[200px]" ]
                                [ div [ class "flex-shrink-0 inline-flex items-center px-2 rounded-l-md border border-r-0 border-gray-300 bg-indigo-100 text-indigo-800 text-sm font-medium" ]
                                    [ text "x" ]
                                , input
                                    [ id "earnings-multiple"
                                    , type_ "number"
                                    , class "w-full border border-gray-300 rounded-none rounded-r-md shadow-sm py-1 px-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-center"
                                    , value (String.fromFloat model.earningsInputs.earningsMultiple)
                                    , onInput (\str -> EarningsMultipleChanged (String.toFloat str |> Maybe.withDefault 0))
                                    , Html.Attributes.step "0.1"
                                    , Html.Attributes.min "0"
                                    ]
                                    []
                                ]
                            ]
                        ]
                    ]

                -- Earnings Model Description
                , div [ class "w-full mt-4 bg-blue-50 rounded-lg p-4 text-sm text-blue-700" ]
                    [ div [ class "font-semibold mb-2" ] [ text "Model Assumptions:" ]
                    , ul [ class "list-disc list-inside space-y-1" ]
                        [ li [] [ text "Flat Case: Maintains current book size by replacing churned customers, incurring CAC" ]
                        , li [] [ text "Rollover Case: Grows through rollovers, accumulating additional revenue over time" ]
                        ]
                    ]
                , div [ class "w-full overflow-x-auto" ]
                    [ renderRevenueChart model.calculationInputs ]
                --}
                , div [ class "w-full overflow-x-auto" ]
                    [ renderLtvChart model.calculationInputs ]

                {--
                , div [ class "w-full overflow-x-auto" ]
                    [ renderEarningsChart model ]
                , div [ class "w-full overflow-x-auto" ]
                    [ renderEnterpriseValueChart model ]
                --}
                ]
            ]
        ]



-- Helper function to calculate monthly conversion rate


monthlyConversionRate : PriceModel.CalculationInputs -> Float
monthlyConversionRate inputs =
    inputs.rolloverPercent / (100 * 12)


type alias CashFlowModel =
    List ( Int, Float )


baseCase : PriceModel.CalculationInputs -> CashFlowModel
baseCase inputs =
    List.range 0 6
        |> List.map
            (\i ->
                ( i, toFloat inputs.contacts * inputs.commissionRate * (6 - toFloat i) / 6 )
            )


flatCase : PriceModel.CalculationInputs -> CashFlowModel
flatCase inputs =
    List.range 0 6
        |> List.map
            (\i ->
                ( i, toFloat inputs.contacts * inputs.commissionRate )
            )


payingContactsLadder : PriceModel.CalculationInputs -> List ( Int, Float )
payingContactsLadder inputs =
    List.range 0 6
        |> List.map
            (\i ->
                let
                    nFact =
                        List.range 0 i |> List.sum
                in
                ( i
                , (1 + (inputs.rolloverPercent / toFloat 100) / 6) ^ toFloat nFact
                )
            )


rolloverCase : PriceModel.CalculationInputs -> CashFlowModel
rolloverCase inputs =
    payingContactsLadder inputs
        |> List.map (\( i, v ) -> ( i, v * inputs.commissionRate * toFloat inputs.contacts ))


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none


formatCurrency : Float -> String
formatCurrency value =
    let
        valueCents =
            value * 100 |> round

        valueDollars =
            toFloat valueCents / 100
    in
    "$" ++ addCommas (String.fromFloat valueDollars |> padCents)


padCents : String -> String
padCents str =
    if String.contains "." str then
        let
            parts =
                String.split "." str

            beforeDecimal =
                List.head parts |> Maybe.withDefault ""

            afterDecimal =
                List.tail parts |> Maybe.withDefault [] |> List.head |> Maybe.withDefault ""

            padded =
                if String.length afterDecimal == 1 then
                    afterDecimal ++ "0"

                else
                    afterDecimal
        in
        beforeDecimal ++ "." ++ padded

    else
        str ++ ".00"


formatCurrencyRounded : Float -> String
formatCurrencyRounded value =
    "$" ++ addCommas (String.fromInt (round value))



-- Add this new function before the view function


renderRevenueChart : PriceModel.CalculationInputs -> Html Msg
renderRevenueChart inputs =
    let
        func : ( Int, Float ) -> { x : String, y : Float }
        func ( year, value ) =
            { x = String.fromInt year
            , y = Basics.max 0 (value / inputs.commissionRate / toFloat inputs.contacts)
            }

        baseCaseData =
            baseCase inputs
                |> List.map func

        rolloverCaseData =
            rolloverCase inputs
                |> List.map func

        allData =
            List.map2
                (\base rollover ->
                    { x = base.x
                    , baseCase = Basics.max 0 base.y
                    , rolloverCase = Basics.max 0 rollover.y
                    }
                )
                baseCaseData
                rolloverCaseData
    in
    div [ class "w-full bg-white rounded-lg p-2 sm:p-4 shadow-sm border border-gray-200" ]
        [ div [ class "flex justify-between items-center text-lg font-bold text-gray-700 mb-1 sm:mb-4" ]
            [ text "Cash Flow" ]
        , div [ class "flex flex-col" ]
            [ div [ class "w-full h-[120px] md:h-[350px] overflow-x-auto overflow-y-hidden" ]
                [ C.chart
                    [ CA.width 800
                    , CA.height 250
                    , CA.attrs [ SA.style "max-width: 100%" ]
                    , CA.margin { top = 20, bottom = 40, left = 60, right = 20 }
                    , CA.padding { top = 10, bottom = 20, left = 10, right = 10 }
                    , CA.htmlAttrs [ class "overflow-visible" ]
                    ]
                    [ C.grid
                        [ CA.width 1
                        , CA.color "#e5e7eb"
                        , CA.dashed [ 5, 5 ]
                        ]
                    , C.yLabels
                        [ CA.withGrid
                        , CA.format (\v -> String.fromFloat (round10 1 v) ++ "x")
                        , CA.fontSize 11
                        , CA.color "#6b7280"
                        , CA.amount 5
                        , CA.limits [ CA.lowest 0 CA.exactly ]
                        ]
                    , C.binLabels .x
                        [ CA.moveDown 25
                        , CA.fontSize 12
                        , CA.color "#374151"
                        , CA.rotate 0
                        ]
                    , C.labelAt CA.middle
                        .max
                        [ CA.moveUp 15 ]
                        [ Svg.text_ [ SA.fontSize "18", SA.fill "#1F2937" ] [ Svg.text "Cash Flow" ] ]
                    , C.bars
                        [ CA.margin 0.1
                        , CA.roundTop 0.5
                        ]
                        [ C.bar .baseCase [ CA.color "#03045e", CA.opacity 0.8 ]
                            |> C.named "Base Case"
                        , C.bar .rolloverCase [ CA.color "#7F56D9", CA.opacity 0.8 ]
                            |> C.named "Rollover Case"
                        ]
                        allData
                    ]
                ]
            , div [ class "flex flex-wrap justify-center gap-2 mt-1 sm:mt-4 text-sm" ]
                [ div [ class "flex items-center gap-2" ]
                    [ div [ class "w-3 h-3 bg-[#03045e] rounded-full opacity-80" ] []
                    , text "Base Case"
                    ]
                , div [ class "flex items-center gap-2" ]
                    [ div [ class "w-3 h-3 bg-[#7F56D9] rounded-full opacity-80" ] []
                    , text "Rollover Case"
                    ]
                ]
            ]
        ]



-- LTV Model functions


baseCaseLtv : PriceModel.CalculationInputs -> CashFlowModel
baseCaseLtv inputs =
    -- Initial book has average 3 years of LTV remaining (3x commission)
    List.range 0 6
        |> List.map
            (\i ->
                ( i
                , toFloat inputs.contacts * inputs.commissionRate * 3.0 * (6 - toFloat i) / 6
                  -- Initial 3x LTV
                )
            )


flatCaseLtv : PriceModel.CalculationInputs -> CashFlowModel
flatCaseLtv inputs =
    -- Flat case maintains the same LTV
    List.range 0 6
        |> List.map
            (\i ->
                ( i
                , toFloat inputs.contacts * inputs.commissionRate * 3.0
                  -- Constant 3x LTV
                )
            )


rolloverCaseLtv : PriceModel.CalculationInputs -> CashFlowModel
rolloverCaseLtv inputs =
    -- Each year we add (rolloverPercent)% of contacts with 6 years of LTV
    List.range 0 6
        |> List.map
            (\i ->
                let
                    baseValue =
                        toFloat inputs.contacts * inputs.commissionRate * 3.0

                    -- Initial 3x LTV
                    additionalLtv =
                        if i == 0 then
                            0

                        else
                            -- For each previous year, we've added rolloverPercent% of contacts with 6x commission
                            toFloat inputs.contacts
                                * (inputs.rolloverPercent / 100)
                                * inputs.commissionRate
                                --  New policies have a net added LTV on average of 3x
                                * toFloat i

                    -- Accumulate for each year
                in
                ( i, baseValue + additionalLtv )
            )


renderLtvChart : PriceModel.CalculationInputs -> Html Msg
renderLtvChart inputs =
    let
        func : ( Int, Float ) -> { x : String, y : Float }
        func ( year, value ) =
            { x = String.fromInt year
            , y = value / 1000000
            }

        baseCaseData =
            baseCaseLtv inputs
                |> List.map func

        rolloverCaseData =
            rolloverCaseLtv inputs
                |> List.map func

        allData =
            List.map2
                (\base rollover ->
                    { x = base.x
                    , baseCase = base.y
                    , rolloverCase = rollover.y
                    }
                )
                baseCaseData
                rolloverCaseData
    in
    div [ class "w-full bg-white rounded-lg p-2 sm:p-4 shadow-sm border border-gray-200 mt-4 sm:mt-8" ]
        [ div [ class "flex justify-between items-center text-lg font-bold text-gray-700 mb-1 sm:mb-4" ]
            [ text "Book of Business -- Remaining LTV (Millions)" ]
        , div [ class "flex flex-col" ]
            [ div [ class "w-full h-[120px] md:h-[350px] overflow-x-auto overflow-y-hidden" ]
                [ C.chart
                    [ CA.width 800
                    , CA.height 250
                    , CA.attrs [ SA.style "max-width: 100%" ]
                    , CA.margin { top = 20, bottom = 40, left = 60, right = 20 }
                    , CA.padding { top = 10, bottom = 20, left = 10, right = 10 }
                    , CA.htmlAttrs [ class "overflow-visible" ]
                    ]
                    [ C.grid
                        [ CA.width 1
                        , CA.color "#e5e7eb"
                        , CA.dashed [ 5, 5 ]
                        ]
                    , C.yLabels
                        [ CA.withGrid
                        , CA.format (\v -> "$" ++ formatNumber v ++ "M")
                        , CA.fontSize 11
                        , CA.color "#6b7280"
                        , CA.amount 5
                        , CA.limits [ CA.lowest 0 CA.exactly ]
                        ]
                    , C.binLabels .x
                        [ CA.moveDown 25
                        , CA.fontSize 12
                        , CA.color "#374151"
                        , CA.rotate 0
                        ]
                    , C.labelAt CA.middle
                        .max
                        [ CA.moveUp 15 ]
                        [ Svg.text_ [ SA.fontSize "18", SA.fill "#1F2937" ] [ Svg.text "Book Value" ] ]
                    , C.bars
                        [ CA.margin 0.1
                        , CA.roundTop 0.5
                        ]
                        [ C.bar .baseCase [ CA.color "#03045e", CA.opacity 0.8 ]
                            |> C.named "Base Case"
                        , C.bar .rolloverCase [ CA.color "#53389E", CA.opacity 0.8 ]
                            |> C.named "Rollover Case"
                        ]
                        allData
                    ]
                ]
            , div [ class "flex flex-wrap justify-center gap-2 mt-1 sm:mt-4 text-sm" ]
                [ div [ class "flex items-center gap-2" ]
                    [ div [ class "w-3 h-3 bg-[#03045e] rounded-full opacity-80" ] []
                    , text "Base Case"
                    ]
                , div [ class "flex items-center gap-2" ]
                    [ div [ class "w-3 h-3 bg-[#53389E] rounded-full opacity-80" ] []
                    , text "Rollover Case"
                    ]
                ]
            ]
        ]


renderEarningsChart : Model -> Html Msg
renderEarningsChart model =
    let
        earningsInputs =
            { calculationInputs = model.calculationInputs
            , overheadCost = model.earningsInputs.overheadCost
            , customerAcquisitionCost = model.earningsInputs.customerAcquisitionCost
            , earningsMultiple = model.earningsInputs.earningsMultiple
            }

        flatCaseData =
            Earnings.flatCase earningsInputs
                |> List.map (\data -> { x = String.fromInt data.year, y = data.earnings / 1000000 })

        rolloverCaseData =
            Earnings.rolloverCase earningsInputs
                |> List.map (\data -> { x = String.fromInt data.year, y = data.earnings / 1000000 })

        allData =
            List.map2
                (\flat rollover ->
                    { x = flat.x
                    , flatCase = flat.y
                    , rolloverCase = rollover.y
                    }
                )
                flatCaseData
                rolloverCaseData
    in
    div [ class "w-full bg-white rounded-lg p-2 sm:p-4 shadow-sm border border-gray-200 mt-4 sm:mt-8" ]
        [ div [ class "flex justify-between items-center text-lg font-bold text-gray-700 mb-1 sm:mb-4" ]
            [ text "Annual Earnings (Millions)" ]
        , div [ class "flex flex-col" ]
            [ div [ class "w-full h-[120px] md:h-[350px] overflow-x-auto overflow-y-hidden" ]
                [ C.chart
                    [ CA.height 250
                    , CA.width 800
                    , CA.margin { top = 20, bottom = 40, left = 60, right = 20 }
                    , CA.padding { top = 10, bottom = 20, left = 10, right = 10 }
                    ]
                    [ C.grid []
                    , C.yLabels [ CA.withGrid, CA.format (\v -> "$" ++ formatNumber v ++ "M") ]
                    , C.binLabels .x [ CA.moveDown 25, CA.fontSize 12 ]
                    , C.labelAt CA.middle
                        .max
                        [ CA.moveUp 15 ]
                        [ Svg.text_ [ SA.fontSize "18", SA.fill "#1F2937" ] [ Svg.text "Earnings" ] ]
                    , C.bars
                        [ CA.margin 0.1
                        ]
                        [ C.bar .flatCase [ CA.color "#22C55E", CA.opacity 0.7 ]
                            |> C.named "Flat Case"
                        , C.bar .rolloverCase [ CA.color "#A855F7", CA.opacity 0.7 ]
                            |> C.named "Rollover Case"
                        ]
                        allData
                    ]
                ]
            , div [ class "flex flex-wrap justify-center gap-2 mt-1 sm:mt-4 text-sm" ]
                [ div [ class "flex items-center gap-2" ]
                    [ div [ class "w-3 h-3 bg-[#22C55E] rounded-full opacity-70" ] []
                    , text "Flat Case"
                    ]
                , div [ class "flex items-center gap-2" ]
                    [ div [ class "w-3 h-3 bg-[#A855F7] rounded-full opacity-70" ] []
                    , text "Rollover Case"
                    ]
                ]
            ]
        ]


renderEnterpriseValueChart : Model -> Html Msg
renderEnterpriseValueChart model =
    let
        earningsInputs =
            { calculationInputs = model.calculationInputs
            , overheadCost = model.earningsInputs.overheadCost
            , customerAcquisitionCost = model.earningsInputs.customerAcquisitionCost
            , earningsMultiple = model.earningsInputs.earningsMultiple
            }

        flatCaseData =
            Earnings.flatCase earningsInputs
                |> List.map (\data -> { x = String.fromInt data.year, y = data.enterpriseValue / 1000000 })

        rolloverCaseData =
            Earnings.rolloverCase earningsInputs
                |> List.map (\data -> { x = String.fromInt data.year, y = data.enterpriseValue / 1000000 })

        allData =
            List.map2
                (\flat rollover ->
                    { x = flat.x
                    , flatCase = flat.y
                    , rolloverCase = rollover.y
                    }
                )
                flatCaseData
                rolloverCaseData
    in
    div [ class "w-full bg-white rounded-lg p-2 sm:p-4 shadow-sm border border-gray-200 mt-4 sm:mt-8" ]
        [ div [ class "flex justify-between items-center text-lg font-bold text-gray-700 mb-1 sm:mb-4" ]
            [ text "Enterprise Value (Millions)" ]
        , div [ class "flex flex-col" ]
            [ div [ class "w-full h-[120px] md:h-[350px] overflow-x-auto overflow-y-hidden" ]
                [ C.chart
                    [ CA.height 250
                    , CA.width 800
                    , CA.margin { top = 20, bottom = 40, left = 60, right = 20 }
                    , CA.padding { top = 10, bottom = 20, left = 10, right = 10 }
                    ]
                    [ C.grid []
                    , C.yLabels [ CA.withGrid, CA.format (\v -> "$" ++ formatNumber v ++ "M") ]
                    , C.binLabels .x [ CA.moveDown 25, CA.fontSize 12 ]
                    , C.labelAt CA.middle
                        .max
                        [ CA.moveUp 15 ]
                        [ Svg.text_ [ SA.fontSize "18", SA.fill "#1F2937" ] [ Svg.text "Enterprise Value" ] ]
                    , C.bars
                        [ CA.margin 0.1
                        ]
                        [ C.bar .flatCase [ CA.color "#22C55E", CA.opacity 0.7 ]
                            |> C.named "Flat Case"
                        , C.bar .rolloverCase [ CA.color "#A855F7", CA.opacity 0.7 ]
                            |> C.named "Rollover Case"
                        ]
                        allData
                    ]
                ]
            , div [ class "flex flex-wrap justify-center gap-2 mt-1 sm:mt-4 text-sm" ]
                [ div [ class "flex items-center gap-2" ]
                    [ div [ class "w-3 h-3 bg-[#22C55E] rounded-full opacity-70" ] []
                    , text "Flat Case"
                    ]
                , div [ class "flex items-center gap-2" ]
                    [ div [ class "w-3 h-3 bg-[#A855F7] rounded-full opacity-70" ] []
                    , text "Rollover Case"
                    ]
                ]
            ]
        ]

================
File: frontend/src/Pricing2.elm
================
module Pricing2 exposing (Model, Msg, init, subscriptions, update, view)

import Html exposing (Html, button, div, h2, h3, h4, img, input, label, p, span, text)
import Html.Attributes exposing (class, for, id, placeholder, type_, value)
import Html.Events exposing (onClick, onInput)
import MyIcon
import PriceModel


type alias Model =
    { calculationInputs : PriceModel.CalculationInputs
    , calculatorExpanded : Bool
    }


init : ( Model, Cmd Msg )
init =
    ( { calculationInputs =
            { contacts = 1000
            , averageAge = 3.0
            , rolloverPercent = 7
            , commissionRate = 300
            }
      , calculatorExpanded = False
      }
    , Cmd.none
    )


type Msg
    = ContactCountChanged Int
    | RolloverPercentChanged Float
    | CommissionRateChanged Float
    | ToggleCalculator


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        ContactCountChanged count ->
            let
                oldCalculationInputs =
                    model.calculationInputs

                newCalculationInputs =
                    { oldCalculationInputs | contacts = count }
            in
            ( { model | calculationInputs = newCalculationInputs }
            , Cmd.none
            )

        RolloverPercentChanged percent ->
            let
                oldCalculationInputs =
                    model.calculationInputs

                newCalculationInputs =
                    { oldCalculationInputs | rolloverPercent = percent }
            in
            ( { model | calculationInputs = newCalculationInputs }
            , Cmd.none
            )

        CommissionRateChanged rate ->
            let
                oldCalculationInputs =
                    model.calculationInputs

                newCalculationInputs =
                    { oldCalculationInputs | commissionRate = rate }
            in
            ( { model | calculationInputs = newCalculationInputs }
            , Cmd.none
            )

        ToggleCalculator ->
            ( { model | calculatorExpanded = not model.calculatorExpanded }
            , Cmd.none
            )


view : Model -> Html Msg
view model =
    div [ class "min-h-screen bg-gray-50 flex flex-col items-center py-12 px-4 sm:px-6 lg:px-8" ]
        [ div [ class "max-w-6xl w-full space-y-8 bg-white p-8 rounded-lg shadow-md" ]
            [ div [ class "flex flex-col items-center" ]
                [ MyIcon.banknote 32 "#0F172A"
                , h2 [ class "text-2xl font-semibold text-gray-900 mt-6" ] [ text "Subscription Pricing" ]
                , p [ class "text-gray-500 mt-2 mb-6" ] [ text "Simple and transparent." ]
                , div [ class "w-full max-w-3xl mt-6" ]
                    [ div [ class "flex flex-col md:flex-row gap-6" ]
                        [ div [ class "bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-200 md:w-1/2" ]
                            [ div [ class "px-4 py-5 sm:px-6 bg-indigo-50" ]
                                [ h3 [ class "text-lg leading-6 font-medium text-gray-900" ]
                                    [ text "Base Subscription" ]
                                ]
                            , div [ class "px-4 py-5 sm:p-6" ]
                                [ div [ class "flex items-center justify-between" ]
                                    [ div [ class "flex items-center" ]
                                        [ span [ class "text-3xl font-bold text-gray-900" ] [ text "$150" ]
                                        , span [ class "ml-2 text-gray-500" ] [ text "/month" ]
                                        ]
                                    , span [ class "bg-green-100 text-green-800 px-2 py-1 rounded-full text-sm font-medium" ]
                                        [ text "First 250 contacts" ]
                                    ]
                                , div [ class "mt-4" ]
                                    [ p [ class "text-sm text-gray-500" ]
                                        [ text "Our base subscription includes all features of the Medicare Max portal platform and allows you to automate retention of up to 250 contacts." ]
                                    ]
                                ]
                            ]
                        , div [ class "bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-200 md:w-1/2" ]
                            [ div [ class "px-4 py-5 sm:px-6 bg-indigo-50" ]
                                [ h3 [ class "text-lg leading-6 font-medium text-gray-900" ]
                                    [ text "Additional Contacts" ]
                                ]
                            , div [ class "px-4 py-5 sm:p-6" ]
                                [ div [ class "flex items-center justify-between" ]
                                    [ div [ class "flex items-center" ]
                                        [ span [ class "text-3xl font-bold text-gray-900" ] [ text "$35" ]
                                        , span [ class "ml-2 text-gray-500" ] [ text "/month" ]
                                        ]
                                    , span [ class "bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-sm font-medium" ]
                                        [ text "per 250 contacts" ]
                                    ]
                                , div [ class "mt-4" ]
                                    [ p [ class "text-sm text-gray-500" ]
                                        [ text "For every additional 250 contacts (or portion thereof), we charge $35 per month." ]
                                    ]
                                ]
                            ]
                        ]
                    , div [ class "bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-200 mt-6" ]
                        [ div
                            [ class "px-4 py-5 sm:px-6 bg-indigo-50 cursor-pointer hover:bg-indigo-100 transition-colors"
                            , onClick ToggleCalculator
                            ]
                            [ div [ class "flex justify-between items-center" ]
                                [ h3 [ class "text-lg leading-6 font-medium text-gray-900" ]
                                    [ text "Price & Revenue Calculator" ]
                                , div
                                    [ class "transform transition-transform duration-200"
                                    , class
                                        (if model.calculatorExpanded then
                                            "-rotate-90"

                                         else
                                            "rotate-90"
                                        )
                                    ]
                                    [ MyIcon.chevronRight 24 "#4A5568" ]
                                ]
                            ]
                        , if model.calculatorExpanded then
                            div [ class "px-4 py-5 sm:p-6" ]
                                [ div [ class "space-y-6" ]
                                    [ div [ class "bg-white p-4 rounded-md shadow-sm border border-gray-200" ]
                                        [ h4 [ class "text-md font-medium text-gray-800 mb-3" ] [ text "Inputs" ]
                                        , div [ class "flex flex-wrap gap-4" ]
                                            [ div [ class "flex flex-col" ]
                                                [ label
                                                    [ class "block text-sm font-medium text-gray-700 mb-1 cursor-pointer"
                                                    , for "contact-count"
                                                    ]
                                                    [ text "Number of Contacts" ]
                                                , div [ class "w-[140px]" ]
                                                    [ input
                                                        [ class "w-full border border-gray-300 rounded-md shadow-sm py-1.5 px-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-center"
                                                        , id "contact-count"
                                                        , type_ "number"
                                                        , placeholder "Enter number"
                                                        , value (String.fromInt model.calculationInputs.contacts)
                                                        , onInput (\str -> ContactCountChanged (String.toInt str |> Maybe.withDefault 0))
                                                        , Html.Attributes.min "0"
                                                        , Html.Attributes.step "1"
                                                        ]
                                                        []
                                                    ]
                                                ]
                                            , div [ class "flex flex-col" ]
                                                [ label
                                                    [ class "block text-sm font-medium text-gray-700 mb-1 cursor-pointer"
                                                    , for "commission-rate"
                                                    ]
                                                    [ text "Commission Per Contact" ]
                                                , div [ class "flex rounded-md shadow-sm w-[140px]" ]
                                                    [ div [ class "flex-shrink-0 inline-flex items-center px-2 rounded-l-md border border-r-0 border-gray-300 bg-indigo-100 text-indigo-800 text-sm font-medium" ]
                                                        [ text "$" ]
                                                    , input
                                                        [ class "w-full border border-gray-300 rounded-none rounded-r-md shadow-sm py-1.5 px-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-center"
                                                        , id "commission-rate"
                                                        , type_ "number"
                                                        , placeholder "Commission"
                                                        , value (String.fromFloat model.calculationInputs.commissionRate)
                                                        , onInput (\str -> CommissionRateChanged (String.toFloat str |> Maybe.withDefault 0))
                                                        , Html.Attributes.min "0"
                                                        , Html.Attributes.step "5"
                                                        ]
                                                        []
                                                    ]
                                                ]
                                            , div [ class "flex flex-col" ]
                                                [ label
                                                    [ class "block text-sm font-medium text-gray-700 mb-1 cursor-pointer"
                                                    , for "rollover-percent"
                                                    ]
                                                    [ text "Annual Rollover" ]
                                                , div [ class "flex rounded-md shadow-sm w-[140px]" ]
                                                    [ div [ class "flex-shrink-0 inline-flex items-center px-2 rounded-l-md border border-r-0 border-gray-300 bg-indigo-100 text-indigo-800 text-sm font-medium" ]
                                                        [ text "%" ]
                                                    , input
                                                        [ class "w-full border border-gray-300 rounded-none rounded-r-md shadow-sm py-1.5 px-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-center"
                                                        , id "rollover-percent"
                                                        , type_ "number"
                                                        , placeholder "Rollover"
                                                        , value (String.fromFloat model.calculationInputs.rolloverPercent)
                                                        , onInput (\str -> RolloverPercentChanged (String.toFloat str |> Maybe.withDefault 0))
                                                        , Html.Attributes.min "0"
                                                        , Html.Attributes.max "100"
                                                        , Html.Attributes.step "0.1"
                                                        ]
                                                        []
                                                    ]
                                                ]
                                            ]
                                        ]
                                    , PriceModel.view model.calculationInputs
                                    ]
                                ]

                          else
                            text ""
                        ]
                    ]
                ]
            ]
        ]


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none

================
File: frontend/src/Profile.elm
================
module Profile exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Svg exposing (path, svg)
import Svg.Attributes as SvgAttr
import Time



-- MODEL


type alias Model =
    { currentUser : Maybe User
    , originalUser : Maybe User -- Store original user data for comparison
    , isLoading : Bool
    , error : Maybe String
    , pendingSave : Bool
    }


type alias User =
    { id : Int
    , email : String
    , firstName : String
    , lastName : String
    , phone : String
    , isAdmin : Bool
    , isAgent : Bool
    , calendarUrl : String
    }


init : () -> ( Model, Cmd Msg )
init _ =
    ( { currentUser = Nothing
      , originalUser = Nothing
      , isLoading = True
      , error = Nothing
      , pendingSave = False
      }
    , fetchCurrentUser
    )



-- UPDATE


type Msg
    = GotCurrentUser (Result Http.Error CurrentUserResponse)
    | UpdateField String String
    | SaveProfile
    | ProfileSaved (Result Http.Error ())
    | NavigateTo String
    | WatchTutorial


type alias CurrentUserResponse =
    { success : Bool
    , user : Maybe User
    }


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotCurrentUser (Ok response) ->
            ( { model
                | currentUser = response.user
                , originalUser = response.user -- Store original user data
                , isLoading = False
              }
            , Cmd.none
            )

        GotCurrentUser (Err error) ->
            ( { model
                | error = Just "Failed to load profile"
                , isLoading = False
              }
            , Cmd.none
            )

        UpdateField field value ->
            case model.currentUser of
                Just user ->
                    let
                        updatedUser =
                            case field of
                                "firstName" ->
                                    { user | firstName = value }

                                "lastName" ->
                                    { user | lastName = value }

                                "phone" ->
                                    { user | phone = String.filter Char.isDigit value }

                                "calendarUrl" ->
                                    { user | calendarUrl = value }

                                _ ->
                                    user
                    in
                    ( { model | currentUser = Just updatedUser }
                    , Cmd.none
                    )

                Nothing ->
                    ( model, Cmd.none )

        SaveProfile ->
            ( { model | pendingSave = True }
            , case model.currentUser of
                Just user ->
                    saveProfile user

                Nothing ->
                    Cmd.none
            )

        ProfileSaved (Ok _) ->
            ( { model
                | pendingSave = False
                , originalUser = model.currentUser -- Update original user after successful save
              }
            , Cmd.none
            )

        ProfileSaved (Err _) ->
            ( { model
                | pendingSave = False
                , error = Just "Failed to save profile changes"
              }
            , Cmd.none
            )

        NavigateTo path ->
            ( model, Cmd.none )

        WatchTutorial ->
            ( model, Cmd.none )



-- Main.elm will handle the actual navigation
-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Profile"
    , body =
        [ div [ class "min-h-screen bg-gray-50" ]
            [ div [ class "max-w-3xl mx-auto py-6 sm:py-12 px-4 sm:px-6 lg:px-8" ]
                [ h1 [ class "text-3xl font-bold text-gray-900 mb-8" ]
                    [ text "Profile" ]
                , viewContent model
                ]
            ]
        ]
    }


viewContent : Model -> Html Msg
viewContent model =
    if model.isLoading then
        div [ class "flex justify-center items-center h-64" ]
            [ viewSpinner ]

    else
        case model.currentUser of
            Just user ->
                div [ class "bg-white shadow rounded-lg p-6 space-y-6" ]
                    [ div [ class "mb-4 flex justify-end space-x-4" ]
                        [ button
                            [ class "flex items-center text-sm text-blue-600 hover:text-blue-800"
                            , onClick (NavigateTo "/dashboard?payment_success=true")
                            ]
                            [ div [ class "mr-2" ]
                                [ svg
                                    [ SvgAttr.class "h-5 w-5"
                                    , SvgAttr.viewBox "0 0 20 20"
                                    , SvgAttr.fill "currentColor"
                                    ]
                                    [ path
                                        [ SvgAttr.d "M10 12a2 2 0 100-4 2 2 0 000 4z" ]
                                        []
                                    , path
                                        [ SvgAttr.fillRule "evenodd"
                                        , SvgAttr.d "M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                                        , SvgAttr.clipRule "evenodd"
                                        ]
                                        []
                                    ]
                                ]
                            , text "Watch Setup Tutorial"
                            ]
                        , if user.isAdmin then
                            button
                                [ class "flex items-center text-sm text-purple-600 hover:text-purple-800"
                                , onClick (NavigateTo "/change-plan")
                                ]
                                [ div [ class "mr-2" ]
                                    [ svg
                                        [ SvgAttr.class "h-5 w-5"
                                        , SvgAttr.viewBox "0 0 20 20"
                                        , SvgAttr.fill "currentColor"
                                        ]
                                        [ path
                                            [ SvgAttr.d "M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4z" ]
                                            []
                                        , path
                                            [ SvgAttr.fillRule "evenodd"
                                            , SvgAttr.d "M18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z"
                                            , SvgAttr.clipRule "evenodd"
                                            ]
                                            []
                                        ]
                                    ]
                                , text "Subscription & Payments"
                                ]

                          else
                            text ""
                        ]
                    , viewBasicInfo user
                    , viewSaveButton model
                    ]

            Nothing ->
                div [ class "text-center text-gray-600" ]
                    [ text "Failed to load profile" ]


viewBasicInfo : User -> Html Msg
viewBasicInfo user =
    div [ class "space-y-6" ]
        [ div [ class "border-b border-gray-200 pb-4" ]
            [ h2 [ class "text-lg font-medium text-gray-900" ]
                [ text "Basic Information" ]
            ]
        , div [ class "grid grid-cols-1 sm:grid-cols-2 gap-4" ]
            [ viewField "First Name" "text" user.firstName "firstName"
            , viewField "Last Name" "text" user.lastName "lastName"
            , viewField "Email" "email" user.email "email"
            , viewField "Phone" "tel" user.phone "phone"
            , viewField "Calendar URL" "url" user.calendarUrl "calendarUrl"
            ]
        , viewRoleInfo user
        ]


viewField : String -> String -> String -> String -> Html Msg
viewField label inputType value field =
    div []
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text label ]
        , input
            [ type_ inputType
            , class "mt-1 px-3.5 py-2.5 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500"
            , Html.Attributes.value
                (if field == "phone" then
                    formatPhoneNumber value

                 else
                    value
                )
            , onInput (UpdateField field)
            , disabled (field == "email") -- Email cannot be changed
            ]
            []
        ]


viewRoleInfo : User -> Html Msg
viewRoleInfo user =
    if user.isAdmin then
        div [ class "mb-6" ]
            [ label [ class "block text-sm font-medium text-gray-700 mb-2" ]
                [ text "Role" ]
            , div [ class "mt-2 text-sm text-gray-500" ]
                [ text "You have administrator privileges" ]
            ]

    else
        text ""


viewSaveButton : Model -> Html Msg
viewSaveButton model =
    div [ class "mt-8 flex justify-center" ]
        [ if model.pendingSave then
            div [ class "px-6 py-3 flex items-center space-x-2" ]
                [ viewSpinner ]

          else
            button
                [ class "px-4 py-2 sm:px-6 sm:py-3 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-blue-600"
                , onClick SaveProfile
                , disabled (not (hasChanges model))
                ]
                [ text "Save Changes" ]
        ]


viewSpinner : Html Msg
viewSpinner =
    div [ class "animate-spin rounded-full h-5 w-5 border-2 border-blue-500 border-t-transparent" ] []



-- HTTP


fetchCurrentUser : Cmd Msg
fetchCurrentUser =
    Http.get
        { url = "/api/me"
        , expect = Http.expectJson GotCurrentUser currentUserResponseDecoder
        }


saveProfile : User -> Cmd Msg
saveProfile user =
    Http.request
        { method = "PUT"
        , headers = []
        , url = "/api/profile"
        , body = Http.jsonBody (encodeUser user)
        , expect = Http.expectWhatever ProfileSaved
        , timeout = Nothing
        , tracker = Nothing
        }



-- DECODERS


currentUserResponseDecoder : Decoder CurrentUserResponse
currentUserResponseDecoder =
    Decode.map2 CurrentUserResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "user" (Decode.nullable userDecoder))


userDecoder : Decoder User
userDecoder =
    Decode.succeed User
        |> Pipeline.required "id" Decode.int
        |> Pipeline.required "email" Decode.string
        |> Pipeline.required "firstName" Decode.string
        |> Pipeline.required "lastName" Decode.string
        |> Pipeline.required "phone" Decode.string
        |> Pipeline.required "is_admin" Decode.bool
        |> Pipeline.required "is_agent" Decode.bool
        |> Pipeline.optional "calendar_url" Decode.string ""



-- ENCODERS


encodeUser : User -> Encode.Value
encodeUser user =
    Encode.object
        [ ( "firstName", Encode.string user.firstName )
        , ( "lastName", Encode.string user.lastName )
        , ( "email", Encode.string user.email )
        , ( "phone", Encode.string user.phone )
        , ( "calendar_url", Encode.string user.calendarUrl )
        ]



-- HELPERS


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    let
        digits =
            String.filter Char.isDigit phone
                |> String.left 10

        len =
            String.length digits
    in
    if len == 0 then
        ""

    else if len <= 3 then
        "(" ++ digits

    else if len <= 6 then
        "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

    else
        "("
            ++ String.left 3 digits
            ++ ") "
            ++ String.slice 3 6 digits
            ++ "-"
            ++ String.dropLeft 6 digits


formatRole : User -> String
formatRole user =
    if user.isAdmin && user.isAgent then
        "Admin"

    else if user.isAdmin then
        "Admin"

    else if user.isAgent then
        "Agent"

    else
        "User"


isAgent : User -> Bool
isAgent user =
    user.isAgent



-- Add this helper function to check for changes


hasChanges : Model -> Bool
hasChanges model =
    case ( model.currentUser, model.originalUser ) of
        ( Just current, Just original ) ->
            current.firstName
                /= original.firstName
                || current.lastName
                /= original.lastName
                || current.phone
                /= original.phone

        _ ->
            False



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/src/Quote.elm
================
module Quote exposing (Model, Msg(..), init, subscriptions, update, view)

import AgeCalc exposing (getAgeNextMonth)
import Browser
import Browser.Navigation as Nav
import Date exposing (Date)
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onInput, onSubmit)
import Http
import Json.Decode as D
import Task
import Time
import Url.Builder as Builder
import Url.Parser as Parser exposing ((<?>), Parser)
import Url.Parser.Query as Query


type alias Model =
    { zipCode : String
    , dateOfBirth : String
    , key : Nav.Key
    , tobacco : Bool
    , gender : String
    , currentDate : Maybe Date
    , quoteId : Maybe String
    , error : Maybe String
    , currentCarrier : Maybe String
    , planType : Maybe String
    , state : Maybe String
    , counties : List String
    , selectedCounty : Maybe String
    , isLoadingZipData : Bool
    , zipError : Maybe String
    , orgId : Maybe String
    }


type Msg
    = UpdateZipCode String
    | UpdateDateOfBirth String
    | UpdateTobacco String
    | UpdateGender String
    | SubmitForm
    | GotCurrentDate Date
    | GotQuoteInfo (Result Http.Error QuoteInfo)
    | GotZipInfo (Result Http.Error ZipInfo)
    | UpdateSelectedCounty String


type alias InitialValues =
    { zipCode : Maybe String
    , dateOfBirth : Maybe String
    , tobacco : Maybe Bool
    , gender : Maybe String
    , quoteId : Maybe String
    , planType : Maybe String
    , orgId : Maybe String
    }


type alias QuoteInfo =
    { zipCode : String
    , dateOfBirth : String
    , tobacco : Bool
    , gender : String
    , currentCarrier : Maybe String
    , orgId : String
    }


type alias ZipInfo =
    { state : String
    , counties : List String
    }


init : Nav.Key -> InitialValues -> ( Model, Cmd Msg )
init key initialValues =
    let
        model =
            { zipCode = Maybe.withDefault "" initialValues.zipCode
            , dateOfBirth = Maybe.withDefault "" initialValues.dateOfBirth
            , key = key
            , tobacco = Maybe.withDefault False initialValues.tobacco
            , gender = Maybe.withDefault "M" initialValues.gender
            , currentDate = Nothing
            , quoteId = initialValues.quoteId
            , error = Nothing
            , currentCarrier = Nothing
            , planType = initialValues.planType
            , state = Nothing
            , counties = []
            , selectedCounty = Nothing
            , isLoadingZipData = False
            , zipError = Nothing
            , orgId = initialValues.orgId
            }

        commands =
            [ Task.perform GotCurrentDate Date.today
            , case initialValues.quoteId of
                Just id ->
                    fetchQuoteInfo id

                Nothing ->
                    Cmd.none
            ]
                ++ (if String.length model.zipCode == 5 then
                        [ fetchZipInfo model.zipCode ]

                    else
                        []
                   )
    in
    ( model, Cmd.batch commands )


fetchQuoteInfo : String -> Cmd Msg
fetchQuoteInfo quoteId =
    Http.get
        { url = "/api/quotes/decode/" ++ quoteId
        , expect = Http.expectJson GotQuoteInfo quoteInfoDecoder
        }


fetchZipInfo : String -> Cmd Msg
fetchZipInfo zipCode =
    Http.get
        { url = "/api/zipinfo/" ++ zipCode
        , expect = Http.expectJson GotZipInfo zipInfoDecoder
        }


quoteInfoDecoder : D.Decoder QuoteInfo
quoteInfoDecoder =
    D.field "success" D.bool
        |> D.andThen
            (\success ->
                if success then
                    D.map6 QuoteInfo
                        (D.at [ "contact", "zipCode" ] D.string)
                        (D.at [ "contact", "dateOfBirth" ] D.string)
                        (D.at [ "contact", "tobacco" ] D.bool)
                        (D.at [ "contact", "gender" ] D.string)
                        (D.at [ "contact", "currentCarrier" ] (D.nullable D.string))
                        (D.field "orgId" D.string)

                else
                    D.field "error" D.string
                        |> D.andThen (\error -> D.fail error)
            )


zipInfoDecoder : D.Decoder ZipInfo
zipInfoDecoder =
    D.field "success" D.bool
        |> D.andThen
            (\success ->
                if success then
                    D.field "data"
                        (D.map2 ZipInfo
                            (D.field "state" D.string)
                            (D.field "counties" (D.list D.string))
                        )

                else
                    D.field "error" D.string
                        |> D.andThen (\error -> D.fail error)
            )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateZipCode zip ->
            let
                filteredZip =
                    String.filter Char.isDigit zip |> String.left 5

                cmd =
                    if String.length filteredZip == 5 && filteredZip /= model.zipCode then
                        fetchZipInfo filteredZip

                    else
                        Cmd.none
            in
            ( { model
                | zipCode = filteredZip
                , isLoadingZipData = String.length filteredZip == 5 && filteredZip /= model.zipCode
                , state =
                    if String.length filteredZip /= 5 then
                        Nothing

                    else
                        model.state
                , counties =
                    if String.length filteredZip /= 5 then
                        []

                    else
                        model.counties
                , selectedCounty =
                    if String.length filteredZip /= 5 then
                        Nothing

                    else
                        model.selectedCounty
                , zipError = Nothing
              }
            , cmd
            )

        UpdateDateOfBirth dob ->
            ( { model | dateOfBirth = dob }, Cmd.none )

        UpdateTobacco value ->
            ( { model | tobacco = value == "true" }, Cmd.none )

        UpdateGender value ->
            ( { model | gender = value }, Cmd.none )

        GotCurrentDate date ->
            ( { model | currentDate = Just date }, Cmd.none )

        GotQuoteInfo result ->
            case result of
                Ok quoteInfo ->
                    let
                        updatedModel =
                            { model
                                | zipCode = quoteInfo.zipCode
                                , dateOfBirth = quoteInfo.dateOfBirth
                                , tobacco = quoteInfo.tobacco
                                , gender = quoteInfo.gender
                                , currentCarrier = quoteInfo.currentCarrier
                                , orgId = Just quoteInfo.orgId
                            }

                        cmd =
                            if String.length quoteInfo.zipCode == 5 then
                                fetchZipInfo quoteInfo.zipCode

                            else
                                Cmd.none
                    in
                    ( updatedModel, cmd )

                Err err ->
                    let
                        errorMessage =
                            case err of
                                Http.BadBody errorBody ->
                                    if String.contains "Contact not found" errorBody then
                                        "Quote not found or expired. Please try again or contact support."

                                    else
                                        "Failed to load quote information: " ++ errorBody

                                Http.BadStatus 404 ->
                                    "Quote not found or expired. Please try again or contact support."

                                _ ->
                                    "Failed to load quote information. Please try again."
                    in
                    ( { model | error = Just errorMessage }, Cmd.none )

        GotZipInfo result ->
            case result of
                Ok zipInfo ->
                    let
                        -- Always select the first county as default
                        selectedCounty =
                            List.head zipInfo.counties
                    in
                    ( { model
                        | state = Just zipInfo.state
                        , counties = zipInfo.counties
                        , selectedCounty = selectedCounty
                        , isLoadingZipData = False
                        , zipError = Nothing
                      }
                    , Cmd.none
                    )

                Err error ->
                    ( { model
                        | state = Nothing
                        , counties = []
                        , selectedCounty = Nothing
                        , isLoadingZipData = False
                        , zipError = Just (httpErrorToString error)
                      }
                    , Cmd.none
                    )

        UpdateSelectedCounty county ->
            ( { model | selectedCounty = Just county }, Cmd.none )

        SubmitForm ->
            if String.length model.zipCode /= 5 then
                ( { model | zipError = Just "Please enter a valid 5-digit zip code" }, Cmd.none )

            else if model.state == Nothing then
                ( { model | zipError = Just "Unable to determine state from zip code" }, Cmd.none )

            else
                let
                    age =
                        case model.currentDate of
                            Just currentDate ->
                                getAgeNextMonth model.dateOfBirth currentDate
                                    |> String.fromInt

                            Nothing ->
                                "65"

                    -- Get the selected county or the first one from the list
                    county =
                        case model.selectedCounty of
                            Just c ->
                                c

                            Nothing ->
                                List.head model.counties
                                    |> Maybe.withDefault ""

                    state =
                        model.state
                            |> Maybe.withDefault ""

                    -- If we have a quoteId, use that for navigation first
                    compareUrl =
                        case model.quoteId of
                            Just id ->
                                -- When we have a quoteId, we don't need other parameters
                                Builder.absolute [ "compare" ] [ Builder.string "id" id ]

                            Nothing ->
                                -- Otherwise build the URL with all parameters
                                Builder.absolute [ "compare" ]
                                    ([ Builder.string "zip" model.zipCode
                                     , Builder.string "state" state
                                     , Builder.string "county" county
                                     , Builder.string "gender" model.gender
                                     , Builder.string "tobacco"
                                        (if model.tobacco then
                                            "true"

                                         else
                                            "false"
                                        )
                                     , Builder.string "age" age
                                     , Builder.string "dateOfBirth" model.dateOfBirth
                                     ]
                                        ++ (case model.currentCarrier of
                                                Just carrier ->
                                                    [ Builder.string "currentCarrier" carrier ]

                                                Nothing ->
                                                    []
                                           )
                                        ++ (case model.planType of
                                                Just planType ->
                                                    [ Builder.string "planType" planType ]

                                                Nothing ->
                                                    [ Builder.string "planType" "G" ]
                                            -- Default to G if no plan type provided
                                           )
                                    )
                in
                ( model
                , Nav.pushUrl model.key compareUrl
                )


view : Model -> Browser.Document Msg
view model =
    { title = "Get Your Quote - Medicare Max"
    , body =
        [ div [ class "container mx-auto px-4 py-6 sm:py-8 max-w-xl" ]
            [ h1 [ class "text-2xl sm:text-3xl font-bold text-center mb-4 sm:mb-6" ]
                [ text "Get Your Quote" ]
            , div [ class "flex justify-center mb-6 sm:mb-8" ]
                [ button
                    [ class "flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-1.5 sm:py-2 rounded-full border border-blue-500 text-blue-500 hover:bg-blue-50 transition-colors text-sm"
                    ]
                    [ span [ class "text-xs sm:text-sm" ] [ text "▶ Video" ]
                    , text "Rates and Plan Options"
                    ]
                ]
            , if model.error /= Nothing || (model.quoteId /= Nothing && String.isEmpty model.zipCode) then
                -- Show error or loading message when we have a quoteId but no data yet
                let
                    message =
                        case model.error of
                            Just error ->
                                div [ class "bg-red-100 border border-red-400 text-red-700 px-3 sm:px-4 py-2 sm:py-3 rounded mb-4 text-sm" ]
                                    [ text error ]

                            Nothing ->
                                if model.quoteId /= Nothing && String.isEmpty model.zipCode then
                                    div [ class "bg-blue-100 border border-blue-400 text-blue-700 px-3 sm:px-4 py-2 sm:py-3 rounded mb-4 text-sm" ]
                                        [ text "Loading your quote information..." ]

                                else
                                    text ""
                in
                div [] [ message, viewFormForManualEntry model ]

              else
                -- Standard form
                Html.form [ onSubmit SubmitForm, class "space-y-4 sm:space-y-6" ]
                    [ viewFormInput "Zip Code" "text" model.zipCode UpdateZipCode True

                    -- Show zip code loading state or error if any
                    , if model.isLoadingZipData then
                        div [ class "text-xs sm:text-sm text-blue-600" ]
                            [ text "Looking up location..." ]

                      else if model.zipError /= Nothing then
                        div [ class "text-xs sm:text-sm text-red-600" ]
                            [ text (Maybe.withDefault "Invalid zip code" model.zipError) ]

                      else
                        text ""

                    -- Only show the county dropdown if there are multiple counties
                    , if List.length model.counties > 1 then
                        viewCountyDropdown model.counties model.selectedCounty

                      else
                        text ""
                    , viewFormInput "Date of Birth" "date" model.dateOfBirth UpdateDateOfBirth True
                    , viewFormRadioGroup "Tobacco User"
                        (if model.tobacco then
                            "true"

                         else
                            "false"
                        )
                        UpdateTobacco
                        [ ( "true", "Yes" ), ( "false", "No" ) ]
                    , viewFormRadioGroup "Gender"
                        model.gender
                        UpdateGender
                        [ ( "M", "Male" ), ( "F", "Female" ) ]
                    , button
                        [ class "w-full bg-purple-600 text-white py-3 sm:py-4 rounded-lg hover:bg-purple-700 transition-colors mt-6 sm:mt-8 text-base sm:text-lg"
                        , type_ "submit"
                        ]
                        [ text "Next" ]
                    ]
            ]
        ]
    }


viewCountyDropdown : List String -> Maybe String -> Html Msg
viewCountyDropdown counties selectedCounty =
    div [ class "form-group" ]
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-1.5 sm:mb-2" ]
            [ text "County" ]
        , select
            [ class "w-full px-3 sm:px-4 py-2.5 sm:py-3 bg-white border-[2px] sm:border-[2.5px] border-purple-300 rounded-lg text-gray-700 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200 text-sm sm:text-base"
            , onInput UpdateSelectedCounty
            , required True
            ]
            (option [ value "", disabled True, selected (selectedCounty == Nothing) ]
                [ text "Select your county" ]
                :: List.map
                    (\county ->
                        option
                            [ value county
                            , selected (selectedCounty == Just county)
                            ]
                            [ text county ]
                    )
                    counties
            )
        ]


viewFormInput : String -> String -> String -> (String -> Msg) -> Bool -> Html Msg
viewFormInput labelText inputType inputValue msg isRequired =
    div [ class "form-group" ]
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-1.5 sm:mb-2" ]
            [ text labelText ]
        , if inputType == "date" then
            input
                [ type_ inputType
                , class "w-full px-3 sm:px-4 py-2.5 sm:py-3 bg-white border-[2px] sm:border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200 text-sm sm:text-base"
                , Html.Attributes.value inputValue
                , onInput msg
                , required isRequired
                ]
                []

          else if labelText == "Zip Code" then
            input
                [ type_ inputType
                , class "w-full px-3 sm:px-4 py-2.5 sm:py-3 bg-white border-[2px] sm:border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200 text-sm sm:text-base"
                , Html.Attributes.value (formatZipCode inputValue)
                , onInput msg
                , required isRequired
                , Html.Attributes.maxlength 5
                , Html.Attributes.pattern "[0-9]*"
                ]
                []

          else
            input
                [ type_ inputType
                , class "w-full px-3 sm:px-4 py-2.5 sm:py-3 bg-white border-[2px] sm:border-[2.5px] border-purple-300 rounded-lg text-gray-700 placeholder-gray-400 shadow-sm hover:border-purple-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 focus:bg-white transition-all duration-200 text-sm sm:text-base"
                , Html.Attributes.value inputValue
                , onInput msg
                , required isRequired
                ]
                []
        ]


viewFormRadioGroup : String -> String -> (String -> Msg) -> List ( String, String ) -> Html Msg
viewFormRadioGroup labelText selectedValue msg options =
    div [ class "form-group" ]
        [ Html.label [ class "block text-sm font-medium text-gray-700 mb-1.5 sm:mb-2" ]
            [ text labelText ]
        , div [ class "flex flex-col sm:flex-row gap-2 sm:gap-4 w-full" ]
            (List.map
                (\( val, txt ) ->
                    label
                        [ class
                            ("flex items-center justify-center px-3 sm:px-4 py-2 rounded-lg border-2 cursor-pointer transition-all duration-200 flex-1 "
                                ++ (if selectedValue == val then
                                        "border-purple-500 bg-purple-50 text-purple-700"

                                    else
                                        "border-gray-200 hover:border-purple-200"
                                   )
                            )
                        ]
                        [ input
                            [ type_ "radio"
                            , value val
                            , checked (selectedValue == val)
                            , onInput msg
                            , class "sr-only"
                            ]
                            []
                        , text txt
                        ]
                )
                options
            )
        ]


formatZipCode : String -> String
formatZipCode zip =
    String.filter Char.isDigit zip |> String.left 5


httpErrorToString : Http.Error -> String
httpErrorToString error =
    case error of
        Http.BadUrl url ->
            "Bad URL: " ++ url

        Http.Timeout ->
            "Request timed out"

        Http.NetworkError ->
            "Network error"

        Http.BadStatus statusCode ->
            "Bad status: " ++ String.fromInt statusCode

        Http.BadBody message ->
            "Data error: " ++ message


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none



-- Function to display a form that allows manual entry when quote loading fails


viewFormForManualEntry : Model -> Html Msg
viewFormForManualEntry model =
    div []
        [ p [ class "text-center text-gray-600 mb-6" ]
            [ text "You can manually enter your information below to get a quote." ]
        , Html.form [ onSubmit SubmitForm, class "space-y-4 sm:space-y-6" ]
            [ viewFormInput "Zip Code" "text" model.zipCode UpdateZipCode True
            , viewFormInput "Date of Birth" "date" model.dateOfBirth UpdateDateOfBirth True
            , viewFormRadioGroup "Tobacco User"
                (if model.tobacco then
                    "true"

                 else
                    "false"
                )
                UpdateTobacco
                [ ( "true", "Yes" ), ( "false", "No" ) ]
            , viewFormRadioGroup "Gender"
                model.gender
                UpdateGender
                [ ( "M", "Male" ), ( "F", "Female" ) ]
            , button
                [ class "w-full bg-purple-600 text-white py-3 sm:py-4 rounded-lg hover:bg-purple-700 transition-colors mt-6 sm:mt-8 text-base sm:text-lg"
                , type_ "submit"
                ]
                [ text "Next" ]
            ]
        ]

================
File: frontend/src/QuoteBirthdayRules.elm
================
module QuoteBirthdayRules exposing
    ( PlanRestriction(..)
    , canPresentPlan
    , getQuotePlanRestriction
    )

{-| This module handles birthday rule restrictions for the quote page.
It determines which plans can be presented based on the contact's state and current plan.
-}

import BirthdayRules exposing (canPresentDifferentPlanOnly, isInBirthdayRuleWindow)
import Date exposing (Date)


{-| Represents the plan restriction for a quote.
-}
type PlanRestriction
    = NoRestriction
    | DifferentPlanOnly
    | NoQuoteAllowed


{-| Determines which plans can be presented based on the contact's state, birth date, and current plan.
-}
getQuotePlanRestriction : String -> Date -> Date -> String -> PlanRestriction
getQuotePlanRestriction state birthDate currentDate currentPlan =
    if isInBirthdayRuleWindow state birthDate currentDate then
        if canPresentDifferentPlanOnly state then
            DifferentPlanOnly

        else
            NoQuoteAllowed

    else
        NoRestriction


{-| Checks if a plan can be presented based on the restriction and the contact's current plan.
-}
canPresentPlan : PlanRestriction -> String -> String -> Bool
canPresentPlan restriction currentPlan planToPresent =
    case restriction of
        NoRestriction ->
            True

        NoQuoteAllowed ->
            False

        DifferentPlanOnly ->
            -- Only allow presenting a different plan type
            -- For example, if current plan is "Plan G", only allow "Plan N" and vice versa
            case ( currentPlan, planToPresent ) of
                ( "Plan G", "Plan N" ) ->
                    True

                ( "G", "Plan N" ) ->
                    True

                ( "G", "N" ) ->
                    True

                ( "Plan G", "N" ) ->
                    True

                ( "Plan N", "Plan G" ) ->
                    True

                ( "N", "Plan G" ) ->
                    True

                ( "N", "G" ) ->
                    True

                ( "Plan N", "G" ) ->
                    True

                _ ->
                    False

================
File: frontend/src/Schedule.elm
================
module Schedule exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onInput, onSubmit)
import Http
import Json.Decode as D
import Json.Decode.Pipeline as P
import Json.Encode as E
import List.Extra
import MyIcon
import Svg
import Svg.Attributes as SvgAttr
import Url
import Utils.QuoteHeader exposing (viewHeader)


type EligibilityStatus
    = Accept
    | Decline
    | Generic


type alias OrgInfo =
    { orgName : Maybe String
    , orgLogo : Maybe String
    , orgSlug : String
    , orgPhone : String
    , orgRedirectUrl : Maybe String
    }


type alias AgentInfo =
    { name : String
    , firstName : String
    , phone : String
    }


type alias ContactInfo =
    { email : String
    , firstName : String
    , lastName : String
    , phoneNumber : String
    }


type alias ScheduleInfo =
    { contact : ContactInfo
    , organization : OrgInfo
    , agent : AgentInfo
    , useOrg : Bool
    }


type alias Model =
    { name : Maybe String
    , email : Maybe String
    , phoneNumber : Maybe String
    , isSubmitting : Bool
    , isSubmittingAEP : Bool
    , isSubmittingFollowUp : Bool
    , error : Maybe String
    , success : Bool
    , quoteId : Maybe String
    , key : Nav.Key
    , status : EligibilityStatus
    , redirectUrl : Maybe String
    , scheduleInfo : Maybe ScheduleInfo
    , isLoading : Bool
    , demoMode : Bool
    , demoRedirectUrl : Maybe String
    }


type Msg
    = UpdateName String
    | UpdateEmail String
    | UpdatePhoneNumber String
    | SubmitForm
    | GotSubmitResponse (Result Http.Error SubmitResponse)
    | GotScheduleInfo (Result Http.Error ScheduleInfo)
    | RequestAEP
    | GotAEPResponse (Result Http.Error SubmitResponse)
    | RequestFollowUp
    | GotFollowUpResponse (Result Http.Error SubmitResponse)
    | CalendlyOpened


type alias SubmitResponse =
    { success : Bool
    , message : String
    }


init : Nav.Key -> Maybe String -> Maybe String -> ( Model, Cmd Msg )
init key maybeQuoteId maybeStatus =
    let
        status =
            case maybeStatus of
                Just "accept" ->
                    Accept

                Just "decline" ->
                    Decline

                _ ->
                    Generic

        commands =
            case maybeQuoteId of
                Just quoteId ->
                    [ Http.get
                        { url = "/api/schedule/info/" ++ quoteId
                        , expect = Http.expectJson GotScheduleInfo scheduleInfoDecoder
                        }
                    ]

                Nothing ->
                    []
    in
    ( { name = Nothing
      , email = Nothing
      , phoneNumber = Nothing
      , isSubmitting = False
      , isSubmittingAEP = False
      , isSubmittingFollowUp = False
      , error = Nothing
      , success = False
      , quoteId = maybeQuoteId
      , key = key
      , status = status
      , redirectUrl = Nothing --Just "https://calendly.com/josh-musick-medicaremax/medicare-max-demo?month=2025-04" --"https://calendly.com/medicareschool-max/30min"
      , scheduleInfo = Nothing
      , isLoading = True
      , demoMode = False -- sets CTA to demo mode always
      , demoRedirectUrl = Just "https://calendly.com/josh-musick-medicaremax/medicare-max-demo?month=2025-04" --"https://calendly.com/medicareschool-max/30min"
      }
    , Cmd.batch commands
    )


contactInfoDecoder : D.Decoder ContactInfo
contactInfoDecoder =
    D.map4 ContactInfo
        (D.field "email" D.string)
        (D.field "firstName" D.string)
        (D.field "lastName" D.string)
        (D.field "phoneNumber" D.string)


agentInfoDecoder : D.Decoder AgentInfo
agentInfoDecoder =
    D.map3 AgentInfo
        (D.field "name" D.string)
        (D.field "firstName" D.string)
        (D.field "phone" D.string)


orgInfoDecoder : D.Decoder OrgInfo
orgInfoDecoder =
    D.succeed OrgInfo
        |> P.required "name" (D.nullable D.string)
        |> P.required "logo" (D.nullable D.string)
        |> P.required "slug" D.string
        |> P.required "phone" D.string
        |> P.optional "redirectUrl" (D.nullable D.string) Nothing


scheduleInfoDecoder : D.Decoder ScheduleInfo
scheduleInfoDecoder =
    D.succeed ScheduleInfo
        |> P.required "contact" contactInfoDecoder
        |> P.required "organization" orgInfoDecoder
        |> P.required "agent" agentInfoDecoder
        |> P.optional "useOrg" D.bool True


submitResponseDecoder : D.Decoder SubmitResponse
submitResponseDecoder =
    D.map2 SubmitResponse
        (D.field "success" D.bool)
        (D.field "message" D.string)


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateName name ->
            ( { model | name = Just name }, Cmd.none )

        UpdateEmail email ->
            ( { model | email = Just email }, Cmd.none )

        UpdatePhoneNumber phoneNumber ->
            ( { model | phoneNumber = Just (stripPhoneNumber phoneNumber) }, Cmd.none )

        SubmitForm ->
            ( { model | isSubmitting = True }
            , Http.post
                { url = "/api/contact-request"
                , body = Http.jsonBody (encodeForm model)
                , expect = Http.expectJson GotSubmitResponse submitResponseDecoder
                }
            )

        GotSubmitResponse result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model | isSubmitting = False, success = True }
                        , Cmd.none
                        )

                    else
                        ( { model | isSubmitting = False, error = Just response.message }
                        , Cmd.none
                        )

                Err _ ->
                    ( { model | isSubmitting = False, error = Just "Failed to submit form. Please try again." }
                    , Cmd.none
                    )

        GotScheduleInfo result ->
            case result of
                Ok info ->
                    let
                        safeRedirectUrl =
                            info.organization.orgRedirectUrl
                                |> Maybe.map
                                    (\url ->
                                        if String.startsWith "http" url then
                                            url

                                        else
                                            "https://" ++ url
                                    )
                    in
                    ( { model
                        | scheduleInfo = Just info
                        , email = Just info.contact.email
                        , name = Just (info.contact.firstName ++ " " ++ info.contact.lastName)
                        , phoneNumber = Just info.contact.phoneNumber
                        , isLoading = False
                        , redirectUrl = safeRedirectUrl
                      }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model | isLoading = False }, Cmd.none )

        RequestAEP ->
            case model.quoteId of
                Just quoteId ->
                    ( { model | isSubmittingAEP = True }
                    , Http.post
                        { url = "/api/schedule/aep-request/" ++ quoteId
                        , body = Http.emptyBody
                        , expect = Http.expectJson GotAEPResponse submitResponseDecoder
                        }
                    )

                Nothing ->
                    ( { model | error = Just "Unable to process AEP request" }, Cmd.none )

        GotAEPResponse result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model | success = True, isSubmittingAEP = False }, Cmd.none )

                    else
                        ( { model | error = Just response.message, isSubmittingAEP = False }, Cmd.none )

                Err _ ->
                    ( { model | error = Just "Failed to submit AEP request. Please try again.", isSubmittingAEP = False }
                    , Cmd.none
                    )

        RequestFollowUp ->
            case model.quoteId of
                Just quoteId ->
                    ( { model | isSubmittingFollowUp = True }
                    , Http.post
                        { url = "/api/schedule/request-follow-up/" ++ quoteId
                        , body = Http.emptyBody
                        , expect = Http.expectJson GotFollowUpResponse submitResponseDecoder
                        }
                    )

                Nothing ->
                    ( { model | error = Just "Unable to process follow-up request" }, Cmd.none )

        GotFollowUpResponse result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model | success = True, isSubmittingFollowUp = False }, Cmd.none )

                    else
                        ( { model | error = Just response.message, isSubmittingFollowUp = False }, Cmd.none )

                Err error ->
                    ( { model | error = Just "Failed to submit follow-up request. Please try again.", isSubmittingFollowUp = False }
                    , Cmd.none
                    )

        CalendlyOpened ->
            ( { model | success = True }, Cmd.none )


stripPhoneNumber : String -> String
stripPhoneNumber phoneNumber =
    String.filter Char.isDigit phoneNumber


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    if String.isEmpty phone then
        ""

    else
        let
            digits =
                String.filter Char.isDigit phone
                    |> String.left 10

            len =
                String.length digits
        in
        if len == 0 then
            ""

        else if len <= 3 then
            "(" ++ digits

        else if len <= 6 then
            "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

        else
            "(" ++ String.left 3 digits ++ ") " ++ String.slice 3 6 digits ++ "-" ++ String.dropLeft 6 digits


encodeForm : Model -> E.Value
encodeForm model =
    E.object
        [ ( "name", model.name |> Maybe.map Url.percentEncode |> Maybe.map E.string |> Maybe.withDefault E.null )
        , ( "email", model.email |> Maybe.map Url.percentEncode |> Maybe.map E.string |> Maybe.withDefault E.null )
        , ( "phoneNumber", model.phoneNumber |> Maybe.map stripPhoneNumber |> Maybe.map E.string |> Maybe.withDefault E.null )
        , ( "type"
          , E.string
                (case model.status of
                    Accept ->
                        "accept"

                    Decline ->
                        "decline"

                    Generic ->
                        "generic"
                )
          )
        , ( "quoteId", Maybe.map E.string model.quoteId |> Maybe.withDefault E.null )
        ]


view : Model -> Browser.Document Msg
view model =
    { title = getTitle model.status
    , body =
        [ if model.isLoading then
            viewLoading

          else
            div [ class "min-h-screen bg-[#F9FAFB]" ]
                [ div [ class "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-12" ]
                    [ -- Organization Logo/Name
                      div [ class "flex justify-center items-center mb-8 px-4" ]
                        [ case model.scheduleInfo of
                            Just info ->
                                viewHeader info.organization.orgLogo info.organization.orgName

                            Nothing ->
                                text ""
                        ]
                    , if model.success then
                        div [ class "text-center" ]
                            [ h1 [ class "text-2xl sm:text-3xl font-bold text-gray-900 mb-3 sm:mb-4" ]
                                [ text "Thank You" ]
                            , p [ class "text-gray-600 text-base sm:text-lg" ]
                                [ text "We'll be in touch soon to discuss your options." ]
                            , div [ class "mt-8" ]
                                [ case model.scheduleInfo of
                                    Just info ->
                                        a
                                            [ href ("/self-onboarding/" ++ info.organization.orgSlug)
                                            , class "inline-flex items-center gap-2 text-[#03045E] hover:text-[#0077B6] transition-colors"
                                            ]
                                            [ MyIcon.clipboardPaste 24 "currentColor"
                                            , span [ class "font-medium" ] [ text "Help someone else get started" ]
                                            ]

                                    Nothing ->
                                        text ""
                                ]
                            ]

                      else if model.demoMode then
                        viewDemoCTA model

                      else
                        viewCTA model
                    ]
                ]
        ]
    }


viewDemoCTA : Model -> Html Msg
viewDemoCTA model =
    div [ class "flex flex-col max-w-xl mx-auto" ]
        [ div [ class "border border-[#DCE2E5] shadow-sm overflow-hidden rounded-lg" ]
            [ div [ class "bg-[#F9F5FF] p-6" ]
                [ h1 [ class "text-2xl sm:text-3xl font-extrabold text-black mb-4" ]
                    [ text "Let's Connect" ]
                , p [ class "text-black text-base leading-relaxed" ]
                    [ text "Interested in learning how you can use Medicare Max for your clients? Discover how our platform can help your agency maximize client retention, freeing up time to focus on what matters most." ]
                ]
            , div [ class "bg-white p-6 sm:p-8" ]
                [ p [ class "text-[#475467] text-sm mb-6" ]
                    [ text "Book a call with us to learn more" ]
                , case model.error of
                    Just error ->
                        div [ class "bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded mb-6 text-base" ]
                            [ text error ]

                    Nothing ->
                        text ""
                , div [ class "space-y-4" ]
                    [ a
                        [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                        , href (makeDemoCalendlyUrl model)
                        , target "_blank"
                        , onClick CalendlyOpened
                        ]
                        [ div [ class "flex items-center space-x-3" ]
                            [ span [ class "w-6 h-6 flex items-center justify-center" ]
                                [ MyIcon.calendarDays 24 "#03045E" ]
                            , span [ class "font-semibold text-base" ]
                                [ text "Schedule a Demo Call" ]
                            ]
                        ]
                    ]
                ]
            ]
        ]


viewCTA : Model -> Html Msg
viewCTA model =
    div [ class "flex flex-col max-w-xl mx-auto" ]
        [ div [ class "border border-[#DCE2E5] shadow-sm overflow-hidden rounded-lg" ]
            [ div [ class "bg-[#F9F5FF] p-6" ]
                [ h1 [ class "text-2xl sm:text-3xl font-extrabold text-black mb-4" ]
                    [ text (getHeading model.status) ]
                , p [ class "text-black text-base leading-relaxed" ]
                    [ text (getMessage model.status) ]
                ]
            , div [ class "bg-white p-6 sm:p-8" ]
                [ p [ class "text-[#667085] text-sm mb-6" ]
                    [ text "Select an Option Below" ]
                , case model.error of
                    Just error ->
                        div [ class "bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded mb-6 text-base" ]
                            [ text error ]

                    Nothing ->
                        text ""
                , case model.scheduleInfo of
                    Just info ->
                        case model.status of
                            Accept ->
                                viewAcceptButtons model info

                            Decline ->
                                viewDeclineButtons model info

                            Generic ->
                                viewGenericButtons model info

                    Nothing ->
                        text ""
                ]
            ]
        ]


viewAcceptButtons : Model -> ScheduleInfo -> Html Msg
viewAcceptButtons model info =
    if info.useOrg then
        viewAcceptButtonsOrg model info

    else
        viewAcceptButtonsAgent model info


viewAcceptButtonsAgent : Model -> ScheduleInfo -> Html Msg
viewAcceptButtonsAgent model info =
    div [ class "space-y-4" ]
        [ case model.redirectUrl of
            Just _ ->
                a
                    [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                    , href (makeCalendlyUrl model)
                    , target "_blank"
                    , onClick CalendlyOpened
                    ]
                    [ div [ class "flex items-center space-x-3" ]
                        [ span [ class "w-6 h-6 flex items-center justify-center" ]
                            [ MyIcon.calendarDays 24 "#03045E" ]
                        , span [ class "font-semibold text-base" ]
                            [ text ("Schedule a Call with " ++ info.agent.firstName) ]
                        ]
                    ]

            Nothing ->
                if model.isSubmittingFollowUp then
                    button
                        [ class "flex items-center justify-center w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] transition cursor-wait"
                        , type_ "button"
                        ]
                        [ div [ class "animate-spin rounded-full h-5 w-5 border-2 border-[#03045E] border-t-transparent" ] [] ]

                else
                    button
                        [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                        , type_ "button"
                        , onClick RequestFollowUp
                        ]
                        [ div [ class "flex items-center space-x-3" ]
                            [ span [ class "w-6 h-6 flex items-center justify-center" ]
                                [ MyIcon.phoneIncoming 24 "#03045E" ]
                            , span [ class "font-semibold text-base" ]
                                [ text ("Request a Call from " ++ info.agent.firstName) ]
                            ]
                        ]
        , if not (String.isEmpty info.agent.phone) then
            a
                [ href ("tel:" ++ info.agent.phone)
                , class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                ]
                [ div [ class "flex items-center space-x-3" ]
                    [ span [ class "w-6 h-6 flex items-center justify-center" ]
                        [ MyIcon.phoneOutgoing 24 "#03045E" ]
                    , span [ class "font-semibold text-base" ]
                        [ text ("Give " ++ info.agent.firstName ++ " Call: " ++ formatPhoneNumber info.agent.phone) ]
                    ]
                ]

          else
            text ""
        ]


viewAcceptButtonsOrg : Model -> ScheduleInfo -> Html Msg
viewAcceptButtonsOrg model info =
    div [ class "space-y-4" ]
        [ case info.organization.orgRedirectUrl of
            Just _ ->
                a
                    [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                    , href (makeCalendlyUrl model)
                    , target "_blank"
                    , onClick CalendlyOpened
                    ]
                    [ div [ class "flex items-center space-x-3" ]
                        [ span [ class "w-6 h-6 flex items-center justify-center" ]
                            [ MyIcon.calendarDays 24 "#03045E" ]
                        , span [ class "font-semibold text-base" ]
                            [ text "Schedule a Call" ]
                        ]
                    ]

            Nothing ->
                if model.isSubmittingFollowUp then
                    button
                        [ class "flex items-center justify-center w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] transition cursor-wait"
                        , type_ "button"
                        ]
                        [ div [ class "animate-spin rounded-full h-5 w-5 border-2 border-[#03045E] border-t-transparent" ] [] ]

                else
                    button
                        [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                        , type_ "button"
                        , onClick RequestFollowUp
                        ]
                        [ div [ class "flex items-center space-x-3" ]
                            [ span [ class "w-6 h-6 flex items-center justify-center" ]
                                [ MyIcon.phoneIncoming 24 "#03045E" ]
                            , span [ class "font-semibold text-base" ]
                                [ text "Request a Call" ]
                            ]
                        ]
        , if not (String.isEmpty info.organization.orgPhone) then
            a
                [ href ("tel:" ++ info.organization.orgPhone)
                , class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                ]
                [ div [ class "flex items-center space-x-3" ]
                    [ span [ class "w-6 h-6 flex items-center justify-center" ]
                        [ MyIcon.phoneOutgoing 24 "#03045E" ]
                    , span [ class "font-semibold text-base" ]
                        [ text ("Call Now: " ++ formatPhoneNumber info.organization.orgPhone) ]
                    ]
                ]

          else
            text ""
        ]


viewDeclineButtons : Model -> ScheduleInfo -> Html Msg
viewDeclineButtons model info =
    if info.useOrg then
        viewDeclineButtonsOrg model info

    else
        viewDeclineButtonsAgent model info


viewDeclineButtonsAgent : Model -> ScheduleInfo -> Html Msg
viewDeclineButtonsAgent model info =
    div [ class "space-y-4" ]
        [ a
            [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
            , href (makeCalendlyUrl model)
            , target "_blank"
            , onClick CalendlyOpened
            ]
            [ div [ class "flex items-center space-x-3" ]
                [ span [ class "w-6 h-6 flex items-center justify-center" ]
                    [ MyIcon.calendarDays 24 "#03045E" ]
                , span [ class "font-semibold text-base" ]
                    [ text ("Schedule a Call with " ++ info.agent.firstName) ]
                ]
            ]
        , if not (String.isEmpty info.agent.phone) then
            a
                [ href ("tel:" ++ info.agent.phone)
                , class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                ]
                [ div [ class "flex items-center space-x-3" ]
                    [ span [ class "w-6 h-6 flex items-center justify-center" ]
                        [ MyIcon.phoneOutgoing 24 "#03045E" ]
                    , span [ class "font-semibold text-base" ]
                        [ text ("Give " ++ info.agent.firstName ++ " a call: " ++ formatPhoneNumber info.agent.phone) ]
                    ]
                ]

          else
            text ""
        , div [ class "mt-8 mb-4" ]
            [ h3 [ class "text-[#03045E] font-bold text-base mb-3" ]
                [ text "Interested in an Advantage Plan?" ]
            , p [ class "text-[#03045E] text-sm mb-6 leading-relaxed" ]
                [ text "We can switch you to an Advantage Plan during the Annual Enrollment Period (Oct. 15 - Dec. 7) - Click below and we will be sure to reach out at the end of September to to begin the Advantage Plan Process." ]
            , if model.isSubmittingAEP then
                button
                    [ class "flex items-center justify-center w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] transition cursor-wait"
                    , type_ "button"
                    ]
                    [ div [ class "animate-spin rounded-full h-5 w-5 border-2 border-[#03045E] border-t-transparent" ] [] ]

              else
                button
                    [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                    , type_ "button"
                    , onClick RequestAEP
                    ]
                    [ div [ class "flex items-center space-x-3" ]
                        [ span [ class "w-6 h-6 flex items-center justify-center" ]
                            [ MyIcon.clipboardPlus 24 "#03045E" ]
                        , span [ class "font-semibold text-base" ]
                            [ text "Get on the Advantage Plan List" ]
                        ]
                    ]
            ]
        ]


viewDeclineButtonsOrg : Model -> ScheduleInfo -> Html Msg
viewDeclineButtonsOrg model info =
    div [ class "space-y-4" ]
        [ case info.organization.orgRedirectUrl of
            Just _ ->
                a
                    [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                    , href (makeCalendlyUrl model)
                    , target "_blank"
                    , onClick CalendlyOpened
                    ]
                    [ div [ class "flex items-center space-x-3" ]
                        [ span [ class "w-6 h-6 flex items-center justify-center" ]
                            [ MyIcon.calendarDays 24 "#03045E" ]
                        , span [ class "font-semibold text-base" ]
                            [ text "Schedule a Call" ]
                        ]
                    ]

            Nothing ->
                text ""
        , if model.isSubmittingAEP then
            button
                [ class "flex items-center justify-center w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] transition cursor-wait"
                , type_ "button"
                ]
                [ div [ class "animate-spin rounded-full h-5 w-5 border-2 border-[#03045E] border-t-transparent" ] [] ]

          else
            button
                [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                , type_ "button"
                , onClick RequestAEP
                ]
                [ div [ class "flex items-center space-x-3" ]
                    [ span [ class "w-6 h-6 flex items-center justify-center" ]
                        [ MyIcon.clipboardPlus 24 "#03045E" ]
                    , span [ class "font-semibold text-base" ]
                        [ text "Get on the Advantage Plan List" ]
                    ]
                ]
        , if not (String.isEmpty info.organization.orgPhone) then
            a
                [ href ("tel:" ++ info.organization.orgPhone)
                , class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                ]
                [ div [ class "flex items-center space-x-3" ]
                    [ span [ class "w-6 h-6 flex items-center justify-center" ]
                        [ MyIcon.phoneOutgoing 24 "#03045E" ]
                    , span [ class "font-semibold text-base" ]
                        [ text ("Call Now: " ++ formatPhoneNumber info.organization.orgPhone) ]
                    ]
                ]

          else
            text ""
        , div [ class "mt-8 mb-4" ]
            [ h3 [ class "text-[#03045E] font-bold text-base mb-3" ]
                [ text "Interested in an Advantage Plan?" ]
            , p [ class "text-[#03045E] text-sm mb-6 leading-relaxed" ]
                [ text "We can switch you to an Advantage Plan during the Annual Enrollment Period (Oct. 15 - Dec. 7) - Click below and we will be sure to reach out at the end of September to to begin the Advantage Plan Process." ]
            , if model.isSubmittingAEP then
                button
                    [ class "flex items-center justify-center w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] transition cursor-wait"
                    , type_ "button"
                    ]
                    [ div [ class "animate-spin rounded-full h-5 w-5 border-2 border-[#03045E] border-t-transparent" ] [] ]

              else
                button
                    [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                    , type_ "button"
                    , onClick RequestAEP
                    ]
                    [ div [ class "flex items-center space-x-3" ]
                        [ span [ class "w-6 h-6 flex items-center justify-center" ]
                            [ MyIcon.clipboardPlus 24 "#03045E" ]
                        , span [ class "font-semibold text-base" ]
                            [ text "Get on the Advantage Plan List" ]
                        ]
                    ]
            ]
        ]


viewGenericButtons : Model -> ScheduleInfo -> Html Msg
viewGenericButtons model info =
    if info.useOrg then
        viewGenericButtonsOrg model info

    else
        viewGenericButtonsAgent model info


viewGenericButtonsAgent : Model -> ScheduleInfo -> Html Msg
viewGenericButtonsAgent model info =
    div [ class "space-y-4" ]
        [ case model.redirectUrl of
            Just _ ->
                a
                    [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                    , href (makeCalendlyUrl model)
                    , target "_blank"
                    , onClick CalendlyOpened
                    ]
                    [ div [ class "flex items-center space-x-3" ]
                        [ span [ class "w-6 h-6 flex items-center justify-center" ]
                            [ MyIcon.calendarDays 24 "#03045E" ]
                        , span [ class "font-semibold text-base" ]
                            [ text ("Schedule a Call with " ++ info.agent.firstName) ]
                        ]
                    ]

            Nothing ->
                if model.isSubmittingFollowUp then
                    button
                        [ class "flex items-center justify-center w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] transition cursor-wait"
                        , type_ "button"
                        ]
                        [ div [ class "animate-spin rounded-full h-5 w-5 border-2 border-[#03045E] border-t-transparent" ] [] ]

                else
                    button
                        [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                        , type_ "button"
                        , onClick RequestFollowUp
                        ]
                        [ div [ class "flex items-center space-x-3" ]
                            [ span [ class "w-6 h-6 flex items-center justify-center" ]
                                [ MyIcon.phoneIncoming 24 "#03045E" ]
                            , span [ class "font-semibold text-base" ]
                                [ text ("Request a Call from " ++ info.agent.firstName) ]
                            ]
                        ]
        , if not (String.isEmpty info.agent.phone) then
            a
                [ href ("tel:" ++ info.agent.phone)
                , class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                ]
                [ div [ class "flex items-center space-x-3" ]
                    [ span [ class "w-6 h-6 flex items-center justify-center" ]
                        [ MyIcon.phoneOutgoing 24 "#03045E" ]
                    , span [ class "font-semibold text-base" ]
                        [ text ("Give " ++ info.agent.firstName ++ " a call: " ++ formatPhoneNumber info.agent.phone) ]
                    ]
                ]

          else
            text ""
        ]


viewGenericButtonsOrg : Model -> ScheduleInfo -> Html Msg
viewGenericButtonsOrg model info =
    div [ class "space-y-4" ]
        [ case info.organization.orgRedirectUrl of
            Just _ ->
                a
                    [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                    , href (makeCalendlyUrl model)
                    , target "_blank"
                    , onClick CalendlyOpened
                    ]
                    [ div [ class "flex items-center space-x-3" ]
                        [ span [ class "w-6 h-6 flex items-center justify-center" ]
                            [ MyIcon.calendarDays 24 "#03045E" ]
                        , span [ class "font-semibold text-base" ]
                            [ text "Schedule a Call" ]
                        ]
                    ]

            Nothing ->
                if model.isSubmittingFollowUp then
                    button
                        [ class "flex items-center justify-center w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] transition cursor-wait"
                        , type_ "button"
                        ]
                        [ div [ class "animate-spin rounded-full h-5 w-5 border-2 border-[#03045E] border-t-transparent" ] [] ]

                else
                    button
                        [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                        , type_ "button"
                        , onClick RequestFollowUp
                        ]
                        [ div [ class "flex items-center space-x-3" ]
                            [ span [ class "w-6 h-6 flex items-center justify-center" ]
                                [ MyIcon.phoneIncoming 24 "#03045E" ]
                            , span [ class "font-semibold text-base" ]
                                [ text "Request a Call" ]
                            ]
                        ]
        , if not (String.isEmpty info.organization.orgPhone) then
            a
                [ href ("tel:" ++ info.organization.orgPhone)
                , class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                ]
                [ div [ class "flex items-center space-x-3" ]
                    [ span [ class "w-6 h-6 flex items-center justify-center" ]
                        [ MyIcon.phoneOutgoing 24 "#03045E" ]
                    , span [ class "font-semibold text-base" ]
                        [ text ("Call Now: " ++ formatPhoneNumber info.organization.orgPhone) ]
                    ]
                ]

          else
            text ""
        ]


viewLoading : Html Msg
viewLoading =
    div [ class "fixed inset-0 bg-white flex flex-col items-center justify-center gap-4 text-center" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-4 border-[#03045E] border-t-transparent" ] []
        , p [ class "text-center text-lg font-medium text-gray-600" ]
            [ text "Loading your schedule page..." ]
        ]


makeDemoCalendlyUrl : Model -> String
makeDemoCalendlyUrl model =
    makeCalendlyUrlHelper model model.demoRedirectUrl


makeCalendlyUrl : Model -> String
makeCalendlyUrl model =
    makeCalendlyUrlHelper model model.redirectUrl


makeCalendlyUrlHelper : Model -> Maybe String -> String
makeCalendlyUrlHelper model redirectUrl =
    case redirectUrl of
        Just url ->
            List.Extra.zip
                [ "email", "name", "location" ]
                [ model.email
                , model.name
                , model.phoneNumber
                ]
                |> List.filterMap
                    (\( key, value ) ->
                        case value of
                            Just s ->
                                case key of
                                    "location" ->
                                        Just (key ++ "=1" ++ Url.percentEncode s)

                                    _ ->
                                        Just (key ++ "=" ++ Url.percentEncode s)

                            Nothing ->
                                Nothing
                    )
                |> String.join "&"
                |> (\s -> url ++ "?" ++ s)

        Nothing ->
            "#"


getTitle : EligibilityStatus -> String
getTitle status =
    case status of
        Accept ->
            "Good News! - Medicare Max"

        Decline ->
            "Not Eligible - Medicare Max"

        Generic ->
            "Schedule Follow-up - Medicare Max"


getHeading : EligibilityStatus -> String
getHeading status =
    case status of
        Accept ->
            "Great News..."

        Decline ->
            "Here are some options..."

        Generic ->
            "Let's Connect"


getMessage : EligibilityStatus -> String
getMessage status =
    case status of
        Accept ->
            "Based on your answers, you look like a good candidate to switch plans. Let's schedule a follow-up to discuss your options or jump on a call now."

        Decline ->
            "Based on your answers, a Medicare Advantage Plan may be a better fit for you. We'd love to help you explore your options and find a plan that's a perfect fit for your needs."

        Generic ->
            "Let's schedule a follow-up call to discuss your Medicare options and find the best plan for your needs."


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/src/ScheduleMain.elm
================
module ScheduleMain exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick)
import MyIcon


type alias Model =
    { success : Bool
    , redirectUrl : String
    }


type Msg
    = CalendlyOpened


init : Nav.Key -> ( Model, Cmd Msg )
init key =
    ( { success = False
      , redirectUrl = "https://calendly.com/josh-musick-medicaremax/medicare-max-demo?month=2025-04"
      }
    , Cmd.none
    )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        CalendlyOpened ->
            ( { model | success = True }, Cmd.none )


view : Model -> Browser.Document Msg
view model =
    { title = "Schedule a Demo - Medicare Max"
    , body =
        [ div [ class "min-h-screen bg-[#F9FAFB]" ]
            [ div [ class "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-12" ]
                [ if model.success then
                    div [ class "text-center" ]
                        [ h1 [ class "text-2xl sm:text-3xl font-bold text-gray-900 mb-3 sm:mb-4" ]
                            [ text "Thank You" ]
                        , p [ class "text-gray-600 text-base sm:text-lg" ]
                            [ text "We'll be in touch soon to discuss your options." ]
                        ]

                  else
                    viewDemoCTA model
                ]
            ]
        ]
    }


viewDemoCTA : Model -> Html Msg
viewDemoCTA model =
    div [ class "flex flex-col max-w-xl mx-auto" ]
        [ div [ class "border border-[#DCE2E5] shadow-sm overflow-hidden rounded-lg" ]
            [ div [ class "bg-[#F9F5FF] p-6" ]
                [ h1 [ class "text-2xl sm:text-3xl font-extrabold text-black mb-4" ]
                    [ text "Let's Connect" ]
                , p [ class "text-black text-base leading-relaxed" ]
                    [ text "Interested in learning how you can use Medicare Max for your clients? Discover how our platform can help your agency maximize client retention, freeing up time to focus on what matters most." ]
                ]
            , div [ class "bg-white p-6 sm:p-8" ]
                [ p [ class "text-[#475467] text-sm mb-6" ]
                    [ text "Book a call with us to learn more" ]
                , div [ class "space-y-4" ]
                    [ a
                        [ class "flex items-center justify-between w-full px-4 py-4 border border-[#03045E] rounded-md text-[#03045E] hover:bg-gray-50 transition"
                        , href model.redirectUrl
                        , target "_blank"
                        , onClick CalendlyOpened
                        ]
                        [ div [ class "flex items-center space-x-3" ]
                            [ span [ class "w-6 h-6 flex items-center justify-center" ]
                                [ MyIcon.calendarDays 24 "#03045E" ]
                            , span [ class "font-semibold text-base" ]
                                [ text "Schedule a Demo Call" ]
                            ]
                        ]
                    ]
                ]
            ]
        ]


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/src/SelfServiceOnboarding.elm
================
port module SelfServiceOnboarding exposing (..)

import Browser
import Browser.Navigation as Nav
import CarrierNaic exposing (Carrier, allCarriers, carrierDecoder, carrierToString, stringToCarrier)
import Date exposing (Date)
import Dict
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Task
import Time
import Url exposing (Url)
import Url.Builder as Builder
import Url.Parser as Parser exposing ((</>), Parser, oneOf, string)
import Utils.QuoteHeader exposing (viewHeader)



-- PORTS


port saveDebugInfo : String -> Cmd msg


port clearDebugInfo : () -> Cmd msg



-- MODEL


type CarrierChoice
    = HasCarrier Carrier
    | NoneOther


type alias Model =
    { orgId : Maybe String
    , orgSlug : Maybe String
    , logo : Maybe String
    , orgName : Maybe String
    , agentId : Maybe String
    , email : String
    , firstName : String
    , lastName : String
    , zipCode : String
    , dateOfBirth : String
    , gender : String
    , tobacco : Bool
    , phoneNumber : String
    , currentPremium : String
    , currentCarrier : String
    , carrier : Maybe CarrierChoice
    , planType : String
    , optInQuarterlyUpdates : Bool
    , emailReadOnly : Bool
    , isSubmitting : Bool
    , isGeneratingQuote : Bool
    , error : Maybe String
    , success : Bool
    , key : Nav.Key
    , currentDate : Maybe Date
    , state : Maybe String
    , counties : List String
    , selectedCounty : Maybe String
    , isLoadingZipData : Bool
    , zipError : Maybe String
    }



-- INIT


type Route
    = SlugRoute String
    | QueryRoute


routeParser : Parser (Route -> a) a
routeParser =
    oneOf
        [ Parser.map SlugRoute (Parser.s "self-onboarding" </> string)
        , Parser.map QueryRoute Parser.top
        ]


parseUrl : Url -> Route
parseUrl url =
    Parser.parse routeParser url |> Maybe.withDefault QueryRoute


type alias UrlParams =
    { orgId : Maybe String
    , email : Maybe String
    , hash : Maybe String
    , quoteId : Maybe String
    , agentId : Maybe String
    }


init : Nav.Key -> Url -> ( Model, Cmd Msg )
init key url =
    let
        route =
            parseUrl url

        queryParams =
            url.query
                |> Maybe.map (String.split "&")
                |> Maybe.withDefault []
                |> List.map (String.split "=")
                |> List.filterMap
                    (\parts ->
                        case parts of
                            [ key0, value0 ] ->
                                Just ( key0, Url.percentDecode value0 |> Maybe.withDefault value0 )

                            _ ->
                                Nothing
                    )
                |> Dict.fromList

        getParam name =
            Dict.get name queryParams

        initialModel =
            { orgId = Nothing
            , orgSlug = Nothing
            , logo = Nothing
            , orgName = Nothing
            , agentId = Nothing
            , email = ""
            , firstName = ""
            , lastName = ""
            , zipCode = ""
            , dateOfBirth = ""
            , gender = "M"
            , tobacco = False
            , phoneNumber = ""
            , currentPremium = ""
            , currentCarrier = ""
            , carrier = Nothing
            , planType = ""
            , optInQuarterlyUpdates = True
            , emailReadOnly = False
            , isSubmitting = False
            , isGeneratingQuote = False
            , error = Nothing
            , success = False
            , key = key
            , currentDate = Nothing
            , state = Nothing
            , counties = []
            , selectedCounty = Nothing
            , isLoadingZipData = False
            , zipError = Nothing
            }

        commands =
            [ Task.perform GotCurrentDate Date.today ]

        -- Clear any previous debug info
        clearCmd =
            clearDebugInfo ()
    in
    case route of
        SlugRoute slug ->
            let
                email =
                    getParam "email"

                quoteId =
                    getParam "quoteId"

                agentId =
                    getParam "agentId"

                debugInfo =
                    "Initializing with slug="
                        ++ slug
                        ++ ", email="
                        ++ (email |> Maybe.withDefault "none")
                        ++ ", quoteId="
                        ++ (quoteId |> Maybe.withDefault "none")
                        ++ ", url.query="
                        ++ (url.query |> Maybe.withDefault "none")

                fetchOrgDetailsCmd =
                    let
                        queryParamsStr =
                            url.query |> Maybe.withDefault ""

                        apiUrl =
                            "/api/self-service/"
                                ++ slug
                                ++ (if String.isEmpty queryParamsStr then
                                        ""

                                    else
                                        "?" ++ queryParamsStr
                                   )
                    in
                    Cmd.batch
                        [ saveDebugInfo <| "Fetching org details: " ++ apiUrl
                        , Http.get
                            { url = apiUrl
                            , expect = Http.expectJson GotOrgDetails orgDetailsDecoder
                            }
                        ]

                fetchContactDetailsCmd =
                    case quoteId of
                        Just qid ->
                            fetchContactDetails qid

                        Nothing ->
                            Cmd.none
            in
            ( { initialModel
                | orgSlug = Just slug
                , agentId = agentId
              }
            , Cmd.batch
                (clearCmd
                    :: saveDebugInfo debugInfo
                    :: fetchOrgDetailsCmd
                    :: fetchContactDetailsCmd
                    :: commands
                )
            )

        QueryRoute ->
            -- Handle query parameters for backward compatibility
            let
                params =
                    parseUrlParams url

                orgId =
                    getParam "orgId"

                email =
                    getParam "email"

                hash =
                    getParam "hash"

                quoteId =
                    getParam "quoteId"

                debugInfo =
                    "Initializing with orgId="
                        ++ (orgId |> Maybe.withDefault "none")
                        ++ ", email="
                        ++ (email |> Maybe.withDefault "none")
                        ++ ", quoteId="
                        ++ (quoteId |> Maybe.withDefault "none")

                initCmd =
                    case orgId of
                        Just oid ->
                            -- If we have an org ID, fetch org details which will include contact if found
                            let
                                apiQueryParams =
                                    List.filterMap identity
                                        [ Maybe.map (\e -> ( "email", e )) email
                                        , Maybe.map (\q -> ( "id", q )) quoteId
                                        , Maybe.map (\h -> ( "hash", h )) hash
                                        ]
                                        |> List.map (\( k, v ) -> k ++ "=" ++ Url.percentEncode v)
                                        |> String.join "&"

                                apiUrl =
                                    "/api/self-service/"
                                        ++ oid
                                        ++ (if String.isEmpty apiQueryParams then
                                                ""

                                            else
                                                "?" ++ apiQueryParams
                                           )
                            in
                            Cmd.batch
                                [ saveDebugInfo <| "Fetching org details: " ++ apiUrl
                                , Http.get
                                    { url = apiUrl
                                    , expect = Http.expectJson GotOrgDetails orgDetailsDecoder
                                    }
                                ]

                        Nothing ->
                            Cmd.none

                fetchContactDetailsCmd =
                    case quoteId of
                        Just qid ->
                            fetchContactDetails qid

                        Nothing ->
                            Cmd.none
            in
            ( { initialModel | orgId = orgId }
            , Cmd.batch
                (clearCmd
                    :: saveDebugInfo debugInfo
                    :: initCmd
                    :: fetchContactDetailsCmd
                    :: commands
                )
            )


parseUrlParams : Url -> UrlParams
parseUrlParams url =
    -- This function parses query parameters for backward compatibility
    let
        queryParams =
            url.query
                |> Maybe.map (String.split "&")
                |> Maybe.withDefault []
                |> List.map (String.split "=")
                |> List.filterMap
                    (\parts ->
                        case parts of
                            [ key, value ] ->
                                Just ( key, Url.percentDecode value |> Maybe.withDefault value )

                            _ ->
                                Nothing
                    )
                |> Dict.fromList

        getParam name =
            Dict.get name queryParams
    in
    { orgId = getParam "orgId"
    , email = getParam "email"
    , hash = getParam "hash"
    , quoteId = getParam "id"
    , agentId = getParam "agentId"
    }


fetchContactDetails : String -> Cmd Msg
fetchContactDetails quoteId =
    Http.get
        { url = "/api/quotes/decode/" ++ quoteId
        , expect = Http.expectJson GotContactDetails contactDetailsDecoder
        }


contactDetailsDecoder : Decoder ContactDetails
contactDetailsDecoder =
    Decode.succeed ContactDetails
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "contact" contactDecoder


type alias ContactDetails =
    { success : Bool
    , contact : Contact
    }


fetchOrgDetails : String -> Cmd Msg
fetchOrgDetails slug =
    let
        url =
            "/api/self-service/" ++ slug
    in
    Cmd.batch
        [ saveDebugInfo <| "Fetching org details: " ++ url
        , Http.get
            { url = url
            , expect = Http.expectJson GotOrgDetails orgDetailsDecoder
            }
        ]


fetchZipInfo : String -> Cmd Msg
fetchZipInfo zipCode =
    Http.get
        { url = "/api/zipinfo/" ++ zipCode
        , expect = Http.expectJson GotZipInfo zipInfoDecoder
        }



-- UPDATE


type Msg
    = GotInitResponse (Result Http.Error InitResponse)
    | GotOrgDetails (Result Http.Error OrgDetails)
    | GotContactData (Result Http.Error ContactResponse)
    | UpdateEmail String
    | UpdateFirstName String
    | UpdateLastName String
    | UpdateZipCode String
    | UpdateDateOfBirth String
    | UpdateGender String
    | UpdateTobacco String
    | UpdatePhoneNumber String
    | UpdateCurrentPremium String
    | UpdateCurrentCarrier String
    | UpdateCarrierChoice String
    | UpdatePlanType String
    | UpdateSelectedCounty String
    | SubmitForm
    | GotCurrentDate Date
    | GotZipInfo (Result Http.Error ZipInfo)
    | GotSignupResponse (Result Http.Error SignupResponse)
    | GotQuoteResponse (Result Http.Error QuoteResponse)
    | GoToQuote
    | GotContactDetails (Result Http.Error ContactDetails)


type alias InitResponse =
    { contact : Maybe Contact
    , email : Maybe String
    , emailReadOnly : Bool
    }


type alias OrgDetails =
    { orgId : String
    , orgSlug : String
    , contact : Maybe Contact
    , logo : Maybe String
    , orgName : Maybe String
    }


type alias Contact =
    { firstName : String
    , lastName : String
    , email : String
    , phone : String
    , dateOfBirth : String
    , gender : String
    , tobacco : Bool
    , state : String
    , zipCode : String
    , currentCarrier : Maybe String
    , planType : Maybe String
    , optInQuarterlyUpdates : Bool
    }


type alias ZipInfo =
    { state : String
    , counties : List String
    }


type alias SignupResponse =
    { success : Bool
    , contactId : Int
    , email : String
    }


type alias QuoteResponse =
    { success : Bool
    , contactId : Int
    , quoteId : String
    , redirectUrl : String
    , error : Maybe String
    }


type alias ContactResponse =
    { success : Bool
    , orgSlug : String
    , carrierContracts : List Carrier
    , contact : Contact
    }


zipInfoDecoder : Decoder ZipInfo
zipInfoDecoder =
    Decode.field "success" Decode.bool
        |> Decode.andThen
            (\success ->
                if success then
                    Decode.field "data"
                        (Decode.map2 ZipInfo
                            (Decode.field "state" Decode.string)
                            (Decode.field "counties" (Decode.list Decode.string))
                        )

                else
                    Decode.field "error" Decode.string
                        |> Decode.andThen (\error -> Decode.fail error)
            )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotOrgDetails result ->
            case result of
                Ok details ->
                    let
                        -- Extract contact info if it exists
                        contact =
                            details.contact

                        debugInfo =
                            "OrgDetails: orgId="
                                ++ details.orgId
                                ++ ", orgSlug="
                                ++ details.orgSlug
                                ++ ", hasContact="
                                ++ (if details.contact /= Nothing then
                                        "true"

                                    else
                                        "false"
                                   )
                                ++ (if details.contact /= Nothing then
                                        ", contactEmail=" ++ (Maybe.map .email contact |> Maybe.withDefault "none")

                                    else
                                        ""
                                   )

                        currentCarrier =
                            Maybe.map .currentCarrier contact
                                |> Maybe.withDefault Nothing
                                |> Maybe.withDefault model.currentCarrier

                        carrier =
                            case stringToCarrier currentCarrier of
                                Just carrierValue ->
                                    Just (HasCarrier carrierValue)

                                Nothing ->
                                    Nothing
                    in
                    ( { model
                        | orgId = Just details.orgId
                        , orgSlug = Just details.orgSlug
                        , orgName = details.orgName
                        , logo = details.logo
                        , email = Maybe.map .email contact |> Maybe.withDefault model.email
                        , firstName = Maybe.map .firstName contact |> Maybe.withDefault model.firstName
                        , lastName = Maybe.map .lastName contact |> Maybe.withDefault model.lastName
                        , phoneNumber = Maybe.map .phone contact |> Maybe.withDefault model.phoneNumber
                        , dateOfBirth = Maybe.map .dateOfBirth contact |> Maybe.withDefault model.dateOfBirth
                        , gender = Maybe.map .gender contact |> Maybe.withDefault model.gender
                        , tobacco = Maybe.map .tobacco contact |> Maybe.withDefault model.tobacco
                        , zipCode = Maybe.map .zipCode contact |> Maybe.withDefault model.zipCode
                        , currentCarrier = currentCarrier
                        , carrier = carrier
                        , planType = Maybe.map .planType contact |> Maybe.withDefault Nothing |> Maybe.withDefault model.planType
                        , optInQuarterlyUpdates = Maybe.map .optInQuarterlyUpdates contact |> Maybe.withDefault model.optInQuarterlyUpdates
                        , error = Nothing
                      }
                    , Cmd.batch
                        [ saveDebugInfo debugInfo

                        -- If we have a zip code from contact, fetch the zip info
                        , case Maybe.map .zipCode contact of
                            Just zip ->
                                if String.length zip == 5 then
                                    fetchZipInfo zip

                                else
                                    Cmd.none

                            Nothing ->
                                Cmd.none
                        ]
                    )

                Err error ->
                    ( { model | error = Just "Organization not found or invalid link." }
                    , saveDebugInfo <| "OrgDetails error: " ++ httpErrorToString error
                    )

        GotInitResponse result ->
            case result of
                Ok response ->
                    let
                        email =
                            response.email |> Maybe.withDefault ""

                        contact =
                            response.contact

                        firstName =
                            contact |> Maybe.map .firstName |> Maybe.withDefault ""

                        lastName =
                            contact |> Maybe.map .lastName |> Maybe.withDefault ""

                        optIn =
                            contact |> Maybe.map .optInQuarterlyUpdates |> Maybe.withDefault False

                        debugInfo =
                            "InitResponse: email="
                                ++ email
                                ++ ", firstName="
                                ++ firstName
                                ++ ", lastName="
                                ++ lastName
                                ++ ", optIn="
                                ++ (if optIn then
                                        "true"

                                    else
                                        "false"
                                   )
                    in
                    ( { model
                        | email = email
                        , firstName = firstName
                        , lastName = lastName
                        , optInQuarterlyUpdates = optIn
                        , emailReadOnly = response.emailReadOnly
                        , error = Nothing
                      }
                    , saveDebugInfo debugInfo
                    )

                Err error ->
                    ( { model | error = Just "Failed to load existing contact details. Please try again." }
                    , saveDebugInfo <| "InitResponse error: " ++ httpErrorToString error
                    )

        UpdateEmail newEmail ->
            ( { model
                | email =
                    if model.emailReadOnly then
                        model.email

                    else
                        newEmail
              }
            , Cmd.none
            )

        UpdateFirstName newFirstName ->
            ( { model | firstName = newFirstName }, Cmd.none )

        UpdateLastName newLastName ->
            ( { model | lastName = newLastName }, Cmd.none )

        UpdateZipCode zip ->
            let
                filteredZip =
                    String.filter Char.isDigit zip |> String.left 5

                cmd =
                    if String.length filteredZip == 5 && filteredZip /= model.zipCode then
                        fetchZipInfo filteredZip

                    else
                        Cmd.none
            in
            ( { model
                | zipCode = filteredZip
                , isLoadingZipData = String.length filteredZip == 5 && filteredZip /= model.zipCode
                , state =
                    if String.length filteredZip /= 5 || (String.length filteredZip == 5 && filteredZip /= model.zipCode) then
                        Nothing

                    else
                        model.state
                , counties =
                    if String.length filteredZip /= 5 || (String.length filteredZip == 5 && filteredZip /= model.zipCode) then
                        []

                    else
                        model.counties
                , selectedCounty =
                    if String.length filteredZip /= 5 || (String.length filteredZip == 5 && filteredZip /= model.zipCode) then
                        Nothing

                    else
                        model.selectedCounty
                , zipError = Nothing
              }
            , cmd
            )

        GotZipInfo result ->
            case result of
                Ok zipInfo ->
                    let
                        -- Always select the first county as default
                        selectedCounty =
                            List.head zipInfo.counties
                    in
                    ( { model
                        | state = Just zipInfo.state
                        , counties = zipInfo.counties
                        , selectedCounty = selectedCounty
                        , isLoadingZipData = False
                        , zipError = Nothing
                      }
                    , Cmd.none
                    )

                Err error ->
                    ( { model
                        | state = Nothing
                        , counties = []
                        , selectedCounty = Nothing
                        , isLoadingZipData = False
                        , zipError = Just (httpErrorToString error)
                      }
                    , Cmd.none
                    )

        UpdateSelectedCounty county ->
            ( { model | selectedCounty = Just county }, Cmd.none )

        UpdateDateOfBirth dob ->
            ( { model | dateOfBirth = dob }, Cmd.none )

        UpdateGender value ->
            ( { model | gender = value }, Cmd.none )

        UpdateTobacco value ->
            ( { model | tobacco = value == "true" }, Cmd.none )

        UpdatePhoneNumber phone ->
            ( { model | phoneNumber = String.filter Char.isDigit phone |> String.left 10 }, Cmd.none )

        UpdateCurrentPremium value ->
            ( { model | currentPremium = String.filter (\c -> Char.isDigit c || c == '.') value }, Cmd.none )

        UpdateCurrentCarrier carrier ->
            ( { model | currentCarrier = carrier }, Cmd.none )

        UpdateCarrierChoice value ->
            case value of
                "none" ->
                    ( { model
                        | carrier = Just NoneOther
                        , currentCarrier = ""
                      }
                    , Cmd.none
                    )

                _ ->
                    case stringToCarrier value of
                        Just carrierValue ->
                            ( { model
                                | carrier = Just (HasCarrier carrierValue)
                                , currentCarrier = carrierValue |> carrierToString
                              }
                            , Cmd.none
                            )

                        Nothing ->
                            ( model, Cmd.none )

        UpdatePlanType planType ->
            ( { model | planType = planType }, Cmd.none )

        GotCurrentDate date ->
            ( { model | currentDate = Just date }, Cmd.none )

        SubmitForm ->
            if isFormValid model then
                ( { model | isSubmitting = True, error = Nothing }
                , submitForm model
                )

            else
                ( { model | error = Just "Please fill out all required fields" }
                , Cmd.none
                )

        GotSignupResponse result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model
                            | isSubmitting = False
                            , success = True
                            , error = Nothing
                            , isGeneratingQuote = True
                          }
                        , Cmd.batch
                            [ saveDebugInfo <| "SignupResponse: contactId=" ++ String.fromInt response.contactId ++ ", email=" ++ response.email
                            , generateQuote model.orgId response.contactId response.email
                            ]
                        )

                    else
                        ( { model | isSubmitting = False, error = Just "Signup failed. Please try again." }
                        , saveDebugInfo <| "SignupResponse: failed (success=false)"
                        )

                Err error ->
                    ( { model | isSubmitting = False, error = Just "Signup failed. Please try again." }
                    , saveDebugInfo <| "SignupResponse error: " ++ httpErrorToString error
                    )

        GotQuoteResponse result ->
            case result of
                Ok response ->
                    if response.success then
                        ( { model | isGeneratingQuote = False }
                        , Cmd.batch
                            [ saveDebugInfo <| "QuoteResponse: quoteId=" ++ response.quoteId ++ ", redirectUrl=" ++ response.redirectUrl
                            , Nav.pushUrl model.key (Builder.absolute [ "compare" ] [ Builder.string "id" response.quoteId ])
                            ]
                        )

                    else
                        ( { model | isGeneratingQuote = False, error = Just "Failed to generate quote. Please try again." }
                        , saveDebugInfo <| "QuoteResponse: failed (success=false), error=" ++ (response.error |> Maybe.withDefault "No error message")
                        )

                Err error ->
                    ( { model | isGeneratingQuote = False, error = Just "Failed to generate quote. Please try again." }
                    , saveDebugInfo <| "QuoteResponse error: " ++ httpErrorToString error
                    )

        GoToQuote ->
            if isFormValid model then
                let
                    county =
                        case model.selectedCounty of
                            Just c ->
                                c

                            Nothing ->
                                List.head model.counties
                                    |> Maybe.withDefault ""

                    state =
                        model.state
                            |> Maybe.withDefault ""

                    compareUrl =
                        Builder.absolute [ "compare" ]
                            [ Builder.string "zip" model.zipCode
                            , Builder.string "state" state
                            , Builder.string "county" county
                            , Builder.string "gender" model.gender
                            , Builder.string "tobacco"
                                (if model.tobacco then
                                    "true"

                                 else
                                    "false"
                                )
                            , Builder.string "dateOfBirth" model.dateOfBirth
                            ]
                in
                ( model
                , Nav.pushUrl model.key compareUrl
                )

            else
                ( { model | error = Just "Please fill out all required fields for a quote" }
                , Cmd.none
                )

        GotContactData result ->
            case result of
                Ok response ->
                    let
                        contact =
                            response.contact
                    in
                    ( { model
                        | orgId = Just response.orgSlug
                        , email = contact.email
                        , firstName = contact.firstName
                        , lastName = contact.lastName
                        , phoneNumber = contact.phone
                        , dateOfBirth = contact.dateOfBirth
                        , gender = contact.gender
                        , tobacco = contact.tobacco
                        , zipCode = contact.zipCode
                        , currentCarrier = Maybe.withDefault "" contact.currentCarrier
                        , planType = Maybe.withDefault "" contact.planType
                        , optInQuarterlyUpdates = contact.optInQuarterlyUpdates
                        , error = Nothing
                      }
                    , Cmd.batch
                        [ saveDebugInfo <|
                            "ContactData: success="
                                ++ (if response.success then
                                        "true"

                                    else
                                        "false"
                                   )
                                ++ ", orgSlug="
                                ++ response.orgSlug
                        ]
                    )

                Err error ->
                    ( { model | error = Just "Failed to load contact data. Please try again." }
                    , saveDebugInfo <| "ContactData error: " ++ httpErrorToString error
                    )

        GotContactDetails result ->
            case result of
                Ok response ->
                    ( { model
                        | firstName = response.contact.firstName
                        , lastName = response.contact.lastName
                        , email = response.contact.email
                        , phoneNumber = response.contact.phone
                        , dateOfBirth = response.contact.dateOfBirth
                        , gender = response.contact.gender
                        , error = Nothing
                      }
                    , Cmd.none
                    )

                Err error ->
                    ( { model | error = Just "Failed to load contact details. Please try again." }
                    , saveDebugInfo <| "ContactDetails error: " ++ httpErrorToString error
                    )


isFormValid : Model -> Bool
isFormValid model =
    let
        isValidDate str =
            case String.split "-" str of
                [ year, month, day ] ->
                    String.length year
                        == 4
                        && String.length month
                        == 2
                        && String.length day
                        == 2
                        && String.all Char.isDigit year
                        && String.all Char.isDigit month
                        && String.all Char.isDigit day

                _ ->
                    False
    in
    -- Contact info (required)
    not (String.isEmpty model.email)
        && not (String.isEmpty model.firstName)
        && not (String.isEmpty model.lastName)
        && String.length model.phoneNumber
        == 10
        && model.orgId
        /= Nothing
        -- Quote info (required)
        && String.length model.zipCode
        == 5
        && not (String.isEmpty model.dateOfBirth)
        && isValidDate model.dateOfBirth
        && not (String.isEmpty model.gender)
        -- Tobacco status is now explicitly required
        && (model.tobacco == True || model.tobacco == False)
        -- Carrier selection is required
        && model.carrier
        /= Nothing
        -- Must agree to receive updates
        && model.optInQuarterlyUpdates
        == True


httpErrorToString : Http.Error -> String
httpErrorToString error =
    case error of
        Http.BadUrl url ->
            "Bad URL: " ++ url

        Http.Timeout ->
            "Request timed out"

        Http.NetworkError ->
            "Network error"

        Http.BadStatus statusCode ->
            "Bad status: " ++ String.fromInt statusCode

        Http.BadBody message ->
            "Data error: " ++ message


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    if String.isEmpty phone then
        ""

    else
        let
            digits =
                String.filter Char.isDigit phone
                    |> String.left 10

            len =
                String.length digits
        in
        if len == 0 then
            ""

        else if len <= 3 then
            "(" ++ digits

        else if len <= 6 then
            "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

        else
            "(" ++ String.left 3 digits ++ ") " ++ String.slice 3 6 digits ++ "-" ++ String.dropLeft 6 digits



-- FORM SUBMISSION


submitForm : Model -> Cmd Msg
submitForm model =
    Http.post
        { url = "/api/self-service/signup"
        , body = Http.jsonBody (encodeForm model)
        , expect = Http.expectJson GotSignupResponse signupResponseDecoder
        }


generateQuote : Maybe String -> Int -> String -> Cmd Msg
generateQuote maybeOrgId contactId email =
    case maybeOrgId of
        Just orgId ->
            Http.post
                { url = "/api/self-service/generate-quote"
                , body =
                    Http.jsonBody
                        (Encode.object
                            [ ( "orgId", Encode.string orgId )
                            , ( "contactEmail", Encode.string email )
                            ]
                        )
                , expect = Http.expectJson GotQuoteResponse quoteResponseDecoder
                }

        Nothing ->
            Cmd.none


encodeForm : Model -> Encode.Value
encodeForm model =
    let
        ls0 =
            [ ( "orgId", Encode.string (Maybe.withDefault "" model.orgId) )
            , ( "email", Encode.string model.email )
            , ( "firstName", Encode.string model.firstName )
            , ( "lastName", Encode.string model.lastName )
            , ( "zipCode", Encode.string model.zipCode )
            , ( "dateOfBirth", Encode.string model.dateOfBirth )
            , ( "gender", Encode.string model.gender )
            , ( "tobacco", Encode.bool model.tobacco )
            , ( "phoneNumber", Encode.string model.phoneNumber )
            , ( "currentPremium", Encode.string model.currentPremium )
            , ( "currentCarrier", Encode.string model.currentCarrier )
            , ( "planType", Encode.string model.planType )
            , ( "state", Encode.string (Maybe.withDefault "" model.state) )
            , ( "county", Encode.string (Maybe.withDefault "" model.selectedCounty) )
            , ( "optInQuarterlyUpdates", Encode.bool model.optInQuarterlyUpdates )
            , ( "carrierChoice"
              , case model.carrier of
                    Just (HasCarrier carrier) ->
                        Encode.string (carrierToString carrier)

                    Just NoneOther ->
                        Encode.string "None/Other"

                    Nothing ->
                        Encode.null
              )
            ]

        ls1 =
            case model.agentId of
                Just agentId ->
                    [ ( "agentId", Encode.string agentId ) ]

                Nothing ->
                    []
    in
    Encode.object (ls0 ++ ls1)



-- DECODERS


initResponseDecoder : Decoder InitResponse
initResponseDecoder =
    Decode.map3 InitResponse
        (Decode.maybe (Decode.field "contact" contactDecoder))
        (Decode.maybe (Decode.field "email" Decode.string))
        (Decode.field "emailReadOnly" Decode.bool)


contactDecoder : Decoder Contact
contactDecoder =
    let
        phoneDecoder =
            Decode.oneOf
                [ Decode.field "phone" (Decode.oneOf [ Decode.string, Decode.null "" ])
                , Decode.field "phoneNumber" (Decode.oneOf [ Decode.string, Decode.null "" ])
                , Decode.succeed ""
                ]
    in
    Decode.succeed Contact
        |> Pipeline.required "firstName" (Decode.oneOf [ Decode.string, Decode.null "" ])
        |> Pipeline.required "lastName" (Decode.oneOf [ Decode.string, Decode.null "" ])
        |> Pipeline.required "email" Decode.string
        |> Pipeline.custom phoneDecoder
        |> Pipeline.optional "dateOfBirth" Decode.string ""
        |> Pipeline.optional "gender" Decode.string "M"
        |> Pipeline.optional "tobacco" Decode.bool False
        |> Pipeline.optional "state" Decode.string ""
        |> Pipeline.optional "zipCode" Decode.string ""
        |> Pipeline.optional "currentCarrier" (Decode.nullable Decode.string) Nothing
        |> Pipeline.optional "planType" (Decode.nullable Decode.string) Nothing
        |> Pipeline.optional "optInQuarterlyUpdates" Decode.bool True


orgDetailsDecoder : Decoder OrgDetails
orgDetailsDecoder =
    Decode.map5 OrgDetails
        (Decode.field "orgId" Decode.string)
        (Decode.field "orgSlug" Decode.string)
        (Decode.maybe (Decode.field "contact" contactDecoder))
        (Decode.maybe (Decode.field "logo" Decode.string))
        (Decode.maybe (Decode.field "orgName" Decode.string))


signupResponseDecoder : Decoder SignupResponse
signupResponseDecoder =
    Decode.map3 SignupResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "contactId" Decode.int)
        (Decode.field "email" Decode.string)


quoteResponseDecoder : Decoder QuoteResponse
quoteResponseDecoder =
    Decode.map5 QuoteResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "contactId" Decode.int)
        (Decode.field "quoteId" Decode.string)
        (Decode.field "redirectUrl" Decode.string)
        (Decode.maybe (Decode.field "error" Decode.string))


contactResponseDecoder : Decoder ContactResponse
contactResponseDecoder =
    Decode.map4 ContactResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "orgSlug" Decode.string)
        (Decode.field "carrierContracts" (Decode.list carrierDecoder))
        (Decode.field "contact" contactDecoder)


fetchContactData : String -> Cmd Msg
fetchContactData quoteId =
    Http.get
        { url = "/api/quotes/decode/" ++ quoteId
        , expect = Http.expectJson GotContactData contactResponseDecoder
        }



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Get Your Medicare Supplement Quote"
    , body =
        [ viewForm model
        ]
    }


viewForm : Model -> Html Msg
viewForm model =
    div [ class "max-w-4xl mx-auto bg-white rounded-xl shadow-md p-4 sm:p-8" ]
        [ if model.isSubmitting || model.isGeneratingQuote then
            div [ class "fixed inset-0 bg-white flex flex-col items-center justify-center gap-4 text-center" ]
                [ div [ class "animate-spin rounded-full h-12 w-12 border-4 border-[#03045E] border-t-transparent" ] []
                , p [ class "text-center text-lg font-medium text-gray-600" ]
                    [ text
                        (if model.isSubmitting then
                            "Submitting your information..."

                         else
                            "Generating your quote..."
                        )
                    ]
                ]

          else if model.orgId == Nothing && model.error == Nothing then
            div [ class "fixed inset-0 bg-white flex flex-col items-center justify-center gap-4 text-center" ]
                [ div [ class "animate-spin rounded-full h-12 w-12 border-4 border-[#03045E] border-t-transparent" ] []
                , p [ class "text-center text-lg font-medium text-gray-600" ]
                    [ text "Loading organization details..." ]
                ]

          else
            viewFormStep model
        ]


viewFormStep : Model -> Html Msg
viewFormStep model =
    div []
        [ viewHeader model.logo model.orgName

        {--
        , div [ class "text-center mb-6 px-4 sm:px-6" ]
            [ div [ class "max-w-2xl mx-auto" ]
                [ p [ class "text-[#475467] text-base sm:text-lg italic mb-2" ]
                    [ text "This is the exact form that your clients will go through if we need more info. It can also be used for new lead generation. This form will be white labeled with your branding, logo, and colors to match your agency's style." ]
                ]
            ]
        --}
        , div [ class "text-center mb-6 px-2 sm:px-0" ]
            [ h1 [ class "text-2xl sm:text-3xl font-bold text-[#101828]" ] [ text "Let's Get Some Details" ]
            , p [ class "text-[#475467] mt-2 text-sm sm:text-base" ] [ text "We use this information to get you the most accurate quote for your area." ]
            ]
        , viewCombinedForm model
        , viewError model.error
        , div [ class "flex justify-center mt-8" ]
            [ button
                [ type_ "button"
                , class
                    ("w-48 flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white "
                        ++ (if isFormValid model && not model.isSubmitting then
                                "bg-[#03045E] hover:bg-[#02034e] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#3DBDEC]"

                            else
                                "bg-[#03045E] opacity-50 cursor-not-allowed"
                           )
                    )
                , onClick SubmitForm
                , disabled (model.isSubmitting || not (isFormValid model))
                ]
                [ text
                    (if model.isSubmitting then
                        "Submitting..."

                     else
                        "Submit"
                    )
                ]
            ]
        ]


viewCombinedForm : Model -> Html Msg
viewCombinedForm model =
    div [ class "px-2 sm:px-0 space-y-6 sm:space-y-6" ]
        [ div [ class "grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-4" ]
            [ inputField "First Name" "text" model.firstName UpdateFirstName False
            , inputField "Last Name" "text" model.lastName UpdateLastName False
            , inputField "Cell Number *" "tel" (formatPhoneNumber model.phoneNumber) UpdatePhoneNumber False
            , div [ class "mb-0" ]
                [ div [ class "flex items-center" ]
                    [ label [ class "block text-sm font-medium text-[#344054] mb-1" ] [ text "Email Address" ]
                    , span [ class "ml-2 text-xs text-gray-500" ] [ text "(use a unique email for each person)" ]
                    ]
                , input
                    [ type_ "email"
                    , class "w-full px-3 py-2 border border-[#D0D5DD] rounded-md shadow-sm focus:outline-none focus:ring-[#3DBDEC] focus:border-[#3DBDEC]"
                    , placeholder "example@example.com"
                    , Html.Attributes.value model.email
                    , onInput UpdateEmail
                    , disabled model.emailReadOnly
                    , required True
                    ]
                    []
                ]
            ]
        , div [ class "grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-4" ]
            [ inputField "Date of Birth" "date" model.dateOfBirth UpdateDateOfBirth False
            , div [ class "mb-0" ]
                [ label [ class "block text-sm font-medium text-[#344054] mb-1" ] [ text "Zip Code" ]
                , input
                    [ type_ "text"
                    , class "w-full px-3 py-2 border border-[#D0D5DD] rounded-md shadow-sm focus:outline-none focus:ring-[#3DBDEC] focus:border-[#3DBDEC]"
                    , Html.Attributes.value model.zipCode
                    , onInput UpdateZipCode
                    , required True
                    ]
                    []
                , if model.isLoadingZipData then
                    div [ class "mt-1 text-sm text-gray-500" ] [ text "Loading location data..." ]

                  else if model.zipError /= Nothing then
                    div [ class "mt-1 text-sm text-red-600" ] [ text (model.zipError |> Maybe.withDefault "Invalid zip code") ]

                  else if model.state /= Nothing then
                    div [ class "mt-1 text-sm text-green-600" ]
                        [ text ("State: " ++ (model.state |> Maybe.withDefault "")) ]

                  else
                    text ""
                ]
            ]
        , if List.length model.counties > 1 then
            div [ class "mb-4" ]
                [ viewCountyDropdown model.counties model.selectedCounty ]

          else
            text ""
        , div [ class "grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-4" ]
            [ div [ class "col-span-1" ]
                [ label [ class "block text-sm font-medium text-gray-700 mb-2" ] [ text "Gender" ]
                , div [ class "grid grid-cols-2 gap-2" ]
                    [ label
                        [ class
                            ("flex items-center justify-center px-3 sm:px-4 py-2 rounded-lg border-2 cursor-pointer transition-all text-sm sm:text-base "
                                ++ (if model.gender == "M" then
                                        "border-[#03045E] bg-[#F9F5FF] text-[#03045E]"

                                    else
                                        "border-[#D0D5DD] hover:border-[#3DBDEC] text-[#344054]"
                                   )
                            )
                        ]
                        [ input
                            [ type_ "radio"
                            , value "M"
                            , checked (model.gender == "M")
                            , onInput UpdateGender
                            , class "sr-only"
                            ]
                            []
                        , text "Male"
                        ]
                    , label
                        [ class
                            ("flex items-center justify-center px-3 sm:px-4 py-2 rounded-lg border-2 cursor-pointer transition-all text-sm sm:text-base "
                                ++ (if model.gender == "F" then
                                        "border-[#03045E] bg-[#F9F5FF] text-[#03045E]"

                                    else
                                        "border-[#D0D5DD] hover:border-[#3DBDEC] text-[#344054]"
                                   )
                            )
                        ]
                        [ input
                            [ type_ "radio"
                            , value "F"
                            , checked (model.gender == "F")
                            , onInput UpdateGender
                            , class "sr-only"
                            ]
                            []
                        , text "Female"
                        ]
                    ]
                ]
            , div [ class "col-span-1" ]
                [ label [ class "block text-sm font-medium text-gray-700 mb-2" ] [ text "Do you use tobacco products?" ]
                , div [ class "grid grid-cols-2 gap-2" ]
                    [ label
                        [ class
                            ("flex items-center justify-center px-3 sm:px-4 py-2 rounded-lg border-2 cursor-pointer transition-all text-sm sm:text-base "
                                ++ (if model.tobacco then
                                        "border-[#03045E] bg-[#F9F5FF] text-[#03045E]"

                                    else
                                        "border-[#D0D5DD] hover:border-[#3DBDEC] text-[#344054]"
                                   )
                            )
                        ]
                        [ input
                            [ type_ "radio"
                            , value "true"
                            , checked model.tobacco
                            , onInput UpdateTobacco
                            , class "sr-only"
                            ]
                            []
                        , text "Yes"
                        ]
                    , label
                        [ class
                            ("flex items-center justify-center px-3 sm:px-4 py-2 rounded-lg border-2 cursor-pointer transition-all text-sm sm:text-base "
                                ++ (if not model.tobacco then
                                        "border-[#03045E] bg-[#F9F5FF] text-[#03045E]"

                                    else
                                        "border-[#D0D5DD] hover:border-[#3DBDEC] text-[#344054]"
                                   )
                            )
                        ]
                        [ input
                            [ type_ "radio"
                            , value "false"
                            , checked (not model.tobacco)
                            , onInput UpdateTobacco
                            , class "sr-only"
                            ]
                            []
                        , text "No"
                        ]
                    ]
                ]
            ]
        , div [ class "grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-4" ]
            [ div [ class "col-span-1" ]
                [ label [ class "block text-sm font-medium text-[#344054] mb-1" ] [ text "Carrier" ]
                , select
                    [ class "w-full px-3 py-2 border border-[#D0D5DD] rounded-md shadow-sm focus:outline-none focus:ring-[#3DBDEC] focus:border-[#3DBDEC]"
                    , onInput UpdateCarrierChoice
                    , required True
                    ]
                    ([ option
                        [ value "", disabled True, selected (model.carrier == Nothing) ]
                        [ text "Select a carrier" ]
                     , option
                        [ value "none", selected (model.carrier == Just NoneOther) ]
                        [ text "None/Other" ]
                     ]
                        ++ List.map
                            (\carrier ->
                                option
                                    [ value (carrierToString carrier)
                                    , selected (model.carrier == Just (HasCarrier carrier))
                                    ]
                                    [ text (carrierToString carrier) ]
                            )
                            (List.sortBy carrierToString allCarriers)
                    )
                ]
            , div [ class "col-span-1" ] [] -- Empty div to maintain grid layout
            ]

        {--
        , h3 [ class "font-medium text-base sm:text-lg mb-4 text-gray-700" ] [ text "Current Coverage" ]
        , div [ class "grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-4" ]
            [ div [ class "col-span-1" ]
                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ] [ text "Current Carrier (optional)" ]
                , select
                    [ class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-sky-500 focus:border-sky-500"
                    , onInput UpdateCurrentCarrier
                    ]
                    ([ option [ value "" ] [ text "Select Current Carrier" ] ]
                        ++ List.map
                            (\carrier ->
                                option
                                    [ value (carrierToString carrier)
                                    , selected (model.currentCarrier == carrierToString carrier)
                                    ]
                                    [ text (carrierToString carrier) ]
                            )
                            (List.sortBy carrierToString allCarriers)
                        ++ [ option
                                [ value "Other"
                                , selected (model.currentCarrier == "Other")
                                ]
                                [ text "Other" ]
                           ]
                    )
                ]
            , div [ class "col-span-1" ]
                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ] [ text "Current Monthly Premium (optional)" ]
                , div [ class "relative" ]
                    [ div [ class "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none" ]
                        [ span [ class "text-gray-500" ] [ text "$" ] ]
                    , input
                        [ type_ "text"
                        , class "w-full pl-7 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-sky-500 focus:border-sky-500"
                        , Html.Attributes.value model.currentPremium
                        , onInput UpdateCurrentPremium
                        , Html.Attributes.pattern "[0-9]*"
                        , Html.Attributes.attribute "inputmode" "numeric"
                        , placeholder "0.00"
                        ]
                        []
                    ]
                ]
            ]
        , div [ class "grid grid-cols-1 sm:grid-cols-1 gap-4 sm:gap-4" ]
            [ div [ class "col-span-1" ]
                [ label [ class "block text-sm font-medium text-gray-700 mb-1" ] [ text "Plan Type (optional)" ]
                , select
                    [ class "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-sky-500 focus:border-sky-500"
                    , onInput UpdatePlanType
                    ]
                    [ option [ value "" ] [ text "Select Plan Type" ]
                    , option [ value "G", selected (model.planType == "G") ] [ text "Plan G" ]
                    , option [ value "N", selected (model.planType == "N") ] [ text "Plan N" ]
                    , option [ value "Other", selected (model.planType == "Other") ] [ text "Other" ]
                    ]
                ]
            ]
        , div [ class "mt-6 text-center" ]
            [ p [ class "text-sm text-[#475467]" ]
                [ text "By clicking below, you agree to receive Medicare Supplement plan updates that can help you save money." ]
            ]
        --}
        ]


inputField : String -> String -> String -> (String -> Msg) -> Bool -> Html Msg
inputField labelText inputType inputValue msg isDisabled =
    div [ class "mb-0" ]
        [ label [ class "block text-sm font-medium text-[#344054] mb-1" ] [ text labelText ]
        , input
            [ type_ inputType
            , class "w-full px-3 py-2 border border-[#D0D5DD] rounded-md shadow-sm focus:outline-none focus:ring-[#3DBDEC] focus:border-[#3DBDEC]"
            , placeholder
                (case inputType of
                    "tel" ->
                        "XXX-XXX-XXXX"

                    "email" ->
                        "example@example.com"

                    _ ->
                        ""
                )
            , Html.Attributes.value inputValue
            , onInput msg
            , disabled isDisabled
            , required True
            ]
            []
        ]


viewCountyDropdown : List String -> Maybe String -> Html Msg
viewCountyDropdown counties selectedCounty =
    div [ class "mb-4" ]
        [ label [ class "block text-sm font-medium text-[#344054] mb-1" ]
            [ text "County" ]
        , select
            [ class "w-full px-3 py-2 border border-[#D0D5DD] rounded-md shadow-sm focus:outline-none focus:ring-[#3DBDEC] focus:border-[#3DBDEC]"
            , onInput UpdateSelectedCounty
            , required True
            ]
            (option [ value "", disabled True, selected (selectedCounty == Nothing) ]
                [ text "Select your county" ]
                :: List.map
                    (\county ->
                        option
                            [ value county
                            , selected (selectedCounty == Just county)
                            ]
                            [ text county ]
                    )
                    counties
            )
        ]


viewError : Maybe String -> Html msg
viewError maybeError =
    case maybeError of
        Just error ->
            div [ class "mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded" ]
                [ text error ]

        Nothing ->
            text ""


viewFormSummary : Model -> Html Msg
viewFormSummary model =
    div [ class "border rounded-md p-3 sm:p-4 mb-4" ]
        [ h3 [ class "font-medium text-base sm:text-lg mb-3" ] [ text "Review Your Information" ]
        , summaryItem "Email" model.email
        , summaryItem "Name" (model.firstName ++ " " ++ model.lastName)
        , summaryItem "Phone" (formatPhoneNumber model.phoneNumber)
        , summaryItem "Zip Code" model.zipCode
        , summaryItem "State"
            (model.state
                |> Maybe.withDefault "Unknown"
            )
        , summaryItem "County"
            (model.selectedCounty
                |> Maybe.withDefault "Unknown"
            )
        , summaryItem "Date of Birth" model.dateOfBirth
        , summaryItem "Gender"
            (if model.gender == "M" then
                "Male"

             else
                "Female"
            )
        , summaryItem "Tobacco User"
            (if model.tobacco then
                "Yes"

             else
                "No"
            )
        , summaryItem "Carrier"
            (case model.carrier of
                Just (HasCarrier carrier) ->
                    carrierToString carrier

                Just NoneOther ->
                    "None/Other"

                Nothing ->
                    "Not selected"
            )
        , if not (String.isEmpty model.currentPremium) then
            summaryItem "Current Premium" ("$" ++ model.currentPremium)

          else
            text ""
        , if not (String.isEmpty model.currentCarrier) then
            summaryItem "Current Carrier" model.currentCarrier

          else
            text ""
        , if not (String.isEmpty model.planType) then
            summaryItem "Plan Type"
                (case model.planType of
                    "G" ->
                        "Plan G"

                    "N" ->
                        "Plan N"

                    "Other" ->
                        "Other"

                    _ ->
                        model.planType
                )

          else
            text ""
        , summaryItem "Agree to Receive Updates"
            (if model.optInQuarterlyUpdates then
                "Yes"

             else
                "No"
            )
        ]


summaryItem : String -> String -> Html Msg
summaryItem label value =
    div [ class "flex justify-between py-1 border-b last:border-b-0 text-sm sm:text-base" ]
        [ span [ class "text-gray-600" ] [ text label ]
        , span [ class "font-medium" ] [ text value ]
        ]



-- MAIN


main : Program () Model Msg
main =
    Browser.application
        { init = \_ url key -> init key url
        , view = view
        , update = update
        , subscriptions = \_ -> Sub.none
        , onUrlChange = \_ -> GotInitResponse (Err (Http.BadUrl "URL changed"))
        , onUrlRequest = \_ -> GotInitResponse (Err (Http.BadUrl "URL requested"))
        }

================
File: frontend/src/Settings.elm
================
module Settings exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Components.ProgressIndicator
import Components.SetupLayout as SetupLayout
import File exposing (File)
import File.Select as Select
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onCheck, onClick, onInput, preventDefaultOn)
import Http exposing (expectJson, jsonBody)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Ports
import StateRegions exposing (Region(..), getRegionStates, regionToString)
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, viewBox)
import Task



-- Constants


allCarriers : List String
allCarriers =
    [ "Aetna"
    , "Humana"
    , "UnitedHealthcare"
    , "Cigna"
    , "Aflac"
    , "Allstate"
    , "Mutual of Omaha"
    , "Ace Chubb"
    ]


type Carrier
    = Aetna
    | Humana
    | UnitedHealthcare
    | Cigna
    | Aflac
    | Allstate
    | MutualOfOmaha
    | AceChubb



-- Add new type for GI selection mode


type GISelectionMode
    = GIAll
    | GINone
    | GIRecommended


type alias InitFlags =
    { isSetup : Bool
    , key : Nav.Key
    , currentUser : Maybe CurrentUser
    , planType : String
    }


type alias CurrentUser =
    { id : String
    , email : String
    , isAdmin : Bool
    , isAgent : Bool
    , organizationSlug : String
    , organizationId : String
    }



-- Add new type for deactivated carrier-state pairs


type alias DeactivatedPair =
    { carrier : String
    }


type alias Model =
    { orgSettings : Maybe Settings
    , status : Status
    , expandedSections : List String
    , recommendedGICombos : List StateCarrierSetting
    , isSetup : Bool
    , key : Nav.Key
    , currentUser : Maybe CurrentUser
    , isLoading : Bool
    , isSaving : Bool
    , planType : String
    , error : Maybe String
    , selectedCarrier : Maybe String
    , loadedCarriers : List String
    , linkCopied : Bool
    , selfOnboardingUrl : Maybe String
    , logo : Maybe String
    , hover : Bool
    , uploadingLogo : Bool
    }


type alias StateCarrierSetting =
    { carrier : String
    , active : Bool
    , targetGI : Bool
    }


type alias Settings =
    { carrierContracts : List String
    , stateCarrierSettings : List StateCarrierSetting
    , allowAgentSettings : Bool
    , emailSendBirthday : Bool
    , emailSendPolicyAnniversary : Bool
    , emailSendAep : Bool
    , smartSendEnabled : Bool
    , brandName : String
    , primaryColor : String
    , secondaryColor : String
    , logo : Maybe String
    , orgSignature : Bool
    , phone : String
    , redirectUrl : String
    , signature : String
    }


type Status
    = Loading
    | Loaded
    | Saving
    | Error String


type Msg
    = GotSettings (Result Http.Error SettingsResponse)
    | SaveSettings
    | SettingsSaved (Result Http.Error Settings)
    | ToggleEmailBirthday Bool
    | ToggleEmailAnniversary Bool
    | ToggleEmailAep Bool
    | ToggleSmartSend Bool
    | ToggleOrgSignature Bool
    | AddCarrierContract String
    | RemoveCarrierContract String
    | UpdateStateCarrierSetting String Bool Bool
    | ToggleSection String
    | ToggleAllCarriers Bool
    | ApplyGISelection GISelectionMode
    | GotRecommendedGICombos (Result Http.Error (List StateCarrierSetting))
    | ToggleAllowAgentSettings Bool
    | FinishSetup
    | UpdateBrandName String
    | UpdatePrimaryColor String
    | UpdateSecondaryColor String
    | UpdatePhone String
    | UpdateRedirectUrl String
    | UpdateSignature String
    | UploadLogo
    | GotLogo File
    | GotLogoUrl String
    | LogoUploaded (Result Http.Error String)
    | NoOp
    | OrgFinalized (Result Http.Error ())
    | SelectCarrier String
    | GotCarriers (Result Http.Error (List String))
    | CopySelfOnboardingLink
    | LinkCopied Bool
    | GotSelfOnboardingUrl (Result Http.Error SelfOnboardingUrlResponse)
    | DragEnter
    | DragLeave
    | GotFiles File (List File)


type alias SettingsResponse =
    { orgSettings : Settings
    , logo : Maybe String
    , canEditOrgSettings : Bool
    }


type alias SelfOnboardingUrlResponse =
    { selfOnboardingUrl : String
    }


init : InitFlags -> ( Model, Cmd Msg )
init flags =
    ( { orgSettings = Nothing
      , status = Loading
      , expandedSections = []
      , recommendedGICombos = []
      , isSetup = flags.isSetup
      , key = flags.key
      , currentUser = flags.currentUser
      , isLoading = True
      , isSaving = False
      , planType = flags.planType
      , error = Nothing
      , selectedCarrier = Nothing
      , loadedCarriers = []
      , linkCopied = False
      , selfOnboardingUrl = Nothing
      , logo = Nothing
      , hover = False
      , uploadingLogo = False
      }
    , Cmd.batch
        [ fetchSettings
        , fetchRecommendedGICombos
        , fetchCarriers
        , fetchSelfOnboardingUrl
        ]
    )


fetchSettings : Cmd Msg
fetchSettings =
    Http.get
        { url = "/api/settings"
        , expect = Http.expectJson GotSettings settingsDecoder
        }


fetchRecommendedGICombos : Cmd Msg
fetchRecommendedGICombos =
    Http.get
        { url = "/api/settings/gi-recommendations"
        , expect = Http.expectJson GotRecommendedGICombos recommendationsDecoder
        }


fetchCarriers : Cmd Msg
fetchCarriers =
    Http.get
        { url = "/api/settings/carriers"
        , expect = Http.expectJson GotCarriers (Decode.list (Decode.field "name" Decode.string))
        }


fetchSelfOnboardingUrl : Cmd Msg
fetchSelfOnboardingUrl =
    let
        slug =
            -- This is a placeholder, we'll get the actual slug in the backend
            "latest"
    in
    Http.get
        { url = "/api/self-service/" ++ slug
        , expect = Http.expectJson GotSelfOnboardingUrl selfOnboardingUrlDecoder
        }


selfOnboardingUrlDecoder : Decoder SelfOnboardingUrlResponse
selfOnboardingUrlDecoder =
    Decode.map SelfOnboardingUrlResponse
        (Decode.field "selfOnboardingUrl" Decode.string)


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )

        GotSettings result ->
            case result of
                Ok response ->
                    ( { model
                        | orgSettings = Just response.orgSettings
                        , logo = response.logo
                        , status = Loaded
                        , isLoading = False
                      }
                    , Cmd.none
                    )

                Err error ->
                    let
                        errorMsg =
                            case error of
                                Http.BadUrl url ->
                                    "Bad URL: " ++ url

                                Http.Timeout ->
                                    "Request timed out"

                                Http.NetworkError ->
                                    "Network error"

                                Http.BadStatus status ->
                                    "Bad status: " ++ String.fromInt status

                                Http.BadBody message ->
                                    "Bad body: " ++ message
                    in
                    ( { model | status = Error errorMsg, isLoading = False }
                    , Cmd.none
                    )

        GotCarriers result ->
            case result of
                Ok carriers ->
                    ( { model | loadedCarriers = carriers }
                    , Cmd.none
                    )

                Err _ ->
                    ( model, Cmd.none )

        SaveSettings ->
            ( { model | status = Saving }
            , Cmd.none
            )

        SettingsSaved result ->
            case result of
                Ok settings ->
                    ( { model | orgSettings = Just settings, status = Loaded }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model | status = Error "Failed to save settings" }
                    , Cmd.none
                    )

        ToggleEmailBirthday value ->
            updateSettings model (\s -> { s | emailSendBirthday = value })

        ToggleEmailAnniversary value ->
            updateSettings model (\s -> { s | emailSendPolicyAnniversary = value })

        ToggleEmailAep value ->
            updateSettings model (\s -> { s | emailSendAep = value })

        ToggleSmartSend value ->
            updateSettings model (\s -> { s | smartSendEnabled = value })

        ToggleOrgSignature value ->
            updateSettings model (\s -> { s | orgSignature = value })

        AddCarrierContract carrier ->
            updateSettings model
                (\s ->
                    if List.member carrier s.carrierContracts then
                        s

                    else
                        { s
                            | carrierContracts = carrier :: s.carrierContracts
                            , stateCarrierSettings = List.map (\setting -> { setting | active = True }) s.stateCarrierSettings
                        }
                )

        RemoveCarrierContract carrier ->
            updateSettings model
                (\s ->
                    { s
                        | carrierContracts = List.filter (\x -> x /= carrier) s.carrierContracts
                        , stateCarrierSettings = List.filter (\setting -> setting.carrier /= carrier) s.stateCarrierSettings
                    }
                )

        UpdateStateCarrierSetting carrier active targetGI ->
            updateSettings model
                (\s ->
                    let
                        existingSetting =
                            List.filter
                                (\setting ->
                                    setting.carrier == carrier
                                )
                                s.stateCarrierSettings
                                |> List.head

                        newSettings =
                            case existingSetting of
                                Just _ ->
                                    List.map
                                        (\setting ->
                                            if setting.carrier == carrier then
                                                { setting | active = active, targetGI = targetGI }

                                            else
                                                setting
                                        )
                                        s.stateCarrierSettings

                                Nothing ->
                                    { carrier = carrier
                                    , active = active
                                    , targetGI = targetGI
                                    }
                                        :: s.stateCarrierSettings
                    in
                    { s | stateCarrierSettings = newSettings }
                )

        ToggleSection title ->
            ( { model
                | expandedSections =
                    if List.member title model.expandedSections then
                        List.filter ((/=) title) model.expandedSections

                    else
                        title :: model.expandedSections
              }
            , Cmd.none
            )

        ToggleAllCarriers checked ->
            case model.orgSettings of
                Just settings ->
                    let
                        carriersToUse =
                            if List.isEmpty model.loadedCarriers then
                                allCarriers

                            else
                                model.loadedCarriers

                        newSettings =
                            { settings
                                | carrierContracts =
                                    if checked then
                                        carriersToUse

                                    else
                                        []
                                , stateCarrierSettings =
                                    if checked then
                                        List.map
                                            (\carrier ->
                                                { carrier = carrier
                                                , active = True
                                                , targetGI = False
                                                }
                                            )
                                            carriersToUse

                                    else
                                        []
                            }
                    in
                    ( { model | orgSettings = Just newSettings }
                    , saveSettings { settings = Just newSettings, logo = model.logo }
                    )

                Nothing ->
                    ( model, Cmd.none )

        ApplyGISelection mode ->
            case model.orgSettings of
                Just settings ->
                    let
                        newSettings =
                            case mode of
                                GIAll ->
                                    { settings
                                        | stateCarrierSettings =
                                            List.map
                                                (\carrier ->
                                                    { carrier = carrier
                                                    , active = True
                                                    , targetGI = True
                                                    }
                                                )
                                                settings.carrierContracts
                                    }

                                GINone ->
                                    { settings
                                        | stateCarrierSettings =
                                            List.map
                                                (\carrier ->
                                                    { carrier = carrier
                                                    , active = True
                                                    , targetGI = False
                                                    }
                                                )
                                                settings.carrierContracts
                                    }

                                GIRecommended ->
                                    { settings
                                        | stateCarrierSettings =
                                            List.map
                                                (\carrier ->
                                                    { carrier = carrier
                                                    , active = True
                                                    , targetGI =
                                                        List.any
                                                            (\rec -> rec.carrier == carrier)
                                                            model.recommendedGICombos
                                                    }
                                                )
                                                settings.carrierContracts
                                    }
                    in
                    ( { model | orgSettings = Just newSettings }
                    , saveSettings { settings = Just newSettings, logo = model.logo }
                    )

                Nothing ->
                    ( model, Cmd.none )

        GotRecommendedGICombos result ->
            case result of
                Ok combos ->
                    ( { model | recommendedGICombos = combos }
                    , Cmd.none
                    )

                Err error ->
                    ( { model | status = Error "Failed to load GI recommendations" }
                    , Cmd.none
                    )

        ToggleAllowAgentSettings value ->
            updateSettings model (\s -> { s | allowAgentSettings = value })

        FinishSetup ->
            case model.currentUser of
                Just user ->
                    if model.planType == "basic" then
                        ( { model | isLoading = True }
                        , finalizeOrganization user.organizationSlug
                        )

                    else
                        ( model
                        , Nav.pushUrl model.key "/dashboard"
                        )

                Nothing ->
                    ( model
                    , Nav.pushUrl model.key "/dashboard"
                    )

        OrgFinalized result ->
            case result of
                Ok _ ->
                    ( { model | isLoading = False }
                    , Nav.pushUrl model.key "/dashboard"
                    )

                Err error ->
                    let
                        errorMessage =
                            case error of
                                Http.BadStatus 500 ->
                                    "Failed to set up your organization's database. Please contact support at help@medicaremax.com and we'll help you get started."

                                Http.BadBody message ->
                                    message ++ "\nPlease contact support at help@medicaremax.com and we'll help you get started."

                                _ ->
                                    "An unexpected error occurred. Please contact support at help@medicaremax.com and we'll help you get started."
                    in
                    ( { model
                        | isLoading = False
                        , error = Just errorMessage
                      }
                    , Cmd.none
                    )

        SelectCarrier carrier ->
            ( { model | selectedCarrier = Just carrier }, Cmd.none )

        UpdateBrandName name ->
            updateSettings model (\s -> { s | brandName = name })

        UpdatePrimaryColor color ->
            updateSettings model (\s -> { s | primaryColor = color })

        UpdateSecondaryColor color ->
            updateSettings model (\s -> { s | secondaryColor = color })

        UpdatePhone phone ->
            updateSettings model (\s -> { s | phone = phone })

        UpdateRedirectUrl url ->
            updateSettings model (\s -> { s | redirectUrl = url })

        UpdateSignature signature ->
            updateSettings model (\s -> { s | signature = signature })

        UploadLogo ->
            ( model
            , Select.file [ "image/png", "image/jpeg" ] GotLogo
            )

        DragEnter ->
            ( { model | hover = True }, Cmd.none )

        DragLeave ->
            ( { model | hover = False }, Cmd.none )

        GotFiles file files ->
            ( { model | hover = False, uploadingLogo = True }, Task.perform GotLogoUrl (File.toUrl file) )

        GotLogo file ->
            ( { model | uploadingLogo = True }, Task.perform GotLogoUrl (File.toUrl file) )

        GotLogoUrl url ->
            case model.orgSettings of
                Just settings ->
                    ( { model | logo = Just url, uploadingLogo = False, orgSettings = Just { settings | logo = Just url } }
                    , saveSettings { settings = Just { settings | logo = Just url }, logo = Just url }
                    )

                Nothing ->
                    ( { model | logo = Just url, uploadingLogo = False }, Cmd.none )

        LogoUploaded result ->
            case result of
                Ok url ->
                    updateSettings model (\s -> { s | logo = Just url })

                Err _ ->
                    ( { model | status = Error "Failed to upload logo" }, Cmd.none )

        CopySelfOnboardingLink ->
            let
                slug =
                    model.currentUser
                        |> Maybe.map .organizationSlug
                        |> Maybe.withDefault ""

                url =
                    model.selfOnboardingUrl
                        |> Maybe.withDefault ("http://localhost:5173/self-onboarding/" ++ slug)

                -- Command to copy link to clipboard using ports
                copyCmd =
                    Ports.copyToClipboard url
            in
            ( { model | linkCopied = False }, copyCmd )

        LinkCopied success ->
            ( { model | linkCopied = success }, Cmd.none )

        GotSelfOnboardingUrl result ->
            case result of
                Ok response ->
                    ( { model | selfOnboardingUrl = Just response.selfOnboardingUrl }, Cmd.none )

                Err _ ->
                    ( model, Cmd.none )


updateSettings : Model -> (Settings -> Settings) -> ( Model, Cmd Msg )
updateSettings model updateFn =
    case model.orgSettings of
        Just settings ->
            let
                newSettings =
                    updateFn settings
            in
            ( { model | orgSettings = Just newSettings }
            , saveSettings { settings = Just newSettings, logo = model.logo }
            )

        Nothing ->
            ( model, Cmd.none )


saveSettings : { settings : Maybe Settings, logo : Maybe String } -> Cmd Msg
saveSettings { settings, logo } =
    Http.request
        { method = "PUT"
        , headers = []
        , url = "/api/settings/org"
        , body = jsonBody (Encode.object [ ( "settings", Maybe.withDefault Encode.null (Maybe.map encodeSettings settings) ), ( "logo", Maybe.withDefault Encode.null (Maybe.map Encode.string logo) ) ])
        , expect = expectJson SettingsSaved settingsObjectDecoder
        , timeout = Nothing
        , tracker = Nothing
        }


encodeSettings : Settings -> Encode.Value
encodeSettings settings =
    Encode.object
        [ ( "carrierContracts", Encode.list Encode.string settings.carrierContracts )
        , ( "stateCarrierSettings", Encode.list stateCarrierSettingEncoder settings.stateCarrierSettings )
        , ( "allowAgentSettings", Encode.bool settings.allowAgentSettings )
        , ( "emailSendBirthday", Encode.bool settings.emailSendBirthday )
        , ( "emailSendPolicyAnniversary", Encode.bool settings.emailSendPolicyAnniversary )
        , ( "emailSendAep", Encode.bool settings.emailSendAep )
        , ( "smartSendEnabled", Encode.bool settings.smartSendEnabled )
        , ( "name", Encode.string settings.brandName )
        , ( "primaryColor", Encode.string settings.primaryColor )
        , ( "secondaryColor", Encode.string settings.secondaryColor )
        , ( "logo", Maybe.withDefault Encode.null (Maybe.map Encode.string settings.logo) )
        , ( "orgSignature", Encode.bool settings.orgSignature )
        , ( "phone", Encode.string settings.phone )
        , ( "redirectUrl", Encode.string settings.redirectUrl )
        , ( "signature", Encode.string settings.signature )
        ]


stateCarrierSettingEncoder : StateCarrierSetting -> Encode.Value
stateCarrierSettingEncoder setting =
    Encode.object
        [ ( "carrier", Encode.string setting.carrier )
        , ( "active", Encode.bool setting.active )
        , ( "targetGI", Encode.bool setting.targetGI )
        ]


view : Model -> Browser.Document Msg
view model =
    { title =
        if model.isSetup then
            "Organization Setup - Settings"

        else
            "Settings"
    , body =
        [ if model.isSetup then
            SetupLayout.view SetupLayout.OrganizationSetup
                (model.planType == "basic")
                5
                [ if model.isLoading then
                    viewLoading

                  else
                    viewSettings model
                ]

          else
            div [ class "min-h-screen bg-gray-50" ]
                [ viewHeader
                , div [ class "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-8" ]
                    [ if model.isLoading then
                        viewLoading

                      else
                        viewSettings model
                    ]
                ]
        ]
    }


viewSetupHeader : Html Msg
viewSetupHeader =
    div [ class "mb-8" ]
        [ h1 [ class "text-3xl font-bold text-gray-900" ]
            [ text "Set Up Your Organization" ]
        , p [ class "mt-2 text-gray-600" ]
            [ text "Configure your organization's settings to get started" ]
        ]


viewNormalHeader : Html Msg
viewNormalHeader =
    h1 [ class "text-2xl font-semibold text-[#03045E] mb-6" ]
        [ text "Organization Settings" ]


viewBottomBar : Model -> Html Msg
viewBottomBar model =
    div
        [ class """sticky bottom-0 left-0 right-0 bg-white border-t border-gray-200 
                  px-4 py-4 sm:px-6 lg:px-8 flex justify-end items-center
                  mt-8 max-w-4xl mx-auto"""
        ]
        [ case model.error of
            Just errorMsg ->
                div [ class "text-red-600 text-sm max-w-xl" ]
                    [ text errorMsg ]

            Nothing ->
                text ""
        ]


viewSettings : Model -> Html Msg
viewSettings model =
    div [ class "space-y-8" ]
        [ case model.orgSettings of
            Just settings ->
                div [ class "space-y-6" ]
                    [ viewBrandSettings settings model
                    , viewSelfOnboardingLink model
                    , div [ class "bg-white shadow rounded-lg p-6" ]
                        [ h2 [ class "text-lg font-medium mb-4" ] [ text "Carrier Contracts" ]
                        , viewCarriersGrid settings model
                        ]

                    {--
                    , viewEmailSettings settings
                    , viewExpandableSection "State & Carrier Settings"
                        (viewStateCarrierGrid settings model)
                        model.expandedSections
                    --}
                    ]

            Nothing ->
                div [ class "text-gray-500 italic" ]
                    [ text "Loading settings..." ]

        --, viewBottomBar model
        ]


viewBrandSettings : Settings -> Model -> Html Msg
viewBrandSettings settings model =
    div [ class "bg-white shadow rounded-lg p-6" ]
        [ h2 [ class "text-lg font-medium mb-4" ] [ text "Agency Settings" ]
        , div [ class "space-y-6" ]
            [ div [ class "space-y-4" ]
                [ viewFormGroup "Agency Name"
                    (input
                        [ type_ "text"
                        , class "w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500"
                        , value settings.brandName
                        , onInput UpdateBrandName
                        ]
                        []
                    )
                , viewFormGroup "Organization Contact Info"
                    (div [ class "mt-2" ]
                        [ checkbox "Use organization info instead of agent info" settings.orgSignature ToggleOrgSignature
                        , p [ class "text-gray-500 text-sm mt-1 ml-7" ] [ text "When enabled, quote pages and schedule pages will show organization info instead of the specific agent's contact info" ]
                        ]
                    )
                , viewFormGroup "Phone Number"
                    (input
                        [ type_ "tel"
                        , class "w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500"
                        , classList [ ( "bg-gray-100", not settings.orgSignature ) ]
                        , value settings.phone
                        , onInput UpdatePhone
                        , disabled (not settings.orgSignature)
                        ]
                        []
                    )
                , viewFormGroup "Email Signature"
                    (textarea
                        [ class "w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500"
                        , classList [ ( "bg-gray-100", not settings.orgSignature ) ]
                        , value settings.signature
                        , onInput UpdateSignature
                        , disabled (not settings.orgSignature)
                        , rows 3
                        ]
                        []
                    )
                , viewFormGroup "Calendar Redirect URL"
                    (div []
                        [ input
                            [ type_ "text"
                            , class "w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500"
                            , classList [ ( "bg-gray-100", not settings.orgSignature ) ]
                            , value settings.redirectUrl
                            , onInput UpdateRedirectUrl
                            , disabled (not settings.orgSignature)
                            ]
                            []
                        , p [ class "text-gray-500 text-xs mt-1" ] [ text "Optional URL where users will be redirected to schedule appointments (e.g., your calendly link)" ]
                        ]
                    )
                , viewFormGroup "Logo"
                    (div []
                        [ if model.uploadingLogo then
                            div [ class "flex justify-center items-center h-32" ]
                                [ div [ class "animate-spin rounded-full h-8 w-8 border-2 border-purple-500 border-t-transparent" ] []
                                ]

                          else
                            div
                                [ class "border-2 border-dashed border-gray-300 rounded-lg p-6 flex flex-col items-center justify-center"
                                , classList [ ( "bg-purple-50 border-purple-300", model.hover ) ]
                                , hijackOn "dragenter" (Decode.succeed DragEnter)
                                , hijackOn "dragover" (Decode.succeed DragEnter)
                                , hijackOn "dragleave" (Decode.succeed DragLeave)
                                , hijackOn "drop" dropDecoder
                                ]
                                [ case model.logo of
                                    Just logoUrl ->
                                        div [ class "flex flex-col items-center space-y-4" ]
                                            [ img
                                                [ src logoUrl
                                                , class "h-24 w-auto object-contain"
                                                ]
                                                []
                                            , button
                                                [ class "px-4 py-2 text-sm text-purple-600 hover:text-purple-800 border border-purple-200 rounded"
                                                , onClick UploadLogo
                                                ]
                                                [ text "Change Logo" ]
                                            ]

                                    Nothing ->
                                        div [ class "flex flex-col items-center space-y-4 text-center" ]
                                            [ svg
                                                [ Svg.Attributes.class "h-10 w-10 text-gray-400"
                                                , viewBox "0 0 20 20"
                                                , fill "currentColor"
                                                ]
                                                [ path
                                                    [ fillRule "evenodd"
                                                    , d "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                                    , clipRule "evenodd"
                                                    ]
                                                    []
                                                ]
                                            , div []
                                                [ p [ class "text-gray-500" ] [ text "Drag and drop your logo here" ]
                                                , p [ class "text-gray-400 text-xs" ] [ text "or" ]
                                                , button
                                                    [ class "mt-2 px-4 py-2 text-sm text-purple-600 hover:text-purple-800 border border-purple-200 rounded"
                                                    , onClick UploadLogo
                                                    ]
                                                    [ text "Upload Logo" ]
                                                ]
                                            ]
                                ]
                        ]
                    )
                ]
            ]
        ]


viewFormGroup : String -> Html Msg -> Html Msg
viewFormGroup labelText content =
    div [ class "mb-4" ]
        [ label [ class "block text-sm font-medium text-gray-700 mb-2" ]
            [ text labelText ]
        , content
        ]


viewEmailSettings : Settings -> Html Msg
viewEmailSettings settings =
    div [ class "bg-white shadow rounded-lg p-6" ]
        [ h2 [ class "text-lg font-medium mb-4" ] [ text "Email Settings" ]
        , div [ class "space-y-4" ]
            [ checkbox "Enable smart send" settings.smartSendEnabled ToggleSmartSend
            ]
        ]


viewSelfOnboardingLink : Model -> Html Msg
viewSelfOnboardingLink model =
    div [ class "bg-white shadow rounded-lg p-6" ]
        [ h2 [ class "text-lg font-medium mb-4" ] [ text "Self Onboarding" ]
        , div [ class "space-y-4" ]
            [ p [ class "mb-4 text-gray-600" ]
                [ text "Share this link with clients to allow them to self-onboard into your account on the Medicare Max platform." ]
            , div [ class "flex items-center space-x-3" ]
                [ let
                    slug =
                        model.currentUser
                            |> Maybe.map .organizationSlug
                            |> Maybe.withDefault ""

                    selfOnboardingUrl =
                        model.selfOnboardingUrl
                            |> Maybe.withDefault ("/self-onboarding/" ++ slug)
                  in
                  div [ class "flex-1 flex items-center space-x-4" ]
                    [ input
                        [ type_ "text"
                        , class "flex-1 px-4 py-2 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 bg-gray-50"
                        , value selfOnboardingUrl
                        , readonly True
                        ]
                        []
                    , button
                        [ class "px-4 py-2 text-sm bg-purple-600 text-white rounded hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
                        , onClick CopySelfOnboardingLink
                        ]
                        [ text
                            (if model.linkCopied then
                                "Copied!"

                             else
                                "Copy Link"
                            )
                        ]
                    ]
                ]
            ]
        ]


checkbox : String -> Bool -> (Bool -> msg) -> Html msg
checkbox labelText isChecked onToggle =
    Html.label [ class "flex items-center space-x-3" ]
        [ input
            [ type_ "checkbox"
            , checked isChecked
            , onCheck onToggle
            , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
            ]
            []
        , span [ class "text-gray-700" ] [ text labelText ]
        ]


viewExpandableSection : String -> Html Msg -> List String -> Html Msg
viewExpandableSection title content expandedSections =
    let
        isExpanded =
            List.member title expandedSections
    in
    div [ class "bg-white shadow rounded-lg overflow-hidden" ]
        [ button
            [ class "w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50"
            , onClick (ToggleSection title)
            ]
            [ h2 [ class "text-lg font-medium" ] [ text title ]
            , div
                [ class "transform transition-transform"
                , classList [ ( "rotate-180", isExpanded ) ]
                ]
                [ text "▼" ]
            ]
        , div
            [ class "px-6 pb-6"
            , classList [ ( "hidden", not isExpanded ) ]
            ]
            [ content ]
        ]


viewCarriersGrid : Settings -> Model -> Html Msg
viewCarriersGrid settings model =
    let
        carriersToUse =
            if List.isEmpty model.loadedCarriers then
                allCarriers

            else
                model.loadedCarriers
    in
    div []
        [ div [ class "mb-4 flex items-center" ]
            [ checkbox "Select All Carriers"
                (List.length settings.carrierContracts == List.length carriersToUse)
                ToggleAllCarriers
            ]
        , div [ class "grid grid-cols-2 sm:grid-cols-3 gap-4" ]
            (List.map
                (\carrier ->
                    checkbox carrier
                        (List.member carrier settings.carrierContracts)
                        (\checked ->
                            if checked then
                                AddCarrierContract carrier

                            else
                                RemoveCarrierContract carrier
                        )
                )
                carriersToUse
            )
        ]


viewStateCarrierGrid : Settings -> Model -> Html Msg
viewStateCarrierGrid settings model =
    let
        carriersToUse =
            if List.isEmpty model.loadedCarriers then
                allCarriers

            else
                model.loadedCarriers
    in
    div []
        [ div [ class "mb-6" ]
            [ h3 [ class "text-sm font-medium text-gray-700 mb-2" ]
                [ text "SmartSend for Guaranteed Issue" ]
            , div [ class "flex items-start p-4 bg-blue-50 rounded-md mb-6" ]
                [ div [ class "flex items-center h-5" ]
                    [ input
                        [ type_ "checkbox"
                        , checked settings.smartSendEnabled
                        , onCheck ToggleSmartSend
                        , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                        ]
                        []
                    ]
                , div [ class "ml-3 text-sm" ]
                    [ label [ class "font-medium text-gray-700" ]
                        [ text "Use SmartSend for Guaranteed Issue" ]
                    , p [ class "text-gray-500 mt-1" ]
                        [ text "When enabled, SmartSend will automatically identify which carriers offer full carrier compensation for Guaranteed Issue (GI) policies." ]
                    ]
                ]
            , div [ class "mt-4 p-4 bg-gray-50 rounded-md mb-8" ]
                [ h3 [ class "text-md font-medium text-gray-900 mb-2" ]
                    [ text "How SmartSend Works" ]
                , p [ class "text-gray-600" ]
                    [ text "SmartSend analyzes each carrier to determine which ones offer full carrier compensation for Guaranteed Issue policies. This helps maximize your commissions while ensuring your quotes are always compliant with the latest carrier regulations." ]
                ]
            ]
        ]


option : List (Attribute msg) -> List (Html msg) -> Html msg
option attributes children =
    Html.option attributes children



-- Helper functions for state/carrier grid


hasDefaultSettings : Settings -> Bool
hasDefaultSettings settings =
    List.all
        (\setting -> setting.active && not setting.targetGI)
        settings.stateCarrierSettings


findStateCarrierSetting : Settings -> String -> StateCarrierSetting
findStateCarrierSetting settings carrier =
    settings.stateCarrierSettings
        |> List.filter (\s -> s.carrier == carrier)
        |> List.head
        |> Maybe.withDefault
            { carrier = carrier
            , active = True
            , targetGI = False
            }


viewStateCarrierCell : StateCarrierSetting -> Html Msg
viewStateCarrierCell setting =
    div [ class "flex flex-col items-center gap-1" ]
        [ label [ class "flex items-center gap-2 cursor-pointer" ]
            [ input
                [ type_ "checkbox"
                , checked setting.active
                , onCheck (\active -> UpdateStateCarrierSetting setting.carrier active setting.targetGI)
                , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                ]
                []
            , span [ class "text-sm text-gray-600" ] [ text "Active" ]
            ]
        , label [ class "flex items-center gap-2 cursor-pointer" ]
            [ input
                [ type_ "checkbox"
                , checked setting.targetGI
                , onCheck (\targetGI -> UpdateStateCarrierSetting setting.carrier setting.active targetGI)
                , class "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                ]
                []
            , span [ class "text-xs ml-1" ] [ text "GI" ]
            ]
        ]



-- Encoders and Decoders


settingsDecoder : Decoder SettingsResponse
settingsDecoder =
    let
        boolDecoder =
            Decode.oneOf
                [ Decode.bool
                , Decode.map (\n -> n == 1) Decode.int
                ]
    in
    Decode.field "success" Decode.bool
        |> Decode.andThen
            (\success ->
                if success then
                    Decode.map3 SettingsResponse
                        (Decode.field "orgSettings" settingsObjectDecoder)
                        (Decode.field "logo" (Decode.nullable Decode.string))
                        (Decode.field "canEditOrgSettings" boolDecoder)

                else
                    Decode.fail "Settings request was not successful"
            )


settingsObjectDecoder : Decoder Settings
settingsObjectDecoder =
    let
        stateCarrierSettingsDecoder =
            Decode.field "stateCarrierSettings" <|
                Decode.oneOf
                    [ Decode.list stateCarrierSettingDecoder
                    , Decode.null []
                    ]
    in
    Decode.succeed Settings
        |> Pipeline.required "carrierContracts" (Decode.list Decode.string)
        |> Pipeline.custom stateCarrierSettingsDecoder
        |> Pipeline.required "allowAgentSettings" Decode.bool
        |> Pipeline.required "emailSendBirthday" Decode.bool
        |> Pipeline.required "emailSendPolicyAnniversary" Decode.bool
        |> Pipeline.required "emailSendAep" Decode.bool
        |> Pipeline.required "smartSendEnabled" Decode.bool
        |> Pipeline.optional "brandName" Decode.string ""
        |> Pipeline.optional "primaryColor" Decode.string "#6B46C1"
        |> Pipeline.optional "secondaryColor" Decode.string "#9F7AEA"
        |> Pipeline.optional "logo" (Decode.nullable Decode.string) Nothing
        |> Pipeline.optional "orgSignature" Decode.bool False
        |> Pipeline.optional "phone" Decode.string ""
        |> Pipeline.optional "redirectUrl" Decode.string ""
        |> Pipeline.optional "signature" Decode.string ""


stateCarrierSettingDecoder : Decoder StateCarrierSetting
stateCarrierSettingDecoder =
    Decode.map3 StateCarrierSetting
        (Decode.field "carrier" Decode.string)
        (Decode.field "active" Decode.bool)
        (Decode.field "targetGI" Decode.bool)


recommendationsDecoder : Decoder (List StateCarrierSetting)
recommendationsDecoder =
    Decode.list
        (Decode.map3 StateCarrierSetting
            (Decode.field "carrier" Decode.string)
            (Decode.field "active" Decode.bool)
            (Decode.field "targetGI" Decode.bool)
        )


subscriptions : Model -> Sub Msg
subscriptions _ =
    Ports.onCopyResult LinkCopied


tab : String -> Bool -> Bool -> msg -> Html msg
tab label isActive isDisabled msg =
    button
        [ class "px-3 py-2 font-medium text-sm rounded-md -mb-px"
        , classList
            [ ( "text-indigo-600 border-indigo-500 border-b-2", isActive )
            , ( "text-gray-500 hover:text-gray-700 hover:border-gray-300 border-transparent border-b-2"
              , not isActive && not isDisabled
              )
            , ( "text-gray-400 cursor-not-allowed", isDisabled )
            ]
        , onClick msg
        , disabled isDisabled
        ]
        [ text label ]


viewNavLink : String -> String -> Html Msg
viewNavLink label path =
    a
        [ class "text-gray-700 hover:text-gray-900 hover:bg-gray-50 group flex items-center px-3 py-2 text-sm font-medium rounded-md"
        , href path
        ]
        [ text label ]


viewNavigation : Model -> Html Msg
viewNavigation model =
    nav []
        [ case model.currentUser of
            Just user ->
                if user.isAdmin then
                    viewNavLink "Manage Agents" "/agents"

                else
                    text ""

            Nothing ->
                text ""
        ]


viewLoading : Html msg
viewLoading =
    div [ class "flex justify-center items-center h-64" ]
        [ div [ class "animate-spin rounded-full h-12 w-12 border-4 border-purple-500 border-t-transparent" ] []
        ]


viewHeader : Html msg
viewHeader =
    nav [ class "bg-white border-b border-gray-200" ]
        [ div [ class "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8" ]
            [ div [ class "flex justify-between h-16" ]
                [ div [ class "flex" ]
                    [ div [ class "flex-shrink-0 flex items-center" ]
                        [ h1 [ class "text-2xl font-semibold" ]
                            [ text "Organization Settings" ]
                        ]
                    ]
                ]
            ]
        ]


finalizeOrganization : String -> Cmd Msg
finalizeOrganization orgSlug =
    Http.post
        { url = "/api/organizations/" ++ orgSlug ++ "/setup-database"
        , body = Http.emptyBody
        , expect = Http.expectWhatever OrgFinalized
        }



-- Helper functions for drag and drop


dropDecoder : Decode.Decoder Msg
dropDecoder =
    Decode.at [ "dataTransfer", "files" ] (Decode.oneOrMore GotFiles File.decoder)


hijackOn : String -> Decode.Decoder msg -> Attribute msg
hijackOn event decoder =
    preventDefaultOn event (Decode.map hijack decoder)


hijack : msg -> ( msg, Bool )
hijack msg =
    ( msg, True )

================
File: frontend/src/Signup.elm
================
module Signup exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Char
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode
import Process
import Task
import Url
import Url.Builder exposing (absolute, string)



-- MODEL


type alias Model =
    { firstName : String
    , lastName : String
    , organizationName : String
    , email : String
    , phone : String
    , formState : FormState
    , error : Maybe String
    , key : Nav.Key
    , emailStatus : EmailStatus
    , debounceCounter : Int
    }


type FormState
    = Editing
    | Submitting
    | LinkSent
    | Success
    | Error


type EmailStatus
    = NotChecked
    | Checking
    | Available
    | AlreadyRegistered String
    | InvalidFormat


init : Nav.Key -> ( Model, Cmd Msg )
init key =
    ( { firstName = ""
      , lastName = ""
      , organizationName = ""
      , email = ""
      , phone = ""
      , formState = Editing
      , error = Nothing
      , key = key
      , emailStatus = NotChecked
      , debounceCounter = 0
      }
    , Cmd.none
    )



-- UPDATE


type Msg
    = UpdateFirstName String
    | UpdateLastName String
    | UpdateOrganizationName String
    | UpdateEmail String
    | UpdatePhone String
    | CheckEmail Int
    | DebounceCheckEmail Int
    | GotEmailCheckResponse Int (Result Http.Error EmailCheckResponse)
    | SubmitForm
    | GotSignupResponse (Result Http.Error SignupResponse)


type alias SignupResponse =
    { success : Bool
    , message : String
    }


type alias EmailCheckResponse =
    { available : Bool
    , message : String
    }


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateFirstName value ->
            ( { model | firstName = value }, Cmd.none )

        UpdateLastName value ->
            ( { model | lastName = value }, Cmd.none )

        UpdateOrganizationName value ->
            ( { model | organizationName = value }, Cmd.none )

        UpdateEmail value ->
            let
                newModel =
                    { model
                        | email = value
                        , emailStatus =
                            if String.isEmpty value then
                                NotChecked

                            else if not (isValidEmailFormat value) then
                                InvalidFormat

                            else
                                Checking
                        , debounceCounter = model.debounceCounter + 1
                    }

                counter =
                    newModel.debounceCounter
            in
            ( newModel
            , if String.isEmpty value || not (isValidEmailFormat value) then
                Cmd.none

              else
                debounceEmailCheck counter
            )

        UpdatePhone value ->
            let
                -- Filter out non-digit characters
                digitsOnly =
                    String.filter Char.isDigit value

                -- Limit to 10 digits
                limitedDigits =
                    String.left 10 digitsOnly

                -- Format the phone number as needed
                formattedPhone =
                    if String.isEmpty digitsOnly then
                        ""

                    else if String.length limitedDigits == 10 then
                        "(" ++ String.left 3 limitedDigits ++ ") " ++ String.slice 3 6 limitedDigits ++ "-" ++ String.slice 6 10 limitedDigits

                    else if String.length limitedDigits >= 7 then
                        "(" ++ String.left 3 limitedDigits ++ ") " ++ String.slice 3 6 limitedDigits ++ "-" ++ String.slice 6 10 limitedDigits

                    else if String.length limitedDigits >= 4 then
                        "(" ++ String.left 3 limitedDigits ++ ") " ++ String.slice 3 10 limitedDigits

                    else
                        "("
                            ++ limitedDigits
                            ++ (if String.length limitedDigits == 3 then
                                    ") "

                                else
                                    ""
                               )
            in
            ( { model | phone = formattedPhone }, Cmd.none )

        DebounceCheckEmail counter ->
            if counter == model.debounceCounter && model.emailStatus == Checking then
                ( model, checkEmailAvailability counter model.email )

            else
                ( model, Cmd.none )

        CheckEmail counter ->
            ( model, checkEmailAvailability counter model.email )

        GotEmailCheckResponse counter result ->
            if counter /= model.debounceCounter then
                -- Ignore outdated responses
                ( model, Cmd.none )

            else
                case result of
                    Ok response ->
                        ( { model
                            | emailStatus =
                                if response.available then
                                    Available

                                else
                                    AlreadyRegistered response.message
                          }
                        , Cmd.none
                        )

                    Err _ ->
                        ( { model | emailStatus = NotChecked }, Cmd.none )

        SubmitForm ->
            if isValidForm model then
                ( { model | formState = Submitting }
                , Cmd.none
                  -- signup model
                )

            else
                ( { model | error = Just "Please fill out all fields correctly" }
                , Cmd.none
                )

        GotSignupResponse result ->
            case result of
                Ok response ->
                    if response.success then
                        -- Show success message
                        ( { model | formState = LinkSent }
                        , Cmd.none
                        )

                    else
                        ( { model | formState = Error, error = Just response.message }
                        , Cmd.none
                        )

                Err _ ->
                    ( { model | formState = Error, error = Just "Signup failed. Please try again." }
                    , Cmd.none
                    )



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Get Started - Medicare Max"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8" ]
            [ div [ class "max-w-md w-full space-y-8" ]
                [ div [ class "text-center" ]
                    [ img [ src "/images/medicare-max-logo.png", class "mx-auto h-12 w-auto", alt "Medicare Max Logo" ] []
                    , h1 [ class "mt-6 text-3xl font-bold text-gray-900" ] [ text "Get Started" ]
                    , p [ class "mt-2 text-sm text-gray-600" ] [ text "Sign up and start using Medicare Max" ]
                    ]
                , case model.formState of
                    LinkSent ->
                        div [ class "text-center bg-green-50 p-6 rounded-lg border border-green-100" ]
                            [ p [ class "text-green-800 mb-2 font-medium" ] [ text "Welcome to Medicare Max!" ]
                            , p [ class "text-green-700 mb-4" ] [ text "We've sent you an email with a magic link to continue your account setup." ]
                            , p [ class "text-green-700" ] [ text "Please check your inbox (and spam folder) to complete your registration." ]
                            ]

                    Success ->
                        div [ class "text-center" ]
                            [ p [ class "text-green-600" ] [ text "Account created successfully!" ]
                            , div [ class "animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mx-auto mt-4" ] []
                            ]

                    _ ->
                        viewForm model
                ]
            ]
        ]
    }


viewForm : Model -> Html Msg
viewForm model =
    Html.form [ onSubmit SubmitForm, class "space-y-6" ]
        [ div [ class "grid grid-cols-1 md:grid-cols-2 gap-4" ]
            [ div []
                [ label [ for "firstName", class "block text-sm font-medium text-gray-700" ] [ text "First Name" ]
                , input
                    [ type_ "text"
                    , id "firstName"
                    , value model.firstName
                    , onInput UpdateFirstName
                    , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-base py-2.5 px-3"
                    , placeholder "John"
                    ]
                    []
                ]
            , div []
                [ label [ for "lastName", class "block text-sm font-medium text-gray-700" ] [ text "Last Name" ]
                , input
                    [ type_ "text"
                    , id "lastName"
                    , value model.lastName
                    , onInput UpdateLastName
                    , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-base py-2.5 px-3"
                    , placeholder "Doe"
                    ]
                    []
                ]
            ]
        , div []
            [ label [ for "organizationName", class "block text-sm font-medium text-gray-700" ] [ text "Organization Name" ]
            , input
                [ type_ "text"
                , id "organizationName"
                , value model.organizationName
                , onInput UpdateOrganizationName
                , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-base py-2.5 px-3"
                , placeholder "ABC Healthcare"
                ]
                []
            ]
        , div [ class "grid grid-cols-1 md:grid-cols-2 gap-4" ]
            [ div []
                [ label [ for "email", class "block text-sm font-medium text-gray-700" ] [ text "Email" ]
                , input
                    [ type_ "email"
                    , id "email"
                    , value model.email
                    , onInput UpdateEmail
                    , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-base py-2.5 px-3"
                    , placeholder "you@example.com"
                    ]
                    []
                , viewEmailStatusMessage model.emailStatus
                ]
            , div []
                [ label [ for "phone", class "block text-sm font-medium text-gray-700" ] [ text "Phone Number" ]
                , input
                    [ type_ "tel"
                    , id "phone"
                    , value model.phone
                    , onInput UpdatePhone
                    , class "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-base py-2.5 px-3"
                    , placeholder "(555) 555-5555"
                    , pattern "\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}"
                    , attribute "aria-label" "Phone number in format (555) 555-5555"
                    , attribute "inputmode" "numeric"
                    ]
                    []
                ]
            ]
        , case model.error of
            Just err ->
                div [ class "text-red-600 text-sm" ] [ text err ]

            Nothing ->
                text ""
        , if model.formState == Submitting || not (isValidForm model) then
            button
                [ type_ "submit"
                , class "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#03045e] opacity-70 cursor-not-allowed"
                , disabled True
                ]
                [ text
                    (if model.formState == Submitting then
                        "Creating Account..."

                     else
                        "Sign Up"
                    )
                ]

          else
            let
                uri =
                    absolute [ "onboarding" ]
                        [ string "firstName" model.firstName
                        , string "lastName" model.lastName
                        , string "organizationName" model.organizationName
                        , string "email" model.email
                        , string "phone" model.phone
                        ]
            in
            a
                [ href uri
                , class "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#03045e] hover:[#03045e]/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-theme-brand"
                ]
                [ text "Sign Up" ]
        , p [ class "mt-2 text-center text-sm text-gray-600" ]
            [ text "Already have an account? "
            , a [ href "/login", class "font-medium text-blue-600 hover:text-blue-500" ]
                [ text "Log in" ]
            ]
        ]


viewEmailStatusMessage : EmailStatus -> Html Msg
viewEmailStatusMessage status =
    case status of
        NotChecked ->
            text ""

        Checking ->
            p [ class "mt-1 text-blue-500 text-sm" ] [ text "Checking email..." ]

        Available ->
            p [ class "mt-1 text-green-500 text-sm" ] [ text "Email is available" ]

        AlreadyRegistered message ->
            p [ class "mt-1 text-red-500 text-sm" ] [ text message ]

        InvalidFormat ->
            p [ class "mt-1 text-red-500 text-sm" ] [ text "Please enter a valid email address" ]



-- HELPERS


isValidForm : Model -> Bool
isValidForm model =
    not (String.isEmpty model.firstName)
        && not (String.isEmpty model.lastName)
        && not (String.isEmpty model.organizationName)
        && not (String.isEmpty model.phone)
        && (String.length (String.filter Char.isDigit model.phone) == 10)
        && (model.emailStatus == Available)


isValidEmailFormat : String -> Bool
isValidEmailFormat email =
    String.contains "@" email && String.contains "." email


debounceEmailCheck : Int -> Cmd Msg
debounceEmailCheck counter =
    Process.sleep 500
        |> Task.perform (\_ -> DebounceCheckEmail counter)



-- API CALLS


checkEmailAvailability : Int -> String -> Cmd Msg
checkEmailAvailability counter email =
    Http.get
        { url = "/api/organizations/check-email/" ++ encodeUri email
        , expect = Http.expectJson (GotEmailCheckResponse counter) emailCheckResponseDecoder
        }



-- Simple URI encoder for email parameter


encodeUri : String -> String
encodeUri string =
    string
        |> String.replace "%" "%25"
        |> String.replace "+" "%2B"
        |> String.replace " " "%20"
        |> String.replace "/" "%2F"
        |> String.replace "?" "%3F"
        |> String.replace "#" "%23"
        |> String.replace "@" "%40"
        |> String.replace ":" "%3A"
        |> String.replace "=" "%3D"
        |> String.replace "&" "%26"


emailCheckResponseDecoder : Decoder EmailCheckResponse
emailCheckResponseDecoder =
    Decode.map2 EmailCheckResponse
        (Decode.field "available" Decode.bool)
        (Decode.field "message" Decode.string)


encodeSignupData : Model -> Encode.Value
encodeSignupData model =
    Encode.object
        [ ( "firstName", Encode.string model.firstName )
        , ( "lastName", Encode.string model.lastName )
        , ( "organizationName", Encode.string model.organizationName )
        , ( "email", Encode.string model.email )
        , ( "phone", Encode.string model.phone )
        ]


signupDecoder : Decoder SignupResponse
signupDecoder =
    Decode.map2 SignupResponse
        (Decode.field "success" Decode.bool)
        (Decode.field "message" Decode.string)



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/src/StateRegions.elm
================
module StateRegions exposing (Region(..), allRegions, getRegionStates, regionToString, stringToRegion)


type Region
    = WestCoast
    | EastCoast
    | South
    | Midwest


allRegions : List Region
allRegions =
    [ WestCoast, EastCoast, South, Midwest ]


regionToString : Region -> String
regionToString region =
    case region of
        WestCoast ->
            "West Coast"

        EastCoast ->
            "East Coast"

        South ->
            "South"

        Midwest ->
            "Midwest"


stringToRegion : String -> Maybe Region
stringToRegion str =
    case str of
        "west" ->
            Just WestCoast

        "east" ->
            Just EastCoast

        "south" ->
            Just South

        "midwest" ->
            Just Midwest

        _ ->
            Nothing


getRegionStates : Region -> List String
getRegionStates region =
    case region of
        WestCoast ->
            [ "CA", "OR", "WA", "AK", "HI" ]

        EastCoast ->
            [ "ME", "NH", "VT", "MA", "RI", "CT", "NY", "NJ", "PA", "DE", "MD", "DC" ]

        South ->
            [ "VA", "NC", "SC", "GA", "FL", "AL", "MS", "LA", "AR", "TN", "KY", "WV", "TX", "OK" ]

        Midwest ->
            [ "OH", "MI", "IN", "IL", "WI", "MN", "IA", "MO", "ND", "SD", "NE", "KS", "MT", "WY", "CO", "ID", "NV", "NM", "AZ", "UT" ]

================
File: frontend/src/stripe-integration.d.ts
================
export function loadStripeScript(): void;

export interface StripeResult {
  success: boolean;
  error?: string;
}

export interface StripeIntegration {
  initializeStripe(publishableKey: string): boolean;
  redirectToCheckout(sessionId: string): Promise<StripeResult>;
  processPayment(clientSecret: string): Promise<StripeResult>;
  cleanupStripe(): void;
}

export const stripeIntegration: StripeIntegration;

declare global {
  interface Window {
    Stripe: any;
    stripeIntegration: StripeIntegration;
  }
}

================
File: frontend/src/stripe-integration.ts
================
// Load and manage the Stripe.js library
let stripeInstance: any = null;

// Load the Stripe.js script dynamically
export function loadStripeScript() {
  if (document.getElementById('stripe-js')) {
    console.log('Stripe script already loaded');
    return;
  }

  console.log('Loading Stripe script');
  const script = document.createElement('script');
  script.id = 'stripe-js';
  script.src = 'https://js.stripe.com/v3/';
  script.async = true;
  document.head.appendChild(script);
}

// Initialize Stripe with the provided publishable key
function initializeStripe(publishableKey: string) {
  try {
    if (!window.Stripe) {
      console.error('Stripe not loaded yet');
      return false;
    }
    
    stripeInstance = window.Stripe(publishableKey);
    console.log('Stripe initialized successfully');
    return true;
  } catch (error) {
    console.error('Error initializing Stripe:', error);
    return false;
  }
}

// Redirect to Stripe Checkout using sessionId
async function redirectToCheckout(sessionId: string) {
  try {
    if (!stripeInstance) {
      console.error('Stripe not initialized');
      return { success: false, error: 'Stripe not initialized' };
    }
    
    console.log('Redirecting to Checkout with session:', sessionId);
    const { error } = await stripeInstance.redirectToCheckout({ sessionId });
    
    if (error) {
      console.error('Checkout error:', error);
      return { success: false, error: error.message };
    }
    
    return { success: true };
  } catch (error) {
    console.error('Redirect to checkout error:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
}

// Process a payment using Stripe Elements
async function processPayment(clientSecret: string) {
  try {
    if (!stripeInstance) {
      console.error('Stripe not initialized');
      return { success: false, error: 'Stripe not initialized' };
    }
    
    // Set up payment element
    const elements = stripeInstance.elements({
      clientSecret,
      appearance: {
        theme: 'stripe',
      },
    });
    
    const paymentElement = elements.create('payment');
    
    // Create a container for the payment element
    const paymentContainer = document.createElement('div');
    paymentContainer.id = 'payment-element';
    document.body.appendChild(paymentContainer);
    
    // Mount the payment element
    paymentElement.mount('#payment-element');
    
    // Handle the form submission
    const { error } = await stripeInstance.confirmPayment({
      elements,
      confirmParams: {
        return_url: window.location.origin + '/dashboard?payment_success=true',
      },
    });
    
    // Clean up
    document.body.removeChild(paymentContainer);
    
    if (error) {
      console.error('Payment error:', error);
      return { success: false, error: error.message };
    }
    
    return { success: true };
  } catch (error) {
    console.error('Process payment error:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
}

// Clean up Stripe resources
function cleanupStripe() {
  stripeInstance = null;
}

// Export the Stripe integration object to be attached to the window
const stripeIntegration = {
  initializeStripe,
  redirectToCheckout,
  processPayment,
  cleanupStripe
};

// Attach to window for access from Elm ports
if (typeof window !== 'undefined') {
  (window as any).stripeIntegration = stripeIntegration;
}

export { stripeIntegration };

// Add TypeScript declarations for Stripe
declare global {
  interface Window {
    Stripe: any;
  }
}

================
File: frontend/src/Stripe.elm
================
module Stripe exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Debug
import Dict exposing (Dict)
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode
import Url exposing (Url)
import Url.Parser.Query as Query
import Utils.UrlStuff exposing (getQueryParams)



-- MODEL


type ApiError
    = NetworkError
    | BadStatus Int String
    | BadPayload String
    | BadUrl String
    | Timeout


type PaymentStatus
    = ReadyToComplete
    | Continuing
    | Error ApiError
    | Loading
    | Success SubscriptionStatus


type alias SubscriptionStatus =
    { isActive : Bool
    , tier : String
    , currentPeriodEnd : Maybe Int
    , cancelAtPeriodEnd : Maybe Bool
    , paymentStatus : String
    }


type alias Model =
    { user : User
    , paymentStatus : PaymentStatus
    }


dummyUser : User
dummyUser =
    { firstName = "John"
    , lastName = "Doe"
    , email = "john.doe@example.com"
    }


type alias User =
    { firstName : String
    , lastName : String
    , email : String
    }


init : Nav.Key -> Url -> ( Model, Cmd Msg )
init key url =
    let
        queryParams =
            url |> getQueryParams

        firstName =
            Dict.get "firstName" queryParams

        lastName =
            Dict.get "lastName" queryParams

        email =
            Dict.get "email" queryParams

        maybeUser =
            case ( firstName, lastName, email ) of
                ( Just f, Just l, Just e ) ->
                    Just { firstName = f, lastName = l, email = e }

                _ ->
                    Nothing
    in
    ( { user = maybeUser |> Maybe.withDefault dummyUser
      , paymentStatus = Loading
      }
    , fetchSubscriptionStatus
    )



-- UPDATE


type Msg
    = NoOp
    | PaymentCompleted PaymentStatus
    | GotSubscriptionStatus (Result Http.Error SubscriptionStatus)


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )

        PaymentCompleted status ->
            ( { model | paymentStatus = status }
            , fetchSubscriptionStatus
            )

        GotSubscriptionStatus result ->
            case result of
                Ok status ->
                    ( { model | paymentStatus = Success status }, Cmd.none )

                Err httpError ->
                    ( { model | paymentStatus = Error (httpErrorToApiError httpError) }, Cmd.none )



-- HTTP


fetchSubscriptionStatus : Cmd Msg
fetchSubscriptionStatus =
    Http.get
        { url = "/api/stripe/subscription-status"
        , expect = Http.expectJson GotSubscriptionStatus subscriptionStatusDecoder
        }


errorResponseDecoder : Decoder String
errorResponseDecoder =
    Decode.field "error" Decode.string


subscriptionStatusDecoder : Decoder SubscriptionStatus
subscriptionStatusDecoder =
    Decode.field "data"
        (Decode.map5 SubscriptionStatus
            (Decode.field "isActive" Decode.bool)
            (Decode.field "tier" Decode.string)
            (Decode.maybe (Decode.field "currentPeriodEnd" Decode.int))
            (Decode.maybe (Decode.field "cancelAtPeriodEnd" Decode.bool))
            (Decode.field "paymentStatus" Decode.string)
        )


httpErrorToApiError : Http.Error -> ApiError
httpErrorToApiError error =
    case error of
        Http.BadUrl url ->
            BadUrl url

        Http.Timeout ->
            Timeout

        Http.NetworkError ->
            NetworkError

        Http.BadStatus status ->
            BadStatus status "Server error occurred"

        Http.BadBody message ->
            BadPayload message


apiErrorToString : ApiError -> String
apiErrorToString error =
    case error of
        NetworkError ->
            "Network error occurred. Please check your connection."

        BadStatus status message ->
            "Server error: " ++ String.fromInt status ++ " - " ++ message

        BadPayload message ->
            "Failed to process server response. "
                ++ (if String.contains "JSON" message then
                        "Please try refreshing the page."

                    else
                        message
                   )

        BadUrl url ->
            "Invalid API URL: " ++ url

        Timeout ->
            "Request timed out. Please try again."



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Onboarding"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8" ]
            [ div [ class "max-w-6xl w-full space-y-8 bg-white p-8 rounded-lg shadow-md" ]
                [ case model.paymentStatus of
                    Loading ->
                        div [ class "mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md" ]
                            [ p [ class "text-blue-700" ] [ text "Loading subscription status..." ] ]

                    Error apiError ->
                        div [ class "mt-4 p-3 bg-red-50 border border-red-200 rounded-md" ]
                            [ p [ class "text-red-700" ] [ text "Error" ]
                            , p [ class "mt-2 text-sm text-red-600" ]
                                [ text (apiErrorToString apiError)
                                , br [] []
                                , text "If you're using an ad blocker, please disable it for this site as it may interfere with payment processing."
                                ]
                            , button
                                [ class "mt-4 px-4 py-2 bg-red-100 hover:bg-red-200 text-red-700 rounded-md"
                                , onClick (PaymentCompleted Loading)
                                ]
                                [ text "Retry" ]
                            ]

                    Success status ->
                        if status.isActive then
                            div [ class "mt-4 p-3 bg-green-50 border border-green-200 rounded-md" ]
                                [ p [ class "text-green-700 font-medium" ]
                                    [ text ("Active subscription: " ++ status.tier) ]
                                , case status.currentPeriodEnd of
                                    Just periodEnd ->
                                        p [ class "mt-2 text-sm text-green-600" ]
                                            [ text ("Current period ends: " ++ formatUnixTimestamp periodEnd) ]

                                    Nothing ->
                                        text ""
                                , case status.cancelAtPeriodEnd of
                                    Just True ->
                                        p [ class "mt-2 text-sm text-yellow-600" ]
                                            [ text "Your subscription will cancel at the end of the current period" ]

                                    _ ->
                                        text ""
                                ]

                        else
                            node "stripe-checkout"
                                [ attribute "price-id" "price_1RHG4mCBUPXAZKNGem75yV4U" --"price_1RBStWCBUPXAZKNGwpimWl7v"
                                , attribute "metered-price-id" "price_1RHG7kCBUPXAZKNGd5YvIzsw" --"price_1RBSvJCBUPXAZKNGQ1U9Hl8i"
                                , attribute "return-url" "http://localhost:3000/return"
                                , attribute "first-name" model.user.firstName
                                , attribute "last-name" model.user.lastName
                                , attribute "email" model.user.email
                                ]
                                []

                    Continuing ->
                        div [ class "mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md" ]
                            [ p [ class "text-blue-700" ] [ text "Resuming your previous setup" ]
                            , p [ class "mt-2 text-sm text-blue-600" ]
                                [ text "If the checkout doesn't appear, please disable any ad blockers for this site." ]
                            ]

                    ReadyToComplete ->
                        node "stripe-checkout"
                            [ attribute "price-id" "price_1RHG4mCBUPXAZKNGem75yV4U" --"price_1RBStWCBUPXAZKNGwpimWl7v"
                            , attribute "metered-price-id" "price_1RHG7kCBUPXAZKNGd5YvIzsw" --"price_1RBSvJCBUPXAZKNGQ1U9Hl8i"
                            , attribute "return-url" "http://localhost:3000/return"
                            , attribute "first-name" model.user.firstName
                            , attribute "last-name" model.user.lastName
                            , attribute "email" model.user.email
                            ]
                            []
                ]
            ]
        ]
    }



-- HELPERS


formatUnixTimestamp : Int -> String
formatUnixTimestamp timestamp =
    -- Convert Unix timestamp to readable date string
    -- You may want to use a proper date formatting library here
    String.fromInt timestamp



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/src/Subscription.elm
================
module Subscription exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Http
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline as Pipeline
import Json.Encode as Encode
import Svg exposing (path, svg)
import Svg.Attributes exposing (clipRule, d, fill, fillRule, viewBox)
import Time



-- MODEL


type alias Model =
    { subscriptionData : Maybe SubscriptionData
    , paymentMethods : List PaymentMethod
    , billingHistory : List BillingRecord
    , isLoading : Bool
    , error : Maybe String
    , activeTab : Tab
    , contactCount : Int
    , autoUpgradeLimit : Int
    , upgradeModalOpen : Bool
    , selectedTier : Int
    }


type Tab
    = PlanTab
    | PaymentTab
    | BillingTab


type alias SubscriptionData =
    { id : String
    , status : String
    , tier : Int
    , contactLimit : Int
    , currentPeriodEnd : String
    , cancelAtPeriodEnd : Bool
    , features : List String
    }


type alias PaymentMethod =
    { id : String
    , brand : String
    , last4 : String
    , expiryMonth : Int
    , expiryYear : Int
    , isDefault : Bool
    }


type alias BillingRecord =
    { id : String
    , date : String
    , amount : Float
    , status : String
    , description : String
    , invoiceUrl : Maybe String
    }


init : () -> ( Model, Cmd Msg )
init _ =
    ( { subscriptionData = Nothing
      , paymentMethods = []
      , billingHistory = []
      , isLoading = True
      , error = Nothing
      , activeTab = PlanTab
      , contactCount = 0
      , autoUpgradeLimit = 0
      , upgradeModalOpen = False
      , selectedTier = 1
      }
    , Cmd.batch
        [ fetchSubscriptionData
        , fetchPaymentMethods
        , fetchBillingHistory
        ]
    )



-- UPDATE


type Msg
    = GotSubscriptionData (Result Http.Error SubscriptionDataResponse)
    | GotPaymentMethods (Result Http.Error (List PaymentMethod))
    | GotBillingHistory (Result Http.Error (List BillingRecord))
    | ChangeTier Int
    | UpgradeTier Int
    | UpgradeTierResult (Result Http.Error UpgradeResponse)
    | AddPaymentMethod
    | RemovePaymentMethod String
    | SetDefaultPaymentMethod String
    | PaymentMethodUpdated (Result Http.Error (List PaymentMethod))
    | DownloadInvoice String
    | ChangeTab Tab
    | OpenUpgradeModal Int
    | CloseUpgradeModal
    | SetAutoUpgradeLimit Int
    | AutoUpgradeLimitUpdated (Result Http.Error AutoUpgradeResponse)
    | CreateCheckoutSession Int
    | GotCheckoutSession (Result Http.Error CheckoutResponse)
    | NoOp


type alias SubscriptionDataResponse =
    { subscription : Maybe SubscriptionData
    , contactCount : Int
    , autoUpgradeLimit : Int
    }


type alias UpgradeResponse =
    { success : Bool
    , previousTier : Maybe Int
    , newTier : Maybe Int
    , contactLimit : Maybe Int
    , message : Maybe String
    }


type alias AutoUpgradeResponse =
    { success : Bool
    , autoUpgradeLimit : Int
    }


type alias CheckoutResponse =
    { clientSecret : String
    , subscriptionId : String
    }


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        GotSubscriptionData (Ok response) ->
            ( { model
                | subscriptionData = response.subscription
                , contactCount = response.contactCount
                , autoUpgradeLimit = response.autoUpgradeLimit
                , isLoading = False
              }
            , Cmd.none
            )

        GotSubscriptionData (Err _) ->
            ( { model | error = Just "Failed to load subscription data", isLoading = False }, Cmd.none )

        GotPaymentMethods (Ok methods) ->
            ( { model | paymentMethods = methods, isLoading = False }, Cmd.none )

        GotPaymentMethods (Err _) ->
            ( { model | error = Just "Failed to load payment methods", isLoading = False }, Cmd.none )

        GotBillingHistory (Ok history) ->
            ( { model | billingHistory = history, isLoading = False }, Cmd.none )

        GotBillingHistory (Err _) ->
            ( { model | error = Just "Failed to load billing history", isLoading = False }, Cmd.none )

        ChangeTier tier ->
            ( { model | selectedTier = tier }, Cmd.none )

        OpenUpgradeModal tier ->
            ( { model | upgradeModalOpen = True, selectedTier = tier }, Cmd.none )

        CloseUpgradeModal ->
            ( { model | upgradeModalOpen = False }, Cmd.none )

        UpgradeTier tier ->
            ( { model | isLoading = True, upgradeModalOpen = False }
            , upgradeTier tier
            )

        UpgradeTierResult (Ok response) ->
            if response.success then
                case model.subscriptionData of
                    Just subscription ->
                        let
                            updatedSubscription =
                                { subscription
                                    | tier = Maybe.withDefault subscription.tier response.newTier
                                    , contactLimit = Maybe.withDefault subscription.contactLimit response.contactLimit
                                }
                        in
                        ( { model
                            | subscriptionData = Just updatedSubscription
                            , isLoading = False
                          }
                        , Cmd.none
                        )

                    Nothing ->
                        -- Should not happen, but handle it gracefully
                        ( { model | isLoading = False }
                        , fetchSubscriptionData
                        )

            else
                ( { model
                    | error = Just (Maybe.withDefault "Failed to upgrade subscription" response.message)
                    , isLoading = False
                  }
                , Cmd.none
                )

        UpgradeTierResult (Err _) ->
            ( { model | error = Just "Failed to upgrade subscription", isLoading = False }, Cmd.none )

        AddPaymentMethod ->
            -- In a real implementation, this would open a Stripe form or similar
            ( model, Cmd.none )

        RemovePaymentMethod id ->
            ( { model | isLoading = True }, removePaymentMethod id )

        SetDefaultPaymentMethod id ->
            ( { model | isLoading = True }, setDefaultPaymentMethod id )

        PaymentMethodUpdated (Ok methods) ->
            ( { model | paymentMethods = methods, isLoading = False }, Cmd.none )

        PaymentMethodUpdated (Err _) ->
            ( { model | error = Just "Failed to update payment method", isLoading = False }, Cmd.none )

        DownloadInvoice url ->
            -- This would trigger a download in a real implementation
            ( model, Cmd.none )

        ChangeTab tab ->
            ( { model | activeTab = tab }, Cmd.none )

        SetAutoUpgradeLimit limit ->
            ( { model | isLoading = True }
            , updateAutoUpgradeLimit limit
            )

        AutoUpgradeLimitUpdated (Ok response) ->
            if response.success then
                ( { model
                    | autoUpgradeLimit = response.autoUpgradeLimit
                    , isLoading = False
                  }
                , Cmd.none
                )

            else
                ( { model
                    | error = Just "Failed to update auto-upgrade limit"
                    , isLoading = False
                  }
                , Cmd.none
                )

        AutoUpgradeLimitUpdated (Err _) ->
            ( { model
                | error = Just "Failed to update auto-upgrade limit"
                , isLoading = False
              }
            , Cmd.none
            )

        CreateCheckoutSession tier ->
            ( { model | isLoading = True }
            , createCheckoutSession tier
            )

        GotCheckoutSession (Ok response) ->
            -- In a real implementation, this would redirect to Stripe checkout
            -- For now, we just update the state and let JavaScript handle it
            ( model, Cmd.none )

        GotCheckoutSession (Err _) ->
            ( { model
                | error = Just "Failed to create checkout session"
                , isLoading = False
              }
            , Cmd.none
            )

        NoOp ->
            ( model, Cmd.none )



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Subscription & Payments"
    , body =
        [ div [ class "min-h-screen bg-gray-50" ]
            [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" ]
                [ h1 [ class "text-2xl font-semibold text-[#03045E] mb-6" ]
                    [ text "Subscription & Payments" ]
                , if model.isLoading then
                    viewLoading

                  else
                    div []
                        [ viewTabs model
                        , viewTabContent model
                        ]
                , if model.upgradeModalOpen then
                    viewUpgradeModal model

                  else
                    text ""
                ]
            ]
        ]
    }


viewTabs : Model -> Html Msg
viewTabs model =
    div [ class "border-b border-gray-200 mb-6" ]
        [ div [ class "flex -mb-px" ]
            [ viewTab "Subscription Plan" (model.activeTab == PlanTab) (ChangeTab PlanTab)
            , viewTab "Payment Methods" (model.activeTab == PaymentTab) (ChangeTab PaymentTab)
            , viewTab "Billing History" (model.activeTab == BillingTab) (ChangeTab BillingTab)
            ]
        ]


viewTab : String -> Bool -> Msg -> Html Msg
viewTab label isActive msg =
    button
        [ class
            ("px-4 py-2 font-medium text-sm "
                ++ (if isActive then
                        "border-b-2 border-[#03045E] text-[#03045E]"

                    else
                        "text-gray-500 hover:text-gray-700 hover:border-gray-300"
                   )
            )
        , onClick msg
        ]
        [ text label ]


viewTabContent : Model -> Html Msg
viewTabContent model =
    case model.activeTab of
        PlanTab ->
            viewSubscriptionPlan model

        PaymentTab ->
            viewPaymentMethods model

        BillingTab ->
            viewBillingHistory model


viewLoading : Html Msg
viewLoading =
    div [ class "flex justify-center items-center h-64" ]
        [ div [ class "animate-spin rounded-full h-8 w-8 border-4 border-[#03045E] border-t-transparent" ] [] ]


viewSubscriptionPlan : Model -> Html Msg
viewSubscriptionPlan model =
    div [ class "bg-white shadow rounded-lg p-6" ]
        [ case model.subscriptionData of
            Just subscription ->
                div [ class "space-y-6" ]
                    [ div [ class "flex justify-between items-center" ]
                        [ div []
                            [ h2 [ class "text-lg font-medium text-gray-900" ]
                                [ text "Current Plan" ]
                            , div [ class "mt-1 text-sm text-gray-500" ]
                                [ text "Contact-based subscription" ]
                            ]
                        , div [ class "px-3 py-1 bg-blue-50 text-blue-700 rounded-full text-sm font-medium" ]
                            [ text subscription.status ]
                        ]
                    , div [ class "border-t border-gray-200 pt-4" ]
                        [ div [ class "flex items-baseline" ]
                            [ span [ class "text-3xl font-bold text-gray-900" ]
                                [ text ("Tier " ++ String.fromInt subscription.tier) ]
                            , span [ class "ml-3 text-gray-500" ]
                                [ text (String.fromInt subscription.contactLimit ++ " contacts") ]
                            ]
                        , div [ class "mt-1 text-sm text-gray-500" ]
                            [ text ("Current usage: " ++ String.fromInt model.contactCount ++ " contacts") ]
                        , div [ class "mt-1 text-sm text-gray-500" ]
                            [ text ("Next billing date: " ++ subscription.currentPeriodEnd) ]
                        ]
                    , div [ class "border-t border-gray-200 pt-4" ]
                        [ h3 [ class "text-md font-medium text-gray-900 mb-2" ]
                            [ text "Features" ]
                        , ul [ class "space-y-2" ]
                            (List.map
                                (\feature ->
                                    li [ class "flex items-center text-gray-600" ]
                                        [ div [ class "mr-2 text-green-500" ]
                                            [ viewCheckIcon ]
                                        , text feature
                                        ]
                                )
                                subscription.features
                            )
                        ]
                    , div [ class "border-t border-gray-200 pt-4" ]
                        [ h3 [ class "text-md font-medium text-gray-900 mb-3" ]
                            [ text "Auto-Upgrade Settings" ]
                        , div [ class "flex items-center space-x-4" ]
                            [ div [ class "text-sm text-gray-700" ]
                                [ text "Automatically upgrade when contacts exceed limit up to: " ]
                            , select
                                [ class "form-select rounded-md border-gray-300 text-sm"
                                , onInput (\value -> SetAutoUpgradeLimit (Maybe.withDefault 0 (String.toInt value)))
                                , value (String.fromInt model.autoUpgradeLimit)
                                ]
                                [ option [ value "0" ] [ text "Disabled (require manual approval)" ]
                                , option [ value "1000" ] [ text "1,000 contacts" ]
                                , option [ value "1500" ] [ text "1,500 contacts" ]
                                , option [ value "2000" ] [ text "2,000 contacts" ]
                                , option [ value "2500" ] [ text "2,500 contacts" ]
                                , option [ value "5000" ] [ text "5,000 contacts" ]
                                ]
                            ]
                        ]
                    , div [ class "border-t border-gray-200 pt-4" ]
                        [ h3 [ class "text-md font-medium text-gray-900 mb-3" ]
                            [ text "Upgrade Your Plan" ]
                        , div [ class "grid grid-cols-3 gap-4" ]
                            (List.map
                                (\tier ->
                                    viewTierCard
                                        tier
                                        (tier * 500)
                                        (if tier == 1 then
                                            60

                                         else
                                            60 + ((tier - 1) * 40)
                                        )
                                        subscription.tier
                                )
                                [ 1, 2, 3, 4, 5, 10 ]
                            )
                        ]
                    ]

            Nothing ->
                div [ class "space-y-6" ]
                    [ div [ class "text-center text-gray-500 py-8" ]
                        [ text "No subscription active. Subscribe to start using the service." ]
                    , div [ class "grid grid-cols-3 gap-4" ]
                        (List.map
                            (\tier ->
                                viewTierCard
                                    tier
                                    (tier * 500)
                                    (if tier == 1 then
                                        60

                                     else
                                        60 + ((tier - 1) * 40)
                                    )
                                    0
                            )
                            [ 1, 2, 3, 4, 5, 10 ]
                        )
                    ]
        ]


viewTierCard : Int -> Int -> Int -> Int -> Html Msg
viewTierCard tier contactLimit price currentTier =
    let
        isCurrentTier =
            tier == currentTier
    in
    div
        [ class
            ("border rounded-lg p-4 "
                ++ (if isCurrentTier then
                        "border-[#03045E] bg-blue-50"

                    else
                        "border-gray-200"
                   )
            )
        ]
        [ div [ class "flex justify-between items-center mb-2" ]
            [ h4 [ class "font-medium text-gray-900" ]
                [ text ("Tier " ++ String.fromInt tier) ]
            , if isCurrentTier then
                span [ class "px-2 py-1 bg-[#03045E] text-white text-xs rounded-full" ]
                    [ text "Current" ]

              else
                text ""
            ]
        , div [ class "flex items-baseline mb-2" ]
            [ span [ class "text-xl font-bold text-gray-900" ]
                [ text ("$" ++ String.fromInt price) ]
            , span [ class "ml-1 text-gray-500 text-sm" ]
                [ text "/month" ]
            ]
        , div [ class "text-sm text-gray-600 mb-4" ]
            [ text (String.fromInt contactLimit ++ " contacts") ]
        , if isCurrentTier then
            button
                [ class "w-full px-3 py-2 text-sm font-medium text-gray-500 bg-gray-100 rounded-md cursor-not-allowed"
                , disabled True
                ]
                [ text "Current Plan" ]

          else if currentTier == 0 then
            button
                [ class "w-full px-3 py-2 text-sm font-medium text-white bg-[#03045E] rounded-md hover:bg-opacity-90"
                , onClick (CreateCheckoutSession tier)
                ]
                [ text "Subscribe" ]

          else if tier > currentTier then
            button
                [ class "w-full px-3 py-2 text-sm font-medium text-white bg-[#03045E] rounded-md hover:bg-opacity-90"
                , onClick (OpenUpgradeModal tier)
                ]
                [ text "Upgrade" ]

          else
            button
                [ class "w-full px-3 py-2 text-sm font-medium text-gray-500 bg-gray-100 rounded-md cursor-not-allowed"
                , disabled True
                ]
                [ text "Lower Tier" ]
        ]


viewUpgradeModal : Model -> Html Msg
viewUpgradeModal model =
    let
        currentTier =
            case model.subscriptionData of
                Just sub ->
                    sub.tier

                Nothing ->
                    0

        currentLimit =
            case model.subscriptionData of
                Just sub ->
                    sub.contactLimit

                Nothing ->
                    0

        newLimit =
            model.selectedTier * 500

        price =
            if model.selectedTier == 1 then
                60

            else
                60 + ((model.selectedTier - 1) * 40)

        currentPrice =
            if currentTier == 1 then
                60

            else
                60 + ((currentTier - 1) * 40)

        priceDifference =
            price - currentPrice
    in
    div [ class "fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50" ]
        [ div [ class "bg-white rounded-lg max-w-lg w-full mx-4" ]
            [ div [ class "p-6" ]
                [ h3 [ class "text-lg font-medium text-gray-900 mb-4" ]
                    [ text "Upgrade Subscription" ]
                , p [ class "text-gray-600 mb-4" ]
                    [ text ("You are upgrading from Tier " ++ String.fromInt currentTier ++ " (" ++ String.fromInt currentLimit ++ " contacts) to Tier " ++ String.fromInt model.selectedTier ++ " (" ++ String.fromInt newLimit ++ " contacts).") ]
                , p [ class "text-gray-600 mb-4" ]
                    [ text ("Your monthly price will increase by $" ++ String.fromInt priceDifference ++ ", from $" ++ String.fromInt currentPrice ++ " to $" ++ String.fromInt price ++ ".") ]
                , p [ class "text-gray-600 mb-6" ]
                    [ text "This change will take effect immediately, and you will be charged a prorated amount for the remainder of your billing cycle." ]
                , div [ class "flex justify-end space-x-4" ]
                    [ button
                        [ class "px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
                        , onClick CloseUpgradeModal
                        ]
                        [ text "Cancel" ]
                    , button
                        [ class "px-4 py-2 text-sm font-medium text-white bg-[#03045E] rounded-md hover:bg-opacity-90"
                        , onClick (UpgradeTier model.selectedTier)
                        ]
                        [ text "Confirm Upgrade" ]
                    ]
                ]
            ]
        ]


viewPaymentMethods : Model -> Html Msg
viewPaymentMethods model =
    div [ class "bg-white shadow rounded-lg p-6" ]
        [ div [ class "flex justify-between items-center mb-4" ]
            [ h2 [ class "text-lg font-medium text-gray-900" ]
                [ text "Payment Methods" ]
            , button
                [ class "px-4 py-2 text-sm font-medium text-white bg-[#03045E] rounded-md hover:bg-opacity-90"
                , onClick AddPaymentMethod
                ]
                [ text "Add Payment Method" ]
            ]
        , if List.isEmpty model.paymentMethods then
            div [ class "text-center text-gray-500 py-8" ]
                [ text "No payment methods added yet" ]

          else
            div [ class "space-y-4" ]
                (List.map viewPaymentMethod model.paymentMethods)
        ]


viewPaymentMethod : PaymentMethod -> Html Msg
viewPaymentMethod method =
    div [ class "border rounded-lg p-4 flex justify-between items-center" ]
        [ div [ class "flex items-center" ]
            [ div [ class "flex-shrink-0 w-10 h-6 bg-gray-100 rounded flex items-center justify-center mr-3" ]
                [ text (String.left 1 method.brand) ]
            , div []
                [ div [ class "text-gray-900" ]
                    [ text (method.brand ++ " •••• " ++ method.last4) ]
                , div [ class "text-sm text-gray-500" ]
                    [ text ("Expires " ++ String.fromInt method.expiryMonth ++ "/" ++ String.fromInt method.expiryYear) ]
                ]
            ]
        , div [ class "flex items-center space-x-2" ]
            [ if method.isDefault then
                span [ class "px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full" ]
                    [ text "Default" ]

              else
                button
                    [ class "text-sm text-blue-600 hover:text-blue-800"
                    , onClick (SetDefaultPaymentMethod method.id)
                    ]
                    [ text "Set Default" ]
            , button
                [ class "text-sm text-red-600 hover:text-red-800"
                , onClick (RemovePaymentMethod method.id)
                ]
                [ text "Remove" ]
            ]
        ]


viewBillingHistory : Model -> Html Msg
viewBillingHistory model =
    div [ class "bg-white shadow rounded-lg p-6" ]
        [ h2 [ class "text-lg font-medium text-gray-900 mb-4" ]
            [ text "Billing History" ]
        , if List.isEmpty model.billingHistory then
            div [ class "text-center text-gray-500 py-8" ]
                [ text "No billing history available" ]

          else
            div [ class "overflow-x-auto" ]
                [ table [ class "min-w-full divide-y divide-gray-200" ]
                    [ thead [ class "bg-gray-50" ]
                        [ tr []
                            [ th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ]
                                [ text "Date" ]
                            , th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ]
                                [ text "Description" ]
                            , th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ]
                                [ text "Amount" ]
                            , th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ]
                                [ text "Status" ]
                            , th [ class "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" ]
                                [ text "Actions" ]
                            ]
                        ]
                    , tbody [ class "bg-white divide-y divide-gray-200" ]
                        (List.map viewBillingRecord model.billingHistory)
                    ]
                ]
        ]


viewBillingRecord : BillingRecord -> Html Msg
viewBillingRecord record =
    tr []
        [ td [ class "px-6 py-4 whitespace-nowrap text-sm text-gray-500" ]
            [ text record.date ]
        , td [ class "px-6 py-4 whitespace-nowrap text-sm text-gray-900" ]
            [ text record.description ]
        , td [ class "px-6 py-4 whitespace-nowrap text-sm text-gray-500" ]
            [ text ("$" ++ String.fromFloat record.amount) ]
        , td [ class "px-6 py-4 whitespace-nowrap" ]
            [ span
                [ class
                    ("px-2 py-1 text-xs rounded-full "
                        ++ (case record.status of
                                "Paid" ->
                                    "bg-green-100 text-green-800"

                                "Failed" ->
                                    "bg-red-100 text-red-800"

                                "Pending" ->
                                    "bg-yellow-100 text-yellow-800"

                                _ ->
                                    "bg-gray-100 text-gray-800"
                           )
                    )
                ]
                [ text record.status ]
            ]
        , td [ class "px-6 py-4 whitespace-nowrap text-sm text-gray-500" ]
            [ case record.invoiceUrl of
                Just url ->
                    button
                        [ class "text-blue-600 hover:text-blue-800"
                        , onClick (DownloadInvoice url)
                        ]
                        [ text "Download" ]

                Nothing ->
                    text "—"
            ]
        ]



-- Helper Functions and Icons


viewCheckIcon : Html msg
viewCheckIcon =
    svg
        [ Svg.Attributes.class "h-5 w-5"
        , viewBox "0 0 20 20"
        , fill "currentColor"
        ]
        [ path
            [ fillRule "evenodd"
            , clipRule "evenodd"
            , d "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
            ]
            []
        ]


viewSmallCheckIcon : Html msg
viewSmallCheckIcon =
    svg
        [ Svg.Attributes.class "h-4 w-4"
        , viewBox "0 0 20 20"
        , fill "currentColor"
        ]
        [ path
            [ fillRule "evenodd"
            , clipRule "evenodd"
            , d "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
            ]
            []
        ]



-- HTTP


fetchSubscriptionData : Cmd Msg
fetchSubscriptionData =
    Http.get
        { url = "/api/subscription/status"
        , expect = Http.expectJson GotSubscriptionData subscriptionDataDecoder
        }


subscriptionDataDecoder : Decoder SubscriptionDataResponse
subscriptionDataDecoder =
    Decode.succeed SubscriptionDataResponse
        |> Pipeline.required "subscription" (Decode.nullable subscriptionDecoder)
        |> Pipeline.required "contactCount" Decode.int
        |> Pipeline.required "autoUpgradeLimit" Decode.int


subscriptionDecoder : Decoder SubscriptionData
subscriptionDecoder =
    Decode.succeed SubscriptionData
        |> Pipeline.required "id" Decode.string
        |> Pipeline.required "status" Decode.string
        |> Pipeline.required "tier" Decode.int
        |> Pipeline.required "contactLimit" Decode.int
        |> Pipeline.required "currentPeriodEnd" Decode.string
        |> Pipeline.required "cancelAtPeriodEnd" Decode.bool
        |> Pipeline.hardcoded [ "Contact-based pricing", "Email scheduling", "Analytics dashboard" ]


fetchPaymentMethods : Cmd Msg
fetchPaymentMethods =
    Http.get
        { url = "/api/payment-methods"
        , expect = Http.expectJson GotPaymentMethods (Decode.list paymentMethodDecoder)
        }


paymentMethodDecoder : Decoder PaymentMethod
paymentMethodDecoder =
    Decode.succeed PaymentMethod
        |> Pipeline.required "id" Decode.string
        |> Pipeline.required "brand" Decode.string
        |> Pipeline.required "last4" Decode.string
        |> Pipeline.required "expiryMonth" Decode.int
        |> Pipeline.required "expiryYear" Decode.int
        |> Pipeline.required "isDefault" Decode.bool


fetchBillingHistory : Cmd Msg
fetchBillingHistory =
    Http.get
        { url = "/api/billing-history"
        , expect = Http.expectJson GotBillingHistory (Decode.list billingRecordDecoder)
        }


billingRecordDecoder : Decoder BillingRecord
billingRecordDecoder =
    Decode.succeed BillingRecord
        |> Pipeline.required "id" Decode.string
        |> Pipeline.required "date" Decode.string
        |> Pipeline.required "amount" Decode.float
        |> Pipeline.required "status" Decode.string
        |> Pipeline.required "description" Decode.string
        |> Pipeline.optional "invoiceUrl" (Decode.nullable Decode.string) Nothing


upgradeTier : Int -> Cmd Msg
upgradeTier tier =
    Http.post
        { url = "/api/subscription/upgrade"
        , body = Http.jsonBody (Encode.object [ ( "newTier", Encode.int tier ) ])
        , expect = Http.expectJson UpgradeTierResult upgradeResponseDecoder
        }


upgradeResponseDecoder : Decoder UpgradeResponse
upgradeResponseDecoder =
    Decode.succeed UpgradeResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.optional "previousTier" (Decode.nullable Decode.int) Nothing
        |> Pipeline.optional "newTier" (Decode.nullable Decode.int) Nothing
        |> Pipeline.optional "contactLimit" (Decode.nullable Decode.int) Nothing
        |> Pipeline.optional "message" (Decode.nullable Decode.string) Nothing


updateAutoUpgradeLimit : Int -> Cmd Msg
updateAutoUpgradeLimit limit =
    Http.post
        { url = "/api/subscription/auto-upgrade"
        , body = Http.jsonBody (Encode.object [ ( "autoUpgradeLimit", Encode.int limit ) ])
        , expect = Http.expectJson AutoUpgradeLimitUpdated autoUpgradeLimitDecoder
        }


autoUpgradeLimitDecoder : Decoder AutoUpgradeResponse
autoUpgradeLimitDecoder =
    Decode.succeed AutoUpgradeResponse
        |> Pipeline.required "success" Decode.bool
        |> Pipeline.required "autoUpgradeLimit" Decode.int


createCheckoutSession : Int -> Cmd Msg
createCheckoutSession tier =
    Http.post
        { url = "/api/subscription/checkout"
        , body = Http.jsonBody (Encode.object [ ( "contactTier", Encode.int tier ) ])
        , expect = Http.expectJson GotCheckoutSession checkoutResponseDecoder
        }


checkoutResponseDecoder : Decoder CheckoutResponse
checkoutResponseDecoder =
    Decode.succeed CheckoutResponse
        |> Pipeline.required "clientSecret" Decode.string
        |> Pipeline.required "subscriptionId" Decode.string


removePaymentMethod : String -> Cmd Msg
removePaymentMethod id =
    Http.post
        { url = "/api/payment-methods/remove"
        , body = Http.jsonBody (Encode.object [ ( "id", Encode.string id ) ])
        , expect = Http.expectJson PaymentMethodUpdated (Decode.list paymentMethodDecoder)
        }


setDefaultPaymentMethod : String -> Cmd Msg
setDefaultPaymentMethod id =
    Http.post
        { url = "/api/payment-methods/set-default"
        , body = Http.jsonBody (Encode.object [ ( "id", Encode.string id ) ])
        , expect = Http.expectJson PaymentMethodUpdated (Decode.list paymentMethodDecoder)
        }



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/src/TempLanding.elm
================
module TempLanding exposing (Model, Msg(..), init, subscriptions, update, view)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick)


type alias Model =
    {}


type Msg
    = NavigateTo String


init : () -> ( Model, Cmd Msg )
init _ =
    ( {}, Cmd.none )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NavigateTo _ ->
            ( model, Cmd.none )


view : Model -> Browser.Document Msg
view model =
    { title = "Welcome"
    , body =
        [ div [ class "min-h-screen bg-gray-50 flex flex-col justify-center" ]
            [ div [ class "text-center space-y-8" ]
                [ h1 [ class "text-4xl font-bold text-gray-900" ]
                    [ text "Welcome! You're logged in!" ]
                , div [ class "flex justify-center space-x-4" ]
                    [ button
                        [ class "inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        , onClick (NavigateTo "/dashboard")
                        ]
                        [ text "Go to Dashboard" ]
                    , button
                        [ class "inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        , onClick (NavigateTo "/settings")
                        ]
                        [ text "Go to Settings" ]
                    ]
                ]
            ]
        ]
    }


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/src/vite-env.d.ts
================
/// <reference types="vite/client" />

declare module "*.elm" {
  export const Elm: any;
}

================
File: frontend/src/Waitlist.elm
================
module Waitlist exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Html exposing (Html, a, button, div, form, h1, img, input, label, p, span, text)
import Html.Attributes exposing (class, disabled, for, href, id, min, placeholder, type_, value)
import Html.Events exposing (onInput, onSubmit)
import Http
import Json.Encode


type alias Model =
    { name : String
    , email : String
    , phone : String
    , displayPhone : String
    , numAgents : String
    , bookSize : String
    , formState : FormState
    , errorMessage : Maybe String
    }


type FormState
    = Editing
    | Submitting
    | Success
    | Error


type Msg
    = UpdateName String
    | UpdateEmail String
    | UpdatePhone String
    | UpdateNumAgents String
    | UpdateBookSize String
    | SubmitForm
    | GotSubmitResponse (Result Http.Error ())


init : ( Model, Cmd Msg )
init =
    ( { name = ""
      , email = ""
      , phone = ""
      , displayPhone = ""
      , numAgents = ""
      , bookSize = ""
      , formState = Editing
      , errorMessage = Nothing
      }
    , Cmd.none
    )


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        UpdateName value ->
            ( { model | name = value }, Cmd.none )

        UpdateEmail value ->
            ( { model | email = value }, Cmd.none )

        UpdatePhone value ->
            let
                digitsOnly =
                    String.filter Char.isDigit value
                        |> String.left 10
            in
            ( { model
                | phone = digitsOnly
                , displayPhone = formatPhoneNumber digitsOnly
              }
            , Cmd.none
            )

        UpdateNumAgents value ->
            if String.all Char.isDigit value || value == "" then
                ( { model | numAgents = value }, Cmd.none )

            else
                ( model, Cmd.none )

        UpdateBookSize value ->
            if String.all Char.isDigit value || value == "" then
                ( { model | bookSize = value }, Cmd.none )

            else
                ( model, Cmd.none )

        SubmitForm ->
            if isValidForm model then
                ( { model | formState = Submitting }
                , submitForm model
                )

            else
                ( { model | errorMessage = Just "Please fill out all fields correctly." }
                , Cmd.none
                )

        GotSubmitResponse result ->
            case result of
                Ok _ ->
                    ( { model | formState = Success }
                    , Cmd.none
                    )

                Err _ ->
                    ( { model
                        | formState = Error
                        , errorMessage = Just "Something went wrong. Please try again."
                      }
                    , Cmd.none
                    )


isValidForm : Model -> Bool
isValidForm model =
    not (String.isEmpty model.name)
        && isValidEmail model.email
        && not (String.isEmpty model.phone)
        && isValidPositiveInt model.numAgents
        && isValidPositiveInt model.bookSize


isValidEmail : String -> Bool
isValidEmail email =
    let
        trimmedEmail =
            String.trim email
    in
    not (String.isEmpty trimmedEmail)
        && String.contains "@" trimmedEmail
        && String.contains "." trimmedEmail
        && not (String.startsWith "@" trimmedEmail)
        && not (String.endsWith "@" trimmedEmail)
        && not (String.endsWith "." trimmedEmail)
        && (String.indexes "@" trimmedEmail |> List.length)
        == 1
        && String.length (String.dropLeft (String.length (String.left (String.indexes "." trimmedEmail |> List.head |> Maybe.withDefault 0) trimmedEmail)) trimmedEmail)
        > 1


isValidPositiveInt : String -> Bool
isValidPositiveInt str =
    case String.toInt str of
        Just n ->
            n > 0

        Nothing ->
            False


submitForm : Model -> Cmd Msg
submitForm model =
    Http.post
        { url = "/api/waitlist"
        , body =
            Http.jsonBody
                (encodeFormData model)
        , expect = Http.expectWhatever GotSubmitResponse
        }


encodeFormData : Model -> Json.Encode.Value
encodeFormData model =
    Json.Encode.object
        [ ( "name", Json.Encode.string model.name )
        , ( "email", Json.Encode.string model.email )
        , ( "phone", Json.Encode.string model.phone )
        , ( "numAgents", Json.Encode.string model.numAgents )
        , ( "bookSize", Json.Encode.string model.bookSize )
        ]


view : Model -> Browser.Document Msg
view model =
    { title = "Join the Waitlist - Medicare Max"
    , body =
        [ div [ class "min-h-screen bg-white py-16 px-4 sm:px-6 lg:px-8" ]
            [ div [ class "max-w-md mx-auto" ]
                [ div [ class "text-center mb-8" ]
                    [ a [ href "/", class "block" ]
                        [ img
                            [ Html.Attributes.src "/images/medicare-max-logo.png"
                            , Html.Attributes.alt "Medicare Max Logo"
                            , class "mx-auto mb-6 h-12"
                            ]
                            []
                        ]
                    , h1 [ class "text-3xl font-bold text-gray-900" ]
                        [ text "Join the Waitlist" ]
                    , p [ class "mt-2 text-sm text-gray-600" ]
                        [ text "Be the first to know when we launch." ]
                    ]
                , case model.formState of
                    Success ->
                        div [ class "bg-green-50 p-4 rounded-md" ]
                            [ p [ class "text-green-800 text-center" ]
                                [ text "Thanks for joining! We'll be in touch soon." ]
                            ]

                    _ ->
                        formView model
                ]
            ]
        ]
    }


formView : Model -> Html Msg
formView model =
    form [ onSubmit SubmitForm, class "space-y-8" ]
        [ div [ class "space-y-2" ]
            [ label [ for "name", class "block text-sm font-medium text-gray-700" ]
                [ text "Name" ]
            , div [ class "mt-1" ]
                [ input
                    [ type_ "text"
                    , id "name"
                    , value model.name
                    , onInput UpdateName
                    , class "shadow-sm focus:ring-[#03045E] focus:border-[#03045E] block w-full sm:text-sm border-gray-300 rounded-md px-3.5 py-2.5"
                    , placeholder "John Smith"
                    ]
                    []
                ]
            ]
        , div [ class "space-y-2" ]
            [ label [ for "email", class "block text-sm font-medium text-gray-700" ]
                [ text "Email" ]
            , div [ class "mt-1" ]
                [ input
                    [ type_ "email"
                    , id "email"
                    , value model.email
                    , onInput UpdateEmail
                    , class "shadow-sm focus:ring-[#03045E] focus:border-[#03045E] block w-full sm:text-sm border-gray-300 rounded-md px-3.5 py-2.5"
                    , placeholder "you@example.com"
                    ]
                    []
                ]
            ]
        , div [ class "space-y-2" ]
            [ label [ for "phone", class "block text-sm font-medium text-gray-700" ]
                [ text "Phone Number" ]
            , div [ class "mt-1" ]
                [ input
                    [ type_ "tel"
                    , id "phone"
                    , value model.displayPhone
                    , onInput UpdatePhone
                    , class "shadow-sm focus:ring-[#03045E] focus:border-[#03045E] block w-full sm:text-sm border-gray-300 rounded-md px-3.5 py-2.5"
                    , placeholder "(555) 555-5555"
                    ]
                    []
                ]
            ]
        , div [ class "space-y-2" ]
            [ label [ for "numAgents", class "block text-sm font-medium text-gray-700" ]
                [ text "Number of Agents" ]
            , div [ class "mt-1" ]
                [ input
                    [ type_ "number"
                    , id "numAgents"
                    , value model.numAgents
                    , onInput UpdateNumAgents
                    , class "shadow-sm focus:ring-[#03045E] focus:border-[#03045E] block w-full sm:text-sm border-gray-300 rounded-md px-3.5 py-2.5"
                    , Html.Attributes.min "1"
                    , placeholder "1"
                    ]
                    []
                ]
            ]
        , div [ class "space-y-2" ]
            [ label [ for "bookSize", class "block text-sm font-medium text-gray-700" ]
                [ text "Current Book Size" ]
            , div [ class "mt-1" ]
                [ input
                    [ type_ "number"
                    , id "bookSize"
                    , value model.bookSize
                    , onInput UpdateBookSize
                    , class "shadow-sm focus:ring-[#03045E] focus:border-[#03045E] block w-full sm:text-sm border-gray-300 rounded-md px-3.5 py-2.5"
                    , Html.Attributes.min "1"
                    , placeholder "100"
                    ]
                    []
                ]
            ]
        , if model.errorMessage /= Nothing then
            div [ class "text-red-600 text-sm" ]
                [ text (Maybe.withDefault "" model.errorMessage) ]

          else
            text ""
        , div []
            [ button
                [ type_ "submit"
                , class "w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#03045E] hover:bg-[#1a1f5f] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#03045E]"
                , disabled (model.formState == Submitting)
                ]
                [ text
                    (if model.formState == Submitting then
                        "Submitting..."

                     else
                        "Join Waitlist"
                    )
                ]
            ]
        ]


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none


formatPhoneNumber : String -> String
formatPhoneNumber phone =
    let
        digits =
            String.filter Char.isDigit phone
                |> String.left 10

        len =
            String.length digits
    in
    if len == 0 then
        ""

    else if len <= 3 then
        "(" ++ digits

    else if len <= 6 then
        "(" ++ String.left 3 digits ++ ") " ++ String.dropLeft 3 digits

    else
        "(" ++ String.left 3 digits ++ ") " ++ String.slice 3 6 digits ++ "-" ++ String.dropLeft 6 digits

================
File: frontend/src/Walkthrough.elm
================
module Walkthrough exposing (Model, Msg, init, subscriptions, update, view)

import Browser
import Browser.Navigation as Nav
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Json.Decode as Decode



-- MODEL


type alias Model =
    { key : Nav.Key
    }


init : Nav.Key -> ( Model, Cmd Msg )
init key =
    ( { key = key
      }
    , Cmd.none
    )



-- UPDATE


type Msg
    = NoOp


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            ( model, Cmd.none )



-- VIEW


view : Model -> Browser.Document Msg
view model =
    { title = "Welcome to Medicare Max"
    , body =
        [ div [ class "min-h-screen bg-gray-50" ]
            [ div [ class "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10" ]
                [ div [ class "bg-white shadow-md rounded-lg overflow-hidden" ]
                    [ div [ class "px-6 py-4 border-b border-gray-200 bg-[#03045E] text-white" ]
                        [ h1 [ class "text-2xl font-semibold" ]
                            [ text "Welcome to Medicare Max" ]
                        ]
                    , div [ class "p-6" ]
                        [ div [ class "mb-8 text-center" ]
                            [ h2 [ class "text-xl font-medium text-gray-800 mb-2" ]
                                [ text "Get Started with Our Platform" ]
                            , p [ class "text-gray-600 max-w-2xl mx-auto" ]
                                [ text "Watch this video walkthrough to learn how to use Medicare Max and make the most of its features." ]
                            ]
                        , div [ class "mx-auto max-w-4xl bg-gray-100 rounded-lg p-6 aspect-video flex items-center justify-center" ]
                            [ div [ class "text-center" ]
                                [ div [ class "text-6xl text-gray-400 mb-4" ]
                                    [ text "▶️" ]
                                , p [ class "text-gray-500 font-medium" ]
                                    [ text "Video Walkthrough Coming Soon" ]
                                , p [ class "text-gray-400 text-sm mt-2" ]
                                    [ text "This video will demonstrate how to use the Medicare Max platform" ]
                                ]
                            ]
                        , div [ class "mt-10 max-w-3xl mx-auto" ]
                            [ h3 [ class "text-lg font-medium text-gray-800 mb-4" ]
                                [ text "Quick Start Guide" ]
                            , div [ class "bg-blue-50 rounded-lg p-5 border border-blue-100" ]
                                [ ul [ class "space-y-4" ]
                                    [ li [ class "flex" ]
                                        [ div [ class "shrink-0 flex items-center justify-center w-8 h-8 bg-blue-600 text-white rounded-full mr-3" ]
                                            [ text "1" ]
                                        , div []
                                            [ h4 [ class "font-medium text-blue-800" ]
                                                [ text "Set Up Your Profile" ]
                                            , p [ class "text-blue-700 mt-1 text-sm" ]
                                                [ text "Complete your profile information to personalize your experience." ]
                                            ]
                                        ]
                                    , li [ class "flex" ]
                                        [ div [ class "shrink-0 flex items-center justify-center w-8 h-8 bg-blue-600 text-white rounded-full mr-3" ]
                                            [ text "2" ]
                                        , div []
                                            [ h4 [ class "font-medium text-blue-800" ]
                                                [ text "Add Clients" ]
                                            , p [ class "text-blue-700 mt-1 text-sm" ]
                                                [ text "Start adding your clients to manage their information and policies." ]
                                            ]
                                        ]
                                    , li [ class "flex" ]
                                        [ div [ class "shrink-0 flex items-center justify-center w-8 h-8 bg-blue-600 text-white rounded-full mr-3" ]
                                            [ text "3" ]
                                        , div []
                                            [ h4 [ class "font-medium text-blue-800" ]
                                                [ text "Generate Quotes" ]
                                            , p [ class "text-blue-700 mt-1 text-sm" ]
                                                [ text "Use our quoting tools to find the best options for your clients." ]
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            ]
        ]
    }



-- SUBSCRIPTIONS


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.none

================
File: frontend/vite.config.ts
================
import { defineConfig } from 'vite'
import elmPlugin from 'vite-plugin-elm'
import { resolve } from 'path'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
  plugins: [
    elmPlugin({
      // Set a custom temp directory inside your project
      cwd: resolve(__dirname, 'elm-temp')
    }),
    tailwindcss(),
  ],
  resolve: {
    extensions: ['.ts', '.js', '.elm']
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        secure: false,
        configure: (proxy, _options) => {
          proxy.on('error', (err) => {
            console.log('proxy error', err);
          });
          proxy.on('proxyReq', (proxyReq) => {
            console.log('Sending Request:', proxyReq.method, proxyReq.path);
          });
          proxy.on('proxyRes', (proxyRes) => {
            console.log('Received Response:', proxyRes.statusCode);
          });
        }
      }
    },
    allowedHosts: ['localhost', '127.0.0.1', 'medicaremax.ngrok.dev']
  },
  build: {
    outDir: '../dist',
    emptyOutDir: true,
    assetsDir: 'assets',
    rollupOptions: {
      input: {
        main: resolve(__dirname, 'index.html')
      }
    }
  }
})

================
File: scripts/migrate-to-sqlite.ts
================
import { Database } from '../backend/src/database'
import { config } from '../backend/src/config'
import { logger } from '../backend/src/logger'
import path from 'path'
import fs from 'fs/promises'
import { Database as BunDatabase } from 'bun:sqlite'

// Set required environment variables for local SQLite
process.env.USE_LOCAL_SQLITE = 'true'
process.env.LOCAL_DB_PATH = process.env.LOCAL_DB_PATH || 'data/organizations'

// Define table dependencies
const TABLE_ORDER = [
  'leads',
  'contacts',
  'eligibility_answers',
  'contact_events',
  'contact_requests'
]

async function migrateToSqlite() {
  try {
    // Ensure local DB directory exists
    const dbDir = path.join(process.cwd(), 'data/organizations')
    await fs.mkdir(dbDir, { recursive: true })
    
    // Get main database connection with Turso (force Turso for source)
    const mainDb = new Database(config.TURSO_DATABASE_URL, config.TURSO_AUTH_TOKEN)
    
    // Get all organizations
    const orgs = await mainDb.fetchAll('SELECT id, turso_db_url, turso_auth_token FROM organizations')
    logger.info(`Found ${orgs.length} organizations to migrate`)
    
    for (const org of orgs) {
      try {
        if (!org.turso_db_url || !org.turso_auth_token) {
          logger.warn(`Skipping organization ${org.id} - missing database credentials`)
          continue
        }

        const { dbName } = Database.normalizeDbUrl(org.turso_db_url)
        if (!dbName) {
          logger.warn(`Skipping organization ${org.id} - invalid database URL format`)
          continue
        }

        const localDbPath = path.join(dbDir, `${dbName}.sqlite`)
        
        // Check if database already exists
        const dbExists = await fs.access(localDbPath).then(() => true).catch(() => false)
        if (dbExists) {
          logger.info(`Database already exists for org ${org.id}, removing it first`)
          await fs.unlink(localDbPath)
        }
        
        logger.info(`Migrating organization ${org.id} to ${localDbPath}`)
        
        // Get Turso database connection (force Turso for source)
        const tursoDb = new Database(org.turso_db_url, org.turso_auth_token)
        
        // Get schema and data
        const tables = await tursoDb.fetchAll(`
          SELECT name, sql 
          FROM sqlite_master 
          WHERE type='table' AND name NOT LIKE 'sqlite_%'
        `)
        
        if (!tables || tables.length === 0) {
          logger.warn(`No tables found for organization ${org.id}`)
          continue
        }

        logger.info(`Found ${tables.length} tables to migrate`)

        // Create local database file
        const localDb = new BunDatabase(localDbPath)
        
        // Enable foreign keys
        localDb.exec('PRAGMA foreign_keys = ON;')
        
        // First create all tables
        for (const table of tables) {
          if (!table.name || !table.sql) {
            logger.warn(`Skipping invalid table definition for org ${org.id}`)
            continue
          }

          logger.info(`Creating table: ${table.name}`)
          try {
            localDb.exec(table.sql)
          } catch (error) {
            logger.error(`Error creating table ${table.name}: ${error}`)
            throw error
          }
        }

        // Create indexes
        const indexes = await tursoDb.fetchAll(`
          SELECT sql 
          FROM sqlite_master 
          WHERE type='index' AND sql IS NOT NULL
        `)
        
        for (const index of indexes) {
          try {
            localDb.exec(index.sql)
          } catch (error) {
            logger.warn(`Error creating index: ${error}`)
            // Continue even if index creation fails
          }
        }

        // Then copy data for all tables in dependency order
        const tableMap = new Map(tables.map(t => [t.name, t]))
        for (const tableName of TABLE_ORDER) {
          const table = tableMap.get(tableName)
          if (!table) continue // Skip if table doesn't exist in this org's schema

          // Copy data
          const data = await tursoDb.fetchAll(`SELECT * FROM ${tableName}`)
          if (data.length > 0) {
            logger.info(`Copying ${data.length} rows for table ${tableName}`)
            
            const columns = Object.keys(data[0])
            const placeholders = columns.map(() => '?').join(',')
            const sql = `INSERT INTO ${tableName} (${columns.join(',')}) VALUES (${placeholders})`
            
            // Use transaction for better performance
            localDb.exec('BEGIN TRANSACTION')
            
            try {
              const stmt = localDb.prepare(sql)
              for (const row of data) {
                stmt.run(...Object.values(row))
              }
              localDb.exec('COMMIT')
            } catch (error) {
              localDb.exec('ROLLBACK')
              logger.error(`Error inserting data for table ${tableName} in org ${org.id}: ${error}`)
              throw error
            }
          }
        }
        
        // Close the local database
        localDb.close()
        
        logger.info(`Successfully migrated organization ${org.id}`)
      } catch (error) {
        logger.error(`Error migrating organization ${org.id}: ${error}`)
        // Continue with next organization instead of failing completely
        continue
      }
    }
    
    logger.info('Migration complete')
  } catch (error) {
    logger.error(`Migration failed: ${error}`)
    process.exit(1)
  }
}

migrateToSqlite()



================================================================
End of Codebase
================================================================
