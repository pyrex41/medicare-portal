Below is the synthesized and optimized prompt document for the AI agent tasked with implementing UI/UX improvements to the MedicareMax front-end application. This version combines the best elements from both provided prompt documents, ensuring clarity, actionable steps, and a focus on user experience. It incorporates detailed code snippets where helpful, resolves ambiguities, and prioritizes tasks effectively.
Optimized Prompt Document for AI Agent: MedicareMax UI/UX Improvements
Objective
Implement a series of UI/UX improvements, bug fixes, and feature enhancements to the MedicareMax front-end application. The focus is on enhancing user onboarding, navigation, visual consistency, contact management, profile/settings functionality, and admin features, while ensuring seamless integration with the back-end where applicable.
Context
Codebase: The front-end is built with Elm, styled using Tailwind CSS, and uses Vite for the build process. Key files include Signup.elm, Dashboard.elm, Contacts.elm, Profile.elm, and Settings.elm.
Visual Context: Screenshots are provided to reflect the current UI state (e.g., dashboard graph, organization settings).
Back-End Access: The AI can introspect and modify the back-end API (proxied at http://localhost:8000) as needed.
Application Purpose: A CRM/management tool for Medicare insurance agents.
General Guidelines
User Experience: Prioritize intuitive navigation, clear feedback, and a visually appealing interface.
Consistency: Use existing Tailwind classes (e.g., bg-[#03045E], text-white, rounded-md) and ensure UI elements align across the application.
Error Handling: For back-end interactions, implement proper error handling and user feedback (e.g., success/error messages).
Code Quality: Write clean, maintainable code following existing conventions in the codebase.
Testing: Validate changes in the browser, ensuring responsiveness and correct functionality across screen sizes.
Tasks (Prioritized)
1. Post-Payment Onboarding & Navigation (High Priority)
Task 1.1: Dashboard Redirect and Tutorial Modal
Trigger: After successful payment submission (detect via front-end or back-end signal, e.g., /api/payments response).
Actions:
Redirect to /dashboard.
Display a dismissible modal with a video walkthrough (setup tutorial). Assume a placeholder video URL if not provided (e.g., https://www.youtube.com/embed/VIDEO_ID).
Implementation:
Update payment submission logic (likely in Signup.elm or Onboarding/Steps/Payment.elm):
elm
case msg of
    PaymentSubmitted (Ok _) ->
        ( { model | isSubmitting = False }, Nav.pushUrl model.key "/dashboard" )
In Dashboard.elm, add modal logic:
elm
type alias Model =
    { ... , showTutorialModal : Bool }

init : (...) -> ( Model, Cmd Msg )
init flags =
    ( { ... , showTutorialModal = flags.isPostPayment |> Maybe.withDefault False }, Cmd.none )

view : Model -> Html Msg
view model =
    div []
        [ if model.showTutorialModal then viewTutorialModal else text ""
        , ... ]

viewTutorialModal : Html Msg
viewTutorialModal =
    div [ class "fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center" ]
        [ div [ class "bg-white p-6 rounded-lg shadow-lg max-w-2xl w-full" ]
            [ iframe [ src "https://www.youtube.com/embed/VIDEO_ID", class "w-full h-96", attribute "allowfullscreen" "" ] []
            , button [ class "mt-4 px-4 py-2 bg-blue-600 text-white rounded-md", onClick CloseModal ] [ text "Close" ]
            ]
        ]
Handle CloseModal to set showTutorialModal to False.
Back-End: If payment success includes a flag (e.g., isPostPayment), use it to trigger the modal.
Task 1.2: "Watch Setup Tutorial" Link
Location: User profile dropdown menu.
Action: Open the same video modal as in Task 1.1.
Implementation:
In Profile.elm, update the menu:
elm
viewNavigation : Model -> Html Msg
viewNavigation model =
    nav []
        [ viewNavLink "Watch Setup Tutorial" "#" OpenTutorialModal
        , viewNavLink "Profile" "/profile" NoOp
        , viewNavLink "Organization Settings" "/settings" NoOp ]
Handle OpenTutorialModal to set showTutorialModal to True.
Task 1.3: Prevent Back Button Navigation to Payment
Goal: Prevent navigation back to payment or plan selection screens post-payment.
Implementation:
Use history.replaceState() in main.ts or equivalent:
javascript
window.addEventListener('popstate', () => {
    if (location.pathname.match(/dashboard|contacts|settings/)) {
        history.replaceState({}, document.title, '/dashboard');
    }
});
Alternatively, add a server-side check to redirect paid users from payment pages.
Testing: Confirm back button redirects to /dashboard after payment.
2. Dashboard Visual Updates (High Priority)
Task 2.1: Update Graph Colors
Colors:
Quotes Sent: #DCE2E5
Quotes Viewed: #53389E
Follow-Up Requests: #03045E
Implementation:
In Dashboard.elm, update the graph:
elm
viewGraph : Model -> Html Msg
viewGraph model =
    svg [ viewBox "0 0 300 200" ]
        [ rect [ x "10", y "150", width "80", height "50", fill "#DCE2E5" ] [] -- Quotes Sent
        , rect [ x "100", y "120", width "80", height "80", fill "#53389E" ] [] -- Quotes Viewed
        , rect [ x "190", y "100", width "80", height "100", fill "#03045E" ] [] -- Follow-Up Requests
        ]
Task 2.2: Update Analytics Number Color
Color: #03045E
Implementation:
In Dashboard.elm:
elm
viewAnalytics : Model -> Html Msg
viewAnalytics model =
    div [ class "text-[#03045E] text-2xl font-bold" ]
        [ text (String.fromInt model.quotesSent) ]
3. Navigation and Layout (Medium Priority)
Task 3.1: Main Navigation Hover Color
Color: #DCE2E5
Implementation:
In Settings.elm or shared navigation component:
elm
viewNavLink : String -> String -> Msg -> Html Msg
viewNavLink label path msg =
    a [ href path, class "text-gray-700 hover:bg-[#DCE2E5] px-3 py-2 rounded-md" ]
        [ text label ]
Task 3.2: Expand Contacts Table Width
Goal: Align with "Add Contact" button and top analytics.
Implementation:
In Contacts.elm:
elm
viewContacts : Model -> Html Msg
viewContacts model =
    table [ class "w-full max-w-7xl" ]
        [ ... ]
Task 3.3: Update "Settings" Label and Reorder Menu
Label: Change "Settings" to "Organization Settings".
Order: Move "Profile" above "Organization Settings".
Implementation:
In Profile.elm:
elm
viewNavigation model =
    nav []
        [ viewNavLink "Watch Setup Tutorial" "#" OpenTutorialModal
        , viewNavLink "Profile" "/profile" NoOp
        , viewNavLink "Organization Settings" "/settings" NoOp ]
4. Contact Management (Medium Priority)
Task 4.1: Adding Contacts Modal - Hover Color
Color: #03045E
Implementation:
In Contacts.elm:
elm
viewAddContactModal : Model -> Html Msg
viewAddContactModal model =
    div [ class "space-y-4" ]
        [ div [ class "hover:bg-[#03045E] hover:text-white p-2 rounded-md", onClick SelectOption ] [ text "Option" ] ]
Task 4.2: Reduce Spacing in Adding Contacts Modal
Goal: Lessen vertical space between "Add Contacts" and subtext.
Implementation:
In Contacts.elm:
elm
viewAddContactModal : Model -> Html Msg
viewAddContactModal model =
    div [ class "space-y-2" ]
        [ h2 [ class "text-lg font-medium" ] [ text "Add Contacts" ]
        , p [ class "text-gray-600" ] [ text "Select how you want to add your new contacts." ]
        ]
Task 4.3: Make Single Contact Modal Scrollable
Issue: Form overflows on smaller screens without scrolling.
Implementation:
In Contacts.elm:
elm
viewSingleContactModal : Model -> Html Msg
viewSingleContactModal model =
    div [ class "fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center" ]
        [ div [ class "bg-white p-6 rounded-lg shadow-lg max-w-lg w-full overflow-y-auto max-h-[80vh]" ]
            [ Html.form []
                [ input [ class "w-full mb-4", placeholder "First Name" ] []
                , input [ class "w-full mb-4", placeholder "Last Name" ] []
                , ... ]
            ]
        ]
5. Profile and Organization Settings (Medium Priority)
Task 5.1: Add Dropdowns for Carriers and Plan Types
Location: Add/edit contact modals.
Implementation:
In Contacts.elm:
elm
viewSingleContactModal model =
    div []
        [ select [ class "w-full mb-4", onInput UpdateCarrier ]
            (option [] [ text "-- Select Carrier --" ] :: List.map (\c -> option [ value c ] [ text c ]) model.allCarriers)
        , select [ class "w-full mb-4", onInput UpdatePlanType ]
            [ option [] [ text "-- Select Plan Type --" ]
            , option [ value "Basic" ] [ text "Basic" ]
            , option [ value "Professional" ] [ text "Professional" ]
            ]
        ]
Data Source: Check if allCarriers should be static or fetched from /api/carriers.
Task 5.2: Update Organization Settings Headline Color
Color: #03045E
Implementation:
In Settings.elm:
elm
h1 [ class "text-2xl font-semibold text-[#03045E]" ] [ text "Organization Settings" ]
Task 5.3: Design Review for State, Carrier, GI Selections
Prompt: "Analyze the current design for State, Carrier, and Guaranteed Issue (GI) selections on the Organization Settings page. Consider multi-select dropdowns, searchable dropdowns, or tag-based selection. Provide specific recommendations for improvement."
Task 5.4: Fix "Clear All" for State & Carrier Settings
Issue: Only clears "GA".
Implementation:
In Settings.elm:
elm
update msg model =
    case msg of
        ToggleAllStates False ->
            updateSettings model (\s -> { s | stateLicenses = [] })
        ToggleAllCarriers False ->
            updateSettings model (\s -> { s | carrierContracts = [] })
Task 5.5: Assess Save Button Necessity
Prompt: "Check if Organization Settings auto-saves. If not, add a 'Save' button with API calls (e.g., /api/settings/update). If auto-saving, add feedback (e.g., 'Saving...' indicator)."
Task 5.6: Remove "Next: Go to Dashboard" Button
Implementation:
In Settings.elm, remove from viewBottomBar.
Task 5.7: Add Calendar URL to Profile Page
Implementation:
In Profile.elm:
elm
viewProfileForm : Model -> Html Msg
viewProfileForm model =
    div []
        [ input [ class "w-full px-3.5 py-2.5", placeholder "Calendar URL", onInput UpdateCalendarUrl ] [] ]
Persist via /api/users/update.
6. Admin Features (Low Priority)
Task 6.1: Subscription & Payment Options Page
Access: Admin-only.
Content: View/change subscription plans, update payment methods, view billing history.
Implementation:
Create Subscription.elm with API calls (e.g., /api/subscriptions).
Link from Profile.elm:
elm
if model.user.isAdmin then viewNavLink "Subscription & Payments" "/subscription" NoOp else text ""
Task 6.2: Simplify Admin Role Terminology
Goal: Use "Admin" and "Agent" only.
Implementation:
Update UI in Onboarding/Steps/AddAgents.elm.
Check back-end for "Admin Agent" usage; hide or remove if possible.
Task 6.3: Standardize Profile Page Input Sizes
Implementation:
In Profile.elm, ensure inputs use px-3.5 py-2.5.
Task 6.4: Check Multiple Agent Addition
Prompt: "Verify if multiple agent addition is supported. If not, enforce single-agent addition. If supported, ensure it works correctly."
Deliverables
Updated Elm files.
New Subscription.elm (if applicable).
Summary of changes, including back-end modifications.
Next Steps
Implement tasks in priority order, testing each change.
Provide a final report for review.
This synthesized prompt document offers a comprehensive, prioritized roadmap for the AI agent, blending detailed instructions and flexibility for back-end coordination. It ensures a consistent, user-friendly MedicareMax application.