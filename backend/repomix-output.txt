This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-04T16:40:08.140Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  config.ts
  database.ts
  index.ts
  logger.ts
  types.ts
.gitignore
index.ts
package.json
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: src/config.ts
================
import { config as loadEnv } from 'dotenv'

loadEnv()

export const config = {
  TURSO_DATABASE_URL: process.env.TURSO_DATABASE_URL,
  TURSO_AUTH_TOKEN: process.env.TURSO_AUTH_TOKEN,
  TURSO_DATABASE_PATH: process.env.TURSO_DATABASE_PATH
}

================
File: src/database.ts
================
import { Database as LibSQLDatabase, Client } from '@libsql/client'
import { config } from './config'
import { logger } from './logger'

export class Database {
  private client: Client

  constructor() {
    if (!config.TURSO_DATABASE_URL || !config.TURSO_AUTH_TOKEN) {
      throw new Error('Missing database credentials in .env file')
    }

    this.client = new LibSQLDatabase({
      url: config.TURSO_DATABASE_URL,
      authToken: config.TURSO_AUTH_TOKEN
    })

    this.initTables()
  }

  private async initTables() {
    await this.client.execute(`
      CREATE TABLE IF NOT EXISTS agents (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        first_name TEXT NOT NULL,
        last_name TEXT NOT NULL,
        email TEXT NOT NULL UNIQUE,
        phone TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE IF NOT EXISTS contacts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        first_name TEXT NOT NULL,
        last_name TEXT NOT NULL,
        email TEXT NOT NULL,
        current_carrier TEXT,
        plan_type TEXT,
        effective_date DATE,
        birth_date DATE,
        tobacco_user BOOLEAN DEFAULT FALSE,
        gender TEXT,
        state TEXT,
        zip_code TEXT,
        agent_id INTEGER,
        last_emailed DATETIME,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (agent_id) REFERENCES agents(id)
      );
    `)
  }

  async execute(query: string, params?: any[]) {
    const result = await this.client.execute({ sql: query, args: params })
    return result.rows
  }

  async fetchAll(query: string, params?: any[]) {
    const result = await this.client.execute({ sql: query, args: params })
    return result.rows
  }

  async fetchOne(query: string, params?: any[]) {
    const result = await this.client.execute({ sql: query, args: params })
    return result.rows[0]
  }
}

================
File: src/index.ts
================
import { Elysia, t } from 'elysia'
import { cors } from '@elysiajs/cors'
import { Database } from './database'
import { logger } from './logger'
import { ContactCreate, AgentCreate } from './types'
import { readFileSync } from 'fs'

// Load ZIP code data
let ZIP_DATA = {}
try {
  ZIP_DATA = JSON.parse(readFileSync('../zipData.json', 'utf-8'))
} catch (e) {
  logger.error(`Error loading ZIP data: ${e}`)
}

const db = new Database()

const app = new Elysia()
  .use(cors({
    origin: 'http://localhost:5173',
    credentials: true
  }))
  .get('/api/contacts', async () => {
    try {
      logger.info('Attempting to fetch contacts')
      const contacts = await db.fetchAll(
        'SELECT * FROM contacts ORDER BY created_at DESC LIMIT 100'
      )
      logger.info(`Successfully fetched ${contacts.length} contacts`)

      return contacts.map(contact => ({
        id: contact[0],
        first_name: contact[1],
        last_name: contact[2],
        email: contact[3],
        current_carrier: contact[4],
        plan_type: contact[5],
        effective_date: contact[6],
        birth_date: contact[7],
        tobacco_user: Boolean(contact[8]),
        gender: contact[9],
        state: contact[10],
        zip_code: contact[11],
        last_emailed: contact[12],
        created_at: contact[13],
        updated_at: contact[14]
      }))
    } catch (e) {
      logger.error(`Error in get_contacts: ${e}`)
      throw new Error(String(e))
    }
  })
  .post('/api/contacts', async ({ body }) => {
    try {
      const contact = body as ContactCreate
      logger.info(`Attempting to create contact: ${contact.first_name} ${contact.last_name}`)
      
      const query = `
        INSERT INTO contacts (
          first_name, last_name, email, current_carrier, plan_type,
          effective_date, birth_date, tobacco_user, gender,
          state, zip_code, agent_id
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        RETURNING *
      `
      
      const params = [
        contact.first_name,
        contact.last_name,
        contact.email,
        contact.current_carrier,
        contact.plan_type,
        contact.effective_date,
        contact.birth_date,
        contact.tobacco_user ? 1 : 0,
        contact.gender,
        contact.state,
        contact.zip_code,
        contact.agent_id
      ]

      const result = await db.execute(query, params)
      const row = result[0]

      return {
        id: row[0],
        first_name: row[1],
        last_name: row[2],
        email: row[3],
        current_carrier: row[4],
        plan_type: row[5],
        effective_date: row[6],
        birth_date: row[7],
        tobacco_user: Boolean(row[8]),
        gender: row[9],
        state: row[10],
        zip_code: row[11],
        agent_id: row[12],
        last_emailed_date: row[13],
        created_at: row[14],
        updated_at: row[15]
      }
    } catch (e) {
      logger.error(`Error creating contact: ${e}`)
      throw new Error(String(e))
    }
  })
  // Add more endpoints here...
  .listen(3000)

console.log(`ðŸ¦Š Elysia is running at ${app.server?.hostname}:${app.server?.port}`)

================
File: src/logger.ts
================
export const logger = {
  info: (message: string) => console.log(`[INFO] ${message}`),
  error: (message: string) => console.error(`[ERROR] ${message}`)
}

================
File: src/types.ts
================
export interface ContactCreate {
  first_name: string
  last_name: string
  email: string
  current_carrier: string
  plan_type: string
  effective_date: string
  birth_date: string
  tobacco_user: boolean
  gender: string
  state: string
  zip_code: string
  agent_id?: number | null
}

export interface AgentCreate {
  first_name: string
  last_name: string
  email: string
  phone: string
}

================
File: .gitignore
================
# Based on https://raw.githubusercontent.com/github/gitignore/main/Node.gitignore

# Logs

logs
_.log
npm-debug.log_
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Caches

.cache

# Diagnostic reports (https://nodejs.org/api/report.html)

report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json

# Runtime data

pids
_.pid
_.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover

lib-cov

# Coverage directory used by tools like istanbul

coverage
*.lcov

# nyc test coverage

.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)

.grunt

# Bower dependency directory (https://bower.io/)

bower_components

# node-waf configuration

.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)

build/Release

# Dependency directories

node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)

web_modules/

# TypeScript cache

*.tsbuildinfo

# Optional npm cache directory

.npm

# Optional eslint cache

.eslintcache

# Optional stylelint cache

.stylelintcache

# Microbundle cache

.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history

.node_repl_history

# Output of 'npm pack'

*.tgz

# Yarn Integrity file

.yarn-integrity

# dotenv environment variable files

.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)

.parcel-cache

# Next.js build output

.next
out

# Nuxt.js build / generate output

.nuxt
dist

# Gatsby files

# Comment in the public line in if your project uses Gatsby and not Next.js

# https://nextjs.org/blog/next-9-1#public-directory-support

# public

# vuepress build output

.vuepress/dist

# vuepress v2.x temp and cache directory

.temp

# Docusaurus cache and generated files

.docusaurus

# Serverless directories

.serverless/

# FuseBox cache

.fusebox/

# DynamoDB Local files

.dynamodb/

# TernJS port file

.tern-port

# Stores VSCode versions used for testing VSCode extensions

.vscode-test

# yarn v2

.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# IntelliJ based IDEs
.idea

# Finder (MacOS) folder config
.DS_Store

================
File: index.ts
================
console.log("Hello via Bun!");

================
File: package.json
================
{
  "name": "backend",
  "version": "1.0.0",
  "scripts": {
    "dev": "bun run --watch src/index.ts"
  },
  "dependencies": {
    "@elysiajs/cors": "^0.8.0",
    "@libsql/client": "0.15.0-pre.1",
    "dotenv": "^16.3.1",
    "elysia": "^0.8.9"
  },
  "devDependencies": {
    "bun-types": "latest"
  }
}

================
File: README.md
================
# backend

To install dependencies:

```bash
bun install
```

To run:

```bash
bun run index.ts
```

This project was created using `bun init` in bun v1.1.45. [Bun](https://bun.sh) is a fast all-in-one JavaScript runtime.

================
File: tsconfig.json
================
{
  "compilerOptions": {
    // Enable latest features
    "lib": ["ESNext", "DOM"],
    "target": "ESNext",
    "module": "ESNext",
    "moduleDetection": "force",
    "jsx": "react-jsx",
    "allowJs": true,

    // Bundler mode
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,

    // Best practices
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,

    // Some stricter flags (disabled by default)
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noPropertyAccessFromIndexSignature": false
  }
}
